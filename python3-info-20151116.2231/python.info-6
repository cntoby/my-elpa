This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 3.4.3, September 02, 2015

     Copyright © 1990-2015, Python Software Foundation

INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.3.1.


File: python.info,  Node: Library<12>,  Next: Tests<8>,  Prev: Core and Builtins<11>,  Up: Python 3 4 0 Beta 1

1.14.12.2 Library
.................

   - Issue #3158(1): doctest can now find doctests in functions and
     methods written in C.

   - Issue #13477(2): Added command line interface to the tarfile
     module.  Original patch by Berker Peksag.

   - Issue #19674(3): inspect.signature() now produces a correct
     signature for some builtins.

   - Issue #19722(4): Added opcode.stack_effect(), which computes the
     stack effect of bytecode instructions.

   - Issue #19735(5): Implement private function
     ssl._create_stdlib_context() to create SSLContext objects in
     Python’s stdlib module.  It provides a single configuration point
     and makes use of SSLContext.load_default_certs().

   - Issue #16203(6): Add re.fullmatch() function and regex.fullmatch()
     method, which anchor the pattern at both ends of the string to
     match.  Original patch by Matthew Barnett.

   - Issue #13592(7): Improved the repr for regular expression pattern
     objects.  Based on patch by Hugo Lopes Tavares.

   - Issue #19641(8): Added the audioop.byteswap() function to convert
     big-endian samples to little-endian and vice versa.

   - Issue #15204(9): Deprecated the ’U’ mode in file-like objects.

   - Issue #17810(10): Implement PEP 3154, pickle protocol 4.

   - Issue #19668(11): Added support for the cp1125 encoding.

   - Issue #19689(12): Add ssl.create_default_context() factory
     function.  It creates a new SSLContext object with secure default
     settings.

   - Issue #19727(13): os.utime(..., None) is now potentially more
     precise under Windows.

   - Issue #17201(14): ZIP64 extensions now are enabled by default.
     Patch by William Mallard.

   - Issue #19292(15): Add SSLContext.load_default_certs() to load
     default root CA certificates from default stores or system stores.
     By default the method loads CA certs for authentication of server
     certs.

   - Issue #19673(16): Add pathlib to the stdlib as a provisional module
     (PEP 428).

   - Issue #16596(17): pdb in a generator now properly skips over yield
     and yield from rather than stepping out of the generator into its
     caller.  (This is essential for stepping through asyncio
     coroutines.)

   - Issue #17916(18): Added dis.Bytecode.from_traceback() and
     dis.Bytecode.current_offset to easily display "current instruction"
     markers in the new disassembly API (Patch by Claudiu Popa).

   - Issue #19552(19): venv now supports bootstrapping pip into virtual
     environments

   - Issue #17134(20): Finalize interface to Windows’ certificate store.
     Cert and CRL enumeration are now two functions.
     enum_certificates() also returns purpose flags as set of OIDs.

   - Issue #19555(21): Restore sysconfig.get_config_var(’SO’), (and the
     distutils equivalent) with a DeprecationWarning pointing people at
     $EXT_SUFFIX.

   - Issue #8813(22): Add SSLContext.verify_flags to change the
     verification flags of the context in order to enable certification
     revocation list (CRL) checks or strict X509 rules.

   - Issue #18294(23): Fix the zlib module to make it 64-bit safe.

   - Issue #19682(24): Fix compatibility issue with old version of
     OpenSSL that was introduced by Issue #18379(25).

   - Issue #14455(26): plistlib now supports binary plists and has an
     updated API.

   - Issue #19633(27): Fixed writing not compressed 16- and 32-bit wave
     files on big-endian platforms.

   - Issue #18379(28): SSLSocket.getpeercert() returns CA issuer AIA
     fields, OCSP and CRL distribution points.

   - Issue #18138(29): Implement cadata argument of
     SSLContext.load_verify_location() to load CA certificates and CRL
     from memory.  It supports PEM and DER encoded strings.

   - Issue #18775(30): Add name and block_size attribute to HMAC object.
     They now provide the same API elements as non-keyed cryptographic
     hash functions.

   - Issue #17276(31): MD5 as default digestmod for HMAC is deprecated.
     The HMAC module supports digestmod names, e.g.  hmac.HMAC(’sha1’).

   - Issue #19449(32): in csv’s writerow, handle non-string keys when
     generating the error message that certain keys are not in the
     ’fieldnames’ list.

   - Issue #13633(33): Added a new convert_charrefs keyword arg to
     HTMLParser that, when True, automatically converts all character
     references.

   - Issue #2927(34): Added the unescape() function to the html module.

   - Issue #8402(35): Added the escape() function to the glob module.

   - Issue #17618(36): Add Base85 and Ascii85 encoding/decoding to the
     base64 module.

   - Issue #19634(37): time.strftime("%y") now raises a ValueError on
     AIX when given a year before 1900.

   - Fix test.support.bind_port() to not cause an error when Python was
     compiled on a system with SO_REUSEPORT defined in the headers but
     run on a system with an OS kernel that does not support that
     reasonably new socket option.

   - Fix compilation error under gcc of the ctypes module bundled libffi
     for arm.

   - Issue #19448(38): Add private API to SSL module to lookup ASN.1
     objects by OID, NID, short name and long name.

   - Issue #19282(39): dbm.open now supports the context management
     protocol.  (Inital patch by Claudiu Popa)

   - Issue #8311(40): Added support for writing any bytes-like objects
     in the aifc, sunau, and wave modules.

   - Issue #5202(41): Added support for unseekable files in the wave
     module.

   - Issue #19544(42) and Issue #1180(43): Restore global option to
     ignore ~/.pydistutils.cfg in Distutils, accidentally removed in
     backout of distutils2 changes.

   - Issue #19523(44): Closed FileHandler leak which occurred when delay
     was set.

   - Issue #19544(45) and Issue #6516(46): Restore support for –user and
     –group parameters to sdist command accidentally rolled back as part
     of the distutils2 rollback.

   - Issue #13674(47): Prevented time.strftime from crashing on Windows
     when given a year before 1900 and a format of %y.

   - Issue #19406(48): implementation of the ensurepip module (part of
     PEP 453).  Patch by Donald Stufft and Nick Coghlan.

   - Issue #19544(49) and Issue #6286(50): Restore use of urllib over
     http allowing use of http_proxy for Distutils upload command, a
     feature accidentally lost in the rollback of distutils2.

   - Issue #19544(51) and Issue #7457(52): Restore the read_pkg_file
     method to distutils.dist.DistributionMetadata accidentally removed
     in the undo of distutils2.

   - Issue #16685(53): Added support for any bytes-like objects in the
     audioop module.  Removed support for strings.

   - Issue #7171(54): Add Windows implementation of ‘inet_ntop’ and
     ‘inet_pton’ to socket module.  Patch by Atsuo Ishimoto.

   - Issue #19261(55): Added support for writing 24-bit samples in the
     sunau module.

   - Issue #1097797(56): Added CP273 encoding, used on IBM mainframes in
     Germany and Austria.  Mapping provided by Michael Bierenfeld.

   - Issue #1575020(57): Fixed support of 24-bit wave files on
     big-endian platforms.

   - Issue #19378(58): Fixed a number of cases in the dis module where
     the new "file" parameter was not being honoured correctly

   - Issue #19378(59): Removed the "dis.Bytecode.show_info" method

   - Issue #19378(60): Renamed the "dis.Bytecode.display_code" method to
     "dis.Bytecode.dis" and converted it to returning a string rather
     than printing output.

   - Issue #19378(61): the "line_offset" parameter in the new
     "dis.get_instructions" API has been renamed to "first_line" (and
     the default value and usage changed accordingly).  This should
     reduce confusion with the more common use of "offset" in the dis
     docs to refer to bytecode offsets.

   - Issue #18678(62): Corrected spwd struct member names in spwd
     module: sp_nam->sp_namp, and sp_pwd->sp_pwdp.  The old names are
     kept as extra structseq members, for backward compatibility.

   - Issue #6157(63): Fixed tkinter.Text.debug().  tkinter.Text.bbox()
     now raises TypeError instead of TclError on wrong number of
     arguments.  Original patch by Guilherme Polo.

   - Issue #10197(64): Rework subprocess.get[status]output to use
     subprocess functionality and thus to work on Windows.  Patch by
     Nick Coghlan

   - Issue #6160(65): The bbox() method of tkinter.Spinbox now returns a
     tuple of integers instead of a string.  Based on patch by Guilherme
     Polo.

   - Issue #19403(66): contextlib.redirect_stdout is now reentrant

   - Issue #19286(67): Directories in ‘package_data’ are no longer added
     to the filelist, preventing failure outlined in the ticket.

   - Issue #19480(68): HTMLParser now accepts all valid start-tag names
     as defined by the HTML5 standard.

   - Issue #15114(69): The html.parser module now raises a
     DeprecationWarning when the strict argument of HTMLParser or the
     HTMLParser.error method are used.

   - Issue #19410(70): Undo the special-casing removal of ’’ for
     importlib.machinery.FileFinder.

   - Issue #19424(71): Fix the warnings module to accept filename
     containing surrogate characters.

   - Issue #19435(72): Fix directory traversal attack on
     CGIHttpRequestHandler.

   - Issue #19227(73): Remove pthread_atfork() handler.  The handler was
     added to solve #18747 but has caused issues.

   - Issue #19420(74): Fix reference leak in module initalization code
     of _hashopenssl.c

   - Issue #19329(75): Optimized compiling charsets in regular
     expressions.

   - Issue #19227(76): Try to fix deadlocks caused by re-seeding then
     OpenSSL pseudo-random number generator on fork().

   - Issue #16037(77): HTTPMessage.readheaders() raises an HTTPException
     when more than 100 headers are read.  Adapted from patch by Jyrki
     Pulliainen.

   - Issue #16040(78): CVE-2013-1752: nntplib: Limit maximum line
     lengths to 2048 to prevent readline() calls from consuming too much
     memory.  Patch by Jyrki Pulliainen.

   - Issue #16041(79): CVE-2013-1752: poplib: Limit maximum line lengths
     to 2048 to prevent readline() calls from consuming too much memory.
     Patch by Jyrki Pulliainen.

   - Issue #17997(80): Change behavior of ‘ssl.match_hostname()’ to
     follow RFC 6125, for security reasons.  It now doesn’t match
     multiple wildcards nor wildcards inside IDN fragments.

   - Issue #16039(81): CVE-2013-1752: Change use of readline in imaplib
     module to limit line length.  Patch by Emil Lind.

   - Issue #19330(82): the unnecessary wrapper functions have been
     removed from the implementations of the new
     contextlib.redirect_stdout and contextlib.suppress context
     managers, which also ensures they provide reasonable help() output
     on instances

   - Issue #19393(83): Fix symtable.symtable function to not be confused
     when there are functions or classes named "top".

   - Issue #18685(84): Restore re performance to pre-PEP 393 levels.

   - Issue #19339(85): telnetlib module is now using time.monotonic()
     when available to compute timeout.

   - Issue #19399(86): fix sporadic test_subprocess failure.

   - Issue #13234(87): Fix os.listdir to work with extended paths on
     Windows.  Patch by Santoso Wijaya.

   - Issue #19375(88): The site module adding a "site-python" directory
     to sys.path, if it exists, is now deprecated.

   - Issue #19379(89): Lazily import linecache in the warnings module,
     to make startup with warnings faster until a warning gets printed.

   - Issue #19288(90): Fixed the "in" operator of dbm.gnu databases for
     string argument.  Original patch by Arfrever Frehtes Taifersar
     Arahesis.

   - Issue #19287(91): Fixed the "in" operator of dbm.ndbm databases for
     string argument.  Original patch by Arfrever Frehtes Taifersar
     Arahesis.

   - Issue #19327(92): Fixed the working of regular expressions with too
     big charset.

   - Issue #17400(93): New ’is_global’ attribute for ipaddress to tell
     if an address is allocated by IANA for global or private networks.

   - Issue #19350(94): Increasing the test coverage of macurl2path.
     Patch by Colin Williams.

   - Issue #19365(95): Optimized the parsing of long replacement string
     in re.sub*() functions.

   - Issue #19352(96): Fix unittest discovery when a module can be
     reached through several paths (e.g.  under Debian/Ubuntu with
     virtualenv).

   - Issue #15207(97): Fix mimetypes to read from correct part of
     Windows registry Original patch by Dave Chambers

   - Issue #16595(98): Add prlimit() to resource module.

   - Issue #19324(99): Expose Linux-specific constants in resource
     module.

   - Load SSL’s error strings in hashlib.

   - Issue #18527(100): Upgrade internal copy of zlib to 1.2.8.

   - Issue #19274(101): Add a filterfunc parameter to PyZipFile.writepy.

   - Issue #8964(102): fix platform._sys_version to handle IronPython
     2.6+.  Patch by Martin Matusiak.

   - Issue #19413(103): Restore pre-3.3 reload() semantics of re-finding
     modules.

   - Issue #18958(104): Improve error message for json.load(s) while
     passing a string that starts with a UTF-8 BOM.

   - Issue #19307(105): Improve error message for json.load(s) while
     passing objects of the wrong type.

   - Issue #16038(106): CVE-2013-1752: ftplib: Limit amount of data read
     by limiting the call to readline().  Original patch by Michał
     Jastrzębski and Giampaolo Rodola.

   - Issue #17087(107): Improved the repr for regular expression match
     objects.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/3158

   (2) https://bugs.python.org/13477

   (3) https://bugs.python.org/19674

   (4) https://bugs.python.org/19722

   (5) https://bugs.python.org/19735

   (6) https://bugs.python.org/16203

   (7) https://bugs.python.org/13592

   (8) https://bugs.python.org/19641

   (9) https://bugs.python.org/15204

   (10) https://bugs.python.org/17810

   (11) https://bugs.python.org/19668

   (12) https://bugs.python.org/19689

   (13) https://bugs.python.org/19727

   (14) https://bugs.python.org/17201

   (15) https://bugs.python.org/19292

   (16) https://bugs.python.org/19673

   (17) https://bugs.python.org/16596

   (18) https://bugs.python.org/17916

   (19) https://bugs.python.org/19552

   (20) https://bugs.python.org/17134

   (21) https://bugs.python.org/19555

   (22) https://bugs.python.org/8813

   (23) https://bugs.python.org/18294

   (24) https://bugs.python.org/19682

   (25) https://bugs.python.org/18379

   (26) https://bugs.python.org/14455

   (27) https://bugs.python.org/19633

   (28) https://bugs.python.org/18379

   (29) https://bugs.python.org/18138

   (30) https://bugs.python.org/18775

   (31) https://bugs.python.org/17276

   (32) https://bugs.python.org/19449

   (33) https://bugs.python.org/13633

   (34) https://bugs.python.org/2927

   (35) https://bugs.python.org/8402

   (36) https://bugs.python.org/17618

   (37) https://bugs.python.org/19634

   (38) https://bugs.python.org/19448

   (39) https://bugs.python.org/19282

   (40) https://bugs.python.org/8311

   (41) https://bugs.python.org/5202

   (42) https://bugs.python.org/19544

   (43) https://bugs.python.org/1180

   (44) https://bugs.python.org/19523

   (45) https://bugs.python.org/19544

   (46) https://bugs.python.org/6516

   (47) https://bugs.python.org/13674

   (48) https://bugs.python.org/19406

   (49) https://bugs.python.org/19544

   (50) https://bugs.python.org/6286

   (51) https://bugs.python.org/19544

   (52) https://bugs.python.org/7457

   (53) https://bugs.python.org/16685

   (54) https://bugs.python.org/7171

   (55) https://bugs.python.org/19261

   (56) https://bugs.python.org/1097797

   (57) https://bugs.python.org/1575020

   (58) https://bugs.python.org/19378

   (59) https://bugs.python.org/19378

   (60) https://bugs.python.org/19378

   (61) https://bugs.python.org/19378

   (62) https://bugs.python.org/18678

   (63) https://bugs.python.org/6157

   (64) https://bugs.python.org/10197

   (65) https://bugs.python.org/6160

   (66) https://bugs.python.org/19403

   (67) https://bugs.python.org/19286

   (68) https://bugs.python.org/19480

   (69) https://bugs.python.org/15114

   (70) https://bugs.python.org/19410

   (71) https://bugs.python.org/19424

   (72) https://bugs.python.org/19435

   (73) https://bugs.python.org/19227

   (74) https://bugs.python.org/19420

   (75) https://bugs.python.org/19329

   (76) https://bugs.python.org/19227

   (77) https://bugs.python.org/16037

   (78) https://bugs.python.org/16040

   (79) https://bugs.python.org/16041

   (80) https://bugs.python.org/17997

   (81) https://bugs.python.org/16039

   (82) https://bugs.python.org/19330

   (83) https://bugs.python.org/19393

   (84) https://bugs.python.org/18685

   (85) https://bugs.python.org/19339

   (86) https://bugs.python.org/19399

   (87) https://bugs.python.org/13234

   (88) https://bugs.python.org/19375

   (89) https://bugs.python.org/19379

   (90) https://bugs.python.org/19288

   (91) https://bugs.python.org/19287

   (92) https://bugs.python.org/19327

   (93) https://bugs.python.org/17400

   (94) https://bugs.python.org/19350

   (95) https://bugs.python.org/19365

   (96) https://bugs.python.org/19352

   (97) https://bugs.python.org/15207

   (98) https://bugs.python.org/16595

   (99) https://bugs.python.org/19324

   (100) https://bugs.python.org/18527

   (101) https://bugs.python.org/19274

   (102) https://bugs.python.org/8964

   (103) https://bugs.python.org/19413

   (104) https://bugs.python.org/18958

   (105) https://bugs.python.org/19307

   (106) https://bugs.python.org/16038

   (107) https://bugs.python.org/17087


File: python.info,  Node: Tests<8>,  Next: Documentation<8>,  Prev: Library<12>,  Up: Python 3 4 0 Beta 1

1.14.12.3 Tests
...............

   - Issue #19664(1): test_userdict’s repr test no longer depends on the
     order of dict elements.

   - Issue #19440(2): Clean up test_capi by removing an unnecessary
     __future__ import, converting from test_main to unittest.main, and
     running the _testcapi module tests as subTests of a unittest
     TestCase method.

   - Issue #19378(3): the main dis module tests are now run with both
     stdout redirection `and' passing an explicit file parameter

   - Issue #19378(4): removed the not-actually-helpful
     assertInstructionMatches and assertBytecodeExactlyMatches helpers
     from bytecode_helper

   - Issue #18702(5): All skipped tests now reported as skipped.

   - Issue #19439(6): interpreter embedding tests are now executed on
     Windows (Patch by Zachary Ware)

   - Issue #19085(7): Added basic tests for all tkinter widget options.

   - Issue #19384(8): Fix test_py_compile for root user, patch by
     Claudiu Popa.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19664

   (2) https://bugs.python.org/19440

   (3) https://bugs.python.org/19378

   (4) https://bugs.python.org/19378

   (5) https://bugs.python.org/18702

   (6) https://bugs.python.org/19439

   (7) https://bugs.python.org/19085

   (8) https://bugs.python.org/19384


File: python.info,  Node: Documentation<8>,  Next: Build<9>,  Prev: Tests<8>,  Up: Python 3 4 0 Beta 1

1.14.12.4 Documentation
.......................

   - Issue #18326(1): Clarify that list.sort’s arguments are
     keyword-only.  Also, attempt to reduce confusion in the glossary by
     not saying there are different "types" of arguments and parameters.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18326


File: python.info,  Node: Build<9>,  Next: Tools/Demos<7>,  Prev: Documentation<8>,  Up: Python 3 4 0 Beta 1

1.14.12.5 Build
...............

   - Issue #19358(1): "make clinic" now runs the Argument Clinic
     preprocessor over all CPython source files.

   - Update SQLite to 3.8.1, xz to 5.0.5, and Tcl/Tk to 8.6.1 on
     Windows.

   - Issue #16632(2): Enable DEP and ASLR on Windows.

   - Issue #17791(3): Drop PREFIX and EXEC_PREFIX definitions from
     PC/pyconfig.h

   - Add workaround for VS 2010 nmake clean issue.  VS 2010 doesn’t set
     up PATH for nmake.exe correctly.

   - Issue #19550(4): Implement Windows installer changes of PEP 453
     (ensurepip).

   - Issue #19520(5): Fix compiler warning in the _sha3 module on 32bit
     Windows.

   - Issue #19356(6): Avoid using a C variabled named "_self", it’s a
     reserved word in some C compilers.

   - Issue #15792(7): Correct build options on Win64.  Patch by Jeremy
     Kloth.

   - Issue #19373(8): Apply upstream change to Tk 8.5.15 fixing OS X
     10.9 screen refresh problem for OS X installer build.

   - Issue #19649(9): On OS X, the same set of file names are now
     installed in bin directories for all configurations: non-framework
     vs framework, and single arch vs universal builds.  pythonx.y-32 is
     now always installed for 64-bit/32-bit universal builds.  The
     obsolete and undocumented pythonw* symlinks are no longer installed
     anywhere.

   - Issue #19553(10): PEP 453 - "make install" and "make altinstall"
     now install or upgrade pip by default, using the bundled pip
     provided by the new ensurepip module.  A new configure option,
     –with-ensurepip[=upgrade|install|no], is available to override the
     default ensurepip "–upgrade" option.  The option can also be set
     with "make [alt]install ENSUREPIP=[upgrade|installno]".

   - Issue #19551(11): PEP 453 - the OS X installer now installs pip by
     default.

   - Update third-party libraries for OS X installers: xz 5.0.3 ->
     5.0.5, SQLite 3.7.13 -> 3.8.1

   - Issue #15663(12): Revert OS X installer built-in Tcl/Tk support for
     3.4.0b1.  Some third-party projects, such as Matplotlib and
     PIL/Pillow, depended on being able to build with Tcl and Tk
     frameworks in /Library/Frameworks.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19358

   (2) https://bugs.python.org/16632

   (3) https://bugs.python.org/17791

   (4) https://bugs.python.org/19550

   (5) https://bugs.python.org/19520

   (6) https://bugs.python.org/19356

   (7) https://bugs.python.org/15792

   (8) https://bugs.python.org/19373

   (9) https://bugs.python.org/19649

   (10) https://bugs.python.org/19553

   (11) https://bugs.python.org/19551

   (12) https://bugs.python.org/15663


File: python.info,  Node: Tools/Demos<7>,  Prev: Build<9>,  Up: Python 3 4 0 Beta 1

1.14.12.6 Tools/Demos
.....................

   - Issue #19730(1): Argument Clinic now supports all the existing
     PyArg "format units" as legacy converters, as well as two new
     features: "self converters" and the "version" directive.

   - Issue #19552(2): pyvenv now bootstraps pip into virtual
     environments by default (pass –without-pip to request the old
     behaviour)

   - Issue #19390(3): Argument Clinic no longer accepts malformed Python
     and C ids.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19730

   (2) https://bugs.python.org/19552

   (3) https://bugs.python.org/19390


File: python.info,  Node: Python 3 4 0 Alpha 4,  Next: Python 3 4 0 Alpha 3,  Prev: Python 3 4 0 Beta 1,  Up: Changelog

1.14.13 Python 3.4.0 Alpha 4
----------------------------

Release date: 2013-10-20

* Menu:

* Core and Builtins: Core and Builtins<12>. 
* Library: Library<13>. 
* C API: C API<3>. 
* Tests: Tests<9>. 
* Documentation: Documentation<9>. 
* Build: Build<10>. 


File: python.info,  Node: Core and Builtins<12>,  Next: Library<13>,  Up: Python 3 4 0 Alpha 4

1.14.13.1 Core and Builtins
...........................

   - Issue #19301(1): Give classes and functions that are explicitly
     marked global a global qualname.

   - Issue #19279(2): UTF-7 decoder no longer produces illegal strings.

   - Issue #16612(3): Add "Argument Clinic", a compile-time preprocessor
     for C files to generate argument parsing code.  (See PEP 436.)

   - Issue #18810(4): Shift stat calls in importlib.machinery.FileFinder
     such that the code is optimistic that if something exists in a
     directory named exactly like the possible package being searched
     for that it’s in actuality a directory.

   - Issue #18416(5): importlib.machinery.PathFinder now treats ’’ as
     the cwd and importlib.machinery.FileFinder no longer special-cases
     ’’ to ’.’.  This leads to modules imported from cwd to now possess
     an absolute file path for __file__ (this does not affect modules
     specified by path on the CLI but it does affect -m/runpy).  It also
     allows FileFinder to be more consistent by not having an edge case.

   - Issue #4555(6): All exported C symbols are now prefixed with either
     "Py" or "_Py".

   - Issue #19219(7): Speed up marshal.loads(), and make pyc files
     slightly (5% to 10%) smaller.

   - Issue #19221(8): Upgrade Unicode database to version 6.3.0.

   - Issue #16742(9): The result of the C callback
     PyOS_ReadlineFunctionPointer must now be a string allocated by
     PyMem_RawMalloc() or PyMem_RawRealloc() (or NULL if an error
     occurred), instead of a string allocated by PyMem_Malloc() or
     PyMem_Realloc().

   - Issue #19199(10): Remove ‘PyThreadState.tick_counter’ field

   - Fix macro expansion of _PyErr_OCCURRED(), and make sure to use it
     in at least one place so as to avoid regressions.

   - Issue #19087(11): Improve bytearray allocation in order to allow
     cheap popping of data at the front (slice deletion).

   - Issue #19014(12): memoryview.cast() is now allowed on zero-length
     views.

   - Issue #18690(13): memoryview is now automatically registered with
     collections.abc.Sequence

   - Issue #19078(14): memoryview now correctly supports the reversed
     builtin (Patch by Claudiu Popa)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19301

   (2) https://bugs.python.org/19279

   (3) https://bugs.python.org/16612

   (4) https://bugs.python.org/18810

   (5) https://bugs.python.org/18416

   (6) https://bugs.python.org/4555

   (7) https://bugs.python.org/19219

   (8) https://bugs.python.org/19221

   (9) https://bugs.python.org/16742

   (10) https://bugs.python.org/19199

   (11) https://bugs.python.org/19087

   (12) https://bugs.python.org/19014

   (13) https://bugs.python.org/18690

   (14) https://bugs.python.org/19078


File: python.info,  Node: Library<13>,  Next: C API<3>,  Prev: Core and Builtins<12>,  Up: Python 3 4 0 Alpha 4

1.14.13.2 Library
.................

   - Issue #17457(1): unittest test discovery now works with namespace
     packages.  Patch by Claudiu Popa.

   - Issue #18235(2): Fix the sysconfig variables LDSHARED and BLDSHARED
     under AIX. Patch by David Edelsohn.

   - Issue #18606(3): Add the new "statistics" module (PEP 450).
     Contributed by Steven D’Aprano.

   - Issue #12866(4): The audioop module now supports 24-bit samples.

   - Issue #19254(5): Provide an optimized Python implementation of
     pbkdf2_hmac.

   - Issues #19201, Issue #19222(6), Issue #19223(7): Add "x" mode
     (exclusive creation) in opening file to bz2, gzip and lzma modules.
     Patches by Tim Heaney and Vajrasky Kok.

   - Fix a reference count leak in _sre.

   - Issue #19262(8): Initial check in of the ’asyncio’ package (a.k.a.
     Tulip, a.k.a.  PEP 3156).  There are no docs yet, and the PEP is
     slightly out of date with the code.  This module will have
     `provisional' status in Python 3.4.

   - Issue #19276(9): Fixed the wave module on 64-bit big-endian
     platforms.

   - Issue #19266(10): Rename the new-in-3.4 ‘contextlib.ignore’ context
     manager to ‘contextlib.suppress’ in order to be more consistent
     with existing descriptions of that operation elsewhere in the
     language and standard library documentation (Patch by Zero
     Piraeus).

   - Issue #18891(11): Completed the new email package (provisional) API
     additions by adding new classes EmailMessage, MIMEPart, and
     ContentManager.

   - Issue #18281(12): Unused stat constants removed from *note tarfile:
     fc.

   - Issue #18999(13): Multiprocessing now supports ’contexts’ with the
     same API as the module, but bound to specified start methods.

   - Issue #18468(14): The re.split, re.findall, and re.sub functions
     and the group() and groups() methods of match object now always
     return a string or a bytes object.

   - Issue #18725(15): The textwrap module now supports truncating
     multiline text.

   - Issue #18776(16): atexit callbacks now display their full traceback
     when they raise an exception.

   - Issue #17827(17): Add the missing documentation for ‘codecs.encode’
     and ‘codecs.decode’.

   - Issue #19218(18): Rename collections.abc to _collections_abc in
     order to speed up interpreter start.

   - Issue #18582(19): Add ’pbkdf2_hmac’ to the hashlib module.  It
     implements PKCS#5 password-based key derivation functions with HMAC
     as pseudorandom function.

   - Issue #19131(20): The aifc module now correctly reads and writes
     sampwidth of compressed streams.

   - Issue #19209(21): Remove import of copyreg from the os module to
     speed up interpreter startup.  stat_result and statvfs_result are
     now hard-coded to reside in the os module.

   - Issue #19205(22): Don’t import the ’re’ module in site and
     sysconfig module to speed up interpreter start.

   - Issue #9548(23): Add a minimal "_bootlocale" module that is
     imported by the _io module instead of the full locale module.

   - Issue #18764(24): remove the ’print’ alias for the PDB ’p’ command
     so that it no longer shadows the print function.

   - Issue #19158(25): a rare race in BoundedSemaphore could allow
     .release() too often.

   - Issue #15805(26): Add contextlib.redirect_stdout().

   - Issue #18716(27): Deprecate the formatter module.

   - Issue #10712(28): 2to3 has a new "asserts" fixer that replaces
     deprecated names of unittest methods (e.g.  failUnlessEqual ->
     assertEqual).

   - Issue #18037(29): 2to3 now escapes ’u’ and ’U’ in native strings.

   - Issue #17839(30): base64.decodebytes and base64.encodebytes now
     accept any object that exports a 1 dimensional array of bytes (this
     means the same is now also true for base64_codec)

   - Issue #19132(31): The pprint module now supports compact mode.

   - Issue #19137(32): The pprint module now correctly formats instances
     of set and frozenset subclasses.

   - Issue #10042(33): functools.total_ordering now correctly handles
     NotImplemented being returned by the underlying comparison function
     (Patch by Katie Miller)

   - Issue #19092(34): contextlib.ExitStack now correctly reraises
     exceptions from the __exit__ callbacks of inner context managers
     (Patch by Hrvoje Nikšić)

   - Issue #12641(35): Avoid passing "-mno-cygwin" to the mingw32
     compiler, except when necessary.  Patch by Oscar Benjamin.

   - Issue #5845(36): In site.py, only load readline history from
     ~/.python_history if no history has been read already.  This avoids
     double writes to the history file at shutdown.

   - Properly initialize all fields of a SSL object after allocation.

   - Issue #19095(37): SSLSocket.getpeercert() now raises ValueError
     when the SSL handshake hasn’t been done.

   - Issue #4366(38): Fix building extensions on all platforms when
     –enable-shared is used.

   - Issue #19030(39): Fixed *note inspect.getmembers: 973. and
     ‘inspect.classify_class_attrs’ to attempt activating descriptors
     before falling back to a __dict__ search for faulty descriptors.
     ‘inspect.classify_class_attrs’ no longer returns Attributes whose
     home class is None.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17457

   (2) https://bugs.python.org/18235

   (3) https://bugs.python.org/18606

   (4) https://bugs.python.org/12866

   (5) https://bugs.python.org/19254

   (6) https://bugs.python.org/19222

   (7) https://bugs.python.org/19223

   (8) https://bugs.python.org/19262

   (9) https://bugs.python.org/19276

   (10) https://bugs.python.org/19266

   (11) https://bugs.python.org/18891

   (12) https://bugs.python.org/18281

   (13) https://bugs.python.org/18999

   (14) https://bugs.python.org/18468

   (15) https://bugs.python.org/18725

   (16) https://bugs.python.org/18776

   (17) https://bugs.python.org/17827

   (18) https://bugs.python.org/19218

   (19) https://bugs.python.org/18582

   (20) https://bugs.python.org/19131

   (21) https://bugs.python.org/19209

   (22) https://bugs.python.org/19205

   (23) https://bugs.python.org/9548

   (24) https://bugs.python.org/18764

   (25) https://bugs.python.org/19158

   (26) https://bugs.python.org/15805

   (27) https://bugs.python.org/18716

   (28) https://bugs.python.org/10712

   (29) https://bugs.python.org/18037

   (30) https://bugs.python.org/17839

   (31) https://bugs.python.org/19132

   (32) https://bugs.python.org/19137

   (33) https://bugs.python.org/10042

   (34) https://bugs.python.org/19092

   (35) https://bugs.python.org/12641

   (36) https://bugs.python.org/5845

   (37) https://bugs.python.org/19095

   (38) https://bugs.python.org/4366

   (39) https://bugs.python.org/19030


File: python.info,  Node: C API<3>,  Next: Tests<9>,  Prev: Library<13>,  Up: Python 3 4 0 Alpha 4

1.14.13.3 C API
...............

   - Issue #1772673(1): The type of ‘char*’ arguments now changed to
     ‘const char*’.

   - Issue #16129(2): Added a ‘Py_SetStandardStreamEncoding’
     pre-initialization API to allow embedding applications like Blender
     to force a particular encoding and error handler for the standard
     IO streams (initial patch by Bastien Montagne)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/1772673

   (2) https://bugs.python.org/16129


File: python.info,  Node: Tests<9>,  Next: Documentation<9>,  Prev: C API<3>,  Up: Python 3 4 0 Alpha 4

1.14.13.4 Tests
...............

   - Issue #19275(1): Fix test_site on AMD64 Snow Leopard

   - Issue #14407(2): Fix unittest test discovery in
     test_concurrent_futures.

   - Issue #18919(3): Unified and extended tests for audio modules:
     aifc, sunau and wave.

   - Issue #18714(4): Added tests for ‘pdb.find_function()’.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19275

   (2) https://bugs.python.org/14407

   (3) https://bugs.python.org/18919

   (4) https://bugs.python.org/18714


File: python.info,  Node: Documentation<9>,  Next: Build<10>,  Prev: Tests<9>,  Up: Python 3 4 0 Alpha 4

1.14.13.5 Documentation
.......................

   - Issue #18758(1): Fixed and improved cross-references.

   - Issue #18972(2): Modernize email examples and use the argparse
     module in them.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18758

   (2) https://bugs.python.org/18972


File: python.info,  Node: Build<10>,  Prev: Documentation<9>,  Up: Python 3 4 0 Alpha 4

1.14.13.6 Build
...............

   - Issue #19130(1): Correct PCbuild/readme.txt, Python 3.3 and 3.4
     require VS 2010.

   - Issue #15663(2): Update OS X 10.6+ installer to use Tcl/Tk 8.5.15.

   - 
     Issue #14499(3): Fix several problems with OS X universal build support:

            1. ppc arch detection for extension module builds broke with
               Xcode 5

            2. ppc arch detection in configure did not work on OS X 10.4

            3. -sysroot and -arch flags were unnecessarily duplicated

            4. there was no obvious way to configure an intel-32 only
               build.

   - Issue #19019(4): Change the OS X installer build script to use
     CFLAGS instead of OPT for special build options.  By setting OPT,
     some compiler-specific options like -fwrapv were overridden and
     thus not used, which could result in broken interpreters when
     building with clang.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19130

   (2) https://bugs.python.org/15663

   (3) https://bugs.python.org/14499

   (4) https://bugs.python.org/19019


File: python.info,  Node: Python 3 4 0 Alpha 3,  Next: Python 3 4 0 Alpha 2,  Prev: Python 3 4 0 Alpha 4,  Up: Changelog

1.14.14 Python 3.4.0 Alpha 3
----------------------------

Release date: 2013-09-29

* Menu:

* Core and Builtins: Core and Builtins<13>. 
* Library: Library<14>. 
* Tests: Tests<10>. 
* IDLE: IDLE<10>. 
* Documentation: Documentation<10>. 
* Build: Build<11>. 
* Tools/Demos: Tools/Demos<8>. 


File: python.info,  Node: Core and Builtins<13>,  Next: Library<14>,  Up: Python 3 4 0 Alpha 3

1.14.14.1 Core and Builtins
...........................

   - Issue #18818(1): The "encodingname" part of PYTHONIOENCODING is now
     optional.

   - Issue #19098(2): Prevent overflow in the compiler when the
     recursion limit is set absurdly high.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18818

   (2) https://bugs.python.org/19098


File: python.info,  Node: Library<14>,  Next: Tests<10>,  Prev: Core and Builtins<13>,  Up: Python 3 4 0 Alpha 3

1.14.14.2 Library
.................

   - Issue #18929(1): ‘inspect.classify_class_attrs()’ now correctly
     finds class attributes returned by *note dir(): 7a8. that are
     located in the metaclass.

   - Issue #18950(2): Fix miscellaneous bugs in the sunau module.
     Au_read.readframes() now updates current file position and reads
     correct number of frames from multichannel stream.
     Au_write.writeframesraw() now correctly updates current file
     position.  Au_read.getnframes() now returns an integer (as in
     Python 2).  Au_read and Au_write now correctly works with file
     object if start file position is not a zero.

   - Issue #18594(3): The fast path for collections.Counter() was never
     taken due to an over-restrictive type check.

   - Issue #19053(4): ZipExtFile.read1() with non-zero argument no more
     returns empty bytes until end of data.

   - logging: added support for Unix domain sockets to SocketHandler and
     DatagramHandler.

   - Issue #18996(5): TestCase.assertEqual() now more cleverly shorten
     differing strings in error report.

   - Issue #19034(6): repr() for tkinter.Tcl_Obj now exposes string
     reperesentation.

   - Issue #18978(7): ‘urllib.request.Request’ now allows the method to
     be indicated on the class and no longer sets it to None in
     ‘__init__’.

   - Issue #18626(8): the inspect module now offers a basic command line
     introspection interface (Initial patch by Claudiu Popa)

   - Issue #3015(9): Fixed tkinter with wantobject=False.  Any Tcl
     command call returned empty string.

   - Issue #19037(10): The mailbox module now makes all changes to
     maildir files before moving them into place, to avoid race
     conditions with other programs that may be accessing the maildir
     directory.

   - Issue #14984(11): On POSIX systems, when netrc is called without a
     filename argument (and therefore is reading the user’s $HOME/.netrc
     file), it now enforces the same security rules as typical ftp
     clients: the .netrc file must be owned by the user that owns the
     process and must not be readable by any other user.

   - Issue #18873(12): The tokenize module now detects Python source
     code encoding only in comment lines.

   - Issue #17764(13): Enable http.server to bind to a user specified
     network interface.  Patch contributed by Malte Swart.

   - Issue #18937(14): Add an assertLogs() context manager to
     unittest.TestCase to ensure that a block of code emits a message
     using the logging module.

   - Issue #17324(15): Fix http.server’s request handling case on
     trailing ’/’.  Patch contributed by Vajrasky Kok.

   - Issue #19018(16): The heapq.merge() function no longer suppresses
     IndexError in the underlying iterables.

   - Issue #18784(17): The uuid module no longer attempts to load libc
     via ctypes.CDLL if all the necessary functions have already been
     found in libuuid.  Patch by Evgeny Sologubov.

   - The *note PYTHONFAULTHANDLER: 3a5. environment variable now only
     enables the faulthandler module if the variable is non-empty.  Same
     behaviour than other variables like *note PYTHONDONTWRITEBYTECODE:
     7b0.

   - Issue #1565525(18): New function ‘traceback.clear_frames’ will
     clear the local variables of all the stack frames referenced by a
     traceback object.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18929

   (2) https://bugs.python.org/18950

   (3) https://bugs.python.org/18594

   (4) https://bugs.python.org/19053

   (5) https://bugs.python.org/18996

   (6) https://bugs.python.org/19034

   (7) https://bugs.python.org/18978

   (8) https://bugs.python.org/18626

   (9) https://bugs.python.org/3015

   (10) https://bugs.python.org/19037

   (11) https://bugs.python.org/14984

   (12) https://bugs.python.org/18873

   (13) https://bugs.python.org/17764

   (14) https://bugs.python.org/18937

   (15) https://bugs.python.org/17324

   (16) https://bugs.python.org/19018

   (17) https://bugs.python.org/18784

   (18) https://bugs.python.org/1565525


File: python.info,  Node: Tests<10>,  Next: IDLE<10>,  Prev: Library<14>,  Up: Python 3 4 0 Alpha 3

1.14.14.3 Tests
...............

   - Issue #18952(1): Fix regression in support data downloads
     introduced when test.support was converted to a package.
     Regression noticed by Zachary Ware.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18952


File: python.info,  Node: IDLE<10>,  Next: Documentation<10>,  Prev: Tests<10>,  Up: Python 3 4 0 Alpha 3

1.14.14.4 IDLE
..............

   - Issue #18873(1): IDLE now detects Python source code encoding only
     in comment lines.

   - Issue #18988(2): The "Tab" key now works when a word is already
     autocompleted.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18873

   (2) https://bugs.python.org/18988


File: python.info,  Node: Documentation<10>,  Next: Build<11>,  Prev: IDLE<10>,  Up: Python 3 4 0 Alpha 3

1.14.14.5 Documentation
.......................

   - Issue #17003(1): Unified the size argument names in the io module
     with common practice.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17003


File: python.info,  Node: Build<11>,  Next: Tools/Demos<8>,  Prev: Documentation<10>,  Up: Python 3 4 0 Alpha 3

1.14.14.6 Build
...............

   - Issue #18596(1): Support the use of address sanity checking in
     recent versions of clang and GCC by appropriately marking known
     false alarms in the small object allocator.  Patch contributed by
     Dhiru Kholia.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18596


File: python.info,  Node: Tools/Demos<8>,  Prev: Build<11>,  Up: Python 3 4 0 Alpha 3

1.14.14.7 Tools/Demos
.....................

   - Issue #18873(1): 2to3 and the findnocoding.py script now detect
     Python source code encoding only in comment lines.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18873


File: python.info,  Node: Python 3 4 0 Alpha 2,  Next: Python 3 4 0 Alpha 1,  Prev: Python 3 4 0 Alpha 3,  Up: Changelog

1.14.15 Python 3.4.0 Alpha 2
----------------------------

Release date: 2013-09-09

* Menu:

* Core and Builtins: Core and Builtins<14>. 
* Library: Library<15>. 
* Tests: Tests<11>. 
* IDLE: IDLE<11>. 
* Documentation: Documentation<11>. 
* Build: Build<12>. 
* Tools/Demos: Tools/Demos<9>. 


File: python.info,  Node: Core and Builtins<14>,  Next: Library<15>,  Up: Python 3 4 0 Alpha 2

1.14.15.1 Core and Builtins
...........................

   - Issue #18942(1): sys._debugmallocstats() output was damaged on
     Windows.

   - Issue #18571(2): Implementation of the PEP 446: file descriptors
     and file handles are now created non-inheritable; add functions
     os.get/set_inheritable(), os.get/set_handle_inheritable() and
     socket.socket.get/set_inheritable().

   - Issue #11619(3): The parser and the import machinery do not encode
     Unicode filenames anymore on Windows.

   - Issue #18808(4): Non-daemon threads are now automatically joined
     when a sub-interpreter is shutdown (it would previously dump a
     fatal error).

   - Remove support for compiling on systems without getcwd().

   - Issue #18774(5): Remove last bits of GNU PTH thread code and
     thread_pth.h.

   - Issue #18771(6): Add optimization to set object lookups to reduce
     the cost of hash collisions.  The core idea is to inspect a second
     key/hash pair for each cache line retrieved.

   - Issue #16105(7): When a signal handler fails to write to the file
     descriptor registered with ‘signal.set_wakeup_fd()’, report an
     exception instead of ignoring the error.

   - Issue #18722(8): Remove uses of the "register" keyword in C code.

   - Issue #18667(9): Add missing "HAVE_FCHOWNAT" symbol to
     posix._have_functions.

   - Issue #16499(10): Add command line option for isolated mode.

   - Issue #15301(11): Parsing fd, uid, and gid parameters for builtins
     in Modules/posixmodule.c is now far more robust.

   - Issue #18368(12): PyOS_StdioReadline() no longer leaks memory when
     realloc() fail.

   - Issue #17934(13): Add a clear() method to frame objects, to help
     clean up expensive details (local variables) and break reference
     cycles.

   - Issue #18780(14): %-formatting codes %d, %i, and %u now treat
     int-subclasses as int (displays value of int-subclass instead of
     str(int-subclass) ).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18942

   (2) https://bugs.python.org/18571

   (3) https://bugs.python.org/11619

   (4) https://bugs.python.org/18808

   (5) https://bugs.python.org/18774

   (6) https://bugs.python.org/18771

   (7) https://bugs.python.org/16105

   (8) https://bugs.python.org/18722

   (9) https://bugs.python.org/18667

   (10) https://bugs.python.org/16499

   (11) https://bugs.python.org/15301

   (12) https://bugs.python.org/18368

   (13) https://bugs.python.org/17934

   (14) https://bugs.python.org/18780


File: python.info,  Node: Library<15>,  Next: Tests<11>,  Prev: Core and Builtins<14>,  Up: Python 3 4 0 Alpha 2

1.14.15.2 Library
.................

   - Issue #18808(1): Thread.join() now waits for the underlying thread
     state to be destroyed before returning.  This prevents
     unpredictable aborts in Py_EndInterpreter() when some non-daemon
     threads are still running.

   - Issue #18458(2): Prevent crashes with newer versions of libedit.
     Its readline emulation has changed from 0-based indexing to 1-based
     like gnu readline.

   - Issue #18852(3): Handle case of ‘readline.__doc__’ being ‘None’ in
     the new readline activation code in ‘site.py’.

   - Issue #18672(4): Fixed format specifiers for Py_ssize_t in
     debugging output in the _sre module.

   - Issue #18830(5): inspect.getclasstree() no longer produces
     duplicate entries even when input list contains duplicates.

   - Issue #18878(6): sunau.open now supports the context management
     protocol.  Based on patches by Claudiu Popa and R. David Murray.

   - Issue #18909(7): Fix _tkinter.tkapp.interpaddr() on Windows 64-bit,
     don’t cast 64-bit pointer to long (32 bits).

   - Issue #18876(8): The FileIO.mode attribute now better reflects the
     actual mode under which the file was opened.  Patch by Erik Bray.

   - Issue #16853(9): Add new selectors module.

   - Issue #18882(10): Add threading.main_thread() function.

   - Issue #18901(11): The sunau getparams method now returns a
     namedtuple rather than a plain tuple.  Patch by Claudiu Popa.

   - Issue #17487(12): The result of the wave getparams method now is
     pickleable again.  Patch by Claudiu Popa.

   - Issue #18756(13): os.urandom() now uses a lazily-opened persistent
     file descriptor, so as to avoid using many file descriptors when
     run in parallel from multiple threads.

   - Issue #18418(14): After fork(), reinit all threads states, not only
     active ones.  Patch by A. Jesse Jiryu Davis.

   - Issue #17974(15): Switch unittest from using getopt to using
     argparse.

   - Issue #11798(16): TestSuite now drops references to own tests after
     execution.

   - Issue #16611(17): http.cookie now correctly parses the ’secure’ and
     ’httponly’ cookie flags.

   - Issue #11973(18): Fix a problem in kevent.  The flags and fflags
     fields are now properly handled as unsigned.

   - Issue #18807(19): ‘pyvenv’ now takes a –copies argument allowing
     copies instead of symlinks even where symlinks are available and
     the default.

   - Issue #18538(20): ‘python -m dis’ now uses argparse for argument
     processing.  Patch by Michele Orrù.

   - Issue #18394(21): Close cgi.FieldStorage’s optional file.

   - Issue #17702(22): On error, os.environb now suppresses the
     exception context when raising a new KeyError with the original
     key.

   - Issue #16809(23): Fixed some tkinter incompabilities with Tcl/Tk
     8.6.

   - Issue #16809(24): Tkinter’s splitlist() and split() methods now
     accept Tcl_Obj argument.

   - Issue #18324(25): set_payload now correctly handles binary input.
     This also supersedes the previous fixes for #14360, #1717, and
     #16564.

   - Issue #18794(26): Add a fileno() method and a closed attribute to
     select.devpoll objects.

   - Issue #17119(27): Fixed integer overflows when processing large
     strings and tuples in the tkinter module.

   - Issue #18747(28): Re-seed OpenSSL’s pseudo-random number generator
     after fork.  A pthread_atfork() parent handler is used to seed the
     PRNG with pid, time and some stack data.

   - Issue #8865(29): Concurrent invocation of select.poll.poll() now
     raises a RuntimeError exception.  Patch by Christian Schubert.

   - Issue #18777(30): The ssl module now uses the new CRYPTO_THREADID
     API of OpenSSL 1.0.0+ instead of the deprecated CRYPTO id callback
     function.

   - Issue #18768(31): Correct doc string of RAND_edg().  Patch by
     Vajrasky Kok.

   - Issue #18178(32): Fix ctypes on BSD. dlmalloc.c was compiled twice
     which broke malloc weak symbols.

   - Issue #18709(33): Fix CVE-2013-4238.  The SSL module now handles
     NULL bytes inside subjectAltName correctly.  Formerly the module
     has used OpenSSL’s GENERAL_NAME_print() function to get the string
     represention of ASN.1 strings for ‘rfc822Name’ (email), ‘dNSName’
     (DNS) and ‘uniformResourceIdentifier’ (URI).

   - Issue #18701(34): Remove support of old CPython versions (<3.0)
     from C code.

   - Issue #18756(35): Improve error reporting in os.urandom() when the
     failure is due to something else than /dev/urandom not existing
     (for example, exhausting the file descriptor limit).

   - Issue #18673(36): Add O_TMPFILE to os module.  O_TMPFILE requires
     Linux kernel 3.11 or newer.  It’s only defined on system with 3.11
     uapi headers, too.

   - Issue #18532(37): Change the builtin hash algorithms’ names to
     lower case names as promised by hashlib’s documentation.

   - Issue #8713(38): add new spwan and forkserver start methods, and
     new functions get_all_start_methods, get_start_method, and
     set_start_method, to multiprocessing.

   - Issue #18405(39): Improve the entropy of crypt.mksalt().

   - Issue #12015(40): The tempfile module now uses a suffix of 8 random
     characters instead of 6, to reduce the risk of filename collision.
     The entropy was reduced when uppercase letters were removed from
     the charset used to generate random characters.

   - Issue #18585(41): Add *note textwrap.shorten(): 28c. to collapse
     and truncate a piece of text to a given length.

   - Issue #18598(42): Tweak exception message for
     importlib.import_module() to include the module name when a key
     argument is missing.

   - Issue #19151(43): Fix docstring and use of
     _get_supported_file_loaders() to reflect 2-tuples.

   - Issue #19152(44): Add ExtensionFileLoader.get_filename().

   - Issue #18676(45): Change ’positive’ to ’non-negative’ in queue.py
     put and get docstrings and ValueError messages.  Patch by Zhongyue
     Luo

   - Fix refcounting issue with extension types in tkinter.

   - Issue #8112(46): xlmrpc.server’s DocXMLRPCServer server no longer
     raises an error if methods have annotations; it now correctly
     displays the annotations.

   - Issue #18600(47): Added policy argument to
     email.message.Message.as_string, and as_bytes and __bytes__ methods
     to Message.

   - Issue #18671(48): Output more information when logging exceptions
     occur.

   - Issue #18621(49): Prevent the site module’s patched builtins from
     keeping too many references alive for too long.

   - Issue #4885(50): Add weakref support to mmap objects.  Patch by
     Valerie Lambert.

   - Issue #8860(51): Fixed rounding in timedelta constructor.

   - Issue #18849(52): Fixed a Windows-specific tempfile bug where
     collision with an existing directory caused mkstemp and related
     APIs to fail instead of retrying.  Report and fix by Vlad
     Shcherbina.

   - Issue #18920(53): argparse’s default destination for the version
     action (-v, –version) has also been changed to stdout, to match the
     Python executable.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18808

   (2) https://bugs.python.org/18458

   (3) https://bugs.python.org/18852

   (4) https://bugs.python.org/18672

   (5) https://bugs.python.org/18830

   (6) https://bugs.python.org/18878

   (7) https://bugs.python.org/18909

   (8) https://bugs.python.org/18876

   (9) https://bugs.python.org/16853

   (10) https://bugs.python.org/18882

   (11) https://bugs.python.org/18901

   (12) https://bugs.python.org/17487

   (13) https://bugs.python.org/18756

   (14) https://bugs.python.org/18418

   (15) https://bugs.python.org/17974

   (16) https://bugs.python.org/11798

   (17) https://bugs.python.org/16611

   (18) https://bugs.python.org/11973

   (19) https://bugs.python.org/18807

   (20) https://bugs.python.org/18538

   (21) https://bugs.python.org/18394

   (22) https://bugs.python.org/17702

   (23) https://bugs.python.org/16809

   (24) https://bugs.python.org/16809

   (25) https://bugs.python.org/18324

   (26) https://bugs.python.org/18794

   (27) https://bugs.python.org/17119

   (28) https://bugs.python.org/18747

   (29) https://bugs.python.org/8865

   (30) https://bugs.python.org/18777

   (31) https://bugs.python.org/18768

   (32) https://bugs.python.org/18178

   (33) https://bugs.python.org/18709

   (34) https://bugs.python.org/18701

   (35) https://bugs.python.org/18756

   (36) https://bugs.python.org/18673

   (37) https://bugs.python.org/18532

   (38) https://bugs.python.org/8713

   (39) https://bugs.python.org/18405

   (40) https://bugs.python.org/12015

   (41) https://bugs.python.org/18585

   (42) https://bugs.python.org/18598

   (43) https://bugs.python.org/19151

   (44) https://bugs.python.org/19152

   (45) https://bugs.python.org/18676

   (46) https://bugs.python.org/8112

   (47) https://bugs.python.org/18600

   (48) https://bugs.python.org/18671

   (49) https://bugs.python.org/18621

   (50) https://bugs.python.org/4885

   (51) https://bugs.python.org/8860

   (52) https://bugs.python.org/18849

   (53) https://bugs.python.org/18920


File: python.info,  Node: Tests<11>,  Next: IDLE<11>,  Prev: Library<15>,  Up: Python 3 4 0 Alpha 2

1.14.15.3 Tests
...............

   - Issue #18623(1): Factor out the _SuppressCoreFiles context manager
     into test.support.  Patch by Valerie Lambert.

   - Issue #12037(2): Fix test_email for desktop Windows.

   - Issue #15507(3): test_subprocess’s test_send_signal could fail if
     the test runner were run in an environment where the process
     inherited an ignore setting for SIGINT. Restore the SIGINT handler
     to the desired KeyboardInterrupt raising one during that test.

   - Issue #16799(4): Switched from getopt to argparse style in
     regrtest’s argument parsing.  Added more tests for regrtest’s
     argument parsing.

   - Issue #18792(5): Use "127.0.0.1" or "::1" instead of "localhost" as
     much as possible, since "localhost" goes through a DNS lookup under
     recent Windows versions.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18623

   (2) https://bugs.python.org/12037

   (3) https://bugs.python.org/15507

   (4) https://bugs.python.org/16799

   (5) https://bugs.python.org/18792


File: python.info,  Node: IDLE<11>,  Next: Documentation<11>,  Prev: Tests<11>,  Up: Python 3 4 0 Alpha 2

1.14.15.4 IDLE
..............

   - Issue #18489(1): Add tests for SearchEngine.  Original patch by
     Phil Webster.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18489


File: python.info,  Node: Documentation<11>,  Next: Build<12>,  Prev: IDLE<11>,  Up: Python 3 4 0 Alpha 2

1.14.15.5 Documentation
.......................

   - Issue #18743(1): Fix references to non-existant "StringIO" module.

   - Issue #18783(2): Removed existing mentions of Python long type in
     docstrings, error messages and comments.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18743

   (2) https://bugs.python.org/18783


File: python.info,  Node: Build<12>,  Next: Tools/Demos<9>,  Prev: Documentation<11>,  Up: Python 3 4 0 Alpha 2

1.14.15.6 Build
...............

   - Issue #1584(1): Provide configure options to override default
     search paths for Tcl and Tk when building _tkinter.

   - Issue #15663(2): Tcl/Tk 8.5.14 is now included with the OS X 10.6+
     64-/32-bit installer.  It is no longer necessary to install a
     third-party version of Tcl/Tk 8.5 to work around the problems in
     the Apple-supplied Tcl/Tk 8.5 shipped in OS X 10.6 and later
     releases.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/1584

   (2) https://bugs.python.org/15663


File: python.info,  Node: Tools/Demos<9>,  Prev: Build<12>,  Up: Python 3 4 0 Alpha 2

1.14.15.7 Tools/Demos
.....................

   - Issue #18922(1): Now The Lib/smtpd.py and Tools/i18n/msgfmt.py
     scripts write their version strings to stdout, and not to sderr.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18922


File: python.info,  Node: Python 3 4 0 Alpha 1,  Next: Python 3 3 0,  Prev: Python 3 4 0 Alpha 2,  Up: Changelog

1.14.16 Python 3.4.0 Alpha 1
----------------------------

Release date: 2013-08-03

* Menu:

* Core and Builtins: Core and Builtins<15>. 
* Library: Library<16>. 
* IDLE: IDLE<12>. 
* Tests: Tests<12>. 
* Build: Build<13>. 
* C-API: C-API<2>. 
* Documentation: Documentation<12>. 
* Tools/Demos: Tools/Demos<10>. 
* Windows: Windows<3>. 


File: python.info,  Node: Core and Builtins<15>,  Next: Library<16>,  Up: Python 3 4 0 Alpha 1

1.14.16.1 Core and Builtins
...........................

   - Issue #16741(1): Fix an error reporting in int().

   - Issue #17899(2): Fix rare file descriptor leak in os.listdir().

   - Issue #10241(3): Clear extension module dict copies at interpreter
     shutdown.  Patch by Neil Schemenauer, minimally modified.

   - Issue #9035(4): ismount now recognises volumes mounted below a
     drive root on Windows.  Original patch by Atsuo Ishimoto.

   - Issue #18214(5): Improve finalization of Python modules to avoid
     setting their globals to None, in most cases.

   - Issue #18112(6): PEP 442 implementation (safe object finalization).

   - Issue #18552(7): Check return value of PyArena_AddPyObject() in
     obj2ast_object().

   - Issue #18560(8): Fix potential NULL pointer dereference in sum().

   - Issue #18520(9): Add a new PyStructSequence_InitType2() function,
     same than PyStructSequence_InitType() except that it has a return
     value (0 on success, -1 on error).

   - Issue #15905(10): Fix theoretical buffer overflow in handling of
     sys.argv[0], prefix and exec_prefix if the operation system does
     not obey MAXPATHLEN.

   - Issue #18408(11): Fix many various bugs in code handling errors,
     especially on memory allocation failure (MemoryError).

   - Issue #18344(12): Fix potential ref-leaks in
     _bufferedreader_read_all().

   - Issue #18342(13): Use the repr of a module name when an import
     fails when using ‘from ... import ...’.

   - Issue #17872(14): Fix a segfault in marshal.load() when input
     stream returns more bytes than requested.

   - Issue #18338(15): ‘python --version’ now prints version string to
     stdout, and not to stderr.  Patch by Berker Peksag and Michael
     Dickens.

   - Issue #18426(16): Fix NULL pointer dereference in C extension
     import when PyModule_GetDef() returns an error.

   - Issue #17206(17): On Windows, increase the stack size from 2 MB to
     4.2 MB to fix a stack overflow in the marshal module (fix a crash
     in test_marshal).  Patch written by Jeremy Kloth.

   - Issue #3329(18): Implement the PEP 445: Add new APIs to customize
     Python memory allocators.

   - Issue #18328(19): Reorder ops in PyThreadState_Delete*() functions.
     Now the tstate is first removed from TLS and then deallocated.

   - Issue #13483(20): Use VirtualAlloc in obmalloc on Windows.

   - Issue #18184(21): PyUnicode_FromFormat() and
     PyUnicode_FromFormatV() now raise OverflowError when an argument of
     %c format is out of range.

   - Issue #18111(22): The min() and max() functions now support a
     default argument to be returned instead of raising a ValueError on
     an empty sequence.  (Contributed by Julian Berman.)

   - Issue #18137(23): Detect integer overflow on precision in
     float.__format__() and complex.__format__().

   - Issue #18183(24): Fix various unicode operations on strings with
     large unicode codepoints.

   - Issue #18180(25): Fix ref leak in _PyImport_GetDynLoadWindows().

   - Issue #18038(26): SyntaxError raised during compilation sources
     with illegal encoding now always contains an encoding name.

   - Issue #17931(27): Resolve confusion on Windows between pids and
     process handles.

   - Tweak the exception message when the magic number or size value in
     a bytecode file is truncated.

   - Issue #17932(28): Fix an integer overflow issue on Windows 64-bit
     in iterators: change the C type of seqiterobject.it_index from long
     to Py_ssize_t.

   - Issue #18065(29): Don’t set __path__ to the package name for frozen
     packages.

   - Issue #18088(30): When reloading a module, unconditionally reset
     all relevant attributes on the module (e.g.  __name__, __loader__,
     __package__, __file__, __cached__).

   - Issue #17937(31): Try harder to collect cyclic garbage at shutdown.

   - Issue #12370(32): Prevent class bodies from interfering with the
     __class__ closure.

   - Issue #17644(33): Fix a crash in str.format when curly braces are
     used in square brackets.

   - Issue #17237(34): Fix crash in the ASCII decoder on m68k.

   - Issue #17927(35): Frame objects kept arguments alive if they had
     been copied into a cell, even if the cell was cleared.

   - Issue #1545463(36): At shutdown, defer finalization of codec
     modules so that stderr remains usable.

   - Issue #7330(37): Implement width and precision (ex: "%5.3s") for
     the format string of PyUnicode_FromFormat() function, original
     patch written by Ysj Ray.

   - Issue #1545463(38): Global variables caught in reference cycles are
     now garbage-collected at shutdown.

   - Issue #17094(39): Clear stale thread states after fork().  Note
     that this is a potentially disruptive change since it may release
     some system resources which would otherwise remain perpetually
     alive (e.g.  database connections kept in thread-local storage).

   - Issue #17408(40): Avoid using an obsolete instance of the copyreg
     module when the interpreter is shutdown and then started again.

   - Issue #5845(41): Enable tab-completion in the interactive
     interpreter by default, thanks to a new sys.__interactivehook__.

   - Issue #17115(42),17116: Module initialization now includes setting
     __package__ and __loader__ attributes to None.

   - Issue #17853(43): Ensure locals of a class that shadow free
     variables always win over the closures.

   - Issue #17863(44): In the interactive console, don’t loop forever if
     the encoding can’t be fetched from stdin.

   - Issue #17867(45): Raise an ImportError if __import__ is not found
     in __builtins__.

   - Issue #18698(46): Ensure importlib.reload() returns the module out
     of sys.modules.

   - Issue #17857(47): Prevent build failures with pre-3.5.0 versions of
     sqlite3, such as was shipped with Centos 5 and Mac OS X 10.4.

   - Issue #17413(48): sys.settrace callbacks were being passed a string
     instead of an exception instance for the ’value’ element of the arg
     tuple if the exception originated from C code; now an exception
     instance is always provided.

   - Issue #17782(49): Fix undefined behaviour on platforms where
     ‘struct timespec’’s "tv_nsec" member is not a C long.

   - Issue #17722(50): When looking up __round__, resolve descriptors.

   - Issue #16061(51): Speed up str.replace() for replacing 1-character
     strings.

   - Issue #17715(52): Fix segmentation fault from raising an exception
     in a __trunc__ method.

   - Issue #17643(53): Add __callback__ attribute to weakref.ref.

   - Issue #16447(54): Fixed potential segmentation fault when setting
     __name__ on a class.

   - Issue #17669(55): Fix crash involving finalization of generators
     using yield from.

   - Issue #14439(56): Python now prints the traceback on runpy failure
     at startup.

   - Issue #17469(57): Fix _Py_GetAllocatedBlocks() and
     sys.getallocatedblocks() when running on valgrind.

   - Issue #17619(58): Make input() check for Ctrl-C correctly on
     Windows.

   - Issue #17357(59): Add missing verbosity messages for -v/-vv that
     were lost during the importlib transition.

   - Issue #17610(60): Don’t rely on non-standard behavior of the C
     qsort() function.

   - Issue #17323(61): The "[X refs, Y blocks]" printed by debug builds
     has been disabled by default.  It can be re-enabled with the ‘-X
     showrefcount’ option.

   - Issue #17328(62): Fix possible refleak in dict.setdefault.

   - Issue #17275(63): Corrected class name in init error messages of
     the C version of BufferedWriter and BufferedRandom.

   - Issue #7963(64): Fixed misleading error message that issued when
     object is called without arguments.

   - Issue #8745(65): Small speed up zipimport on Windows.  Patch by
     Catalin Iacob.

   - Issue #5308(66): Raise ValueError when marshalling too large object
     (a sequence with size >= 2**31), instead of producing illegal
     marshal data.

   - Issue #12983(67): Bytes literals with invalid x escape now raise a
     SyntaxError and a full traceback including line number.

   - Issue #16967(68): In function definition, evaluate positional
     defaults before keyword-only defaults.

   - Issue #17173(69): Remove uses of locale-dependent C functions
     (isalpha() etc.)  in the interpreter.

   - Issue #17137(70): When an Unicode string is resized, the internal
     wide character string (wstr) format is now cleared.

   - Issue #17043(71): The unicode-internal decoder no longer read past
     the end of input buffer.

   - Issue #17098(72): All modules now have __loader__ set even if they
     pre-exist the bootstrapping of importlib.

   - Issue #16979(73): Fix error handling bugs in the
     unicode-escape-decode decoder.

   - Issue #16772(74): The base argument to the int constructor no
     longer accepts floats, or other non-integer objects with an __int__
     method.  Objects with an __index__ method are now accepted.

   - Issue #10156(75): In the interpreter’s initialization phase,
     unicode globals are now initialized dynamically as needed.

   - Issue #16980(76): Fix processing of escaped non-ascii bytes in the
     unicode-escape-decode decoder.

   - Issue #16975(77): Fix error handling bug in the escape-decode bytes
     decoder.

   - Issue #14850(78): Now a charmap decoder treats U+FFFE as "undefined
     mapping" in any mapping, not only in a string.

   - Issue #16613(79): Add `m' argument to
     ‘collections.Chainmap.new_child’ to allow the new child map to be
     specified explicitly.

   - Issue #16730(80): importlib.machinery.FileFinder now no longers
     raises an exception when trying to populate its cache and it finds
     out the directory is unreadable or has turned into a file.
     Reported and diagnosed by David Pritchard.

   - Issue #16906(81): Fix a logic error that prevented most static
     strings from being cleared.

   - Issue #11461(82): Fix the incremental UTF-16 decoder.  Original
     patch by Amaury Forgeot d’Arc.

   - Issue #16856(83): Fix a segmentation fault from calling repr() on a
     dict with a key whose repr raise an exception.

   - Issue #16367(84): Fix FileIO.readall() on Windows for files larger
     than 2 GB.

   - Issue #16761(85): Calling int() with base argument only now raises
     TypeError.

   - Issue #16759(86): Support the full DWORD (unsigned long) range in
     Reg2Py when retrieving a REG_DWORD value.  This corrects functions
     like winreg.QueryValueEx that may have been returning truncated
     values.

   - Issue #14420(87): Support the full DWORD (unsigned long) range in
     Py2Reg when passed a REG_DWORD value.  Fixes OverflowError in
     winreg.SetValueEx.

   - Issue #11939(88): Set the st_dev attribute of stat_result to allow
     Windows to take advantage of the
     os.path.samefile/sameopenfile/samestat implementations used by
     other platforms.

   - Issue #16772(89): The int() constructor’s second argument (base) no
     longer accepts non integer values.  Consistent with the behavior in
     Python 2.

   - Issue #14470(90): Remove w9xpopen support per PEP 11.

   - Issue #9856(91): Replace deprecation warning with raising TypeError
     in object.__format__.  Patch by Florent Xicluna.

   - Issue #16597(92): In buffered and text IO, call close() on the
     underlying stream if invoking flush() fails.

   - Issue #16722(93): In the bytes() constructor, try to call __bytes__
     on the argument before __index__.

   - Issue #16421(94): loading multiple modules from one shared object
     is now handled correctly (previously, the first module loaded from
     that file was silently returned).  Patch by Václav Šmilauer.

   - Issue #16602(95): When a weakref’s target was part of a long
     deallocation chain, the object could remain reachable through its
     weakref even though its refcount had dropped to zero.

   - Issue #16495(96): Remove extraneous NULL encoding check from
     bytes_decode().

   - Issue #16619(97): Create NameConstant AST class to represent None,
     True, and False literals.  As a result, these constants are never
     loaded at runtime from builtins.

   - Issue #16455(98): On FreeBSD and Solaris, if the locale is C, the
     ASCII/surrogateescape codec is now used (instead of the locale
     encoding) to decode the command line arguments.  This change fixes
     inconsistencies with os.fsencode() and os.fsdecode(), because these
     operating systems announce an ASCII locale encoding, but actually
     use the ISO-8859-1 encoding in practice.

   - Issue #16562(99): Optimize dict equality testing.  Patch by Serhiy
     Storchaka.

   - Issue #16588(100): Silence unused-but-set warnings in
     Python/thread_pthread

   - Issue #16592(101): stringlib_bytes_join doesn’t raise MemoryError
     on allocation failure.

   - Issue #16546(102): Fix: ast.YieldFrom argument is now mandatory.

   - Issue #16514(103): Fix regression causing a traceback when
     sys.path[0] is None (actually, any non-string or non-bytes type).

   - Issue #16306(104): Fix multiple error messages when unknown command
     line parameters where passed to the interpreter.  Patch by Hieu
     Nguyen.

   - Issue #16215(105): Fix potential double memory free in
     str.replace().  Patch by Serhiy Storchaka.

   - Issue #16290(106): A float return value from the __complex__
     special method is no longer accepted in the complex() constructor.

   - Issue #16416(107): On Mac OS X, operating system data are now
     always encoded/decoded to/from UTF-8/surrogateescape, instead of
     the locale encoding (which may be ASCII if no locale environment
     variable is set), to avoid inconsistencies with os.fsencode() and
     os.fsdecode() functions which are already using
     UTF-8/surrogateescape.

   - Issue #16453(108): Fix equality testing of dead weakref objects.

   - Issue #9535(109): Fix pending signals that have been received but
     not yet handled by Python to not persist after os.fork() in the
     child process.

   - Issue #14794(110): Fix slice.indices to return correct results for
     huge values, rather than raising OverflowError.

   - Issue #15001(111): fix segfault on "del sys.modules[’__main__’]".
     Patch by Victor Stinner.

   - Issue #8271(112): the utf-8 decoder now outputs the correct number
     of U+FFFD characters when used with the ’replace’ error handler on
     invalid utf-8 sequences.  Patch by Serhiy Storchaka, tests by Ezio
     Melotti.

   - Issue #5765(113): Apply a hard recursion limit in the compiler
     instead of blowing the stack and segfaulting.  Initial patch by
     Andrea Griffini.

   - Issue #16402(114): When slicing a range, fix shadowing of
     exceptions from __index__.

   - Issue #16336(115): fix input checking in the surrogatepass error
     handler.  Patch by Serhiy Storchaka.

   - Issue #8401(116): assigning an int to a bytearray slice (e.g.
     b[3:4] = 5) now raises an error.

   - Issue #7317(117): Display full tracebacks when an error occurs
     asynchronously.  Patch by Alon Horev with update by Alexey
     Kachayev.

   - Issue #16309(118): Make PYTHONPATH="" behavior the same as if
     PYTHONPATH not set at all.

   - Issue #10189(119): Improve the error reporting of SyntaxErrors
     related to global and nonlocal statements.

   - Fix segfaults on setting __qualname__ on builtin types and
     attempting to delete it on any type.

   - Issue #14625(120): Rewrite the UTF-32 decoder.  It is now 3x to 4x
     faster.  Patch written by Serhiy Storchaka.

   - Issue #16345(121): Fix an infinite loop when ‘fromkeys’ on a dict
     subclass received a nonempty dict from the constructor.

   - Issue #16271(122): Fix strange bugs that resulted from __qualname__
     appearing in a class’s __dict__ and on type.

   - Issue #12805(123): Make bytes.join and bytearray.join faster when
     the separator is empty.  Patch by Serhiy Storchaka.

   - Issue #6074(124): Ensure cached bytecode files can always be
     updated by the user that created them, even when the source file is
     read-only.

   - Issue #15958(125): bytes.join and bytearray.join now accept
     arbitrary buffer objects.

   - Issue #14783(126): Improve int() docstring and switch docstrings
     for str(), range(), and slice() to use multi-line signatures.

   - Issue #16160(127): Subclass support now works for
     types.SimpleNamespace.

   - Issue #16148(128): Implement PEP 424, adding operator.length_hint
     and PyObject_LengthHint.

   - Upgrade Unicode data (UCD) to version 6.2.

   - Issue #15379(129): Fix passing of non-BMP characters as integers
     for the charmap decoder (already working as unicode strings).
     Patch by Serhiy Storchaka.

   - Issue #15144(130): Fix possible integer overflow when handling
     pointers as integer values, by using ‘Py_uintptr_t’ instead of
     ‘size_t’.  Patch by Serhiy Storchaka.

   - Issue #15965(131): Explicitly cast ‘AT_FDCWD’ as (int).  Required
     on Solaris 10 (which defines ‘AT_FDCWD’ as ‘0xffd19553’), harmless
     on other platforms.

   - Issue #15839(132): Convert SystemErrors in *note super(): 311. to
     RuntimeErrors.

   - Issue #15448(133): Buffered IO now frees the buffer when closed,
     instead of when deallocating.

   - Issue #15846(134): Fix SystemError which happened when using *note
     ast.parse(): 98a. in an exception handler on code with syntax
     errors.

   - Issue #15897(135): zipimport.c doesn’t check return value of
     fseek().  Patch by Felipe Cruz.

   - Issue #15801(136): Make sure mappings passed to ’%’ formatting are
     actually subscriptable.

   - Issue #15111(137): __import__ should propagate ImportError when
     raised as a side-effect of a module triggered from using fromlist.

   - Issue #15022(138): Add pickle and comparison support to
     types.SimpleNamespace.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/16741

   (2) https://bugs.python.org/17899

   (3) https://bugs.python.org/10241

   (4) https://bugs.python.org/9035

   (5) https://bugs.python.org/18214

   (6) https://bugs.python.org/18112

   (7) https://bugs.python.org/18552

   (8) https://bugs.python.org/18560

   (9) https://bugs.python.org/18520

   (10) https://bugs.python.org/15905

   (11) https://bugs.python.org/18408

   (12) https://bugs.python.org/18344

   (13) https://bugs.python.org/18342

   (14) https://bugs.python.org/17872

   (15) https://bugs.python.org/18338

   (16) https://bugs.python.org/18426

   (17) https://bugs.python.org/17206

   (18) https://bugs.python.org/3329

   (19) https://bugs.python.org/18328

   (20) https://bugs.python.org/13483

   (21) https://bugs.python.org/18184

   (22) https://bugs.python.org/18111

   (23) https://bugs.python.org/18137

   (24) https://bugs.python.org/18183

   (25) https://bugs.python.org/18180

   (26) https://bugs.python.org/18038

   (27) https://bugs.python.org/17931

   (28) https://bugs.python.org/17932

   (29) https://bugs.python.org/18065

   (30) https://bugs.python.org/18088

   (31) https://bugs.python.org/17937

   (32) https://bugs.python.org/12370

   (33) https://bugs.python.org/17644

   (34) https://bugs.python.org/17237

   (35) https://bugs.python.org/17927

   (36) https://bugs.python.org/1545463

   (37) https://bugs.python.org/7330

   (38) https://bugs.python.org/1545463

   (39) https://bugs.python.org/17094

   (40) https://bugs.python.org/17408

   (41) https://bugs.python.org/5845

   (42) https://bugs.python.org/17115

   (43) https://bugs.python.org/17853

   (44) https://bugs.python.org/17863

   (45) https://bugs.python.org/17867

   (46) https://bugs.python.org/18698

   (47) https://bugs.python.org/17857

   (48) https://bugs.python.org/17413

   (49) https://bugs.python.org/17782

   (50) https://bugs.python.org/17722

   (51) https://bugs.python.org/16061

   (52) https://bugs.python.org/17715

   (53) https://bugs.python.org/17643

   (54) https://bugs.python.org/16447

   (55) https://bugs.python.org/17669

   (56) https://bugs.python.org/14439

   (57) https://bugs.python.org/17469

   (58) https://bugs.python.org/17619

   (59) https://bugs.python.org/17357

   (60) https://bugs.python.org/17610

   (61) https://bugs.python.org/17323

   (62) https://bugs.python.org/17328

   (63) https://bugs.python.org/17275

   (64) https://bugs.python.org/7963

   (65) https://bugs.python.org/8745

   (66) https://bugs.python.org/5308

   (67) https://bugs.python.org/12983

   (68) https://bugs.python.org/16967

   (69) https://bugs.python.org/17173

   (70) https://bugs.python.org/17137

   (71) https://bugs.python.org/17043

   (72) https://bugs.python.org/17098

   (73) https://bugs.python.org/16979

   (74) https://bugs.python.org/16772

   (75) https://bugs.python.org/10156

   (76) https://bugs.python.org/16980

   (77) https://bugs.python.org/16975

   (78) https://bugs.python.org/14850

   (79) https://bugs.python.org/16613

   (80) https://bugs.python.org/16730

   (81) https://bugs.python.org/16906

   (82) https://bugs.python.org/11461

   (83) https://bugs.python.org/16856

   (84) https://bugs.python.org/16367

   (85) https://bugs.python.org/16761

   (86) https://bugs.python.org/16759

   (87) https://bugs.python.org/14420

   (88) https://bugs.python.org/11939

   (89) https://bugs.python.org/16772

   (90) https://bugs.python.org/14470

   (91) https://bugs.python.org/9856

   (92) https://bugs.python.org/16597

   (93) https://bugs.python.org/16722

   (94) https://bugs.python.org/16421

   (95) https://bugs.python.org/16602

   (96) https://bugs.python.org/16495

   (97) https://bugs.python.org/16619

   (98) https://bugs.python.org/16455

   (99) https://bugs.python.org/16562

   (100) https://bugs.python.org/16588

   (101) https://bugs.python.org/16592

   (102) https://bugs.python.org/16546

   (103) https://bugs.python.org/16514

   (104) https://bugs.python.org/16306

   (105) https://bugs.python.org/16215

   (106) https://bugs.python.org/16290

   (107) https://bugs.python.org/16416

   (108) https://bugs.python.org/16453

   (109) https://bugs.python.org/9535

   (110) https://bugs.python.org/14794

   (111) https://bugs.python.org/15001

   (112) https://bugs.python.org/8271

   (113) https://bugs.python.org/5765

   (114) https://bugs.python.org/16402

   (115) https://bugs.python.org/16336

   (116) https://bugs.python.org/8401

   (117) https://bugs.python.org/7317

   (118) https://bugs.python.org/16309

   (119) https://bugs.python.org/10189

   (120) https://bugs.python.org/14625

   (121) https://bugs.python.org/16345

   (122) https://bugs.python.org/16271

   (123) https://bugs.python.org/12805

   (124) https://bugs.python.org/6074

   (125) https://bugs.python.org/15958

   (126) https://bugs.python.org/14783

   (127) https://bugs.python.org/16160

   (128) https://bugs.python.org/16148

   (129) https://bugs.python.org/15379

   (130) https://bugs.python.org/15144

   (131) https://bugs.python.org/15965

   (132) https://bugs.python.org/15839

   (133) https://bugs.python.org/15448

   (134) https://bugs.python.org/15846

   (135) https://bugs.python.org/15897

   (136) https://bugs.python.org/15801

   (137) https://bugs.python.org/15111

   (138) https://bugs.python.org/15022


File: python.info,  Node: Library<16>,  Next: IDLE<12>,  Prev: Core and Builtins<15>,  Up: Python 3 4 0 Alpha 1

1.14.16.2 Library
.................

   - Issue #4331(1): Added functools.partialmethod (Initial patch by
     Alon Horev)

   - Issue #13461(2): Fix a crash in the TextIOWrapper.tell method on
     64-bit platforms.  Patch by Yogesh Chaudhari.

   - Issue #18681(3): Fix a NameError in importlib.reload() (noticed by
     Weizhao Li).

   - Issue #14323(4): Expanded the number of digits in the coefficients
     for the RGB – YIQ conversions so that they match the FCC NTSC
     versions.

   - Issue #17998(5): Fix an internal error in regular expression
     engine.

   - Issue #17557(6): Fix os.getgroups() to work with the modified
     behavior of getgroups(2) on OS X 10.8.  Original patch by Mateusz
     Lenik.

   - Issue #18608(7): Avoid keeping a strong reference to the locale
     module inside the _io module.

   - Issue #18619(8): Fix atexit leaking callbacks registered from
     sub-interpreters, and make it GC-aware.

   - Issue #15699(9): The readline module now uses PEP 3121-style module
     initialization, so as to reclaim allocated resources (Python
     callbacks) at shutdown.  Original patch by Robin Schreiber.

   - Issue #17616(10): wave.open now supports the context management
     protocol.

   - Issue #18599(11): Fix name attribute of _sha1.sha1() object.  It
     now returns ’SHA1’ instead of ’SHA’.

   - Issue #13266(12): Added inspect.unwrap to easily unravel
     __wrapped__ chains (initial patch by Daniel Urban and Aaron Iles)

   - Issue #18561(13): Skip name in ctypes’ _build_callargs() if name is
     NULL.

   - Issue #18559(14): Fix NULL pointer dereference error in _pickle
     module

   - Issue #18556(15): Check the return type of PyUnicode_AsWideChar()
     in ctype’s U_set().

   - Issue #17818(16): aifc.getparams now returns a namedtuple.

   - Issue #18549(17): Eliminate dead code in socket_ntohl()

   - Issue #18530(18): Remove additional stat call from
     posixpath.ismount.  Patch by Alex Gaynor.

   - Issue #18514(19): Fix unreachable Py_DECREF() call in
     PyCData_FromBaseObj()

   - Issue #9177(20): Calling read() or write() now raises ValueError,
     not AttributeError, on a closed SSL socket.  Patch by Senko Rasic.

   - Issue #18513(21): Fix behaviour of cmath.rect w.r.t.  signed zeros
     on OS X 10.8 + gcc.

   - Issue #18479(22): Changed venv Activate.ps1 to make deactivate a
     function, and removed Deactivate.ps1.

   - Issue #18480(23): Add missing call to PyType_Ready to the
     _elementtree extension.

   - Issue #17778(24): Fix test discovery for test_multiprocessing.
     (Patch by Zachary Ware.)

   - Issue #18393(25): The private module _gestalt and private functions
     platform._mac_ver_gestalt, platform._mac_ver_lookup and
     platform._bcd2str have been removed.  This does not affect the
     public interface of the platform module.

   - Issue #17482(26): functools.update_wrapper (and functools.wraps)
     now set the __wrapped__ attribute correctly even if the underlying
     function has a __wrapped__ attribute set.

   - Issue #18431(27): The new email header parser now decodes RFC2047
     encoded words in structured headers.

   - Issue #18432(28): The sched module’s queue method was incorrectly
     returning an iterator instead of a list.

   - Issue #18044(29): The new email header parser was mis-parsing
     encoded words where an encoded character immediately followed the
     ’?’ that follows the CTE character, resulting in a decoding
     failure.  They are now decoded correctly.

   - Issue #18101(30): Tcl.split() now process strings nested in a tuple
     as it do with byte strings.

   - Issue #18116(31): getpass was always getting an error when testing
     /dev/tty, and thus was always falling back to stdin, and would then
     raise an exception if stdin could not be used (such as /dev/null).
     It also leaked an open file.  All of these issues are now fixed.

   - Issue #17198(32): Fix a NameError in the dbm module.  Patch by
     Valentina Mukhamedzhanova.

   - Issue #18013(33): Fix cgi.FieldStorage to parse the W3C sample
     form.

   - Issue #18020(34): improve html.escape speed by an order of
     magnitude.  Patch by Matt Bryant.

   - Issue #18347(35): ElementTree’s html serializer now preserves the
     case of closing tags.

   - Issue #17261(36): Ensure multiprocessing’s proxies use proper
     address.

   - Issue #18343(37): faulthandler.register() now keeps the previous
     signal handler when the function is called twice, so
     faulthandler.unregister() restores correctly the original signal
     handler.

   - Issue #17097(38): Make multiprocessing ignore EINTR.

   - Issue #18339(39): Negative ints keys in unpickler.memo dict no
     longer cause a segfault inside the _pickle C extension.

   - Issue #18240(40): The HMAC module is no longer restricted to bytes
     and accepts any bytes-like object, e.g.  memoryview.  Original
     patch by Jonas Borgström.

   - Issue #18224(41): Removed pydoc script from created venv, as it
     causes problems on Windows and adds no value over and above python
     -m pydoc ...

   - Issue #18155(42): The csv module now correctly handles csv files
     that use a delimter character that has a special meaning in
     regexes, instead of throwing an exception.

   - Issue #14360(43): encode_quopri can now be successfully used as an
     encoder when constructing a MIMEApplication object.

   - Issue #11390(44): Add -o and -f command line options to the doctest
     CLI to specify doctest options (and convert it to using argparse).

   - Issue #18135(45): ssl.SSLSocket.write() now raises an OverflowError
     if the input string in longer than 2 gigabytes, and
     ssl.SSLContext.load_cert_chain() raises a ValueError if the
     password is longer than 2 gigabytes.  The ssl module does not
     support partial write.

   - Issue #11016(46): Add C implementation of the stat module as _stat.

   - Issue #18248(47): Fix libffi build on AIX.

   - Issue #18259(48): Declare sethostname in socketmodule.c for AIX

   - Issue #18147(49): Add diagnostic functions to ssl.SSLContext().
     get_ca_list() lists all loaded CA certificates and
     cert_store_stats() returns amount of loaded X.509 certs, X.509 CA
     certs and CRLs.

   - Issue #18167(50): cgi.FieldStorage no longer fails to handle
     multipart/form-data when rn appears at end of 65535 bytes without
     other newlines.

   - Issue #18076(51): Introduce importlib.util.decode_source().

   - Issue #18357(52): add tests for dictview set difference.  Patch by
     Fraser Tweedale.

   - importlib.abc.SourceLoader.get_source() no longer changes
     SyntaxError or UnicodeDecodeError into ImportError.

   - Issue #18058(53), 18057: Make the namespace package loader meet the
     importlib.abc.InspectLoader ABC, allowing for namespace packages to
     work with runpy.

   - Issue #17177(54): The imp module is pending deprecation.

   - subprocess: Prevent a possible double close of parent pipe fds when
     the subprocess exec runs into an error.  Prevent a regular
     multi-close of the /dev/null fd when any of stdin, stdout and
     stderr was set to DEVNULL.

   - Issue #18194(55): Introduce importlib.util.cache_from_source() and
     source_from_cache() while documenting the equivalent functions in
     imp as deprecated.

   - Issue #17907(56): Document imp.new_module() as deprecated in favour
     of types.ModuleType.

   - Issue #18192(57): Introduce importlib.util.MAGIC_NUMBER and
     document as deprecated imp.get_magic().

   - Issue #18149(58): Add filecmp.clear_cache() to manually clear the
     filecmp cache.  Patch by Mark Levitt

   - Issue #18193(59): Add importlib.reload().

   - Issue #18157(60): Stop using imp.load_module() in pydoc.

   - Issue #16102(61): Make uuid._netbios_getnode() work again on Python
     3.

   - Issue #17134(62): Add ssl.enum_cert_store() as interface to
     Windows’ cert store.

   - Issue #18143(63): Implement ssl.get_default_verify_paths() in order
     to debug the default locations for cafile and capath.

   - Issue #17314(64): Move multiprocessing.forking over to importlib.

   - Issue #11959(65): SMTPServer and SMTPChannel now take an optional
     map, use of which avoids affecting global state.

   - Issue #18109(66): os.uname() now decodes fields from the locale
     encoding, and socket.gethostname() now decodes the hostname from
     the locale encoding, instead of using the UTF-8 encoding in strict
     mode.

   - Issue #18089(67): Implement
     importlib.abc.InspectLoader.load_module.

   - Issue #18088(68): Introduce importlib.abc.Loader.init_module_attrs
     for setting module attributes.  Leads to the pending deprecation of
     importlib.util.module_for_loader.

   - Issue #17403(69): urllib.parse.robotparser normalizes the urls
     before adding to ruleline.  This helps in handling certain types
     invalid urls in a conservative manner.  Patch contributed by Mher
     Movsisyan.

   - Issue #18070(70): Have importlib.util.module_for_loader() set
     attributes unconditionally in order to properly support reloading.

   - Added importlib.util.module_to_load to return a context manager to
     provide the proper module object to load.

   - Issue #18025(71): Fixed a segfault in io.BufferedIOBase.readinto()
     when raw stream’s read() returns more bytes than requested.

   - Issue #18011(72): As was originally intended, base64.b32decode()
     now raises a binascii.Error if there are non-b32-alphabet
     characters present in the input string, instead of a TypeError.

   - Issue #18072(73): Implement importlib.abc.InspectLoader.get_code()
     and importlib.abc.ExecutionLoader.get_code().

   - Issue #8240(74): Set the SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER flag
     on SSL sockets.

   - Issue #17269(75): Workaround for socket.getaddrinfo crash on MacOS
     X with port None or "0" and flags AI_NUMERICSERV.

   - Issue #16986(76): ElementTree now correctly works with string input
     when the internal XML encoding is not UTF-8 or US-ASCII.

   - Issue #17996(77): socket module now exposes AF_LINK constant on BSD
     and OSX.

   - Issue #17900(78): Allowed pickling of recursive OrderedDicts.
     Decreased pickled size and pickling time.

   - Issue #17914(79): Add os.cpu_count().  Patch by Yogesh Chaudhari,
     based on an initial patch by Trent Nelson.

   - Issue #17812(80): Fixed quadratic complexity of base64.b32encode().
     Optimize base64.b32encode() and base64.b32decode() (speed up to
     3x).

   - Issue #17980(81): Fix possible abuse of ssl.match_hostname() for
     denial of service using certificates with many wildcards
     (CVE-2013-2099).

   - Issue #15758(82): Fix FileIO.readall() so it no longer has O(n**2)
     complexity.

   - Issue #14596(83): The struct.Struct() objects now use a more
     compact implementation.

   - Issue #17981(84): logging’s SysLogHandler now closes the socket
     when it catches socket OSErrors.

   - Issue #17964(85): Fix os.sysconf(): the return type of the C
     sysconf() function is long, not int.

   - Fix typos in the multiprocessing module.

   - Issue #17754(86): Make ctypes.util.find_library() independent of
     the locale.

   - Issue #17968(87): Fix memory leak in os.listxattr().

   - Issue #17606(88): Fixed support of encoded byte strings in the
     XMLGenerator characters() and ignorableWhitespace() methods.
     Original patch by Sebastian Ortiz Vasquez.

   - Issue #17732(89): Ignore distutils.cfg options pertaining to
     install paths if a virtual environment is active.

   - Issue #17915(90): Fix interoperability of xml.sax with file objects
     returned by codecs.open().

   - Issue #16601(91): Restarting iteration over tarfile really restarts
     rather than continuing from where it left off.  Patch by Michael
     Birtwell.

   - Issue #17289(92): The readline module now plays nicer with external
     modules or applications changing the
     rl_completer_word_break_characters global variable.  Initial patch
     by Bradley Froehle.

   - Issue #12181(93): select module: Fix struct kevent definition on
     OpenBSD 64-bit platforms.  Patch by Federico Schwindt.

   - Issue #11816(94): multiple improvements to the dis module:
     get_instructions generator, ability to redirect output to a file,
     Bytecode and Instruction abstractions.  Patch by Nick Coghlan, Ryan
     Kelly and Thomas Kluyver.

   - Issue #13831(95): Embed stringification of remote traceback in
     local traceback raised when pool task raises an exception.

   - Issue #15528(96): Add weakref.finalize to support finalization
     using weakref callbacks.

   - Issue #14173(97): Avoid crashing when reading a signal handler
     during interpreter shutdown.

   - Issue #15902(98): Fix imp.load_module() accepting None as a file
     when loading an extension module.

   - Issue #13721(99): SSLSocket.getpeercert() and
     SSLSocket.do_handshake() now raise an OSError with ENOTCONN,
     instead of an AttributeError, when the SSLSocket is not connected.

   - Issue #14679(100): add an __all__ (that contains only HTMLParser)
     to html.parser.

   - Issue #17802(101): Fix an UnboundLocalError in html.parser.
     Initial tests by Thomas Barlow.

   - Issue #17358(102): Modules loaded by imp.load_source() and
     load_compiled() (and by extention load_module()) now have a better
     chance of working when reloaded.

   - Issue #17804(103): New function ‘struct.iter_unpack’ allows for
     streaming struct unpacking.

   - Issue #17830(104): When keyword.py is used to update a keyword
     file, it now preserves the line endings of the original file.

   - Issue #17272(105): Making the urllib.request’s Request.full_url a
     descriptor.  Fixes bugs with assignment to full_url.  Patch by
     Demian Brecht.

   - Issue #17353(106): Plistlib emitted empty data tags with deeply
     nested datastructures

   - Issue #11714(107): Use ’with’ statements to assure a Semaphore
     releases a condition variable.  Original patch by Thomas Rachel.

   - Issue #16624(108): *note subprocess.check_output: 279. now accepts
     an *note input: 6cf. argument, allowing the subprocess’s stdin to
     be provided as a (byte) string.  Patch by Zack Weinberg.

   - Issue #17795(109): Reverted backwards-incompatible change in
     SysLogHandler with Unix domain sockets.

   - Issue #16694(110): Add a pure Python implementation of the operator
     module.  Patch by Zachary Ware.

   - Issue #11182(111): remove the unused and undocumented pydoc.Scanner
     class.  Patch by Martin Morrison.

   - Issue #17741(112): Add ElementTree.XMLPullParser, an event-driven
     parser for non-blocking applications.

   - Issue #17555(113): Fix ForkAwareThreadLock so that size of after
     fork registry does not grow exponentially with generation of
     process.

   - Issue #17707(114): fix regression in multiprocessing.Queue’s get()
     method where it did not block for short timeouts.

   - Issue #17720(115): Fix the Python implementation of
     pickle.Unpickler to correctly process the APPENDS opcode when it is
     used on non-list objects.

   - Issue #17012(116): shutil.which() no longer falls back to the PATH
     environment variable if an empty path argument is specified.  Patch
     by Serhiy Storchaka.

   - Issue #17710(117): Fix pickle raising a SystemError on bogus input.

   - Issue #17341(118): Include the invalid name in the error messages
     from re about invalid group names.

   - Issue #17702(119): os.environ now raises KeyError with the original
     environment variable name (str on UNIX), instead of using the
     encoded name (bytes on UNIX).

   - Issue #16163(120): Make the importlib based version of
     pkgutil.iter_importers work for submodules.  Initial patch by
     Berker Peksag.

   - Issue #16804(121): Fix a bug in the ’site’ module that caused
     running ’python -S -m site’ to incorrectly throw an exception.

   - Issue #15480(122): Remove the deprecated and unused TYPE_INT64 code
     from marshal.  Initial patch by Daniel Riti.

   - Issue #2118(123): SMTPException is now a subclass of OSError.

   - Issue #17016(124): Get rid of possible pointer wraparounds and
     integer overflows in the re module.  Patch by Nickolai Zeldovich.

   - Issue #16658(125): add missing return to HTTPConnection.send()
     Patch by Jeff Knupp.

   - Issue #9556(126): the logging package now allows specifying a
     time-of-day for a TimedRotatingFileHandler to rotate.

   - Issue #14971(127): unittest test discovery no longer gets confused
     when a function has a different __name__ than its name in the
     TestCase class dictionary.

   - Issue #17487(128): The wave getparams method now returns a
     namedtuple rather than a plain tuple.

   - Issue #17675(129): socket repr() provides local and remote
     addresses (if any).  Patch by Giampaolo Rodola’

   - Issue #17093(130): Make the ABCs in importlib.abc provide default
     values or raise reasonable exceptions for their methods to make
     them more amenable to super() calls.

   - Issue #17566(131): Make importlib.abc.Loader.module_repr() optional
     instead of an abstractmethod; now it raises NotImplementedError so
     as to be ignored by default.

   - Issue #17678(132): Remove the use of deprecated method in
     http/cookiejar.py by changing the call to get_origin_req_host() to
     origin_req_host.

   - Issue #17666(133): Fix reading gzip files with an extra field.

   - Issue #16475(134): Support object instancing, recursion and
     interned strings in marshal

   - Issue #17502(135): Process DEFAULT values in mock side_effect that
     returns iterator.

   - Issue #16795(136): On the ast.arguments object, unify vararg with
     varargannotation and kwarg and kwargannotation.  Change the column
     offset of ast.Attribute to be at the attribute name.

   - Issue #17434(137): Properly raise a SyntaxError when a string
     occurs between future imports.

   - Issue #17117(138): Import and @importlib.util.set_loader now set
     __loader__ when it has a value of None or the attribute doesn’t
     exist.

   - Issue #17032(139): The "global" in the "NameError: global name ’x’
     is not defined" error message has been removed.  Patch by Ram
     Rachum.

   - Issue #18080(140): When building a C extension module on OS X, if
     the compiler is overriden with the CC environment variable, use the
     new compiler as the default for linking if LDSHARED is not also
     overriden.  This restores Distutils behavior introduced in 3.2.3
     and inadvertently dropped in 3.3.0.

   - Issue #18113(141): Fixed a refcount leak in the curses.panel
     module’s set_userptr() method.  Reported by Atsuo Ishimoto.

   - Implement PEP 443 "Single-dispatch generic functions".

   - Implement PEP 435 "Adding an Enum type to the Python standard
     library".

   - Issue #15596(142): Faster pickling of unicode strings.

   - Issue #17572(143): Avoid chained exceptions when passing bad
     directives to time.strptime().  Initial patch by Claudiu Popa.

   - Issue #17435(144): threading.Timer’s __init__ method no longer uses
     mutable default values for the args and kwargs parameters.

   - Issue #17526(145): fix an IndexError raised while passing code
     without filename to inspect.findsource().  Initial patch by Tyler
     Doyle.

   - Issue #17540(146): Added style parameter to logging formatter
     configuration by dict.

   - Issue #16692(147): The ssl module now supports TLS 1.1 and TLS 1.2.
     Initial patch by Michele Orrù.

   - Issue #17025(148): multiprocessing: Reduce Queue and SimpleQueue
     contention.

   - Issue #17536(149): Add to webbrowser’s browser list: www-browser,
     x-www-browser, iceweasel, iceape.

   - Issue #17150(150): pprint now uses line continuations to wrap long
     string literals.

   - Issue #17488(151): Change the subprocess.Popen bufsize parameter
     default value from unbuffered (0) to buffering (-1) to match the
     behavior existing code expects and match the behavior of the
     subprocess module in Python 2 to avoid introducing hard to track
     down bugs.

   - Issue #17521(152): Corrected non-enabling of logger following two
     calls to fileConfig().

   - Issue #17508(153): Corrected logging MemoryHandler configuration in
     dictConfig() where the target handler wasn’t configured first.

   - Issue #17209(154): curses.window.get_wch() now correctly handles
     KeyboardInterrupt (CTRL+c).

   - Issue #5713(155): smtplib now handles 421 (closing connection)
     error codes when sending mail by closing the socket and reporting
     the 421 error code via the exception appropriate to the command
     that received the error response.

   - Issue #16997(156): unittest.TestCase now provides a subTest()
     context manager to procedurally generate, in an easy way, small
     test instances.

   - Issue #17485(157): Also delete the Request Content-Length header if
     the data attribute is deleted.  (Follow on to issue Issue
     #16464(158)).

   - Issue #15927(159): CVS now correctly parses escaped newlines and
     carriage when parsing with quoting turned off.

   - Issue #17467(160): add readline and readlines support to mock_open
     in unittest.mock.

   - Issue #13248(161): removed deprecated and undocumented
     difflib.isbjunk, isbpopular.

   - Issue #17192(162): Update the ctypes module’s libffi to v3.0.13.
     This specifically addresses a stack misalignment issue on x86 and
     issues on some more recent platforms.

   - Issue #8862(163): Fixed curses cleanup when getkey is interrputed
     by a signal.

   - Issue #17443(164): imaplib.IMAP4_stream was using the default
     unbuffered IO in subprocess, but the imap code assumes buffered IO.
     In Python2 this worked by accident.  IMAP4_stream now explicitly
     uses buffered IO.

   - Issue #17476(165): Fixed regression relative to Python2 in
     undocumented pydoc ’allmethods’; it was missing unbound methods on
     the class.

   - Issue #17474(166): Remove the deprecated methods of Request class.

   - Issue #16709(167): unittest discover order is no-longer filesystem
     specific.  Patch by Jeff Ramnani.

   - Use the HTTPS PyPI url for upload, overriding any plain HTTP URL in
     pypirc.

   - Issue #5024(168): sndhdr.whichhdr now returns the frame count for
     WAV files rather than -1.

   - Issue #17460(169): Remove the strict argument of HTTPConnection and
     removing the DeprecationWarning being issued from 3.2 onwards.

   - Issue #16880(170): Do not assume _imp.load_dynamic() is defined in
     the imp module.

   - Issue #16389(171): Fixed a performance regression relative to
     Python 3.1 in the caching of compiled regular expressions.

   - Added missing FeedParser and BytesFeedParser to
     email.parser.__all__.

   - Issue #17431(172): Fix missing import of BytesFeedParser in
     email.parser.

   - Issue #12921(173): http.server’s send_error takes an explain
     argument to send more information in response.  Patch contributed
     by Karl.

   - Issue #17414(174): Add timeit, repeat, and default_timer to
     timeit.__all__.

   - Issue #1285086(175): Get rid of the refcounting hack and speed up
     urllib.parse.unquote() and urllib.parse.unquote_to_bytes().

   - Issue #17099(176): Have importlib.find_loader() raise ValueError
     when __loader__ is not set, harmonizing with what happens when the
     attribute is set to None.

   - Expose the O_PATH constant in the os module if it is available.

   - Issue #17368(177): Fix an off-by-one error in the Python JSON
     decoder that caused a failure while decoding empty object literals
     when object_pairs_hook was specified.

   - Issue #17385(178): Fix quadratic behavior in threading.Condition.
     The FIFO queue now uses a deque instead of a list.

   - Issue #15806(179): Add contextlib.ignore().  This creates a context
     manager to ignore specified exceptions, replacing the "except
     SomeException: pass" idiom.

   - Issue #14645(180): The email generator classes now produce output
     using the specified linesep throughout.  Previously if the prolog,
     epilog, or body were stored with a different linesep, that linesep
     was used.  This fix corrects an RFC non-compliance issue with
     smtplib.send_message.

   - Issue #17278(181): Fix a crash in heapq.heappush() and
     heapq.heappop() when the list is being resized concurrently.

   - Issue #16962(182): Use getdents64 instead of the obsolete getdents
     syscall in the subprocess module on Linux.

   - Issue #16935(183): unittest now counts the module as skipped if it
     raises SkipTest, instead of counting it as an error.  Patch by
     Zachary Ware.

   - Issue #17018(184): Make Process.join() retry if os.waitpid() fails
     with EINTR.

   - Issue #17223(185): array module: Fix a crasher when converting an
     array containing invalid characters (outside range [U+0000;
     U+10ffff]) to Unicode: repr(array), str(array) and
     array.tounicode().  Patch written by Manuel Jacob.

   - Issue #17197(186): profile/cProfile modules refactored so that code
     of run() and runctx() utility functions is not duplicated in both
     modules.

   - Issue #14720(187): sqlite3: Convert datetime microseconds
     correctly.  Patch by Lowe Thiderman.

   - Issue #15132(188): Allow a list for the defaultTest argument of
     unittest.TestProgram.  Patch by Jyrki Pulliainen.

   - Issue #17225(189): JSON decoder now counts columns in the first
     line starting with 1, as in other lines.

   - Issue #6623(190): Added explicit DeprecationWarning for
     ftplib.netrc, which has been deprecated and undocumented for a long
     time.

   - Issue #13700(191): Fix byte/string handling in imaplib
     authentication when an authobject is specified.

   - Issue #13153(192): Tkinter functions now raise TclError instead of
     ValueError when a string argument contains non-BMP character.

   - Issue #9669(193): Protect re against infinite loops on zero-width
     matching in non-greedy repeat.  Patch by Matthew Barnett.

   - Issue #13169(194): The maximal repetition number in a regular
     expression has been increased from 65534 to 2147483647 (on 32-bit
     platform) or 4294967294 (on 64-bit).

   - Issue #17143(195): Fix a missing import in the trace module.
     Initial patch by Berker Peksag.

   - Issue #15220(196): email.feedparser’s line splitting algorithm is
     now simpler and faster.

   - Issue #16743(197): Fix mmap overflow check on 32 bit Windows.

   - Issue #16996(198): webbrowser module now uses shutil.which() to
     find a web-browser on the executable search path.

   - Issue #16800(199): tempfile.gettempdir() no longer left temporary
     files when the disk is full.  Original patch by Amir Szekely.

   - Issue #17192(200): Import libffi-3.0.12.

   - Issue #16564(201): Fixed regression relative to Python2 in the
     operation of email.encoders.encode_7or8bit when used with binary
     data.

   - Issue #17052(202): unittest discovery should use self.testLoader.

   - Issue #4591(203): Uid and gid values larger than 2**31 are
     supported now.

   - Issue #17141(204): random.vonmisesvariate() no longer hangs for
     large kappas.

   - Issue #17149(205): Fix random.vonmisesvariate to always return
     results in [0, 2*math.pi].

   - Issue #1470548(206): XMLGenerator now works with binary output
     streams.

   - Issue #6975(207): os.path.realpath() now correctly resolves
     multiple nested symlinks on POSIX platforms.

   - Issue #13773(208): sqlite3.connect() gets a new ‘uri’ parameter to
     pass the filename as a URI, allowing to pass custom options.

   - Issue #16564(209): Fixed regression relative to Python2 in the
     operation of email.encoders.encode_noop when used with binary data.

   - Issue #10355(210): The mode, name, encoding and newlines properties
     now work on SpooledTemporaryFile objects even when they have not
     yet rolled over.  Obsolete method xreadline (which has never worked
     in Python 3) has been removed.

   - Issue #16686(211): Fixed a lot of bugs in audioop module.  Fixed
     crashes in avgpp(), maxpp() and ratecv().  Fixed an integer
     overflow in add(), bias(), and ratecv().  reverse(), lin2lin() and
     ratecv() no more lose precision for 32-bit samples.  max() and
     rms() no more returns a negative result and various other functions
     now work correctly with 32-bit sample -0x80000000.

   - Issue #17073(212): Fix some integer overflows in sqlite3 module.

   - Issue #16723(213): httplib.HTTPResponse no longer marked closed
     when the connection is automatically closed.

   - Issue #15359(214): Add CAN_BCM protocol support to the socket
     module.  Patch by Brian Thorne.

   - Issue #16948(215): Fix quoted printable body encoding for
     non-latin1 character sets in the email package.

   - Issue #16811(216): Fix folding of headers with no value in the
     provisional email policies.

   - Issue #17132(217): Update symbol for "yield from" grammar changes.

   - Issue #17076(218): Make copying of xattrs more tolerant of missing
     FS support.  Patch by Thomas Wouters.

   - Issue #17089(219): Expat parser now correctly works with string
     input when the internal XML encoding is not UTF-8 or US-ASCII. It
     also now accepts bytes and strings larger than 2 GiB.

   - Issue #6083(220): Fix multiple segmentation faults occured when
     PyArg_ParseTuple parses nested mutating sequence.

   - Issue #5289(221): Fix ctypes.util.find_library on Solaris.

   - Issue #17106(222): Fix a segmentation fault in io.TextIOWrapper
     when an underlying stream or a decoder produces data of an
     unexpected type (i.e.  when io.TextIOWrapper initialized with text
     stream or use bytes-to-bytes codec).

   - Issue #17015(223): When it has a spec, a Mock object now inspects
     its signature when matching calls, so that arguments can be matched
     positionally or by name.

   - Issue #15633(224): httplib.HTTPResponse is now mark closed when the
     server sends less than the advertised Content-Length.

   - Issue #12268(225): The io module file object write methods no
     longer abort early when one of its write system calls is
     interrupted (EINTR).

   - Issue #6972(226): The zipfile module no longer overwrites files
     outside of its destination path when extracting malicious zip
     files.

   - Issue #4844(227): ZipFile now raises BadZipFile when opens a ZIP
     file with an incomplete "End of Central Directory" record.
     Original patch by Guilherme Polo and Alan McIntyre.

   - Issue #17071(228): Signature.bind() now works when one of the
     keyword arguments is named ‘self’.

   - Issue #12004(229): Fix an internal error in PyZipFile when writing
     an invalid Python file.  Patch by Ben Morgan.

   - Have py_compile use importlib as much as possible to avoid code
     duplication.  Code now raises FileExistsError if the file path to
     be used for the byte-compiled file is a symlink or non-regular file
     as a warning that import will not keep the file path type if it
     writes to that path.

   - Issue #16972(230): Have site.addpackage() consider already known
     paths even when none are explicitly passed in.  Bug report and fix
     by Kirill.

   - Issue #1602133(231): on Mac OS X a shared library build
     (‘--enable-shared’) now fills the ‘os.environ’ variable correctly.

   - Issue #15505(232): *note unittest.installHandler: 98c. no longer
     assumes SIGINT handler is set to a callable object.

   - Issue #13454(233): Fix a crash when deleting an iterator created by
     itertools.tee() if all other iterators were very advanced before.

   - Issue #12411(234): Fix to cgi.parse_multipart to correctly use
     bytes boundaries and bytes data.  Patch by Jonas Wagner.

   - Issue #16957(235): shutil.which() no longer searches a bare file
     name in the current directory on Unix and no longer searches a
     relative file path with a directory part in PATH directories.
     Patch by Thomas Kluyver.

   - Issue #1159051(236): GzipFile now raises EOFError when reading a
     corrupted file with truncated header or footer.

   - Issue #16993(237): shutil.which() now preserves the case of the
     path and extension on Windows.

   - Issue #16992(238): On Windows in signal.set_wakeup_fd, validate the
     file descriptor argument.

   - Issue #16422(239): For compatibility with the Python version, the C
     version of decimal now uses strings instead of integers for
     rounding mode constants.

   - Issue #15861(240): tkinter now correctly works with lists and
     tuples containing strings with whitespaces, backslashes or
     unbalanced braces.

   - Issue #9720(241): zipfile now writes correct local headers for
     files larger than 4 GiB.

   - Issue #16955(242): Fix the poll() method for multiprocessing’s
     socket connections on Windows.

   - SSLContext.load_dh_params() now properly closes the input file.

   - Issue #15031(243): Refactor some .pyc management code to cut down
     on code duplication.  Thanks to Ronan Lamy for the report and
     taking an initial stab at the problem.

   - Issue #16398(244): Optimize deque.rotate() so that it only moves
     pointers and doesn’t touch the underlying data with increfs and
     decrefs.

   - Issue #16900(245): Issue a ResourceWarning when an ssl socket is
     left unclosed.

   - Issue #13899(246): A, Z, and B now correctly match the A, Z, and B
     literals when used inside character classes (e.g.  ’[A]’).  Patch
     by Matthew Barnett.

   - Issue #15545(247): Fix regression in sqlite3’s iterdump method
     where it was failing if the connection used a row factory (such as
     sqlite3.Row) that produced unsortable objects.  (Regression was
     introduced by fix for 9750).

   - fcntl: add F_DUPFD_CLOEXEC constant, available on Linux 2.6.24+.

   - Issue #15972(248): Fix error messages when os functions expecting a
     file name or file descriptor receive the incorrect type.

   - Issue #8109(249): The ssl module now has support for server-side
     SNI, thanks to a ‘SSLContext.set_servername_callback()’ method.
     Patch by Daniel Black.

   - Issue #16860(250): In tempfile, use O_CLOEXEC when available to set
     the close-on-exec flag atomically.

   - Issue #16674(251): random.getrandbits() is now 20-40% faster for
     small integers.

   - Issue #16009(252): JSON error messages now provide more
     information.

   - Issue #16828(253): Fix error incorrectly raised by
     bz2.compress(b’’) and bz2.BZ2Compressor.compress(b’’).  Initial
     patch by Martin Packman.

   - Issue #16833(254): In http.client.HTTPConnection, do not
     concatenate the request headers and body when the payload exceeds
     16 KB, since it can consume more memory for no benefit.  Patch by
     Benno Leslie.

   - Issue #16541(255): tk_setPalette() now works with keyword
     arguments.

   - Issue #16820(256): In configparser, ‘parser.popitem()’ no longer
     raises ValueError.  This makes ‘parser.clean()’ work correctly.

   - Issue #16820(257): In configparser, ‘parser['section'] = {}’ now
     preserves section order within the parser.  This makes
     ‘parser.update()’ preserve section order as well.

   - Issue #16820(258): In configparser, ‘parser['DEFAULT'] = {}’ now
     correctly clears previous values stored in the default section.
     Same goes for ‘parser.update({'DEFAULT': {}})’.

   - Issue #9586(259): Redefine SEM_FAILED on MacOSX to keep compiler
     happy.

   - Issue #16787(260): Increase asyncore and asynchat default output
     buffers size, to decrease CPU usage and increase throughput.

   - Issue #10527(261): make multiprocessing use poll() instead of
     select() if available.

   - Issue #16688(262): Now regexes contained backreferences correctly
     work with non-ASCII strings.  Patch by Matthew Barnett.

   - Issue #16486(263): Make aifc files act as context managers.

   - Issue #16485(264): Now file descriptors are closed if file header
     patching failed on closing an aifc file.

   - Issue #16640(265): Run less code under a lock in sched module.

   - Issue #16165(266): sched.scheduler.run() no longer blocks a
     scheduler for other threads.

   - Issue #16641(267): Default values of sched.scheduler.enter() are no
     longer modifiable.

   - Issue #16618(268): Make glob.glob match consistently across strings
     and bytes regarding leading dots.  Patch by Serhiy Storchaka.

   - Issue #16788(269): Add samestat to Lib/ntpath.py

   - Issue #16713(270): Parsing of ’tel’ urls using urlparse separates
     params from path.

   - Issue #16443(271): Add docstrings to regular expression match
     objects.  Patch by Anton Kasyanov.

   - Issue #15701(272): Fix HTTPError info method call to return the
     headers information.

   - Issue #16752(273): Add a missing import to modulefinder.  Patch by
     Berker Peksag.

   - Issue #16646(274): ftplib.FTP.makeport() might lose socket error
     details.  (patch by Serhiy Storchaka)

   - Issue #16626(275): Fix infinite recursion in glob.glob() on Windows
     when the pattern contains a wildcard in the drive or UNC path.
     Patch by Serhiy Storchaka.

   - Issue #15783(276): Except for the number methods, the C version of
     decimal now supports all None default values present in decimal.py.
     These values were largely undocumented.

   - Issue #11175(277): argparse.FileType now accepts encoding and
     errors arguments.  Patch by Lucas Maystre.

   - Issue #16488(278): epoll() objects now support the ‘with’
     statement.  Patch by Serhiy Storchaka.

   - Issue #16298(279): In HTTPResponse.read(), close the socket when
     there is no Content-Length and the incoming stream is finished.
     Patch by Eran Rundstein.

   - Issue #16049(280): Add abc.ABC class to enable the use of
     inheritance to create ABCs, rather than the more cumbersome
     metaclass=ABCMeta.  Patch by Bruno Dupuis.

   - Expose the TCP_FASTOPEN and MSG_FASTOPEN flags in socket when
     they’re available.

   - Issue #15701(281): Add a .headers attribute to
     urllib.error.HTTPError.  Patch contributed by Berker Peksag.

   - Issue #15872(282): Fix 3.3 regression introduced by the new
     fd-based shutil.rmtree that caused it to not ignore certain errors
     when ignore_errors was set.  Patch by Alessandro Moura and Serhiy
     Storchaka.

   - Issue #16248(283): Disable code execution from the user’s home
     directory by tkinter when the -E flag is passed to Python.  Patch
     by Zachary Ware.

   - Issue #13390(284): New function *note sys.getallocatedblocks():
     281. returns the number of memory blocks currently allocated.

   - Issue #16628(285): Fix a memory leak in ctypes.resize().

   - Issue #13614(286): Fix setup.py register failure with invalid rst
     in description.  Patch by Julien Courteau and Pierre Paul Lefebvre.

   - Issue #13512(287): Create ~/.pypirc securely (CVE-2011-4944).
     Initial patch by Philip Jenvey, tested by Mageia and Debian.

   - Issue #7719(288): Make distutils ignore ‘.nfs*’ files instead of
     choking later on.  Initial patch by SilentGhost and Jeff Ramnani.

   - Issue #13120(289): Allow to call pdb.set_trace() from thread.
     Patch by Ilya Sandler.

   - Issue #16585(290): Make CJK encoders support error handlers that
     return bytes per PEP 383.

   - Issue #10182(291): The re module doesn’t truncate indices to 32
     bits anymore.  Patch by Serhiy Storchaka.

   - Issue #16333(292): use (",", ": ") as default separator in json
     when indent is specified, to avoid trailing whitespace.  Patch by
     Serhiy Storchaka.

   - Issue #16573(293): In 2to3, treat enumerate() like a consuming
     call, so superfluous list() calls aren’t added to filter(), map(),
     and zip() which are directly passed enumerate().

   - Issue #16464(294): Reset the Content-Length header when a urllib
     Request is reused with new data.

   - Issue #12848(295): The pure Python pickle implementation now treats
     object lengths as unsigned 32-bit integers, like the C
     implementation does.  Patch by Serhiy Storchaka.

   - Issue #16423(296): urllib.request now has support for ‘data:’ URLs.
     Patch by Mathias Panzenböck.

   - Issue #4473(297): Add a POP3.stls() to switch a clear-text POP3
     session into an encrypted POP3 session, on supported servers.
     Patch by Lorenzo Catucci.

   - Issue #4473(298): Add a POP3.capa() method to query the
     capabilities advertised by the POP3 server.  Patch by Lorenzo
     Catucci.

   - Issue #4473(299): Ensure the socket is shutdown cleanly in
     POP3.close().  Patch by Lorenzo Catucci.

   - Issue #16522(300): added FAIL_FAST flag to doctest.

   - Issue #15627(301): Add the
     importlib.abc.InspectLoader.source_to_code() method.

   - Issue #16408(302): Fix file descriptors not being closed in error
     conditions in the zipfile module.  Patch by Serhiy Storchaka.

   - Issue #14631(303): Add a new *note weakref.WeakMethod: 2b1. to
     simulate weak references to bound methods.

   - Issue #16469(304): Fix exceptions from float -> Fraction and
     Decimal -> Fraction conversions for special values to be consistent
     with those for float -> int and Decimal -> int.  Patch by Alexey
     Kachayev.

   - Issue #16481(305): multiprocessing no longer leaks process handles
     on Windows.

   - Issue #12428(306): Add a pure Python implementation of
     functools.partial().  Patch by Brian Thorne.

   - Issue #16140(307): The subprocess module no longer double closes
     its child subprocess.PIPE parent file descriptors on child error
     prior to exec().

   - Remove a bare print to stdout from the subprocess module that could
     have happened if the child process wrote garbage to its pre-exec
     error pipe.

   - The subprocess module now raises its own SubprocessError instead of
     a RuntimeError in various error situations which should not
     normally happen.

   - Issue #16327(308): The subprocess module no longer leaks file
     descriptors used for stdin/stdout/stderr pipes to the child when
     fork() fails.

   - Issue #14396(309): Handle the odd rare case of waitpid returning 0
     when not expected in subprocess.Popen.wait().

   - Issue #16411(310): Fix a bug where zlib.decompressobj().flush()
     might try to access previously-freed memory.  Patch by Serhiy
     Storchaka.

   - Issue #16357(311): fix calling accept() on a SSLSocket created
     through SSLContext.wrap_socket().  Original patch by Jeff McNeil.

   - Issue #16409(312): The reporthook callback made by the legacy
     urllib.request.urlretrieve API now properly supplies a constant
     non-zero block_size as it did in Python 3.2 and 2.7.  This matches
     the behavior of urllib.request.URLopener.retrieve.

   - Issue #16431(313): Use the type information when constructing a
     Decimal subtype from a Decimal argument.

   - Issue #15641(314): Clean up deprecated classes from importlib Patch
     by Taras Lyapun.

   - Issue #16350(315): zlib.decompressobj().decompress() now
     accumulates data from successive calls after EOF in unused_data,
     instead of only saving the argument to the last call.
     decompressobj().flush() now correctly sets unused_data and
     unconsumed_tail.  A bug in the handling of MemoryError when setting
     the unconsumed_tail attribute has also been fixed.  Patch by Serhiy
     Storchaka.

   - Issue #12759(316): sre_parse now raises a proper error when the
     name of the group is missing.  Initial patch by Serhiy Storchaka.

   - Issue #16152(317): fix tokenize to ignore whitespace at the end of
     the code when no newline is found.  Patch by Ned Batchelder.

   - Issue #16284(318): Prevent keeping unnecessary references to worker
     functions in concurrent.futures ThreadPoolExecutor.

   - Issue #16230(319): Fix a crash in select.select() when one the
     lists changes size while iterated on.  Patch by Serhiy Storchaka.

   - Issue #16228(320): Fix a crash in the json module where a list
     changes size while it is being encoded.  Patch by Serhiy Storchaka.

   - Issue #16351(321): New function gc.get_stats() returns
     per-generation collection statistics.

   - Issue #14897(322): Enhance error messages of struct.pack and
     struct.pack_into.  Patch by Matti Mäki.

   - Issue #16316(323): mimetypes now recognizes the .xz and .txz
     (.tar.xz) extensions.  Patch by Serhiy Storchaka.

   - Issue #12890(324): cgitb no longer prints spurious <p> tags in text
     mode when the logdir option is specified.

   - Issue #16307(325): Fix multiprocessing.Pool.map_async not calling
     its callbacks.  Patch by Janne Karila.

   - Issue #16305(326): Fix a segmentation fault occurring when
     interrupting math.factorial.

   - Issue #16116(327): Fix include and library paths to be correct when
     building C extensions in venvs.

   - Issue #16245(328): Fix the value of a few entities in
     html.entities.html5.

   - Issue #16301(329): Fix the localhost verification in
     urllib/request.py for ‘file://’ urls.

   - Issue #16250(330): Fix the invocations of URLError which had
     misplaced filename attribute for exception.

   - Issue #10836(331): Fix exception raised when file not found in
     urlretrieve Initial patch by Ezio Melotti.

   - Issue #14398(332): Fix size truncation and overflow bugs in the bz2
     module.

   - Issue #12692(333): Fix resource leak in urllib.request when talking
     to an HTTP server that does not include a ‘Connection: close’
     header in its responses.

   - Issue #12034(334): Fix bogus caching of result in
     check_GetFinalPathNameByHandle.  Patch by Atsuo Ishimoto.

   - Improve performance of *note lzma.LZMAFile: 2dc. (see also issue
     #16034(335)).

   - Issue #16220(336): wsgiref now always calls close() on an iterable
     response.  Patch by Brent Tubbs.

   - Issue #16270(337): urllib may hang when used for retrieving files
     via FTP by using a context manager.  Patch by Giampaolo Rodola’.

   - Issue #16461(338): Wave library should be able to deal with 4GB wav
     files, and sample rate of 44100 Hz.

   - Issue #16176(339): Properly identify Windows 8 via
     platform.platform()

   - Issue #16088(340): BaseHTTPRequestHandler’s send_error method
     includes a Content-Length header in it’s response now.  Patch by
     Antoine Pitrou.

   - Issue #16114(341): The subprocess module no longer provides a
     misleading error message stating that args[0] did not exist when
     either the cwd or executable keyword arguments specified a path
     that did not exist.

   - Issue #16169(342): Fix ctypes.WinError()’s confusion between errno
     and winerror.

   - Issue #16110(343): logging.fileConfig now accepts a pre-initialised
     ConfigParser instance.

   - Issue #1492704(344): shutil.copyfile() raises a distinct
     SameFileError now if source and destination are the same file.
     Patch by Atsuo Ishimoto.

   - Issue #13896(345): Make shelf instances work with ’with’ as context
     managers.  Original patch by Filip Gruszczyński.

   - Issue #15417(346): Add support for csh and fish in venv activation
     scripts.

   - Issue #14377(347): ElementTree.write and some of the module-level
     functions have a new parameter - `short_empty_elements'.  It
     controls how elements with no contents are emitted.

   - Issue #16089(348): Allow ElementTree.TreeBuilder to work again with
     a non-Element element_factory (fixes a regression in SimpleTAL).

   - Issue #9650(349): List commonly used format codes in time.strftime
     and time.strptime docsttings.  Original patch by Mike Hoy.

   - Issue #15452(350): logging configuration socket listener now has a
     verify option that allows an application to apply a verification
     function to the received configuration data before it is acted
     upon.

   - Issue #16034(351): Fix performance regressions in the new *note
     bz2.BZ2File: 2db. implementation.  Initial patch by Serhiy
     Storchaka.

   - *note pty.spawn(): 22f. now returns the child process status
     returned by *note os.waitpid(): 230.

   - Issue #15756(352): ‘subprocess.poll()’ now properly handles *note
     errno.ECHILD: 98d. to return a returncode of 0 when the child has
     already exited or cannot be waited on.

   - Issue #15323(353): Improve failure message of
     ‘Mock.assert_called_once_with()’.

   - Issue #16064(354): ‘unittest -m’ claims executable is "python", not
     "python3".

   - Issue #12376(355): Pass on parameters in
     ‘TextTestResult.__init__()’ super call.

   - Issue #15222(356): Insert blank line after each message in mbox
     mailboxes.

   - Issue #16013(357): Fix ‘csv.Reader’ parsing issue with ending quote
     characters.  Patch by Serhiy Storchaka.

   - Issue #15421(358): Fix an OverflowError in
     ‘Calendar.itermonthdates()’ after *note datetime.MAXYEAR: 98e.
     Patch by Cédric Krier.

   - Issue #16112(359): platform.architecture does not correctly escape
     argument to /usr/bin/file.  Patch by David Benjamin.

   - Issue #15970(360): *note xml.etree.ElementTree: 130. now serializes
     correctly the empty HTML elements ’meta’ and ’param’.

   - Issue #15842(361): The ‘SocketIO.{readable,writable,seekable}’
     methods now raise ValueError when the file-like object is closed.
     Patch by Alessandro Moura.

   - Issue #15876(362): Fix a refleak in the *note curses: 2b. module:
     window.encoding.

   - Issue #15881(363): Fix *note atexit: c. hook in *note
     multiprocessing: b4.  Original patch by Chris McDonough.

   - Issue #15841(364): The readable(), writable() and seekable()
     methods of *note io.BytesIO: 5a0. and *note io.StringIO: 1b1.
     objects now raise ValueError when the object has been closed.
     Patch by Alessandro Moura.

   - Issue #15447(365): Use *note subprocess.DEVNULL: 4af. in
     webbrowser, instead of opening *note os.devnull: 98f. explicitly
     and leaving it open.

   - Issue #15509(366): ‘webbrowser.UnixBrowser’ no longer passes empty
     arguments to Popen when ‘%action’ substitutions produce empty
     strings.

   - Issue #12776(367), issue #11839(368): Call *note argparse: 6. type
     function (specified by add_argument) only once.  Before, the type
     function was called twice in the case where the default was
     specified and the argument was given as well.  This was especially
     problematic for the FileType type, as a default file would always
     be opened, even if a file argument was specified on the command
     line.

   - Issue #15906(369): Fix a regression in argparse caused by the
     preceding change, when ‘action='append'’, ‘type='str'’ and
     ‘default=[]’.

   - Issue #16113(370): Added sha3 module based on the Keccak reference
     implementation 3.2.  The *note hashlib: 8c. module has four
     additional hash algorithms: ‘sha3_224’, ‘sha3_256’, ‘sha3_384’ and
     ‘sha3_512’.  As part of the patch some common code was moved from
     _hashopenssl.c to hashlib.h.

   - ctypes.call_commethod was removed, since its only usage was in the
     defunct samples directory.

   - Issue #16692(371): Added TLSv1.1 and TLSv1.2 support for the ssl
     modules.

   - Issue #16832(372): add abc.get_cache_token() to expose cache
     validity checking support in ABCMeta.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/4331

   (2) https://bugs.python.org/13461

   (3) https://bugs.python.org/18681

   (4) https://bugs.python.org/14323

   (5) https://bugs.python.org/17998

   (6) https://bugs.python.org/17557

   (7) https://bugs.python.org/18608

   (8) https://bugs.python.org/18619

   (9) https://bugs.python.org/15699

   (10) https://bugs.python.org/17616

   (11) https://bugs.python.org/18599

   (12) https://bugs.python.org/13266

   (13) https://bugs.python.org/18561

   (14) https://bugs.python.org/18559

   (15) https://bugs.python.org/18556

   (16) https://bugs.python.org/17818

   (17) https://bugs.python.org/18549

   (18) https://bugs.python.org/18530

   (19) https://bugs.python.org/18514

   (20) https://bugs.python.org/9177

   (21) https://bugs.python.org/18513

   (22) https://bugs.python.org/18479

   (23) https://bugs.python.org/18480

   (24) https://bugs.python.org/17778

   (25) https://bugs.python.org/18393

   (26) https://bugs.python.org/17482

   (27) https://bugs.python.org/18431

   (28) https://bugs.python.org/18432

   (29) https://bugs.python.org/18044

   (30) https://bugs.python.org/18101

   (31) https://bugs.python.org/18116

   (32) https://bugs.python.org/17198

   (33) https://bugs.python.org/18013

   (34) https://bugs.python.org/18020

   (35) https://bugs.python.org/18347

   (36) https://bugs.python.org/17261

   (37) https://bugs.python.org/18343

   (38) https://bugs.python.org/17097

   (39) https://bugs.python.org/18339

   (40) https://bugs.python.org/18240

   (41) https://bugs.python.org/18224

   (42) https://bugs.python.org/18155

   (43) https://bugs.python.org/14360

   (44) https://bugs.python.org/11390

   (45) https://bugs.python.org/18135

   (46) https://bugs.python.org/11016

   (47) https://bugs.python.org/18248

   (48) https://bugs.python.org/18259

   (49) https://bugs.python.org/18147

   (50) https://bugs.python.org/18167

   (51) https://bugs.python.org/18076

   (52) https://bugs.python.org/18357

   (53) https://bugs.python.org/18058

   (54) https://bugs.python.org/17177

   (55) https://bugs.python.org/18194

   (56) https://bugs.python.org/17907

   (57) https://bugs.python.org/18192

   (58) https://bugs.python.org/18149

   (59) https://bugs.python.org/18193

   (60) https://bugs.python.org/18157

   (61) https://bugs.python.org/16102

   (62) https://bugs.python.org/17134

   (63) https://bugs.python.org/18143

   (64) https://bugs.python.org/17314

   (65) https://bugs.python.org/11959

   (66) https://bugs.python.org/18109

   (67) https://bugs.python.org/18089

   (68) https://bugs.python.org/18088

   (69) https://bugs.python.org/17403

   (70) https://bugs.python.org/18070

   (71) https://bugs.python.org/18025

   (72) https://bugs.python.org/18011

   (73) https://bugs.python.org/18072

   (74) https://bugs.python.org/8240

   (75) https://bugs.python.org/17269

   (76) https://bugs.python.org/16986

   (77) https://bugs.python.org/17996

   (78) https://bugs.python.org/17900

   (79) https://bugs.python.org/17914

   (80) https://bugs.python.org/17812

   (81) https://bugs.python.org/17980

   (82) https://bugs.python.org/15758

   (83) https://bugs.python.org/14596

   (84) https://bugs.python.org/17981

   (85) https://bugs.python.org/17964

   (86) https://bugs.python.org/17754

   (87) https://bugs.python.org/17968

   (88) https://bugs.python.org/17606

   (89) https://bugs.python.org/17732

   (90) https://bugs.python.org/17915

   (91) https://bugs.python.org/16601

   (92) https://bugs.python.org/17289

   (93) https://bugs.python.org/12181

   (94) https://bugs.python.org/11816

   (95) https://bugs.python.org/13831

   (96) https://bugs.python.org/15528

   (97) https://bugs.python.org/14173

   (98) https://bugs.python.org/15902

   (99) https://bugs.python.org/13721

   (100) https://bugs.python.org/14679

   (101) https://bugs.python.org/17802

   (102) https://bugs.python.org/17358

   (103) https://bugs.python.org/17804

   (104) https://bugs.python.org/17830

   (105) https://bugs.python.org/17272

   (106) https://bugs.python.org/17353

   (107) https://bugs.python.org/11714

   (108) https://bugs.python.org/16624

   (109) https://bugs.python.org/17795

   (110) https://bugs.python.org/16694

   (111) https://bugs.python.org/11182

   (112) https://bugs.python.org/17741

   (113) https://bugs.python.org/17555

   (114) https://bugs.python.org/17707

   (115) https://bugs.python.org/17720

   (116) https://bugs.python.org/17012

   (117) https://bugs.python.org/17710

   (118) https://bugs.python.org/17341

   (119) https://bugs.python.org/17702

   (120) https://bugs.python.org/16163

   (121) https://bugs.python.org/16804

   (122) https://bugs.python.org/15480

   (123) https://bugs.python.org/2118

   (124) https://bugs.python.org/17016

   (125) https://bugs.python.org/16658

   (126) https://bugs.python.org/9556

   (127) https://bugs.python.org/14971

   (128) https://bugs.python.org/17487

   (129) https://bugs.python.org/17675

   (130) https://bugs.python.org/17093

   (131) https://bugs.python.org/17566

   (132) https://bugs.python.org/17678

   (133) https://bugs.python.org/17666

   (134) https://bugs.python.org/16475

   (135) https://bugs.python.org/17502

   (136) https://bugs.python.org/16795

   (137) https://bugs.python.org/17434

   (138) https://bugs.python.org/17117

   (139) https://bugs.python.org/17032

   (140) https://bugs.python.org/18080

   (141) https://bugs.python.org/18113

   (142) https://bugs.python.org/15596

   (143) https://bugs.python.org/17572

   (144) https://bugs.python.org/17435

   (145) https://bugs.python.org/17526

   (146) https://bugs.python.org/17540

   (147) https://bugs.python.org/16692

   (148) https://bugs.python.org/17025

   (149) https://bugs.python.org/17536

   (150) https://bugs.python.org/17150

   (151) https://bugs.python.org/17488

   (152) https://bugs.python.org/17521

   (153) https://bugs.python.org/17508

   (154) https://bugs.python.org/17209

   (155) https://bugs.python.org/5713

   (156) https://bugs.python.org/16997

   (157) https://bugs.python.org/17485

   (158) https://bugs.python.org/16464

   (159) https://bugs.python.org/15927

   (160) https://bugs.python.org/17467

   (161) https://bugs.python.org/13248

   (162) https://bugs.python.org/17192

   (163) https://bugs.python.org/8862

   (164) https://bugs.python.org/17443

   (165) https://bugs.python.org/17476

   (166) https://bugs.python.org/17474

   (167) https://bugs.python.org/16709

   (168) https://bugs.python.org/5024

   (169) https://bugs.python.org/17460

   (170) https://bugs.python.org/16880

   (171) https://bugs.python.org/16389

   (172) https://bugs.python.org/17431

   (173) https://bugs.python.org/12921

   (174) https://bugs.python.org/17414

   (175) https://bugs.python.org/1285086

   (176) https://bugs.python.org/17099

   (177) https://bugs.python.org/17368

   (178) https://bugs.python.org/17385

   (179) https://bugs.python.org/15806

   (180) https://bugs.python.org/14645

   (181) https://bugs.python.org/17278

   (182) https://bugs.python.org/16962

   (183) https://bugs.python.org/16935

   (184) https://bugs.python.org/17018

   (185) https://bugs.python.org/17223

   (186) https://bugs.python.org/17197

   (187) https://bugs.python.org/14720

   (188) https://bugs.python.org/15132

   (189) https://bugs.python.org/17225

   (190) https://bugs.python.org/6623

   (191) https://bugs.python.org/13700

   (192) https://bugs.python.org/13153

   (193) https://bugs.python.org/9669

   (194) https://bugs.python.org/13169

   (195) https://bugs.python.org/17143

   (196) https://bugs.python.org/15220

   (197) https://bugs.python.org/16743

   (198) https://bugs.python.org/16996

   (199) https://bugs.python.org/16800

   (200) https://bugs.python.org/17192

   (201) https://bugs.python.org/16564

   (202) https://bugs.python.org/17052

   (203) https://bugs.python.org/4591

   (204) https://bugs.python.org/17141

   (205) https://bugs.python.org/17149

   (206) https://bugs.python.org/1470548

   (207) https://bugs.python.org/6975

   (208) https://bugs.python.org/13773

   (209) https://bugs.python.org/16564

   (210) https://bugs.python.org/10355

   (211) https://bugs.python.org/16686

   (212) https://bugs.python.org/17073

   (213) https://bugs.python.org/16723

   (214) https://bugs.python.org/15359

   (215) https://bugs.python.org/16948

   (216) https://bugs.python.org/16811

   (217) https://bugs.python.org/17132

   (218) https://bugs.python.org/17076

   (219) https://bugs.python.org/17089

   (220) https://bugs.python.org/6083

   (221) https://bugs.python.org/5289

   (222) https://bugs.python.org/17106

   (223) https://bugs.python.org/17015

   (224) https://bugs.python.org/15633

   (225) https://bugs.python.org/12268

   (226) https://bugs.python.org/6972

   (227) https://bugs.python.org/4844

   (228) https://bugs.python.org/17071

   (229) https://bugs.python.org/12004

   (230) https://bugs.python.org/16972

   (231) https://bugs.python.org/1602133

   (232) https://bugs.python.org/15505

   (233) https://bugs.python.org/13454

   (234) https://bugs.python.org/12411

   (235) https://bugs.python.org/16957

   (236) https://bugs.python.org/1159051

   (237) https://bugs.python.org/16993

   (238) https://bugs.python.org/16992

   (239) https://bugs.python.org/16422

   (240) https://bugs.python.org/15861

   (241) https://bugs.python.org/9720

   (242) https://bugs.python.org/16955

   (243) https://bugs.python.org/15031

   (244) https://bugs.python.org/16398

   (245) https://bugs.python.org/16900

   (246) https://bugs.python.org/13899

   (247) https://bugs.python.org/15545

   (248) https://bugs.python.org/15972

   (249) https://bugs.python.org/8109

   (250) https://bugs.python.org/16860

   (251) https://bugs.python.org/16674

   (252) https://bugs.python.org/16009

   (253) https://bugs.python.org/16828

   (254) https://bugs.python.org/16833

   (255) https://bugs.python.org/16541

   (256) https://bugs.python.org/16820

   (257) https://bugs.python.org/16820

   (258) https://bugs.python.org/16820

   (259) https://bugs.python.org/9586

   (260) https://bugs.python.org/16787

   (261) https://bugs.python.org/10527

   (262) https://bugs.python.org/16688

   (263) https://bugs.python.org/16486

   (264) https://bugs.python.org/16485

   (265) https://bugs.python.org/16640

   (266) https://bugs.python.org/16165

   (267) https://bugs.python.org/16641

   (268) https://bugs.python.org/16618

   (269) https://bugs.python.org/16788

   (270) https://bugs.python.org/16713

   (271) https://bugs.python.org/16443

   (272) https://bugs.python.org/15701

   (273) https://bugs.python.org/16752

   (274) https://bugs.python.org/16646

   (275) https://bugs.python.org/16626

   (276) https://bugs.python.org/15783

   (277) https://bugs.python.org/11175

   (278) https://bugs.python.org/16488

   (279) https://bugs.python.org/16298

   (280) https://bugs.python.org/16049

   (281) https://bugs.python.org/15701

   (282) https://bugs.python.org/15872

   (283) https://bugs.python.org/16248

   (284) https://bugs.python.org/13390

   (285) https://bugs.python.org/16628

   (286) https://bugs.python.org/13614

   (287) https://bugs.python.org/13512

   (288) https://bugs.python.org/7719

   (289) https://bugs.python.org/13120

   (290) https://bugs.python.org/16585

   (291) https://bugs.python.org/10182

   (292) https://bugs.python.org/16333

   (293) https://bugs.python.org/16573

   (294) https://bugs.python.org/16464

   (295) https://bugs.python.org/12848

   (296) https://bugs.python.org/16423

   (297) https://bugs.python.org/4473

   (298) https://bugs.python.org/4473

   (299) https://bugs.python.org/4473

   (300) https://bugs.python.org/16522

   (301) https://bugs.python.org/15627

   (302) https://bugs.python.org/16408

   (303) https://bugs.python.org/14631

   (304) https://bugs.python.org/16469

   (305) https://bugs.python.org/16481

   (306) https://bugs.python.org/12428

   (307) https://bugs.python.org/16140

   (308) https://bugs.python.org/16327

   (309) https://bugs.python.org/14396

   (310) https://bugs.python.org/16411

   (311) https://bugs.python.org/16357

   (312) https://bugs.python.org/16409

   (313) https://bugs.python.org/16431

   (314) https://bugs.python.org/15641

   (315) https://bugs.python.org/16350

   (316) https://bugs.python.org/12759

   (317) https://bugs.python.org/16152

   (318) https://bugs.python.org/16284

   (319) https://bugs.python.org/16230

   (320) https://bugs.python.org/16228

   (321) https://bugs.python.org/16351

   (322) https://bugs.python.org/14897

   (323) https://bugs.python.org/16316

   (324) https://bugs.python.org/12890

   (325) https://bugs.python.org/16307

   (326) https://bugs.python.org/16305

   (327) https://bugs.python.org/16116

   (328) https://bugs.python.org/16245

   (329) https://bugs.python.org/16301

   (330) https://bugs.python.org/16250

   (331) https://bugs.python.org/10836

   (332) https://bugs.python.org/14398

   (333) https://bugs.python.org/12692

   (334) https://bugs.python.org/12034

   (335) https://bugs.python.org/16034

   (336) https://bugs.python.org/16220

   (337) https://bugs.python.org/16270

   (338) https://bugs.python.org/16461

   (339) https://bugs.python.org/16176

   (340) https://bugs.python.org/16088

   (341) https://bugs.python.org/16114

   (342) https://bugs.python.org/16169

   (343) https://bugs.python.org/16110

   (344) https://bugs.python.org/1492704

   (345) https://bugs.python.org/13896

   (346) https://bugs.python.org/15417

   (347) https://bugs.python.org/14377

   (348) https://bugs.python.org/16089

   (349) https://bugs.python.org/9650

   (350) https://bugs.python.org/15452

   (351) https://bugs.python.org/16034

   (352) https://bugs.python.org/15756

   (353) https://bugs.python.org/15323

   (354) https://bugs.python.org/16064

   (355) https://bugs.python.org/12376

   (356) https://bugs.python.org/15222

   (357) https://bugs.python.org/16013

   (358) https://bugs.python.org/15421

   (359) https://bugs.python.org/16112

   (360) https://bugs.python.org/15970

   (361) https://bugs.python.org/15842

   (362) https://bugs.python.org/15876

   (363) https://bugs.python.org/15881

   (364) https://bugs.python.org/15841

   (365) https://bugs.python.org/15447

   (366) https://bugs.python.org/15509

   (367) https://bugs.python.org/12776

   (368) https://bugs.python.org/11839

   (369) https://bugs.python.org/15906

   (370) https://bugs.python.org/16113

   (371) https://bugs.python.org/16692

   (372) https://bugs.python.org/16832


File: python.info,  Node: IDLE<12>,  Next: Tests<12>,  Prev: Library<16>,  Up: Python 3 4 0 Alpha 1

1.14.16.3 IDLE
..............

   - Issue #18429(1): Format / Format Paragraph, now works when comment
     blocks are selected.  As with text blocks, this works best when the
     selection only includes complete lines.

   - Issue #18226(2): Add docstrings and unittests for
     FormatParagraph.py.  Original patches by Todd Rovito and Phil
     Webster.

   - Issue #18279(3): Format - Strip trailing whitespace no longer marks
     a file as changed when it has not been changed.  This fix followed
     the addition of a test file originally written by Phil Webster (the
     issue’s main goal).

   - Issue #7136(4): In the Idle File menu, "New Window" is renamed "New
     File".  Patch by Tal Einat, Roget Serwy, and Todd Rovito.

   - Remove dead imports of imp.

   - Issue #18196(5): Avoid displaying spurious SystemExit tracebacks.

   - Issue #5492(6): Avoid traceback when exiting IDLE caused by a race
     condition.

   - Issue #17511(7): Keep IDLE find dialog open after clicking "Find
     Next".  Original patch by Sarah K.

   - Issue #18055(8): Move IDLE off of imp and on to importlib.

   - Issue #15392(9): Create a unittest framework for IDLE. Initial
     patch by Rajagopalasarma Jayakrishnan.  See
     Lib/idlelib/idle_test/README.txt for how to run Idle tests.

   - Issue #14146(10): Highlight source line while debugging on Windows.

   - Issue #17838(11): Allow sys.stdin to be reassigned.

   - Issue #13495(12): Avoid loading the color delegator twice in IDLE.

   - Issue #17798(13): Allow IDLE to edit new files when specified on
     command line.

   - Issue #14735(14): Update IDLE docs to omit "Control-z on Windows".

   - Issue #17532(15): Always include Options menu for IDLE on OS X.
     Patch by Guilherme Simões.

   - Issue #17585(16): Fixed IDLE regression.  Now closes when using
     exit() or quit().

   - Issue #17657(17): Show full Tk version in IDLE’s about dialog.
     Patch by Todd Rovito.

   - Issue #17613(18): Prevent traceback when removing syntax colorizer
     in IDLE.

   - Issue #1207589(19): Backwards-compatibility patch for right-click
     menu in IDLE.

   - Issue #16887(20): IDLE now accepts Cancel in tabify/untabify dialog
     box.

   - Issue #17625(21): In IDLE, close the replace dialog after it is
     used.

   - Issue #14254(22): IDLE now handles readline correctly across shell
     restarts.

   - Issue #17614(23): IDLE no longer raises exception when quickly
     closing a file.

   - Issue #6698(24): IDLE now opens just an editor window when
     configured to do so.

   - Issue #8900(25): Using keyboard shortcuts in IDLE to open a file no
     longer raises an exception.

   - Issue #6649(26): Fixed missing exit status in IDLE. Patch by
     Guilherme Polo.

   - Issue #17114(27): IDLE now uses non-strict config parser.

   - Issue #9290(28): In IDLE the sys.std* streams now implement
     io.TextIOBase interface and support all mandatory methods and
     properties.

   - Issue #5066(29): Update IDLE docs.  Patch by Todd Rovito.

   - Issue #16829(30): IDLE printing no longer fails if there are spaces
     or other special characters in the file path.

   - Issue #16491(31): IDLE now prints chained exception tracebacks.

   - Issue #16819(32): IDLE method completion now correctly works for
     bytes literals.

   - Issue #16504(33): IDLE now catches SyntaxErrors raised by
     tokenizer.  Patch by Roger Serwy.

   - Issue #16511(34): Use default IDLE width and height if config param
     is not valid.  Patch Serhiy Storchaka.

   - Issue #1207589(35): Add Cut/Copy/Paste items to IDLE right click
     Context Menu Patch by Todd Rovito.

   - Issue #16123(36): IDLE - deprecate running without a subprocess.
     Patch by Roger Serwy.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18429

   (2) https://bugs.python.org/18226

   (3) https://bugs.python.org/18279

   (4) https://bugs.python.org/7136

   (5) https://bugs.python.org/18196

   (6) https://bugs.python.org/5492

   (7) https://bugs.python.org/17511

   (8) https://bugs.python.org/18055

   (9) https://bugs.python.org/15392

   (10) https://bugs.python.org/14146

   (11) https://bugs.python.org/17838

   (12) https://bugs.python.org/13495

   (13) https://bugs.python.org/17798

   (14) https://bugs.python.org/14735

   (15) https://bugs.python.org/17532

   (16) https://bugs.python.org/17585

   (17) https://bugs.python.org/17657

   (18) https://bugs.python.org/17613

   (19) https://bugs.python.org/1207589

   (20) https://bugs.python.org/16887

   (21) https://bugs.python.org/17625

   (22) https://bugs.python.org/14254

   (23) https://bugs.python.org/17614

   (24) https://bugs.python.org/6698

   (25) https://bugs.python.org/8900

   (26) https://bugs.python.org/6649

   (27) https://bugs.python.org/17114

   (28) https://bugs.python.org/9290

   (29) https://bugs.python.org/5066

   (30) https://bugs.python.org/16829

   (31) https://bugs.python.org/16491

   (32) https://bugs.python.org/16819

   (33) https://bugs.python.org/16504

   (34) https://bugs.python.org/16511

   (35) https://bugs.python.org/1207589

   (36) https://bugs.python.org/16123


File: python.info,  Node: Tests<12>,  Next: Build<13>,  Prev: IDLE<12>,  Up: Python 3 4 0 Alpha 1

1.14.16.4 Tests
...............

   - Issue #1666318(1): Add a test that shutil.copytree() retains
     directory permissions.  Patch by Catherine Devlin.

   - Issue #18273(2): move the tests in Lib/test/json_tests to
     Lib/test/test_json and make them discoverable by unittest.  Patch
     by Zachary Ware.

   - Fix a fcntl test case on KFreeBSD, Debian #708653 (Petr Salinger).

   - Issue #18396(3): Fix spurious test failure in test_signal on
     Windows when faulthandler is enabled (Patch by Jeremy Kloth)

   - Issue #17046(4): Fix broken test_executable_without_cwd in
     test_subprocess.

   - Issue #15415(5): Add new temp_dir() and change_cwd() context
     managers to test.support, and refactor temp_cwd() to use them.
     Patch by Chris Jerdonek.

   - Issue #15494(6): test.support is now a package rather than a module
     (Initial patch by Indra Talip)

   - Issue #17944(7): test_zipfile now discoverable and uses subclassing
     to generate tests for different compression types.  Fixed a bug
     with skipping some tests due to use of exhausted iterators.

   - Issue #18266(8): test_largefile now works with unittest test
     discovery and supports running only selected tests.  Patch by
     Zachary Ware.

   - Issue #17767(9): test_locale now works with unittest test
     discovery.  Original patch by Zachary Ware.

   - Issue #18375(10): Assume –randomize when –randseed is used for
     running the testsuite.

   - Issue #11185(11): Fix test_wait4 under AIX. Patch by Sébastien
     Sablé.

   - Issue #18207(12): Fix test_ssl for some versions of OpenSSL that
     ignore seconds in ASN1_TIME fields.

   - Issue #18094(13): test_uuid no longer reports skipped tests as
     passed.

   - Issue #17992(14): Add timeouts to asyncore and asynchat tests so
     that they won’t accidentally hang.

   - Issue #17833(15): Fix test_gdb failures seen on machines where
     debug symbols for glibc are available (seen on PPC64 Linux).

   - Issue #7855(16): Add tests for ctypes/winreg for issues found in
     IronPython.  Initial patch by Dino Viehland.

   - Issue #11078(17): test___all__ now checks for duplicates in
     __all__.  Initial patch by R. David Murray.

   - Issue #17712(18): Fix test_gdb failures on Ubuntu 13.04.

   - Issue #17835(19): Fix test_io when the default OS pipe buffer size
     is larger than one million bytes.

   - Issue #17065(20): Use process-unique key for winreg tests to avoid
     failures if test is run multiple times in parallel (eg: on a
     buildbot host).

   - Issue #12820(21): add tests for the xml.dom.minicompat module.
     Patch by John Chandler and Phil Connell.

   - Issue #17691(22): test_univnewlines now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17790(23): test_set now works with unittest test discovery.
     Patch by Zachary Ware.

   - Issue #17789(24): test_random now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17779(25): test_osx_env now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17766(26): test_iterlen now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17690(27): test_time now works with unittest test discovery.
     Patch by Zachary Ware.

   - Issue #17692(28): test_sqlite now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #11995(29): test_pydoc doesn’t import all sys.path modules
     anymore.

   - Issue #17448(30): test_sax now skips if there are no xml parsers
     available instead of raising an ImportError.

   - Issue #11420(31): make test suite pass with -B/DONTWRITEBYTECODE
     set.  Initial patch by Thomas Wouters.

   - Issue #10652(32): make tcl/tk tests run after __all__ test, patch
     by Zachary Ware.

   - Issue #11963(33): remove human verification from test_parser and
     test_subprocess.

   - Issue #11732(34): add a new suppress_crash_popup() context manager
     to test.support that disables crash popups on Windows and use it in
     test_faulthandler and test_capi.

   - Issue #13898(35): test_ssl no longer prints a spurious stack trace
     on Ubuntu.

   - Issue #17283(36): Share code between ‘__main__.py’ and
     ‘regrtest.py’ in ‘Lib/test’.

   - Issue #17249(37): convert a test in test_capi to use unittest and
     reap threads.

   - Issue #17107(38): Test client-side SNI support in urllib.request
     thanks to the new server-side SNI support in the ssl module.
     Initial patch by Daniel Black.

   - Issue #17041(39): Fix testing when Python is configured with the
     –without-doc-strings.

   - Issue #16923(40): Fix ResourceWarnings in test_ssl.

   - Issue #15539(41): Added regression tests for
     Tools/scripts/pindent.py.

   - Issue #17479(42): test_io now works with unittest test discovery.
     Patch by Zachary Ware.

   - Issue #17066(43): test_robotparser now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17334(44): test_index now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17333(45): test_imaplib now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17082(46): test_dbm* now work with unittest test discovery.
     Patch by Zachary Ware.

   - Issue #17079(47): test_ctypes now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17304(48): test_hash now works with unittest test discovery.
     Patch by Zachary Ware.

   - Issue #17303(49): test_future* now work with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #17163(50): test_file now works with unittest test discovery.
     Patch by Zachary Ware.

   - Issue #16925(51): test_configparser now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #16918(52): test_codecs now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #16919(53): test_crypt now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #16910(54): test_bytes, test_unicode, and test_userstring now
     work with unittest test discovery.  Patch by Zachary Ware.

   - Issue #16905(55): test_warnings now works with unittest test
     discovery.  Initial patch by Berker Peksag.

   - Issue #16898(56): test_bufio now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #16888(57): test_array now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #16896(58): test_asyncore now works with unittest test
     discovery.  Patch by Zachary Ware.

   - Issue #16897(59): test_bisect now works with unittest test
     discovery.  Initial patch by Zachary Ware.

   - Issue #16852(60): test_genericpath, test_posixpath, test_ntpath,
     and test_macpath now work with unittest test discovery.  Patch by
     Zachary Ware.

   - Issue #16748(61): test_heapq now works with unittest test
     discovery.

   - Issue #10646(62): Tests rearranged for os.samefile/samestat to
     check for not just symlinks but also hard links.

   - Issue #15302(63): Switch regrtest from using getopt to using
     argparse.

   - Issue #15324(64): Fix regrtest parsing of –fromfile, –match, and
     –randomize options.

   - Issue #16702(65): test_urllib2_localnet tests now correctly ignores
     proxies for localhost tests.

   - Issue #16664(66): Add regression tests for glob’s behaviour
     concerning entries starting with a ".".  Patch by Sebastian Kreft.

   - Issue #13390(67): The ‘-R’ option to regrtest now also checks for
     memory allocation leaks, using *note sys.getallocatedblocks(): 281.

   - Issue #16559(68): Add more tests for the json module, including
     some from the official test suite at json.org.  Patch by Serhiy
     Storchaka.

   - Issue #16661(69): Fix the *note os.getgrouplist(): 45e. test by not
     assuming that it gives the same output as ‘id -G’.

   - Issue #16115(70): Add some tests for the executable argument to
     subprocess.Popen().  Initial patch by Kushal Das.

   - Issue #16126(71): PyErr_Format format mismatch in
     _testcapimodule.c.  Patch by Serhiy Storchaka.

   - Issue #15304(72): Fix warning message when *note os.chdir(): 438.
     fails inside *note test.support.temp_cwd(): 992.  Patch by Chris
     Jerdonek.

   - Issue #15802(73): Fix test logic in
     ‘TestMaildir.test_create_tmp()’.  Patch by Serhiy Storchaka.

   - Issue #15557(74): Added a test suite for the webbrowser module,
     thanks to Anton Barkovsky.

   - Issue #16698(75): Skip posix test_getgroups when built with OS X
     deployment target prior to 10.6.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/1666318

   (2) https://bugs.python.org/18273

   (3) https://bugs.python.org/18396

   (4) https://bugs.python.org/17046

   (5) https://bugs.python.org/15415

   (6) https://bugs.python.org/15494

   (7) https://bugs.python.org/17944

   (8) https://bugs.python.org/18266

   (9) https://bugs.python.org/17767

   (10) https://bugs.python.org/18375

   (11) https://bugs.python.org/11185

   (12) https://bugs.python.org/18207

   (13) https://bugs.python.org/18094

   (14) https://bugs.python.org/17992

   (15) https://bugs.python.org/17833

   (16) https://bugs.python.org/7855

   (17) https://bugs.python.org/11078

   (18) https://bugs.python.org/17712

   (19) https://bugs.python.org/17835

   (20) https://bugs.python.org/17065

   (21) https://bugs.python.org/12820

   (22) https://bugs.python.org/17691

   (23) https://bugs.python.org/17790

   (24) https://bugs.python.org/17789

   (25) https://bugs.python.org/17779

   (26) https://bugs.python.org/17766

   (27) https://bugs.python.org/17690

   (28) https://bugs.python.org/17692

   (29) https://bugs.python.org/11995

   (30) https://bugs.python.org/17448

   (31) https://bugs.python.org/11420

   (32) https://bugs.python.org/10652

   (33) https://bugs.python.org/11963

   (34) https://bugs.python.org/11732

   (35) https://bugs.python.org/13898

   (36) https://bugs.python.org/17283

   (37) https://bugs.python.org/17249

   (38) https://bugs.python.org/17107

   (39) https://bugs.python.org/17041

   (40) https://bugs.python.org/16923

   (41) https://bugs.python.org/15539

   (42) https://bugs.python.org/17479

   (43) https://bugs.python.org/17066

   (44) https://bugs.python.org/17334

   (45) https://bugs.python.org/17333

   (46) https://bugs.python.org/17082

   (47) https://bugs.python.org/17079

   (48) https://bugs.python.org/17304

   (49) https://bugs.python.org/17303

   (50) https://bugs.python.org/17163

   (51) https://bugs.python.org/16925

   (52) https://bugs.python.org/16918

   (53) https://bugs.python.org/16919

   (54) https://bugs.python.org/16910

   (55) https://bugs.python.org/16905

   (56) https://bugs.python.org/16898

   (57) https://bugs.python.org/16888

   (58) https://bugs.python.org/16896

   (59) https://bugs.python.org/16897

   (60) https://bugs.python.org/16852

   (61) https://bugs.python.org/16748

   (62) https://bugs.python.org/10646

   (63) https://bugs.python.org/15302

   (64) https://bugs.python.org/15324

   (65) https://bugs.python.org/16702

   (66) https://bugs.python.org/16664

   (67) https://bugs.python.org/13390

   (68) https://bugs.python.org/16559

   (69) https://bugs.python.org/16661

   (70) https://bugs.python.org/16115

   (71) https://bugs.python.org/16126

   (72) https://bugs.python.org/15304

   (73) https://bugs.python.org/15802

   (74) https://bugs.python.org/15557

   (75) https://bugs.python.org/16698


File: python.info,  Node: Build<13>,  Next: C-API<2>,  Prev: Tests<12>,  Up: Python 3 4 0 Alpha 1

1.14.16.5 Build
...............

   - Issue #16067(1): Add description into MSI file to replace
     installer’s temporary name.

   - Issue #18257(2): Fix readlink usage in python-config.  Install the
     python version again on Darwin.

   - Issue #18481(3): Add C coverage reporting with gcov and lcov.  A
     new make target "coverage-report" creates an instrumented Python
     build, runs unit tests and creates a HTML. The report can be
     updated with "make coverage-lcov".

   - Issue #17845(4): Clarified the message printed when some module are
     not built.

   - Issue #18256(5): Compilation fix for recent AIX releases.  Patch by
     David Edelsohn.

   - Issue #17547(6): In configure, explicitly pass -Wformat for the
     benefit for GCC 4.8.

   - Issue #15172(7): Document NASM 2.10+ as requirement for building
     OpenSSL 1.0.1 on Windows.

   - Issue #17591(8): Use lowercase filenames when including Windows
     header files.  Patch by Roumen Petrov.

   - Issue #17550(9): Fix the –enable-profiling configure switch.

   - Issue #17425(10): Build with openssl 1.0.1d on Windows.

   - Issue #16754(11): Fix the incorrect shared library extension on
     linux.  Introduce two makefile macros SHLIB_SUFFIX and EXT_SUFFIX.
     SO now has the value of SHLIB_SUFFIX again (as in 2.x and 3.1).
     The SO macro is removed in 3.4.

   - Issue #5033(12): Fix building of the sqlite3 extension module when
     the SQLite library version has "beta" in it.  Patch by Andreas
     Pelme.

   - Issue #17228(13): Fix building without pymalloc.

   - Issue #3718(14): Use AC_ARG_VAR to set MACHDEP in configure.ac.

   - Issue #16235(15): Implement python-config as a shell script.

   - Issue #16769(16): Remove outdated Visual Studio projects.

   - Issue #17031(17): Fix running regen in cross builds.

   - Issue #3754(18): fix typo in pthread AC_CACHE_VAL.

   - Issue #15484(19): Fix _PYTHON_PROJECT_BASE for srcdir != builddir
     builds; use _PYTHON_PROJECT_BASE in distutils/sysconfig.py.

   - Drop support for Windows 2000 (changeset e52df05b496a).

   - Issue #17029(20): Let h2py search the multiarch system include
     directory.

   - Issue #16953(21): Fix socket module compilation on platforms with
     HAVE_BROKEN_POLL. Patch by Jeffrey Armstrong.

   - Issue #16320(22): Remove redundant Makefile dependencies for
     strings and bytes.

   - Cross compiling needs host and build settings.  configure no longer
     creates a broken PYTHON_FOR_BUILD variable when –build is missing.

   - Fix cross compiling issue in setup.py, ensure that lib_dirs and
     inc_dirs are defined in cross compiling mode, too.

   - Issue #16836(23): Enable IPv6 support even if IPv6 is disabled on
     the build host.

   - Issue #16593(24): Have BSD ’make -s’ do the right thing, thanks to
     Daniel Shahaf

   - Issue #16262(25): fix out-of-src-tree builds, if mercurial is not
     installed.

   - Issue #15298(26): ensure _sysconfigdata is generated in build
     directory, not source directory.

   - Issue #15833(27): Fix a regression in 3.3 that resulted in
     exceptions being raised if importlib failed to write byte-compiled
     files.  This affected attempts to build Python out-of-tree from a
     read-only source directory.

   - Issue #15923(28): Fix a mistake in ‘asdl_c.py’ that resulted in a
     TypeError after 2801bf875a24 (see #15801).

   - Issue #16135(29): Remove OS/2 support.

   - Issue #15819(30): Make sure we can build Python out-of-tree from a
     read-only source directory.  (Somewhat related to issue #9860(31).)

   - Issue #15587(32): Enable Tk high-resolution text rendering on Macs
     with Retina displays.  Applies to Tkinter apps, such as IDLE, on OS
     X framework builds linked with Cocoa Tk 8.5.

   - Issue #17161(33): make install now also installs a python3 man
     page.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/16067

   (2) https://bugs.python.org/18257

   (3) https://bugs.python.org/18481

   (4) https://bugs.python.org/17845

   (5) https://bugs.python.org/18256

   (6) https://bugs.python.org/17547

   (7) https://bugs.python.org/15172

   (8) https://bugs.python.org/17591

   (9) https://bugs.python.org/17550

   (10) https://bugs.python.org/17425

   (11) https://bugs.python.org/16754

   (12) https://bugs.python.org/5033

   (13) https://bugs.python.org/17228

   (14) https://bugs.python.org/3718

   (15) https://bugs.python.org/16235

   (16) https://bugs.python.org/16769

   (17) https://bugs.python.org/17031

   (18) https://bugs.python.org/3754

   (19) https://bugs.python.org/15484

   (20) https://bugs.python.org/17029

   (21) https://bugs.python.org/16953

   (22) https://bugs.python.org/16320

   (23) https://bugs.python.org/16836

   (24) https://bugs.python.org/16593

   (25) https://bugs.python.org/16262

   (26) https://bugs.python.org/15298

   (27) https://bugs.python.org/15833

   (28) https://bugs.python.org/15923

   (29) https://bugs.python.org/16135

   (30) https://bugs.python.org/15819

   (31) https://bugs.python.org/9860

   (32) https://bugs.python.org/15587

   (33) https://bugs.python.org/17161


File: python.info,  Node: C-API<2>,  Next: Documentation<12>,  Prev: Build<13>,  Up: Python 3 4 0 Alpha 1

1.14.16.6 C-API
...............

   - Issue #18351(1): Fix various issues in a function in importlib
     provided to help PyImport_ExecCodeModuleWithPathnames() (and thus
     by extension PyImport_ExecCodeModule() and
     PyImport_ExecCodeModuleEx()).

   - Issue #9369(2): The types of ‘char*’ arguments of
     PyObject_CallFunction() and PyObject_CallMethod() now changed to
     ‘const char*’.  Based on patches by Jörg Müller and Lars Buitinck.

   - Issue #17206(3): Py_CLEAR(), Py_DECREF(), Py_XINCREF() and
     Py_XDECREF() now expand their arguments once instead of multiple
     times.  Patch written by Illia Polosukhin.

   - Issue #17522(4): Add the PyGILState_Check() API.

   - Issue #17327(5): Add PyDict_SetDefault.

   - Issue #16881(6): Fix Py_ARRAY_LENGTH macro for GCC < 3.1.

   - Issue #16505(7): Remove unused Py_TPFLAGS_INT_SUBCLASS.

   - Issue #16086(8): PyTypeObject.tp_flags and PyType_Spec.flags are
     now unsigned (unsigned long and unsigned int) to avoid an undefined
     behaviour with Py_TPFLAGS_TYPE_SUBCLASS ((1 << 31).
     PyType_GetFlags() result type is now unsigned too (unsigned long,
     instead of long).

   - Issue #16166(9): Add PY_LITTLE_ENDIAN and PY_BIG_ENDIAN macros and
     unified endianness detection and handling.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18351

   (2) https://bugs.python.org/9369

   (3) https://bugs.python.org/17206

   (4) https://bugs.python.org/17522

   (5) https://bugs.python.org/17327

   (6) https://bugs.python.org/16881

   (7) https://bugs.python.org/16505

   (8) https://bugs.python.org/16086

   (9) https://bugs.python.org/16166


File: python.info,  Node: Documentation<12>,  Next: Tools/Demos<10>,  Prev: C-API<2>,  Up: Python 3 4 0 Alpha 1

1.14.16.7 Documentation
.......................

   - Issue #17701(1): Improving strftime documentation.

   - Issue #18440(2): Clarify that *note hash(): 39e. can truncate the
     value returned from an object’s custom ‘__hash__()’ method.

   - Issue #17844(3): Add links to encoders and decoders for
     bytes-to-bytes codecs.

   - Issue #14097(4): improve the "introduction" page of the tutorial.

   - Issue #17977(5): The documentation for the cadefault argument’s
     default value in urllib.request.urlopen() is fixed to match the
     code.

   - Issue #6696(6): add documentation for the Profile objects, and
     improve profile/cProfile docs.  Patch by Tom Pinckney.

   - Issue #15940(7): Specify effect of locale on time functions.

   - Issue 17538: Document XML vulnerabilties

   - Issue #16642(8): sched.scheduler timefunc initial default is
     time.monotonic.  Patch by Ramchandra Apte

   - Issue #17047(9): remove doubled words in docs and docstrings
     reported by Serhiy Storchaka and Matthew Barnett.

   - Issue #15465(10): Document the versioning macros in the C API docs
     rather than the standard library docs.  Patch by Kushal Das.

   - Issue #16406(11): Combine the pages for uploading and registering
     to PyPI.

   - Issue #16403(12): Document how distutils uses the maintainer field
     in PKG-INFO. Patch by Jyrki Pulliainen.

   - Issue #16695(13): Document how glob handles filenames starting with
     a dot.  Initial patch by Jyrki Pulliainen.

   - Issue #8890(14): Stop advertising an insecure practice by replacing
     uses of the /tmp directory with better alternatives in the
     documentation.  Patch by Geoff Wilson.

   - Issue #17203(15): add long option names to unittest discovery docs.

   - Issue #13094(16): add "Why do lambdas defined in a loop with
     different values all return the same result?"  programming FAQ.

   - Issue #14901(17): Update portions of the Windows FAQ. Patch by
     Ashish Nitin Patil.

   - Issue #16267(18): Better document the 3.3+ approach to combining
     @abstractmethod with @staticmethod, @classmethod and @property

   - Issue #15209(19): Clarify exception chaining description in
     exceptions module documentation

   - Issue #15990(20): Improve argument/parameter documentation.

   - Issue #16209(21): Move the documentation for the str built-in
     function to a new str class entry in the "Text Sequence Type"
     section.

   - Issue #13538(22): Improve str() and object.__str__() documentation.

   - Issue #16489(23): Make it clearer that importlib.find_loader()
     needs parent packages to be explicitly imported.

   - Issue #16400(24): Update the description of which versions of a
     given package PyPI displays.

   - Issue #15677(25): Document that zlib and gzip accept a compression
     level of 0 to mean ’no compression’.  Patch by Brian Brazil.

   - Issue #16197(26): Update winreg docstrings and documentation to
     match code.  Patch by Zachary Ware.

   - Issue #8040(27): added a version switcher to the documentation.
     Patch by Yury Selivanov.

   - Issue #16241(28): Document -X faulthandler command line option.
     Patch by Marek Šuppa.

   - Additional comments and some style changes in the
     concurrent.futures URL retrieval example

   - Issue #16115(29): Improve subprocess.Popen() documentation around
     args, shell, and executable arguments.

   - Issue #13498(30): Clarify docs of os.makedirs()’s exist_ok
     argument.  Done with great native-speaker help from R. David
     Murray.

   - Issue #15533(31): Clarify docs and add tests for *note
     subprocess.Popen(): 5c0.’s cwd argument.

   - Issue #15979(32): Improve timeit documentation.

   - Issue #16036(33): Improve documentation of built-in *note int():
     185.’s signature and arguments.

   - Issue #15935(34): Clarification of *note argparse: 6. docs, re:
     add_argument() type and default arguments.  Patch contributed by
     Chris Jerdonek.

   - Issue #11964(35): Document a change in v3.2 to the behavior of the
     indent parameter of json encoding operations.

   - Issue #15116(36): Remove references to appscript as it is no longer
     being supported.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17701

   (2) https://bugs.python.org/18440

   (3) https://bugs.python.org/17844

   (4) https://bugs.python.org/14097

   (5) https://bugs.python.org/17977

   (6) https://bugs.python.org/6696

   (7) https://bugs.python.org/15940

   (8) https://bugs.python.org/16642

   (9) https://bugs.python.org/17047

   (10) https://bugs.python.org/15465

   (11) https://bugs.python.org/16406

   (12) https://bugs.python.org/16403

   (13) https://bugs.python.org/16695

   (14) https://bugs.python.org/8890

   (15) https://bugs.python.org/17203

   (16) https://bugs.python.org/13094

   (17) https://bugs.python.org/14901

   (18) https://bugs.python.org/16267

   (19) https://bugs.python.org/15209

   (20) https://bugs.python.org/15990

   (21) https://bugs.python.org/16209

   (22) https://bugs.python.org/13538

   (23) https://bugs.python.org/16489

   (24) https://bugs.python.org/16400

   (25) https://bugs.python.org/15677

   (26) https://bugs.python.org/16197

   (27) https://bugs.python.org/8040

   (28) https://bugs.python.org/16241

   (29) https://bugs.python.org/16115

   (30) https://bugs.python.org/13498

   (31) https://bugs.python.org/15533

   (32) https://bugs.python.org/15979

   (33) https://bugs.python.org/16036

   (34) https://bugs.python.org/15935

   (35) https://bugs.python.org/11964

   (36) https://bugs.python.org/15116


File: python.info,  Node: Tools/Demos<10>,  Next: Windows<3>,  Prev: Documentation<12>,  Up: Python 3 4 0 Alpha 1

1.14.16.8 Tools/Demos
.....................

   - Issue #18817(1): Fix a resource warning in Lib/aifc.py demo.  Patch
     by Vajrasky Kok.

   - Issue #18439(2): Make patchcheck work on Windows for ACKS, NEWS.

   - Issue #18448(3): Fix a typo in Tools/demo/eiffel.py.

   - Issue #18457(4): Fixed saving of formulas and complex numbers in
     Tools/demo/ss1.py.

   - Issue #18449(5): Make Tools/demo/ss1.py work again on Python 3.
     Patch by Févry Thibault.

   - Issue #12990(6): The "Python Launcher" on OSX could not launch
     python scripts that have paths that include wide characters.

   - Issue #15239(7): Make mkstringprep.py work again on Python 3.

   - Issue #17028(8): Allowed Python arguments to be supplied to the
     Windows launcher.

   - Issue #17156(9): pygettext.py now detects the encoding of source
     files and correctly writes and escapes non-ascii characters.

   - Issue #15539(10): Fix a number of bugs in Tools/scripts/pindent.py.
     Now pindent.py works with a "with" statement.  pindent.py no longer
     produces improper indentation.  pindent.py now works with continued
     lines broken after "class" or "def" keywords and with continuations
     at the start of line.

   - Issue #11797(11): Add a 2to3 fixer that maps reload() to
     imp.reload().

   - Issue #10966(12): Remove the concept of unexpected skipped tests.

   - Issue #9893(13): Removed the Misc/Vim directory.

   - Removed the Misc/TextMate directory.

   - Issue #16245(14): Add the Tools/scripts/parse_html5_entities.py
     script to parse the list of HTML5 entities and update the
     html.entities.html5 dictionary.

   - Issue #15378(15): Fix Tools/unicode/comparecodecs.py.  Patch by
     Serhiy Storchaka.

   - Issue #16549(16): Make json.tool work again on Python 3 and add
     tests.  Initial patch by Berker Peksag and Serhiy Storchaka.

   - Issue #13301(17): use ast.literal_eval() instead of eval() in
     Tools/i18n/msgfmt.py Patch by Serhiy Storchaka.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18817

   (2) https://bugs.python.org/18439

   (3) https://bugs.python.org/18448

   (4) https://bugs.python.org/18457

   (5) https://bugs.python.org/18449

   (6) https://bugs.python.org/12990

   (7) https://bugs.python.org/15239

   (8) https://bugs.python.org/17028

   (9) https://bugs.python.org/17156

   (10) https://bugs.python.org/15539

   (11) https://bugs.python.org/11797

   (12) https://bugs.python.org/10966

   (13) https://bugs.python.org/9893

   (14) https://bugs.python.org/16245

   (15) https://bugs.python.org/15378

   (16) https://bugs.python.org/16549

   (17) https://bugs.python.org/13301


File: python.info,  Node: Windows<3>,  Prev: Tools/Demos<10>,  Up: Python 3 4 0 Alpha 1

1.14.16.9 Windows
.................

   - Issue #18569(1): The installer now adds .py to the PATHEXT variable
     when extensions are registered.  Patch by Paul Moore.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18569


File: python.info,  Node: Python 3 3 0,  Next: Python 3 3 0 Release Candidate 3,  Prev: Python 3 4 0 Alpha 1,  Up: Changelog

1.14.17 Python 3.3.0
--------------------

`Release date: 29-Sep-2012'

* Menu:

* Core and Builtins: Core and Builtins<16>. 
* Extension Modules: Extension Modules<3>. 


File: python.info,  Node: Core and Builtins<16>,  Next: Extension Modules<3>,  Up: Python 3 3 0

1.14.17.1 Core and Builtins
...........................

   - Issue #16046(1): Fix loading sourceless legacy .pyo files.

   - Issue #16060(2): Fix refcounting bug when ‘__trunc__()’ returns an
     object whose ‘__int__()’ gives a non-integer.  Patch by Serhiy
     Storchaka.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/16046

   (2) https://bugs.python.org/16060


File: python.info,  Node: Extension Modules<3>,  Prev: Core and Builtins<16>,  Up: Python 3 3 0

1.14.17.2 Extension Modules
...........................

   - Issue #16012(1): Fix a regression in pyexpat.  The parser’s
     ‘UseForeignDTD()’ method doesn’t require an argument again.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/16012


File: python.info,  Node: Python 3 3 0 Release Candidate 3,  Next: Python 3 3 0 Release Candidate 2,  Prev: Python 3 3 0,  Up: Changelog

1.14.18 Python 3.3.0 Release Candidate 3
----------------------------------------

`Release date: 23-Sep-2012'

* Menu:

* Core and Builtins: Core and Builtins<17>. 
* Library: Library<17>. 
* Extension Modules: Extension Modules<4>. 


File: python.info,  Node: Core and Builtins<17>,  Next: Library<17>,  Up: Python 3 3 0 Release Candidate 3

1.14.18.1 Core and Builtins
...........................

   - Issue #15900(1): Fix reference leak in
     ‘PyUnicode_TranslateCharmap()’.

   - Issue #15926(2): Fix crash after multiple reinitializations of the
     interpreter.

   - Issue #15895(3): Fix FILE pointer leak in one error branch of
     ‘PyRun_SimpleFileExFlags()’ when filename points to a pyc/pyo file,
     closeit is false an and set_main_loader() fails.

   - Fixes for a few crash and memory leak regressions found by
     Coverity.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15900

   (2) https://bugs.python.org/15926

   (3) https://bugs.python.org/15895


File: python.info,  Node: Library<17>,  Next: Extension Modules<4>,  Prev: Core and Builtins<17>,  Up: Python 3 3 0 Release Candidate 3

1.14.18.2 Library
.................

   - Issue #15882(1): Change ‘_decimal’ to accept any coefficient tuple
     when constructing infinities.  This is done for backwards
     compatibility with decimal.py: Infinity coefficients are undefined
     in _decimal (in accordance with the specification).

   - Issue #15925(2): Fix a regression in ‘email.util’ where the
     ‘parsedate()’ and ‘parsedate_tz()’ functions did not return None
     anymore when the argument could not be parsed.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15882

   (2) https://bugs.python.org/15925


File: python.info,  Node: Extension Modules<4>,  Prev: Library<17>,  Up: Python 3 3 0 Release Candidate 3

1.14.18.3 Extension Modules
...........................

   - Issue #15973(1): Fix a segmentation fault when comparing datetime
     timezone objects.

   - Issue #15977(2): Fix memory leak in Modules/_ssl.c when the
     function _set_npn_protocols() is called multiple times, thanks to
     Daniel Sommermann.

   - Issue #15969(3): *note faulthandler: 7b. module: rename
     dump_tracebacks_later() to dump_traceback_later() and
     cancel_dump_tracebacks_later() to cancel_dump_traceback_later().

   - _decimal module: use only C 89 style comments.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15973

   (2) https://bugs.python.org/15977

   (3) https://bugs.python.org/15969


File: python.info,  Node: Python 3 3 0 Release Candidate 2,  Next: Python 3 3 0 Release Candidate 1,  Prev: Python 3 3 0 Release Candidate 3,  Up: Changelog

1.14.19 Python 3.3.0 Release Candidate 2
----------------------------------------

`Release date: 09-Sep-2012'

* Menu:

* Core and Builtins: Core and Builtins<18>. 
* Library: Library<18>. 
* Build: Build<14>. 
* Documentation: Documentation<13>. 


File: python.info,  Node: Core and Builtins<18>,  Next: Library<18>,  Up: Python 3 3 0 Release Candidate 2

1.14.19.1 Core and Builtins
...........................

   - Issue #13992(1): The trashcan mechanism is now thread-safe.  This
     eliminates sporadic crashes in multi-thread programs when several
     long deallocator chains ran concurrently and involved subclasses of
     built-in container types.

   - Issue #15784(2): Modify *note OSError: 254.__str__() to better
     distinguish between errno error numbers and Windows error numbers.

   - Issue #15781(3): Fix two small race conditions in import’s module
     locking.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/13992

   (2) https://bugs.python.org/15784

   (3) https://bugs.python.org/15781


File: python.info,  Node: Library<18>,  Next: Build<14>,  Prev: Core and Builtins<18>,  Up: Python 3 3 0 Release Candidate 2

1.14.19.2 Library
.................

   - Issue #17158(1): Add ’symbols’ to help() welcome message; clarify
     ’modules spam’ messages.

   - Issue #15847(2): Fix a regression in argparse, which did not accept
     tuples as argument lists anymore.

   - Issue #15828(3): Restore support for C extensions in *note
     imp.load_module(): 9a2.

   - Issue #15340(4): Fix importing the random module when
     ‘/dev/urandom’ cannot be opened.  This was a regression caused by
     the hash randomization patch.

   - Issue #10650(5): Deprecate the watchexp parameter of the
     ‘Decimal.quantize()’ method.

   - Issue #15785(6): Modify ‘window.get_wch()’ API of the curses
     module: return a character for most keys, and an integer for
     special keys, instead of always returning an integer.  So it is now
     possible to distinguish special keys like keypad keys.

   - Issue #14223(7): Fix ‘window.addch()’ of the curses module for
     special characters like curses.ACS_HLINE: the Python function
     addch(int) and addch(bytes) is now calling the C function
     waddch()/mvwaddch() (as it was done in Python 3.2), instead of
     wadd_wch()/mvwadd_wch().  The Python function addch(str) is still
     calling the C function wadd_wch()/mvwadd_wch() if the Python curses
     is linked to libncursesw.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17158

   (2) https://bugs.python.org/15847

   (3) https://bugs.python.org/15828

   (4) https://bugs.python.org/15340

   (5) https://bugs.python.org/10650

   (6) https://bugs.python.org/15785

   (7) https://bugs.python.org/14223


File: python.info,  Node: Build<14>,  Next: Documentation<13>,  Prev: Library<18>,  Up: Python 3 3 0 Release Candidate 2

1.14.19.3 Build
...............

   - Issue #15822(1): Really ensure 2to3 grammar pickles are properly
     installed (replaces fixes for Issue #15645(2)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15822

   (2) https://bugs.python.org/15645


File: python.info,  Node: Documentation<13>,  Prev: Build<14>,  Up: Python 3 3 0 Release Candidate 2

1.14.19.4 Documentation
.......................

   - Issue #15814(1): The memoryview enhancements in 3.3.0 accidentally
     permitted the hashing of multi-dimensional memorviews and
     memoryviews with multi-byte item formats.  The intended
     restrictions have now been documented - they will be correctly
     enforced in 3.3.1.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15814


File: python.info,  Node: Python 3 3 0 Release Candidate 1,  Next: Python 3 3 0 Beta 2,  Prev: Python 3 3 0 Release Candidate 2,  Up: Changelog

1.14.20 Python 3.3.0 Release Candidate 1
----------------------------------------

`Release date: 25-Aug-2012'

* Menu:

* Core and Builtins: Core and Builtins<19>. 
* Library: Library<19>. 
* IDLE: IDLE<13>. 
* Documentation: Documentation<14>. 
* Tests: Tests<13>. 
* Build: Build<15>. 


File: python.info,  Node: Core and Builtins<19>,  Next: Library<19>,  Up: Python 3 3 0 Release Candidate 1

1.14.20.1 Core and Builtins
...........................

   - Issue #15573(1): memoryview comparisons are now performed by value
     with full support for any valid struct module format definition.

   - Issue #15316(2): When an item in the fromlist for *note
     __import__(): 383. doesn’t exist, don’t raise an error, but if an
     exception is raised as part of an import do let that propagate.

   - Issue #15778(3): Ensure that ‘str(ImportError(msg))’ returns a str
     even when msg isn’t a str.

   - Issue #2051(4): Source file permission bits are once again
     correctly copied to the cached bytecode file.  (The migration to
     importlib reintroduced this problem because these was no regression
     test.  A test has been added as part of this patch)

   - Issue #15761(5): Fix crash when ‘PYTHONEXECUTABLE’ is set on Mac OS
     X.

   - Issue #15726(6): Fix incorrect bounds checking in
     PyState_FindModule.  Patch by Robin Schreiber.

   - Issue #15604(7): Update uses of ‘PyObject_IsTrue()’ to check for
     and handle errors correctly.  Patch by Serhiy Storchaka.

   - Issue #14846(8): ‘importlib.FileFinder’ now handles the case where
     the directory being searched is removed after a previous import
     attempt.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15573

   (2) https://bugs.python.org/15316

   (3) https://bugs.python.org/15778

   (4) https://bugs.python.org/2051

   (5) https://bugs.python.org/15761

   (6) https://bugs.python.org/15726

   (7) https://bugs.python.org/15604

   (8) https://bugs.python.org/14846


File: python.info,  Node: Library<19>,  Next: IDLE<13>,  Prev: Core and Builtins<19>,  Up: Python 3 3 0 Release Candidate 1

1.14.20.2 Library
.................

   - Issue #13370(1): Ensure that ctypes works on Mac OS X when Python
     is compiled using the clang compiler.

   - Issue #13072(2): The array module’s ’u’ format code is now
     deprecated and will be removed in Python 4.0.

   - Issue #15544(3): Fix Decimal.__float__ to work with
     payload-carrying NaNs.

   - Issue #15776(4): Allow pyvenv to work in existing directory with
     –clean.

   - Issue #15249(5): email’s BytesGenerator now correctly mangles From
     lines (when requested) even if the body contains undecodable bytes.

   - Issue #15777(6): Fix a refleak in _posixsubprocess.

   - Issue ##665194: Update *note email.utils.localtime: 3e9. to use
     datetime.astimezone and correctly handle historic changes in UTC
     offsets.

   - Issue #15199(7): Fix JavaScript’s default MIME type to
     application/javascript.  Patch by Bohuslav Kabrda.

   - Issue #12643(8): *note code.InteractiveConsole: 9a8. now respects
     *note sys.excepthook: 8f6. when displaying exceptions.  Patch by
     Aaron Iles.

   - Issue #13579(9): *note string.Formatter: 9a9. now understands the
     ’a’ conversion specifier.

   - Issue #15595(10): Fix ‘subprocess.Popen(universal_newlines=True)’
     for certain locales (utf-16 and utf-32 family).  Patch by Chris
     Jerdonek.

   - Issue #15477(11): In cmath and math modules, add workaround for
     platforms whose system-supplied log1p function doesn’t respect
     signs of zeros.

   - Issue #15715(12): *note importlib.__import__(): 384. will silence
     an ImportError when the use of fromlist leads to a failed import.

   - Issue #14669(13): Fix pickling of connections and sockets on Mac OS
     X by sending/receiving an acknowledgment after file descriptor
     transfer.  TestPicklingConnection has been reenabled for Mac OS X.

   - Issue #11062(14): Fix adding a message from file to Babyl mailbox.

   - Issue #15646(15): Prevent equivalent of a fork bomb when using
     *note multiprocessing: b4. on Windows without the ‘if __name__ ==
     '__main__'’ idiom.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/13370

   (2) https://bugs.python.org/13072

   (3) https://bugs.python.org/15544

   (4) https://bugs.python.org/15776

   (5) https://bugs.python.org/15249

   (6) https://bugs.python.org/15777

   (7) https://bugs.python.org/15199

   (8) https://bugs.python.org/12643

   (9) https://bugs.python.org/13579

   (10) https://bugs.python.org/15595

   (11) https://bugs.python.org/15477

   (12) https://bugs.python.org/15715

   (13) https://bugs.python.org/14669

   (14) https://bugs.python.org/11062

   (15) https://bugs.python.org/15646


File: python.info,  Node: IDLE<13>,  Next: Documentation<14>,  Prev: Library<19>,  Up: Python 3 3 0 Release Candidate 1

1.14.20.3 IDLE
..............

   - Issue #15678(1): Fix IDLE menus when started from OS X command line
     (3.3.0b2 regression).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15678


File: python.info,  Node: Documentation<14>,  Next: Tests<13>,  Prev: IDLE<13>,  Up: Python 3 3 0 Release Candidate 1

1.14.20.4 Documentation
.......................

   - Touched up the Python 2 to 3 porting guide.

   - Issue #14674(1): Add a discussion of the *note json: a1. module’s
     standard compliance.  Patch by Chris Rebert.

   - Create a ’Concurrent Execution’ section in the docs, and split up
     the ’Optional Operating System Services’ section to use a more
     user-centric classification scheme (splitting them across the new
     CE section, IPC and text processing).  Operating system limitations
     can be reflected with the Sphinx ‘:platform:’ tag, it doesn’t make
     sense as part of the Table of Contents.

   - Issue #4966(2): Bring the sequence docs up to date for the Py3k
     transition and the many language enhancements since they were
     original written.

   - The "path importer" misnomer has been replaced with Eric Snow’s
     more-awkward-but-at-least-not-wrong suggestion of "path based
     finder" in the import system reference docs.

   - Issue #15640(3): Document *note importlib.abc.Finder: 38b. as
     deprecated.

   - Issue #15630(4): Add an example for "continue" stmt in the
     tutorial.  Patch by Daniel Ellis.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14674

   (2) https://bugs.python.org/4966

   (3) https://bugs.python.org/15640

   (4) https://bugs.python.org/15630


File: python.info,  Node: Tests<13>,  Next: Build<15>,  Prev: Documentation<14>,  Up: Python 3 3 0 Release Candidate 1

1.14.20.5 Tests
...............

   - Issue #15747(1): ZFS always returns EOPNOTSUPP when attempting to
     set the UF_IMMUTABLE flag (via either chflags or lchflags);
     refactor affected tests in test_posix.py to account for this.

   - Issue #15285(2): Refactor the approach for testing connect timeouts
     using two external hosts that have been configured specifically for
     this type of test.

   - Issue #15743(3): Remove the deprecated method usage in *note
     urllib: 116. tests.  Patch by Jeff Knupp.

   - Issue #15615(4): Add some tests for the *note json: a1. module’s
     handling of invalid input data.  Patch by Kushal Das.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15747

   (2) https://bugs.python.org/15285

   (3) https://bugs.python.org/15743

   (4) https://bugs.python.org/15615


File: python.info,  Node: Build<15>,  Prev: Tests<13>,  Up: Python 3 3 0 Release Candidate 1

1.14.20.6 Build
...............

   - Output lib files for PGO build into PGO directory.

   - Pick up 32-bit launcher from PGO directory on 64-bit PGO build.

   - Drop ‘PC\python_nt.h’ as it’s not used.  Add input dependency on
     custom build step.

   - Issue #15511(1): Drop explicit dependency on pythonxy.lib from
     _decimal amd64 configuration.

   - Add missing PGI/PGO configurations for pywlauncher.

   - Issue #15645(2): Ensure 2to3 grammar pickles are properly
     installed.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15511

   (2) https://bugs.python.org/15645


File: python.info,  Node: Python 3 3 0 Beta 2,  Next: Python 3 3 0 Beta 1,  Prev: Python 3 3 0 Release Candidate 1,  Up: Changelog

1.14.21 Python 3.3.0 Beta 2
---------------------------

`Release date: 12-Aug-2012'

* Menu:

* Core and Builtins: Core and Builtins<20>. 
* Library: Library<20>. 
* C API: C API<4>. 
* Extension Modules: Extension Modules<5>. 
* IDLE: IDLE<14>. 
* Tools/Demos: Tools/Demos<11>. 
* Documentation: Documentation<15>. 
* Tests: Tests<14>. 
* Build: Build<16>. 


File: python.info,  Node: Core and Builtins<20>,  Next: Library<20>,  Up: Python 3 3 0 Beta 2

1.14.21.1 Core and Builtins
...........................

   - Issue #15568(1): Fix the return value of ‘yield from’ when
     StopIteration is raised by a custom iterator.

   - Issue #13119(2): *note sys.stdout: 1b0. and *note sys.stderr: 5ac.
     are now using "rn" newline on Windows, as Python 2.

   - Issue #15534(3): Fix the fast-search function for non-ASCII Unicode
     strings.

   - Issue #15508(4): Fix the docstring for *note __import__(): 383. to
     have the proper default value of 0 for ’level’ and to not mention
     negative levels since they are not supported.

   - Issue #15425(5): Eliminated traceback noise from more situations
     involving importlib.

   - Issue #14578(6): Support modules registered in the Windows registry
     again.

   - Issue #15466(7): Stop using TYPE_INT64 in marshal, to make
     importlib.h (and other byte code files) equal between 32-bit and
     64-bit systems.

   - Issue #1692335(8): Move initial exception args assignment to
     ‘BaseException.__new__()’ to help pickling of naive subclasses.

   - Issue #12834(9): Fix ‘PyBuffer_ToContiguous()’ for non-contiguous
     arrays.

   - Issue #15456(10): Fix code ‘__sizeof__()’ after #12399 change.
     Patch by Serhiy Storchaka.

   - Issue #15404(11): Refleak in PyMethodObject repr.

   - Issue #15394(12): An issue in ‘PyModule_Create()’ that caused
     references to be leaked on some error paths has been fixed.  Patch
     by Julia Lawall.

   - Issue #15368(13): An issue that caused bytecode generation to be
     non-deterministic has been fixed.

   - Issue #15202(14): Consistently use the name "follow_symlinks" for
     new parameters in os and shutil functions.

   - Issue #15314(15): ‘__main__.__loader__’ is now set correctly during
     interpreter startup.

   - Issue #15111(16): When a module imported using ’from import’ has an
     ImportError inside itself, don’t mask that fact behind a generic
     ImportError for the module itself.

   - Issue #15293(17): Add GC support to the AST base node type.

   - Issue #15291(18): Fix a memory leak where AST nodes where not
     properly deallocated.

   - Issue #15110(19): Fix the tracebacks generated by "import xxx" to
     not show the importlib stack frames.

   - Issue #16369(20): Global PyTypeObjects not initialized with
     PyType_Ready(...).

   - Issue #15020(21): The program name used to search for Python’s path
     is now "python3" under Unix, not "python".

   - Issue #15897(22): zipimport.c doesn’t check return value of
     fseek().  Patch by Felipe Cruz.

   - Issue #15033(23): Fix the exit status bug when modules invoked
     using -m switch, return the proper failure return value (1).  Patch
     contributed by Jeff Knupp.

   - Issue #15229(24): An *note OSError: 254. subclass whose __init__
     doesn’t call back OSError.__init__ could produce incomplete
     instances, leading to crashes when calling str() on them.

   - Issue #15307(25): Virtual environments now use symlinks with
     framework builds on Mac OS X, like other POSIX builds.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15568

   (2) https://bugs.python.org/13119

   (3) https://bugs.python.org/15534

   (4) https://bugs.python.org/15508

   (5) https://bugs.python.org/15425

   (6) https://bugs.python.org/14578

   (7) https://bugs.python.org/15466

   (8) https://bugs.python.org/1692335

   (9) https://bugs.python.org/12834

   (10) https://bugs.python.org/15456

   (11) https://bugs.python.org/15404

   (12) https://bugs.python.org/15394

   (13) https://bugs.python.org/15368

   (14) https://bugs.python.org/15202

   (15) https://bugs.python.org/15314

   (16) https://bugs.python.org/15111

   (17) https://bugs.python.org/15293

   (18) https://bugs.python.org/15291

   (19) https://bugs.python.org/15110

   (20) https://bugs.python.org/16369

   (21) https://bugs.python.org/15020

   (22) https://bugs.python.org/15897

   (23) https://bugs.python.org/15033

   (24) https://bugs.python.org/15229

   (25) https://bugs.python.org/15307


File: python.info,  Node: Library<20>,  Next: C API<4>,  Prev: Core and Builtins<20>,  Up: Python 3 3 0 Beta 2

1.14.21.2 Library
.................

   - Issue #14590(1): configparser now correctly strips inline comments
     when delimiter occurs earlier without preceding space.

   - Issue #15424(2): Add a ‘__sizeof__()’ implementation for array
     objects.  Patch by Ludwig Hähne.

   - Issue #15576(3): Allow extension modules to act as a package’s
     __init__ module.

   - Issue #15502(4): Have *note importlib.invalidate_caches(): 390.
     work on *note sys.meta_path: 392. instead of *note
     sys.path_importer_cache: 31e.

   - Issue #15163(5): Pydoc shouldn’t list __loader__ as module data.

   - Issue #15471(6): Do not use mutable objects as defaults for *note
     importlib.__import__(): 384.

   - Issue #15559(7): To avoid a problematic failure mode when passed to
     the bytes constructor, objects in the ipaddress module no longer
     implement ‘__index__()’ (they still implement ‘__int__()’ as
     appropriate).

   - Issue #15546(8): Fix handling of pathological input data in the
     peek() and read1() methods of the BZ2File, GzipFile and LZMAFile
     classes.

   - Issue #12655(9): Instead of requiring a custom type, *note
     os.sched_getaffinity(): 44c. and *note os.sched_setaffinity(): 450.
     now use regular sets of integers to represent the CPUs a process is
     restricted to.

   - Issue #15538(10): Fix compilation of the *note
     socket.getnameinfo(): 9b1. / *note socket.getaddrinfo(): 9b2.
     emulation code.  Patch by Philipp Hagemeister.

   - Issue #15519(11): Properly expose WindowsRegistryFinder in
     importlib (and use the correct term for it).  Original patch by
     Eric Snow.

   - Issue #15502(12): Bring the importlib ABCs into line with the
     current state of the import protocols given PEP 420.  Original
     patch by Eric Snow.

   - Issue #15499(13): Launching a webbrowser in Unix used to sleep for
     a few seconds.  Original patch by Anton Barkovsky.

   - Issue #15463(14): The faulthandler module truncates strings to 500
     characters, instead of 100, to be able to display long file paths.

   - Issue #6056(15): Make *note multiprocessing: b4. use
     setblocking(True) on the sockets it uses.  Original patch by J
     Derek Wilson.

   - Issue #15364(16): Fix sysconfig.get_config_var(’srcdir’) to be an
     absolute path.

   - Issue #15413(17): *note os.times(): 45f. had disappeared under
     Windows.

   - Issue #15402(18): An issue in the struct module that caused *note
     sys.getsizeof(): 9b3. to return incorrect results for struct.Struct
     instances has been fixed.  Initial patch by Serhiy Storchaka.

   - Issue #15232(19): When mangle_from is True, ‘email.Generator’ now
     correctly mangles lines that start with ’From ’ that occur in a
     MIME preamble or epilogue.

   - Issue #15094(20): Incorrectly placed #endif in _tkinter.c.  Patch
     by Serhiy Storchaka.

   - Issue #13922(21): *note argparse: 6. no longer incorrectly strips
     ’–’s that appear after the first one.

   - Issue #12353(22): *note argparse: 6. now correctly handles null
     argument values.

   - Issue #10017(23), issue #14998(24): Fix TypeError using pprint on
     dictionaries with user-defined types as keys or other unorderable
     keys.

   - Issue #15397(25): *note inspect.getmodulename(): 9b4. is now based
     directly on importlib via a new *note
     importlib.machinery.all_suffixes(): 9b5. API.

   - Issue #14635(26): *note telnetlib: fd. will use poll() rather than
     select() when possible to avoid failing due to the select() file
     descriptor limit.

   - Issue #15180(27): Clarify posixpath.join() error message when
     mixing str & bytes.

   - Issue #15343(28): pkgutil now includes an iter_importer_modules
     implementation for importlib.machinery.FileFinder (similar to the
     way it already handled zipimport.zipimporter).

   - Issue #15314(29): runpy now sets __main__.__loader__ correctly.

   - Issue #15357(30): The import emulation in pkgutil is now
     deprecated.  pkgutil uses importlib internally rather than the
     emulation.

   - Issue #15233(31): Python now guarantees that callables registered
     with the atexit module will be called in a deterministic order.

   - Issue #15238(32): *note shutil.copystat(): 47e. now copies Linux
     "extended attributes".

   - Issue #15230(33): runpy.run_path now correctly sets __package__ as
     described in the documentation.

   - Issue #15315(34): Support VS 2010 in distutils cygwincompiler.

   - Issue #15294(35): Fix a regression in pkgutil.extend_path()’s
     handling of nested namespace packages.

   - Issue #15056(36): *note imp.cache_from_source(): 9b6. and *note
     imp.source_from_cache(): 9b7. raise NotImplementedError when
     ‘sys.implementation.cache_tag’ is set to None.

   - Issue #15256(37): Grammatical mistake in exception raised by *note
     imp.find_module(): 9b8.

   - Issue #5931(38): *note wsgiref: 125. environ variable
     SERVER_SOFTWARE will specify an implementation specific term like
     CPython, Jython instead of generic "Python".

   - Issue #13248(39): Remove obsolete argument "max_buffer_size" of
     BufferedWriter and BufferedRWPair, from the io module.

   - Issue #13248(40): Remove obsolete argument "version" of *note
     argparse.ArgumentParser: 9b9.

   - Issue #14814(41): Implement more consistent ordering and sorting
     behaviour for ipaddress objects.

   - Issue #14814(42): *note ipaddress: 9f. network objects correctly
     return NotImplemented when compared to arbitrary objects instead of
     raising TypeError.

   - Issue #14990(43): Correctly fail with SyntaxError on invalid
     encoding declaration.

   - Issue #14814(44): *note ipaddress: 9f. now provides more
     informative error messages when constructing instances directly
     (changes permitted during beta due to provisional API status).

   - Issue #15247(45): *note io.FileIO: 714. now raises an error when
     given a file descriptor pointing to a directory.

   - Issue #15261(46): Stop os.stat(fd) crashing on Windows when fd not
     open.

   - Issue #15166(47): Implement *note imp.get_tag(): 9ba. using
     ‘sys.implementation.cache_tag’.

   - Issue #15210(48): Catch KeyError when ‘importlib.__init__()’ can’t
     find _frozen_importlib in sys.modules, not ImportError.

   - Issue #15030(49): ‘importlib.abc.PyPycLoader’ now supports the new
     source size header field in .pyc files.

   - Issue #5346(50): Preserve permissions of mbox, MMDF and Babyl
     mailbox files on flush().

   - Issue #10571(51): Fix the "–sign" option of distutils’ upload
     command.  Patch by Jakub Wilk.

   - Issue #9559(52): If messages were only added, a new file is no
     longer created and renamed over the old file when flush() is called
     on an mbox, MMDF or Babyl mailbox.

   - Issue #10924(53): Fixed *note crypt.mksalt(): 3c1. to use a RNG
     that is suitable for cryptographic purpose.

   - Issue #15184(54): Ensure consistent results of OS X configuration
     tailoring for universal builds by factoring out common OS
     X-specific customizations from sysconfig, distutils.sysconfig,
     distutils.util, and distutils.unixccompiler into a new module
     _osx_support.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14590

   (2) https://bugs.python.org/15424

   (3) https://bugs.python.org/15576

   (4) https://bugs.python.org/15502

   (5) https://bugs.python.org/15163

   (6) https://bugs.python.org/15471

   (7) https://bugs.python.org/15559

   (8) https://bugs.python.org/15546

   (9) https://bugs.python.org/12655

   (10) https://bugs.python.org/15538

   (11) https://bugs.python.org/15519

   (12) https://bugs.python.org/15502

   (13) https://bugs.python.org/15499

   (14) https://bugs.python.org/15463

   (15) https://bugs.python.org/6056

   (16) https://bugs.python.org/15364

   (17) https://bugs.python.org/15413

   (18) https://bugs.python.org/15402

   (19) https://bugs.python.org/15232

   (20) https://bugs.python.org/15094

   (21) https://bugs.python.org/13922

   (22) https://bugs.python.org/12353

   (23) https://bugs.python.org/10017

   (24) https://bugs.python.org/14998

   (25) https://bugs.python.org/15397

   (26) https://bugs.python.org/14635

   (27) https://bugs.python.org/15180

   (28) https://bugs.python.org/15343

   (29) https://bugs.python.org/15314

   (30) https://bugs.python.org/15357

   (31) https://bugs.python.org/15233

   (32) https://bugs.python.org/15238

   (33) https://bugs.python.org/15230

   (34) https://bugs.python.org/15315

   (35) https://bugs.python.org/15294

   (36) https://bugs.python.org/15056

   (37) https://bugs.python.org/15256

   (38) https://bugs.python.org/5931

   (39) https://bugs.python.org/13248

   (40) https://bugs.python.org/13248

   (41) https://bugs.python.org/14814

   (42) https://bugs.python.org/14814

   (43) https://bugs.python.org/14990

   (44) https://bugs.python.org/14814

   (45) https://bugs.python.org/15247

   (46) https://bugs.python.org/15261

   (47) https://bugs.python.org/15166

   (48) https://bugs.python.org/15210

   (49) https://bugs.python.org/15030

   (50) https://bugs.python.org/5346

   (51) https://bugs.python.org/10571

   (52) https://bugs.python.org/9559

   (53) https://bugs.python.org/10924

   (54) https://bugs.python.org/15184


File: python.info,  Node: C API<4>,  Next: Extension Modules<5>,  Prev: Library<20>,  Up: Python 3 3 0 Beta 2

1.14.21.3 C API
...............

   - Issue #15610(1): ‘PyImport_ImportModuleEx()’ now uses a ’level’ of
     0 instead of -1.

   - Issue #15169(2), issue #14599(3): Strip out the C implementation of
     *note imp.source_from_cache(): 9b7. used by
     PyImport_ExecCodeModuleWithPathnames() and used the Python code
     instead.  Leads to PyImport_ExecCodeModuleObject() to not try to
     infer the source path from the bytecode path as
     PyImport_ExecCodeModuleWithPathnames() does.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15610

   (2) https://bugs.python.org/15169

   (3) https://bugs.python.org/14599


File: python.info,  Node: Extension Modules<5>,  Next: IDLE<14>,  Prev: C API<4>,  Up: Python 3 3 0 Beta 2

1.14.21.4 Extension Modules
...........................

   - Issue #6493(1): An issue in ctypes on Windows that caused structure
     bitfields of type *note ctypes.c_uint32: 9bd. and width 32 to
     incorrectly be set has been fixed.

   - Issue #15194(2): Update libffi to the 3.0.11 release.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/6493

   (2) https://bugs.python.org/15194


File: python.info,  Node: IDLE<14>,  Next: Tools/Demos<11>,  Prev: Extension Modules<5>,  Up: Python 3 3 0 Beta 2

1.14.21.5 IDLE
..............

   - Issue #13052(1): Fix IDLE crashing when replace string in
     Search/Replace dialog ended with ‘\’.  Patch by Roger Serwy.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/13052


File: python.info,  Node: Tools/Demos<11>,  Next: Documentation<15>,  Prev: IDLE<14>,  Up: Python 3 3 0 Beta 2

1.14.21.6 Tools/Demos
.....................

   - Issue #15458(1): python-config gets a new option –configdir to
     print the $LIBPL value.

   - Move importlib.test.benchmark to Tools/importbench.

   - Issue #12605(2): The gdb hooks for debugging CPython (within
     Tools/gdb) have been enhanced to show information on more C frames
     relevant to CPython within the "py-bt" and "py-bt-full" commands:

        * C frames that are waiting on the GIL

        * C frames that are garbage-collecting

        * C frames that are due to the invocation of a PyCFunction

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15458

   (2) https://bugs.python.org/12605


File: python.info,  Node: Documentation<15>,  Next: Tests<14>,  Prev: Tools/Demos<11>,  Up: Python 3 3 0 Beta 2

1.14.21.7 Documentation
.......................

   - Issue #15041(1): Update "see also" list in tkinter documentation.

   - Issue #15444(2): Use proper spelling for non-ASCII contributor
     names.  Patch by Serhiy Storchaka.

   - Issue #15295(3): Reorganize and rewrite the documentation on the
     import system.

   - Issue #15230(4): Clearly document some of the limitations of the
     runpy module and nudge readers towards importlib when appropriate.

   - Issue #15053(5): Copy Python 3.3 import lock change notice to all
     relevant functions in imp instead of just at the top of the
     relevant section.

   - Issue #15288(6): Link to the term "loader" in notes in pkgutil
     about how things won’t work as expected in Python 3.3 and mark the
     requisite functions as "changed" since they will no longer work
     with modules directly imported by import itself.

   - Issue #13557(7): Clarify effect of giving two different namespaces
     to *note exec(): 6a0. or ‘execfile()’.

   - Issue #15250(8): Document that *note filecmp.dircmp(): 1d0.
     compares files shallowly.  Patch contributed by Chris Jerdonek.

   - Issue #15442(9): Expose the default list of directories ignored by
     *note filecmp.dircmp(): 1d0. as a module attribute, and expand the
     list to more modern values.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15041

   (2) https://bugs.python.org/15444

   (3) https://bugs.python.org/15295

   (4) https://bugs.python.org/15230

   (5) https://bugs.python.org/15053

   (6) https://bugs.python.org/15288

   (7) https://bugs.python.org/13557

   (8) https://bugs.python.org/15250

   (9) https://bugs.python.org/15442


File: python.info,  Node: Tests<14>,  Next: Build<16>,  Prev: Documentation<15>,  Up: Python 3 3 0 Beta 2

1.14.21.8 Tests
...............

   - Issue #15467(1): Move helpers for ‘__sizeof__()’ tests into
     test_support.  Patch by Serhiy Storchaka.

   - Issue #15320(2): Make iterating the list of tests thread-safe when
     running tests in multiprocess mode.  Patch by Chris Jerdonek.

   - Issue #15168(3): Move ‘importlib.test’ to ‘test.test_importlib’.

   - Issue #15091(4): Reactivate a test on UNIX which was failing thanks
     to a forgotten *note importlib.invalidate_caches(): 390. call.

   - Issue #15230(5): Adopted a more systematic approach in the runpy
     tests.

   - Issue #15300(6): Ensure the temporary test working directories are
     in the same parent folder when running tests in multiprocess mode
     from a Python build.  Patch by Chris Jerdonek.

   - Issue #15284(7): Skip {send,recv}msg tests in test_socket when IPv6
     is not enabled.  Patch by Brian Brazil.

   - Issue #15277(8): Fix a resource leak in support.py when IPv6 is
     disabled.  Patch by Brian Brazil.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15467

   (2) https://bugs.python.org/15320

   (3) https://bugs.python.org/15168

   (4) https://bugs.python.org/15091

   (5) https://bugs.python.org/15230

   (6) https://bugs.python.org/15300

   (7) https://bugs.python.org/15284

   (8) https://bugs.python.org/15277


File: python.info,  Node: Build<16>,  Prev: Tests<14>,  Up: Python 3 3 0 Beta 2

1.14.21.9 Build
...............

   - Issue #11715(1): Fix multiarch detection without having Debian
     development tools (dpkg-dev) installed.

   - Issue #15037(2): Build OS X installers with local copy of ncurses
     5.9 libraries to avoid curses.unget_wch bug present in older
     versions of ncurses such as those shipped with OS X.

   - Issue #15560(3): Fix building _sqlite3 extension on OS X with an
     SDK. Also, for OS X installers, ensure consistent sqlite3 behavior
     and feature availability by building a local copy of libsqlite3
     rather than depending on the wide range of versions supplied with
     various OS X releases.

   - Issue #8847(4): Disable COMDAT folding in Windows PGO builds.

   - Issue #14018(5): Fix OS X Tcl/Tk framework checking when using OS X
     SDKs.

   - Issue #16256(6): OS X installer now sets correct permissions for
     doc directory.

   - Issue #15431(7): Add _freeze_importlib project to regenerate
     importlib.h on Windows.  Patch by Kristján Valur Jónsson.

   - Issue #14197(8): For OS X framework builds, ensure links to the
     shared library are created with the proper ABI suffix.

   - Issue #14330(9): For cross builds, don’t use host python, use host
     search paths for host compiler.

   - Issue #15235(10): Allow Berkley DB versions up to 5.3 to build the
     dbm module.

   - Issue #15268(11): Search curses.h in /usr/include/ncursesw.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/11715

   (2) https://bugs.python.org/15037

   (3) https://bugs.python.org/15560

   (4) https://bugs.python.org/8847

   (5) https://bugs.python.org/14018

   (6) https://bugs.python.org/16256

   (7) https://bugs.python.org/15431

   (8) https://bugs.python.org/14197

   (9) https://bugs.python.org/14330

   (10) https://bugs.python.org/15235

   (11) https://bugs.python.org/15268


File: python.info,  Node: Python 3 3 0 Beta 1,  Next: Python 3 3 0 Alpha 4,  Prev: Python 3 3 0 Beta 2,  Up: Changelog

1.14.22 Python 3.3.0 Beta 1
---------------------------

`Release date: 27-Jun-2012'

* Menu:

* Core and Builtins: Core and Builtins<21>. 
* Library: Library<21>. 
* C-API: C-API<3>. 
* Extension Modules: Extension Modules<6>. 
* IDLE: IDLE<15>. 
* Documentation: Documentation<16>. 
* Tests: Tests<15>. 
* Build: Build<17>. 


File: python.info,  Node: Core and Builtins<21>,  Next: Library<21>,  Up: Python 3 3 0 Beta 1

1.14.22.1 Core and Builtins
...........................

   - Fix a (most likely) very rare memory leak when calling main() and
     not being able to decode a command-line argument.

   - Issue #14815(1): Use Py_ssize_t instead of long for the object
     hash, to preserve all 64 bits of hash on Win64.

   - Issue #12268(2): File readline, readlines and read() or readall()
     methods no longer lose data when an underlying read system call is
     interrupted.  IOError is no longer raised due to a read system call
     returning EINTR from within these methods.

   - Issue #11626(3): Add _SizeT functions to stable ABI.

   - Issue #15142(4): Fix reference leak when deallocating instances of
     types created using PyType_FromSpec().

   - Issue #10053(5): Don’t close FDs when FileIO.__init__ fails.
     Loosely based on the work by Hirokazu Yamamoto.

   - Issue #15096(6): Removed support for ur’’ as the raw notation isn’t
     compatible with Python 2.x’s raw unicode strings.

   - Issue #13783(7): Generator objects now use the identifier APIs
     internally

   - Issue #14874(8): Restore charmap decoding speed to pre-PEP 393
     levels.  Patch by Serhiy Storchaka.

   - Issue #15026(9): utf-16 encoding is now significantly faster (up to
     10x).  Patch by Serhiy Storchaka.

   - Issue #11022(10): open() and io.TextIOWrapper are now calling
     locale.getpreferredencoding(False) instead of
     locale.getpreferredencoding() in text mode if the encoding is not
     specified.  Don’t change temporary the locale encoding using
     locale.setlocale(), use the current locale encoding instead of the
     user preferred encoding.

   - Issue #14673(11): Add Eric Snow’s sys.implementation
     implementation.

   - Issue #15038(12): Optimize python Locks on Windows.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14815

   (2) https://bugs.python.org/12268

   (3) https://bugs.python.org/11626

   (4) https://bugs.python.org/15142

   (5) https://bugs.python.org/10053

   (6) https://bugs.python.org/15096

   (7) https://bugs.python.org/13783

   (8) https://bugs.python.org/14874

   (9) https://bugs.python.org/15026

   (10) https://bugs.python.org/11022

   (11) https://bugs.python.org/14673

   (12) https://bugs.python.org/15038


File: python.info,  Node: Library<21>,  Next: C-API<3>,  Prev: Core and Builtins<21>,  Up: Python 3 3 0 Beta 1

1.14.22.2 Library
.................

   - Issue #12288(1): Consider ’0’ and ’0.0’ as valid initialvalue for
     tkinter SimpleDialog.

   - Issue #15512(2): Add a __sizeof__ implementation for parser.  Patch
     by Serhiy Storchaka.

   - Issue #15469(3): Add a __sizeof__ implementation for deque objects.
     Patch by Serhiy Storchaka.

   - Issue #15489(4): Add a __sizeof__ implementation for BytesIO
     objects.  Patch by Serhiy Storchaka.

   - Issue #15487(5): Add a __sizeof__ implementation for buffered I/O
     objects.  Patch by Serhiy Storchaka.

   - Issue #15514(6): Correct __sizeof__ support for cpu_set.  Patch by
     Serhiy Storchaka.

   - Issue #15177(7): Added dir_fd parameter to os.fwalk().

   - Issue #15061(8): Re-implemented hmac.compare_digest() in C to
     prevent further timing analysis and to support all buffer protocol
     aware objects as well as ASCII only str instances safely.

   - Issue #15164(9): Change return value of platform.uname() from a
     plain tuple to a collections.namedtuple.

   - Support Mageia Linux in the platform module.

   - Issue #11678(10): Support Arch linux in the platform module.

   - Issue #15118(11): Change return value of os.uname() and os.times()
     from plain tuples to immutable iterable objects with named
     attributes (structseq objects).

   - Speed up _decimal by another 10-15% by caching the thread local
     context that was last accessed.  In the pi benchmark (64-bit
     platform, prec=9), _decimal is now only 1.5x slower than float.

   - Remove the packaging module, which is not ready for prime time.

   - Issue #15154(12): Add "dir_fd" parameter to os.rmdir, remove
     "rmdir" parameter from os.remove / os.unlink.

   - Issue #4489(13): Add a shutil.rmtree that isn’t susceptible to
     symlink attacks.  It is used automatically on platforms supporting
     the necessary os.openat() and os.unlinkat() functions.  Main code
     by Martin von Löwis.

   - Issue #15156(14): HTMLParser now uses the new "html.entities.html5"
     dictionary.

   - Issue #11113(15): add a new "html5" dictionary containing the named
     character references defined by the HTML5 standard and the
     equivalent Unicode character(s) to the html.entities module.

   - Issue #15114(16): the strict mode of HTMLParser and the
     HTMLParseError exception are deprecated now that the parser is able
     to parse invalid markup.

   - Issue #3665(17): u and U escapes are now supported in unicode
     regular expressions.  Patch by Serhiy Storchaka.

   - Issue #15153(18): Added inspect.getgeneratorlocals to simplify
     white box testing of generator state updates

   - Issue #13062(19): Added inspect.getclosurevars to simplify testing
     stateful closures

   - Issue #11024(20): Fixes and additional tests for Time2Internaldate.

   - Issue #14626(21): Large refactoring of functions / parameters in
     the os module.  Many functions now support "dir_fd" and
     "follow_symlinks" parameters; some also support accepting an open
     file descriptor in place of a path string.  Added os.support_*
     collections as LBYL helpers.  Removed many functions only
     previously seen in 3.3 alpha releases (often starting with "f" or
     "l", or ending with "at").  Originally suggested by Serhiy
     Storchaka; implemented by Larry Hastings.

   - Issue #15008(22): Implement PEP 362 "Signature Objects".  Patch by
     Yury Selivanov.

   - Issue: #15138: base64.urlsafe_{en,de}code() are now 3-4x faster.

   - Issue #444582(23): Add shutil.which, for finding programs on the
     system path.  Original patch by Erik Demaine, with later iterations
     by Jan Killian and Brian Curtin.

   - Issue #14837(24): SSL errors now have ‘library’ and ‘reason’
     attributes describing precisely what happened and in which OpenSSL
     submodule.  The str() of a SSLError is also enhanced accordingly.

   - Issue #9527(25): datetime.astimezone() method will now supply a
     class timezone instance corresponding to the system local timezone
     when called with no arguments.

   - Issue #14653(26): email.utils.mktime_tz() no longer relies on
     system mktime() when timezone offest is supplied.

   - Issue #14684(27): zlib.compressobj() and zlib.decompressobj() now
     support the use of predefined compression dictionaries.  Original
     patch by Sam Rushing.

   - Fix GzipFile’s handling of filenames given as bytes objects.

   - Issue #14772(28): Return destination values from some shutil
     functions.

   - Issue #15064(29): Implement context manager protocol for
     multiprocessing types

   - Issue #15101(30): Make pool finalizer avoid joining current thread.

   - Issue #14657(31): The frozen instance of importlib used for
     bootstrap is now also the module imported as importlib._bootstrap.

   - Issue #14055(32): Add __sizeof__ support to _elementtree.

   - Issue #15054(33): A bug in tokenize.tokenize that caused string
     literals with ’b’ prefixes to be incorrectly tokenized has been
     fixed.  Patch by Serhiy Storchaka.

   - Issue #15006(34): Allow equality comparison between naive and aware
     time or datetime objects.

   - Issue #15036(35): Mailbox no longer throws an error if a flush is
     done between operations when removing or changing multiple items in
     mbox, MMDF, or Babyl mailboxes.

   - Issue #14059(36): Implement multiprocessing.Barrier.

   - Issue #15061(37): The inappropriately named hmac.secure_compare has
     been renamed to hmac.compare_digest, restricted to operating on
     bytes inputs only and had its documentation updated to more
     accurately reflect both its intent and its limitations

   - Issue #13841(38): Make child processes exit using sys.exit() on
     Windows.

   - Issue #14936(39): curses_panel was converted to PEP 3121 and PEP
     384 API. Patch by Robin Schreiber.

   - Issue #1667546(40): On platforms supporting tm_zone and tm_gmtoff
     fields in struct tm, time.struct_time objects returned by
     time.gmtime(), time.localtime() and time.strptime() functions now
     have tm_zone and tm_gmtoff attributes.  Original patch by Paul
     Boddie.

   - Rename adjusted attribute to adjustable in time.get_clock_info()
     result.

   - Issue #3518(41): Remove references to non-existent
     BaseManager.from_address() method.

   - Issue #13857(42): Added textwrap.indent() function (initial patch
     by Ezra Berch)

   - Issue #2736(43): Added datetime.timestamp() method.

   - Issue #13854(44): Make multiprocessing properly handle non-integer
     non-string argument to SystemExit.

   - Issue #12157(45): Make pool.map() empty iterables correctly.
     Initial patch by mouad.

   - Issue #11823(46): disassembly now shows argument counts on calls
     with keyword args.

   - Issue #14711(47): os.stat_float_times() has been deprecated.

   - LZMAFile now accepts the modes "rb"/"wb"/"ab" as synonyms of
     "r"/"w"/"a".

   - The bz2 and lzma modules now each contain an open() function,
     allowing compressed files to readily be opened in text mode as well
     as binary mode.

   - BZ2File.__init__() and LZMAFile.__init__() now accept a file object
     as their first argument, rather than requiring a separate "fileobj"
     argument.

   - gzip.open() now accepts file objects as well as filenames.

   - Issue #14992(48): os.makedirs(path, exist_ok=True) would raise an
     OSError when the path existed and had the S_ISGID mode bit set when
     it was not explicitly asked for.  This is no longer an exception as
     mkdir cannot control if the OS sets that bit for it or not.

   - Issue #14989(49): Make the CGI enable option to http.server
     available via command line.

   - Issue #14987(50): Add a missing import statement to inspect.

   - Issue #1079(51): email.header.decode_header now correctly parses
     all the examples in RFC2047.  There is a necessary visible behavior
     change: the leading and/or trailing whitespace on ASCII parts is
     now preserved.

   - Issue #14969(52): Better handling of exception chaining in
     contextlib.ExitStack

   - Issue #14963(53): Convert contextlib.ExitStack.__exit__ to use an
     iterative algorithm (Patch by Alon Horev)

   - Issue #14785(54): Add sys._debugmallocstats() to help debug
     low-level memory allocation issues

   - Issue #14443(55): Ensure that .py files are byte-compiled with the
     correct Python executable within bdist_rpm even on older versions
     of RPM

   ---------- Footnotes ----------

   (1) https://bugs.python.org/12288

   (2) https://bugs.python.org/15512

   (3) https://bugs.python.org/15469

   (4) https://bugs.python.org/15489

   (5) https://bugs.python.org/15487

   (6) https://bugs.python.org/15514

   (7) https://bugs.python.org/15177

   (8) https://bugs.python.org/15061

   (9) https://bugs.python.org/15164

   (10) https://bugs.python.org/11678

   (11) https://bugs.python.org/15118

   (12) https://bugs.python.org/15154

   (13) https://bugs.python.org/4489

   (14) https://bugs.python.org/15156

   (15) https://bugs.python.org/11113

   (16) https://bugs.python.org/15114

   (17) https://bugs.python.org/3665

   (18) https://bugs.python.org/15153

   (19) https://bugs.python.org/13062

   (20) https://bugs.python.org/11024

   (21) https://bugs.python.org/14626

   (22) https://bugs.python.org/15008

   (23) https://bugs.python.org/444582

   (24) https://bugs.python.org/14837

   (25) https://bugs.python.org/9527

   (26) https://bugs.python.org/14653

   (27) https://bugs.python.org/14684

   (28) https://bugs.python.org/14772

   (29) https://bugs.python.org/15064

   (30) https://bugs.python.org/15101

   (31) https://bugs.python.org/14657

   (32) https://bugs.python.org/14055

   (33) https://bugs.python.org/15054

   (34) https://bugs.python.org/15006

   (35) https://bugs.python.org/15036

   (36) https://bugs.python.org/14059

   (37) https://bugs.python.org/15061

   (38) https://bugs.python.org/13841

   (39) https://bugs.python.org/14936

   (40) https://bugs.python.org/1667546

   (41) https://bugs.python.org/3518

   (42) https://bugs.python.org/13857

   (43) https://bugs.python.org/2736

   (44) https://bugs.python.org/13854

   (45) https://bugs.python.org/12157

   (46) https://bugs.python.org/11823

   (47) https://bugs.python.org/14711

   (48) https://bugs.python.org/14992

   (49) https://bugs.python.org/14989

   (50) https://bugs.python.org/14987

   (51) https://bugs.python.org/1079

   (52) https://bugs.python.org/14969

   (53) https://bugs.python.org/14963

   (54) https://bugs.python.org/14785

   (55) https://bugs.python.org/14443


File: python.info,  Node: C-API<3>,  Next: Extension Modules<6>,  Prev: Library<21>,  Up: Python 3 3 0 Beta 1

1.14.22.3 C-API
...............

   - Issue #15146(1): Add PyType_FromSpecWithBases.  Patch by Robin
     Schreiber.

   - Issue #15042(2): Add PyState_AddModule and PyState_RemoveModule.
     Add version guard for Py_LIMITED_API additions.  Patch by Robin
     Schreiber.

   - Issue #13783(3): Inadvertent additions to the public C API in the
     PEP 380 implementation have either been removed or marked as
     private interfaces.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15146

   (2) https://bugs.python.org/15042

   (3) https://bugs.python.org/13783


File: python.info,  Node: Extension Modules<6>,  Next: IDLE<15>,  Prev: C-API<3>,  Up: Python 3 3 0 Beta 1

1.14.22.4 Extension Modules
...........................

   - Issue #15000(1): Support the "unique" x32 architecture in
     _posixsubprocess.c.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15000


File: python.info,  Node: IDLE<15>,  Next: Documentation<16>,  Prev: Extension Modules<6>,  Up: Python 3 3 0 Beta 1

1.14.22.5 IDLE
..............

   - Issue #9803(1): Don’t close IDLE on saving if breakpoint is open.
     Patch by Roger Serwy.

   - Issue #14962(2): Update text coloring in IDLE shell window after
     changing options.  Patch by Roger Serwy.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/9803

   (2) https://bugs.python.org/14962


File: python.info,  Node: Documentation<16>,  Next: Tests<15>,  Prev: IDLE<15>,  Up: Python 3 3 0 Beta 1

1.14.22.6 Documentation
.......................

   - Issue #15176(1): Clarified behavior, documentation, and
     implementation of os.listdir().

   - Issue #14982(2): Document that pkgutil’s iteration functions
     require the non-standard iter_modules() method to be defined by an
     importer (something the importlib importers do not define).

   - Issue #15081(3): Document PyState_FindModule.  Patch by Robin
     Schreiber.

   - Issue #14814(4): Added first draft of ipaddress module API
     reference

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15176

   (2) https://bugs.python.org/14982

   (3) https://bugs.python.org/15081

   (4) https://bugs.python.org/14814


File: python.info,  Node: Tests<15>,  Next: Build<17>,  Prev: Documentation<16>,  Up: Python 3 3 0 Beta 1

1.14.22.7 Tests
...............

   - Issue #15187(1): Bugfix: remove temporary directories test_shutil
     was leaving behind.

   - Issue #14769(2): test_capi now has SkipitemTest, which cleverly
     checks for "parity" between PyArg_ParseTuple() and the
     Python/getargs.c static function skipitem() for all possible
     "format units".

   - test_nntplib now tolerates being run from behind NNTP gateways that
     add "X-Antivirus" headers to articles

   - Issue #15043(3): test_gdb is now skipped entirely if gdb security
     settings block loading of the gdb hooks

   - Issue #14963(4): Add test cases for exception handling behaviour in
     contextlib.ExitStack (Initial patch by Alon Horev)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15187

   (2) https://bugs.python.org/14769

   (3) https://bugs.python.org/15043

   (4) https://bugs.python.org/14963


File: python.info,  Node: Build<17>,  Prev: Tests<15>,  Up: Python 3 3 0 Beta 1

1.14.22.8 Build
...............

   - 
     Issue #13590(1): Improve support for OS X Xcode 4:

             * Try to avoid building Python or extension modules with
               problematic llvm-gcc compiler.

             * Since Xcode 4 removes ppc support, extension module
               builds now check for ppc compiler support and
               automatically remove ppc and ppc64 archs when not
               available.

             * Since Xcode 4 no longer install SDKs in default
               locations, extension module builds now revert to using
               installed headers and libs if the SDK used to build the
               interpreter is not available.

             * Update ./configure to use better defaults for universal
               builds; in particular, –enable-universalsdk=yes uses the
               Xcode default SDK and –with-universal-archs now defaults
               to "intel" if ppc not available.

   - Issue #14225(2): Fix Unicode support for curses (#12567) on OS X

   - Issue #14928(3): Fix importlib bootstrap issues by using a custom
     executable (Modules/_freeze_importlib) to build Python/importlib.h.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/13590

   (2) https://bugs.python.org/14225

   (3) https://bugs.python.org/14928


File: python.info,  Node: Python 3 3 0 Alpha 4,  Next: Python 3 3 0 Alpha 3,  Prev: Python 3 3 0 Beta 1,  Up: Changelog

1.14.23 Python 3.3.0 Alpha 4
----------------------------

`Release date: 31-May-2012'

* Menu:

* Core and Builtins: Core and Builtins<22>. 
* Library: Library<22>. 
* IDLE: IDLE<16>. 
* Tools/Demos: Tools/Demos<12>. 
* Build: Build<18>. 
* C-API: C-API<4>. 
* Documentation: Documentation<17>. 


File: python.info,  Node: Core and Builtins<22>,  Next: Library<22>,  Up: Python 3 3 0 Alpha 4

1.14.23.1 Core and Builtins
...........................

   - Issue #14835(1): Make plistlib output empty arrays & dicts like OS
     X. Patch by Sidney San Martín.

   - Issue #14744(2): Use the new _PyUnicodeWriter internal API to speed
     up str%args and str.format(args).

   - Issue #14930(3): Make memoryview objects weakrefable.

   - Issue #14775(4): Fix a potential quadratic dict build-up due to the
     garbage collector repeatedly trying to untrack dicts.

   - Issue #14857(5): fix regression in references to PEP 3135 implicit
     __class__ closure variable (Reopens issue #12370(6))

   - Issue #14712(7) (PEP 405): Virtual environments.  Implemented by
     Vinay Sajip.

   - Issue #14660(8) (PEP 420): Namespace packages.  Implemented by Eric
     Smith.

   - Issue #14494(9): Fix __future__.py and its documentation to note
     that absolute imports are the default behavior in 3.0 instead of
     2.7.  Patch by Sven Marnach.

   - Issue #9260(10): A finer-grained import lock.  Most of the import
     sequence now uses per-module locks rather than the global import
     lock, eliminating well-known issues with threads and imports.

   - Issue #14624(11): UTF-16 decoding is now 3x to 4x faster on various
     inputs.  Patch by Serhiy Storchaka.

   - asdl_seq and asdl_int_seq are now Py_ssize_t sized.

   - Issue #14133(12) (PEP 415): Implement suppression of __context__
     display with an attribute on BaseException.  This replaces the
     original mechanism of PEP 409.

   - Issue #14417(13): Mutating a dict during lookup now restarts the
     lookup instead of raising a RuntimeError (undoes issue #14205(14)).

   - Issue #14738(15): Speed-up UTF-8 decoding on non-ASCII data.  Patch
     by Serhiy Storchaka.

   - Issue #14700(16): Fix two broken and undefined-behaviour-inducing
     overflow checks in old-style string formatting.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14835

   (2) https://bugs.python.org/14744

   (3) https://bugs.python.org/14930

   (4) https://bugs.python.org/14775

   (5) https://bugs.python.org/14857

   (6) https://bugs.python.org/12370

   (7) https://bugs.python.org/14712

   (8) https://bugs.python.org/14660

   (9) https://bugs.python.org/14494

   (10) https://bugs.python.org/9260

   (11) https://bugs.python.org/14624

   (12) https://bugs.python.org/14133

   (13) https://bugs.python.org/14417

   (14) https://bugs.python.org/14205

   (15) https://bugs.python.org/14738

   (16) https://bugs.python.org/14700


File: python.info,  Node: Library<22>,  Next: IDLE<16>,  Prev: Core and Builtins<22>,  Up: Python 3 3 0 Alpha 4

1.14.23.2 Library
.................

   - Issue #14690(1): Use monotonic clock instead of system clock in the
     sched, subprocess and trace modules.

   - Issue #14443(2): Tell rpmbuild to use the correct version of Python
     in bdist_rpm.  Initial patch by Ross Lagerwall.

   - Issue #12515(3): email now registers a defect if it gets to EOF
     while parsing a MIME part without seeing the closing MIME boundary.

   - Issue #1672568(4): email now always decodes base64 payloads, adding
     padding and ignoring non-base64-alphabet characters if needed, and
     registering defects for any such problems.

   - Issue #14925(5): email now registers a defect when the parser
     decides that there is a missing header/body separator line.
     MalformedHeaderDefect, which the existing code would never actually
     generate, is deprecated.

   - Issue #10365(6): File open dialog now works instead of crashing
     even when the parent window is closed before the dialog.  Patch by
     Roger Serwy.

   - Issue #8739(7): Updated smtpd to support RFC 5321, and added
     support for the RFC 1870 SIZE extension.

   - Issue #665194(8): Added a localtime function to email.utils to
     provide an aware local datetime for use in setting Date headers.

   - Issue #12586(9): Added new provisional policies that implement
     convenient unicode support for email headers.  See What’s New for
     details.

   - Issue #14731(10): Refactored email Policy framework to support full
     backward compatibility with Python 3.2 by default yet allow for the
     introduction of new features through new policies.  Note that
     Policy.must_be_7bit is renamed to cte_type.

   - Issue #14876(11): Use user-selected font for highlight
     configuration.

   - Issue #14920(12): Fix the help(urllib.parse) failure on locale C on
     terminals.  Have ascii characters in help.

   - Issue #14548(13): Make multiprocessing finalizers check pid before
     running to cope with possibility of gc running just after fork.

   - Issue #14036(14): Add an additional check to validate that port in
     urlparse does not go in illegal range and returns None.

   - Issue #14862(15): Add missing names to os.__all__

   - Issue #14875(16): Use float(’inf’) instead of float(’1e66666’) in
     the json module.

   - Issue #13585(17): Added contextlib.ExitStack

   - PEP 3144, Issue #14814(18): Added the ipaddress module

   - Issue #14426(19): Correct the Date format in Expires attribute of
     Set-Cookie Header in Cookie.py.

   - Issue #14588(20): The types module now provide new_class() and
     prepare_class() functions to support PEP 3115 compliant dynamic
     class creation.  Patch by Daniel Urban and Nick Coghlan.

   - Issue #13152(21): Allow to specify a custom tabsize for expanding
     tabs in textwrap.  Patch by John Feuerstein.

   - Issue #14721(22): Send the correct ’Content-length: 0’ header when
     the body is an empty string ’’.  Initial Patch contributed by Arve
     Knudsen.

   - Issue #14072(23): Fix parsing of ’tel’ URIs in urlparse by making
     the check for ports stricter.

   - Issue #9374(24): Generic parsing of query and fragment portions of
     url for any scheme.  Supported both by RFC3986 and RFC2396.

   - Issue #14798(25): Fix the functions in pyclbr to raise an
     ImportError when the first part of a dotted name is not a package.
     Patch by Xavier de Gaye.

   - Issue #12098(26): multiprocessing on Windows now starts child
     processes using the same sys.flags as the current process.  Initial
     patch by Sergey Mezentsev.

   - Issue #13031(27): Small speed-up for tarfile when unzipping
     tarfiles.  Patch by Justin Peel.

   - Issue #14780(28): urllib.request.urlopen() now has a ‘cadefault’
     argument to use the default certificate store.  Initial patch by
     James Oakley.

   - Issue #14829(29): Fix bisect and range() indexing with large
     indices (>= 2 ** 32) under 64-bit Windows.

   - Issue #14732(30): The _csv module now uses PEP 3121 module
     initialization.  Patch by Robin Schreiber.

   - Issue #14809(31): Add HTTP status codes introduced by RFC 6585 to
     http.server and http.client.  Patch by EungJun Yi.

   - Issue #14777(32): tkinter may return undecoded UTF-8 bytes as a
     string when accessing the Tk clipboard.  Modify clipboad_get() to
     first request type UTF8_STRING when no specific type is requested
     in an X11 windowing environment, falling back to the current
     default type STRING if that fails.  Original patch by Thomas
     Kluyver.

   - Issue #14773(33): Fix os.fwalk() failing on dangling symlinks.

   - Issue #12541(34): Be lenient with quotes around Realm field of HTTP
     Basic Authentation in urllib2.

   - Issue #14807(35): move undocumented tarfile.filemode() to
     stat.filemode() and add doc entry.  Add tarfile.filemode alias with
     deprecation warning.

   - Issue #13815(36): TarFile.extractfile() now returns
     io.BufferedReader objects.

   - Issue #14532(37): Add a secure_compare() helper to the hmac module,
     to mitigate timing attacks.  Patch by Jon Oberheide.

   - Add importlib.util.resolve_name().

   - Issue #14366(38): Support lzma compression in zip files.  Patch by
     Serhiy Storchaka.

   - Issue #13959(39): Introduce importlib.find_loader() and document
     imp.find_module/load_module as deprecated.

   - Issue #14082(40): shutil.copy2() now copies extended attributes, if
     possible.  Patch by Hynek Schlawack.

   - Issue #13959(41): Make
     importlib.abc.FileLoader.load_module()/get_filename() and
     importlib.machinery.ExtensionFileLoader.load_module() have their
     single argument be optional.  Allows for the replacement (and thus
     deprecation) of imp.load_source()/load_package()/load_compiled().

   - Issue #13959(42): imp.get_suffixes() has been deprecated in favour
     of the new attributes on importlib.machinery: SOURCE_SUFFIXES,
     DEBUG_BYTECODE_SUFFIXES, OPTIMIZED_BYTECODE_SUFFIXES,
     BYTECODE_SUFFIXES, and EXTENSION_SUFFIXES. This led to an indirect
     deprecation of inspect.getmoduleinfo().

   - Issue #14662(43): Prevent shutil failures on OS X when destination
     does not support chflag operations.  Patch by Hynek Schlawack.

   - Issue #14157(44): Fix time.strptime failing without a year on
     February 29th.  Patch by Hynek Schlawack.

   - Issue #14753(45): Make multiprocessing’s handling of negative
     timeouts the same as it was in Python 3.2.

   - Issue #14583(46): Fix importlib bug when a package’s __init__.py
     would first import one of its modules then raise an error.

   - Issue #14741(47): Fix missing support for Ellipsis (’...’) in
     parser module.

   - Issue #14697(48): Fix missing support for set displays and set
     comprehensions in parser module.

   - Issue #14701(49): Fix missing support for ’raise ...  from’ in
     parser module.

   - Add support for timeouts to the acquire() methods of
     multiprocessing’s lock/semaphore/condition proxies.

   - Issue #13989(50): Add support for text mode to gzip.open().

   - Issue #14127(51): The os.stat() result object now provides three
     additional fields: st_ctime_ns, st_mtime_ns, and st_atime_ns,
     providing those times as an integer with nanosecond resolution.
     The functions os.utime(), os.lutimes(), and os.futimes() now accept
     a new parameter, ns, which accepts mtime and atime as integers with
     nanosecond resolution.

   - Issue #14127(52) and #10148: shutil.copystat now preserves exact
     mtime and atime on filesystems providing nanosecond resolution.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14690

   (2) https://bugs.python.org/14443

   (3) https://bugs.python.org/12515

   (4) https://bugs.python.org/1672568

   (5) https://bugs.python.org/14925

   (6) https://bugs.python.org/10365

   (7) https://bugs.python.org/8739

   (8) https://bugs.python.org/665194

   (9) https://bugs.python.org/12586

   (10) https://bugs.python.org/14731

   (11) https://bugs.python.org/14876

   (12) https://bugs.python.org/14920

   (13) https://bugs.python.org/14548

   (14) https://bugs.python.org/14036

   (15) https://bugs.python.org/14862

   (16) https://bugs.python.org/14875

   (17) https://bugs.python.org/13585

   (18) https://bugs.python.org/14814

   (19) https://bugs.python.org/14426

   (20) https://bugs.python.org/14588

   (21) https://bugs.python.org/13152

   (22) https://bugs.python.org/14721

   (23) https://bugs.python.org/14072

   (24) https://bugs.python.org/9374

   (25) https://bugs.python.org/14798

   (26) https://bugs.python.org/12098

   (27) https://bugs.python.org/13031

   (28) https://bugs.python.org/14780

   (29) https://bugs.python.org/14829

   (30) https://bugs.python.org/14732

   (31) https://bugs.python.org/14809

   (32) https://bugs.python.org/14777

   (33) https://bugs.python.org/14773

   (34) https://bugs.python.org/12541

   (35) https://bugs.python.org/14807

   (36) https://bugs.python.org/13815

   (37) https://bugs.python.org/14532

   (38) https://bugs.python.org/14366

   (39) https://bugs.python.org/13959

   (40) https://bugs.python.org/14082

   (41) https://bugs.python.org/13959

   (42) https://bugs.python.org/13959

   (43) https://bugs.python.org/14662

   (44) https://bugs.python.org/14157

   (45) https://bugs.python.org/14753

   (46) https://bugs.python.org/14583

   (47) https://bugs.python.org/14741

   (48) https://bugs.python.org/14697

   (49) https://bugs.python.org/14701

   (50) https://bugs.python.org/13989

   (51) https://bugs.python.org/14127

   (52) https://bugs.python.org/14127


File: python.info,  Node: IDLE<16>,  Next: Tools/Demos<12>,  Prev: Library<22>,  Up: Python 3 3 0 Alpha 4

1.14.23.3 IDLE
..............

   - Issue #14958(1): Change IDLE systax highlighting to recognize all
     string and byte literals supported in Python 3.3.

   - Issue #10997(2): Prevent a duplicate entry in IDLE’s "Recent Files"
     menu.

   - Issue #14929(3): Stop IDLE 3.x from closing on Unicode decode
     errors when grepping.  Patch by Roger Serwy.

   - Issue #12510(4): Attempting to get invalid tooltip no longer closes
     IDLE. Other tooltipss have been corrected or improved and the
     number of tests has been tripled.  Original patch by Roger Serwy.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14958

   (2) https://bugs.python.org/10997

   (3) https://bugs.python.org/14929

   (4) https://bugs.python.org/12510


File: python.info,  Node: Tools/Demos<12>,  Next: Build<18>,  Prev: IDLE<16>,  Up: Python 3 3 0 Alpha 4

1.14.23.4 Tools/Demos
.....................

   - Issue #14695(1): Bring Tools/parser/unparse.py support up to date
     with the Python 3.3 Grammar.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14695


File: python.info,  Node: Build<18>,  Next: C-API<4>,  Prev: Tools/Demos<12>,  Up: Python 3 3 0 Alpha 4

1.14.23.5 Build
...............

   - Issue #14472(1): Update .gitignore.  Patch by Matej Cepl.

   - Upgrade Windows library versions: bzip 1.0.6, OpenSSL 1.0.1c.

   - Issue #14693(2): Under non-Windows platforms, hashlib’s fallback
     modules are always compiled, even if OpenSSL is present at build
     time.

   - Issue #13210(3): Windows build now uses VS2010, ported from VS2008.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14472

   (2) https://bugs.python.org/14693

   (3) https://bugs.python.org/13210


File: python.info,  Node: C-API<4>,  Next: Documentation<17>,  Prev: Build<18>,  Up: Python 3 3 0 Alpha 4

1.14.23.6 C-API
...............

   - Issue #14705(1): The PyArg_Parse() family of functions now support
     the ’p’ format unit, which accepts a "boolean predicate" argument.
     It converts any Python value into an integer–0 if it is "false",
     and 1 otherwise.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14705


File: python.info,  Node: Documentation<17>,  Prev: C-API<4>,  Up: Python 3 3 0 Alpha 4

1.14.23.7 Documentation
.......................

   - Issue #14863(1): Update the documentation of os.fdopen() to reflect
     the fact that it’s only a thin wrapper around open() anymore.

   - Issue #14588(2): The language reference now accurately documents
     the Python 3 class definition process.  Patch by Nick Coghlan.

   - Issue #14943(3): Correct a default argument value for
     winreg.OpenKey and correctly list the argument names in the
     function’s explanation.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14863

   (2) https://bugs.python.org/14588

   (3) https://bugs.python.org/14943


File: python.info,  Node: Python 3 3 0 Alpha 3,  Next: Python 3 3 0 Alpha 2,  Prev: Python 3 3 0 Alpha 4,  Up: Changelog

1.14.24 Python 3.3.0 Alpha 3
----------------------------

`Release date: 01-May-2012'

* Menu:

* Core and Builtins: Core and Builtins<23>. 
* Library: Library<23>. 
* Build: Build<19>. 
* Tests: Tests<16>. 
* IDLE: IDLE<17>. 
* Tools / Demos:: 
* C-API: C-API<5>. 


File: python.info,  Node: Core and Builtins<23>,  Next: Library<23>,  Up: Python 3 3 0 Alpha 3

1.14.24.1 Core and Builtins
...........................

   - Issue #14699(1): Fix calling the classmethod descriptor directly.

   - Issue #14433(2): Prevent msvcrt crash in interactive prompt when
     stdin is closed.

   - Issue #14521(3): Make result of float(’nan’) and float(’-nan’) more
     consistent across platforms.

   - Issue #14646(4): __import__() sets __loader__ if the loader did
     not.

   - Issue #14605(5): No longer have implicit entries in sys.meta_path.
     If sys.meta_path is found to be empty, raise ImportWarning.

   - Issue #14605(6): No longer have implicit entries in sys.path_hooks.
     If sys.path_hooks is found to be empty, a warning will be raised.
     None is now inserted into sys.path_importer_cache if no finder was
     discovered.  This also means imp.NullImporter is no longer
     implicitly used.

   - Issue #13903(7): Implement PEP 412.  Individual dictionary
     instances can now share their keys with other dictionaries.
     Classes take advantage of this to share their instance dictionary
     keys for improved memory and performance.

   - Issue #11603(8) (again): Setting __repr__ to __str__ now raises a
     RuntimeError when repr() or str() is called on such an object.

   - Issue #14658(9): Fix binding a special method to a builtin
     implementation of a special method with a different name.

   - Issue #14630(10): Fix a memory access bug for instances of a
     subclass of int with value 0.

   - Issue #14339(11): Speed improvements to bin, oct and hex functions.
     Patch by Serhiy Storchaka.

   - Issue #14385(12): It is now possible to use a custom type for the
     __builtins__ namespace, instead of a dict.  It can be used for
     sandboxing for example.  Raise also a NameError instead of
     ImportError if __build_class__ name if not found in __builtins__.

   - Issue #12599(13): Be more strict in accepting None compared to a
     false-like object for importlib.util.module_for_loader and
     importlib.machinery.PathFinder.

   - Issue #14612(14): Fix jumping around with blocks by setting
     f_lineno.

   - Issue #14592(15): Attempting a relative import w/o __package__ or
     __name__ set in globals raises a KeyError.

   - Issue #14607(16): Fix keyword-only arguments which started with
     ‘__’.

   - Issue #10854(17): The ImportError raised when an extension module
     on Windows fails to import now uses the new path and name
     attributes from Issue #1559549(18).

   - Issue #13889(19): Check and (if necessary) set FPU control word
     before calling any of the dtoa.c string <-> float conversion
     functions, on MSVC builds of Python.  This fixes issues when
     embedding Python in a Delphi app.

   - __import__() now matches PEP 328 and documentation by defaulting
     ’index’ to 0 instead of -1 and removing support for negative
     values.

   - Issue #2377(20): Make importlib the implementation of __import__().

   - Issue #1559549(21): ImportError now has ’name’ and ’path’
     attributes that are set using keyword arguments to its constructor.
     They are currently not set by import as they are meant for use by
     importlib.

   - Issue #14474(22): Save and restore exception state in
     thread.start_new_thread() while writing error message if the thread
     leaves a unhandled exception.

   - Issue #13019(23): Fix potential reference leaks in
     bytearray.extend().  Patch by Suman Saha.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14699

   (2) https://bugs.python.org/14433

   (3) https://bugs.python.org/14521

   (4) https://bugs.python.org/14646

   (5) https://bugs.python.org/14605

   (6) https://bugs.python.org/14605

   (7) https://bugs.python.org/13903

   (8) https://bugs.python.org/11603

   (9) https://bugs.python.org/14658

   (10) https://bugs.python.org/14630

   (11) https://bugs.python.org/14339

   (12) https://bugs.python.org/14385

   (13) https://bugs.python.org/12599

   (14) https://bugs.python.org/14612

   (15) https://bugs.python.org/14592

   (16) https://bugs.python.org/14607

   (17) https://bugs.python.org/10854

   (18) https://bugs.python.org/1559549

   (19) https://bugs.python.org/13889

   (20) https://bugs.python.org/2377

   (21) https://bugs.python.org/1559549

   (22) https://bugs.python.org/14474

   (23) https://bugs.python.org/13019


File: python.info,  Node: Library<23>,  Next: Build<19>,  Prev: Core and Builtins<23>,  Up: Python 3 3 0 Alpha 3

1.14.24.2 Library
.................

   - Issue #14768(1): os.path.expanduser(’~/a’) doesn’t works correctly
     when HOME is ’/’.

   - Issue #14371(2): Support bzip2 in zipfile module.  Patch by Serhiy
     Storchaka.

   - Issue #13183(3): Fix pdb skipping frames after hitting a breakpoint
     and running step.  Patch by Xavier de Gaye.

   - Issue #14696(4): Fix parser module to understand ’nonlocal’
     declarations.

   - Issue #10941(5): Fix imaplib.Internaldate2tuple to produce correct
     result near the DST transition.  Patch by Joe Peterson.

   - Issue #9154(6): Fix parser module to understand function
     annotations.

   - Issue #6085(7): In http.server.py SimpleHTTPServer.address_string
     returns the client ip address instead client hostname.  Patch by
     Charles-François Natali.

   - Issue #14309(8): Deprecate time.clock(), use time.perf_counter() or
     time.process_time() instead.

   - Issue #14428(9): Implement the PEP 418.  Add time.get_clock_info(),
     time.perf_counter() and time.process_time() functions, and rename
     time.steady() to time.monotonic().

   - Issue #14646(10): importlib.util.module_for_loader() now sets
     __loader__ and __package__ (when possible).

   - Issue #14664(11): It is now possible to use
     @unittest.skip{If,Unless} on a test class that doesn’t inherit from
     TestCase (i.e.  a mixin).

   - Issue #4892(12): multiprocessing Connections can now be transferred
     over multiprocessing Connections.  Patch by Richard Oudkerk (sbt).

   - Issue #14160(13): TarFile.extractfile() failed to resolve symbolic
     links when the links were not located in an archive subdirectory.

   - Issue #14638(14): pydoc now treats non-string __name__ values as if
     they were missing, instead of raising an error.

   - Issue #13684(15): Fix httplib tunnel issue of infinite loops for
     certain sites which send EOF without trailing rn.

   - Issue #14605(16): Add importlib.abc.FileLoader,
     importlib.machinery.(FileFinder, SourceFileLoader,
     SourcelessFileLoader, ExtensionFileLoader).

   - Issue #13959(17): imp.cache_from_source()/source_from_cache() now
     follow os.path.join()/split() semantics for path manipulation
     instead of its prior, custom semantics of caring the right-most
     path separator forward in path joining.

   - Issue #2193(18): Allow ":" character in Cookie NAME values.

   - Issue #14629(19): tokenizer.detect_encoding will specify the
     filename in the SyntaxError exception if found at
     readline.__self__.name.

   - Issue #14629(20): Raise SyntaxError in tokenizer.detect_encoding if
     the first two lines have non-UTF-8 characters without an encoding
     declaration.

   - Issue #14308(21): Fix an exception when a "dummy" thread is in the
     threading module’s active list after a fork().

   - Issue #11750(22): The Windows API functions scattered in the
     _subprocess and _multiprocessing.win32 modules now live in a single
     module "_winapi".  Patch by sbt.

   - Issue #14087(23): multiprocessing: add Condition.wait_for().  Patch
     by sbt.

   - Issue #14538(24): HTMLParser can now parse correctly start tags
     that contain a bare ’/’.

   - Issue #14452(25): SysLogHandler no longer inserts a UTF-8 BOM into
     the message.

   - Issue #14386(26): Expose the dict_proxy internal type as
     types.MappingProxyType.

   - Issue #13959(27): Make imp.reload() always use a module’s
     __loader__ to perform the reload.

   - Issue #13959(28): Add imp.py and rename the built-in module to
     _imp, allowing for re-implementing parts of the module in pure
     Python.

   - Issue #13496(29): Fix potential overflow in bisect.bisect algorithm
     when applied to a collection of size > sys.maxsize / 2.

   - Have importlib take advantage of ImportError’s new ’name’ and
     ’path’ attributes.

   - Issue #14399(30): zipfile now recognizes that the archive has been
     modified even if only the comment is changed.  In addition, the
     TypeError that results from trying to set a non-binary value as a
     comment is now raised at the time the comment is set rather than at
     the time the zipfile is written.

   - trace.CoverageResults.is_ignored_filename() now ignores any name
     that starts with "<" and ends with ">" instead of special-casing
     "<string>" and "<doctest ".

   - Issue #12537(31): The mailbox module no longer depends on knowledge
     of internal implementation details of the email package Message
     object.

   - Issue #7978(32): socketserver now restarts the select() call when
     EINTR is returned.  This avoids crashing the server loop when a
     signal is received.  Patch by Jerzy Kozera.

   - Issue #14522(33): Avoid duplicating socket handles in
     multiprocessing.connection.  Patch by sbt.

   - Don’t Py_DECREF NULL variable in io.IncrementalNewlineDecoder.

   - Issue #3033(34): Add displayof parameter to tkinter font.  Patch by
     Guilherme Polo.

   - Issue #14482(35): Raise a ValueError, not a NameError, when trying
     to create a multiprocessing Client or Listener with an AF_UNIX type
     address under Windows.  Patch by Popa Claudiu.

   - Issue #802310(36): Generate always unique tkinter font names if not
     directly passed.

   - Issue #14151(37): Raise a ValueError, not a NameError, when trying
     to create a multiprocessing Client or Listener with an AF_PIPE type
     address under non-Windows platforms.  Patch by Popa Claudiu.

   - Issue #14493(38): Use gvfs-open or xdg-open in webbrowser.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14768

   (2) https://bugs.python.org/14371

   (3) https://bugs.python.org/13183

   (4) https://bugs.python.org/14696

   (5) https://bugs.python.org/10941

   (6) https://bugs.python.org/9154

   (7) https://bugs.python.org/6085

   (8) https://bugs.python.org/14309

   (9) https://bugs.python.org/14428

   (10) https://bugs.python.org/14646

   (11) https://bugs.python.org/14664

   (12) https://bugs.python.org/4892

   (13) https://bugs.python.org/14160

   (14) https://bugs.python.org/14638

   (15) https://bugs.python.org/13684

   (16) https://bugs.python.org/14605

   (17) https://bugs.python.org/13959

   (18) https://bugs.python.org/2193

   (19) https://bugs.python.org/14629

   (20) https://bugs.python.org/14629

   (21) https://bugs.python.org/14308

   (22) https://bugs.python.org/11750

   (23) https://bugs.python.org/14087

   (24) https://bugs.python.org/14538

   (25) https://bugs.python.org/14452

   (26) https://bugs.python.org/14386

   (27) https://bugs.python.org/13959

   (28) https://bugs.python.org/13959

   (29) https://bugs.python.org/13496

   (30) https://bugs.python.org/14399

   (31) https://bugs.python.org/12537

   (32) https://bugs.python.org/7978

   (33) https://bugs.python.org/14522

   (34) https://bugs.python.org/3033

   (35) https://bugs.python.org/14482

   (36) https://bugs.python.org/802310

   (37) https://bugs.python.org/14151

   (38) https://bugs.python.org/14493


File: python.info,  Node: Build<19>,  Next: Tests<16>,  Prev: Library<23>,  Up: Python 3 3 0 Alpha 3

1.14.24.3 Build
...............

   - "make touch" will now touch generated files that are checked into
     Mercurial, after a "hg update" which failed to bring the timestamps
     into the right order.


File: python.info,  Node: Tests<16>,  Next: IDLE<17>,  Prev: Build<19>,  Up: Python 3 3 0 Alpha 3

1.14.24.4 Tests
...............

   - Issue #14026(1): In test_cmd_line_script, check that sys.argv is
     populated correctly for the various invocation approaches (Patch by
     Jason Yeo)

   - Issue #14032(2): Fix incorrect variable name in
     test_cmd_line_script debugging message (Patch by Jason Yeo)

   - Issue #14589(3): Update certificate chain for
     sha256.tbs-internet.com, fixing a test failure in test_ssl.

   - Issue #14355(4): Regrtest now supports the standard unittest test
     loading, and will use it if a test file contains no ‘test_main’
     method.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14026

   (2) https://bugs.python.org/14032

   (3) https://bugs.python.org/14589

   (4) https://bugs.python.org/14355


File: python.info,  Node: IDLE<17>,  Next: Tools / Demos,  Prev: Tests<16>,  Up: Python 3 3 0 Alpha 3

1.14.24.5 IDLE
..............

   - Issue #8515(1): Set __file__ when run file in IDLE. Initial patch
     by Bruce Frederiksen.

   - Issue #14496(2): Fix wrong name in idlelib/tabbedpages.py.  Patch
     by Popa Claudiu.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/8515

   (2) https://bugs.python.org/14496


File: python.info,  Node: Tools / Demos,  Next: C-API<5>,  Prev: IDLE<17>,  Up: Python 3 3 0 Alpha 3

1.14.24.6 Tools / Demos
.......................

   - Issue #3561(1): The Windows installer now has an option, off by
     default, for placing the Python installation into the system "Path"
     environment variable.

   - Issue #13165(2): stringbench is now available in the
     Tools/stringbench folder.  It used to live in its own SVN project.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/3561

   (2) https://bugs.python.org/13165


File: python.info,  Node: C-API<5>,  Prev: Tools / Demos,  Up: Python 3 3 0 Alpha 3

1.14.24.7 C-API
...............

   - Issue #14098(1): New functions PyErr_GetExcInfo and
     PyErr_SetExcInfo.  Patch by Stefan Behnel.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14098


File: python.info,  Node: Python 3 3 0 Alpha 2,  Next: Python 3 3 0 Alpha 1,  Prev: Python 3 3 0 Alpha 3,  Up: Changelog

1.14.25 Python 3.3.0 Alpha 2
----------------------------

`Release date: 01-Apr-2012'

* Menu:

* Core and Builtins: Core and Builtins<24>. 
* Library: Library<24>. 
* Build: Build<20>. 
* Documentation: Documentation<18>. 
* Extension Modules: Extension Modules<7>. 
* Tests: Tests<17>. 


File: python.info,  Node: Core and Builtins<24>,  Next: Library<24>,  Up: Python 3 3 0 Alpha 2

1.14.25.1 Core and Builtins
...........................

   - Issue #1683368(1): object.__new__ and object.__init__ raise a
     TypeError if they are passed arguments and their complementary
     method is not overridden.

   - Issue #14378(2): Fix compiling ast.ImportFrom nodes with a
     "__future__" string as the module name that was not interned.

   - Issue #14331(3): Use significantly less stack space when importing
     modules by allocating path buffers on the heap instead of the
     stack.

   - Issue #14334(4): Prevent in a segfault in type.__getattribute__
     when it was not passed strings.

   - Issue #1469629(5): Allow cycles through an object’s __dict__ slot
     to be collected.  (For example if ‘x.__dict__ is x’).

   - Issue #14205(6): dict lookup raises a RuntimeError if the dict is
     modified during a lookup.

   - Issue #14220(7): When a generator is delegating to another iterator
     with the yield from syntax, it needs to have its ‘gi_running’ flag
     set to True.

   - Issue #14435(8): Remove dedicated block allocator from
     floatobject.c and rely on the PyObject_Malloc() api like all other
     objects.

   - Issue #14471(9): Fix a possible buffer overrun in the winreg
     module.

   - Issue #14288(10): Allow the serialization of builtin iterators

   ---------- Footnotes ----------

   (1) https://bugs.python.org/1683368

   (2) https://bugs.python.org/14378

   (3) https://bugs.python.org/14331

   (4) https://bugs.python.org/14334

   (5) https://bugs.python.org/1469629

   (6) https://bugs.python.org/14205

   (7) https://bugs.python.org/14220

   (8) https://bugs.python.org/14435

   (9) https://bugs.python.org/14471

   (10) https://bugs.python.org/14288


File: python.info,  Node: Library<24>,  Next: Build<20>,  Prev: Core and Builtins<24>,  Up: Python 3 3 0 Alpha 2

1.14.25.2 Library
.................

   - Issue #14300(1): Under Windows, sockets created using socket.dup()
     now allow overlapped I/O. Patch by sbt.

   - Issue #13872(2): socket.detach() now marks the socket closed (as
     mirrored in the socket repr()).  Patch by Matt Joiner.

   - Issue #14406(3): Fix a race condition when using
     ‘concurrent.futures.wait( return_when=ALL_COMPLETED)’.  Patch by
     Matt Joiner.

   - Issue #5136(4): deprecate old, unused functions from tkinter.

   - Issue #14416(5): syslog now defines the LOG_ODELAY and LOG_AUTHPRIV
     constants if they are defined in <syslog.h>.

   - Issue #14295(6): Add unittest.mock

   - Issue #7652(7): Add –with-system-libmpdec option to configure for
     linking the _decimal module against an installed libmpdec.

   - Issue #14380(8): MIMEText now defaults to utf-8 when passed
     non-ASCII unicode with no charset specified.

   - Issue #10340(9): asyncore - properly handle EINVAL in dispatcher
     constructor on OSX; avoid to call handle_connect in case of a
     disconnected socket which was not meant to connect.

   - Issue #14204(10): The ssl module now has support for the Next
     Protocol Negotiation extension, if available in the underlying
     OpenSSL library.  Patch by Colin Marc.

   - Issue #3035(11): Unused functions from tkinter are marked as
     pending deprecated.

   - Issue #12757(12): Fix the skipping of doctests when python is run
     with -OO so that it works in unittest’s verbose mode as well as
     non-verbose mode.

   - Issue #7652(13): Integrate the decimal floating point libmpdec
     library to speed up the decimal module.  Performance gains of the
     new C implementation are between 10x and 100x, depending on the
     application.

   - Issue #14269(14): SMTPD now conforms to the RFC and requires a HELO
     command before MAIL, RCPT, or DATA.

   - Issue #13694(15): asynchronous connect in asyncore.dispatcher does
     not set addr attribute.

   - Issue #14344(16): fixed the repr of email.policy objects.

   - Issue #11686(17): Added missing entries to email package __all__
     lists (mostly the new Bytes classes).

   - Issue #14335(18): multiprocessing’s custom Pickler subclass now
     inherits from the C-accelerated implementation.  Patch by sbt.

   - Issue #10484(19): Fix the CGIHTTPServer’s PATH_INFO handling
     problem.

   - Issue #11199(20): Fix the with urllib which hangs on particular ftp
     urls.

   - Improve the memory utilization and speed of functools.lru_cache.

   - Issue #14222(21): Use the new time.steady() function instead of
     time.time() for timeout in queue and threading modules to not be
     affected of system time update.

   - Issue #13248(22): Remove lib2to3.pytree.Base.get_prefix/set_prefix.

   - Issue #14234(23): CVE-2012-0876: Randomize hashes of xml attributes
     in the hash table internal to the pyexpat module’s copy of the
     expat library to avoid a denial of service due to hash collisions.
     Patch by David Malcolm with some modifications by the expat
     project.

   - Issue #12818(24): format address no longer needlessly escapes ()s
     in names when the name ends up being quoted.

   - Issue #14062(25): BytesGenerator now correctly folds Header
     objects, including using linesep when folding.

   - Issue #13839(26): When invoked on the command-line, the pstats
     module now accepts several filenames of profile stat files and
     merges them all.  Patch by Matt Joiner.

   - Issue #14291(27): Email now defaults to utf-8 for non-ASCII unicode
     headers instead of raising an error.  This fixes a regression
     relative to 2.7.

   - Issue #989712(28): Support using Tk without a mainloop.

   - Issue #3835(29): Refuse to use unthreaded Tcl in threaded Python.

   - Issue #2843(30): Add new Tk API to Tkinter.

   - Issue #14184(31): Increase the default stack size for secondary
     threads on Mac OS X to avoid interpreter crashes when using threads
     on 10.7.

   - Issue #14180(32): datetime.date.fromtimestamp(),
     datetime.datetime.fromtimestamp() and
     datetime.datetime.utcfromtimestamp() now raise an OSError instead
     of ValueError if localtime() or gmtime() failed.

   - Issue #14180(33): time.ctime(), gmtime(), time.localtime(),
     datetime.date.fromtimestamp(), datetime.datetime.fromtimestamp()
     and datetime.datetime.utcfromtimestamp() now raises an
     OverflowError, instead of a ValueError, if the timestamp does not
     fit in time_t.

   - Issue #14180(34): datetime.datetime.fromtimestamp() and
     datetime.datetime.utcfromtimestamp() now round microseconds towards
     zero instead of rounding to nearest with ties going away from zero.

   - Issue #10543(35): Fix unittest test discovery with Jython bytecode
     files.

   - Issue #1178863(36): Separate initialisation from setting when
     initializing Tkinter.Variables; harmonize exceptions to ValueError;
     only delete variables that have not been deleted; assert that
     variable names are strings.

   - Issue #14104(37): Implement time.monotonic() on Mac OS X, patch
     written by Nicholas Riley.

   - Issue #13394(38): the aifc module now uses warnings.warn() to
     signal warnings.

   - Issue #14252(39): Fix subprocess.Popen.terminate() to not raise an
     error under Windows when the child process has already exited.

   - Issue #14223(40): curses.addch() is no more limited to the range
     0-255 when the Python curses is not linked to libncursesw.  It was
     a regression introduced in Python 3.3a1.

   - Issue #14168(41): Check for presence of Element._attrs in minidom
     before accessing it.

   - Issue #12328(42): Fix multiprocessing’s use of overlapped I/O on
     Windows.  Also, add a multiprocessing.connection.wait(rlist,
     timeout=None) function for polling multiple objects at once.  Patch
     by sbt.

   - Issue #14007(43): Accept incomplete TreeBuilder objects (missing
     start, end, data or close method) for the Python implementation as
     well.  Drop the no-op TreeBuilder().xml() method from the C
     implementation.

   - Issue #14210(44): pdb now has tab-completion not only for command
     names, but also for their arguments, wherever possible.

   - Issue #14310(45): Sockets can now be with other processes on
     Windows using the api socket.socket.share() and socket.fromshare().

   - Issue #10576(46): The gc module now has a ’callbacks’ member that
     will get called when garbage collection takes place.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14300

   (2) https://bugs.python.org/13872

   (3) https://bugs.python.org/14406

   (4) https://bugs.python.org/5136

   (5) https://bugs.python.org/14416

   (6) https://bugs.python.org/14295

   (7) https://bugs.python.org/7652

   (8) https://bugs.python.org/14380

   (9) https://bugs.python.org/10340

   (10) https://bugs.python.org/14204

   (11) https://bugs.python.org/3035

   (12) https://bugs.python.org/12757

   (13) https://bugs.python.org/7652

   (14) https://bugs.python.org/14269

   (15) https://bugs.python.org/13694

   (16) https://bugs.python.org/14344

   (17) https://bugs.python.org/11686

   (18) https://bugs.python.org/14335

   (19) https://bugs.python.org/10484

   (20) https://bugs.python.org/11199

   (21) https://bugs.python.org/14222

   (22) https://bugs.python.org/13248

   (23) https://bugs.python.org/14234

   (24) https://bugs.python.org/12818

   (25) https://bugs.python.org/14062

   (26) https://bugs.python.org/13839

   (27) https://bugs.python.org/14291

   (28) https://bugs.python.org/989712

   (29) https://bugs.python.org/3835

   (30) https://bugs.python.org/2843

   (31) https://bugs.python.org/14184

   (32) https://bugs.python.org/14180

   (33) https://bugs.python.org/14180

   (34) https://bugs.python.org/14180

   (35) https://bugs.python.org/10543

   (36) https://bugs.python.org/1178863

   (37) https://bugs.python.org/14104

   (38) https://bugs.python.org/13394

   (39) https://bugs.python.org/14252

   (40) https://bugs.python.org/14223

   (41) https://bugs.python.org/14168

   (42) https://bugs.python.org/12328

   (43) https://bugs.python.org/14007

   (44) https://bugs.python.org/14210

   (45) https://bugs.python.org/14310

   (46) https://bugs.python.org/10576


File: python.info,  Node: Build<20>,  Next: Documentation<18>,  Prev: Library<24>,  Up: Python 3 3 0 Alpha 2

1.14.25.3 Build
...............

   - Issue #14557(1): Fix extensions build on HP-UX. Patch by Adi
     Roiban.

   - Issue #14387(2): Do not include accu.h from Python.h.

   - Issue #14359(3): Only use O_CLOEXEC in _posixmodule.c if it is
     defined.  Based on patch from Hervé Coatanhay.

   - Issue #14321(4): Do not run pgen during the build if files are up
     to date.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14557

   (2) https://bugs.python.org/14387

   (3) https://bugs.python.org/14359

   (4) https://bugs.python.org/14321


File: python.info,  Node: Documentation<18>,  Next: Extension Modules<7>,  Prev: Build<20>,  Up: Python 3 3 0 Alpha 2

1.14.25.4 Documentation
.......................

   - Issue #14034(1): added the argparse tutorial.

   - Issue #14324(2): Fix configure tests for cross builds.

   - Issue #14327(3): Call AC_CANONICAL_HOST in configure.ac and check
     in config.{guess,sub}.  Don’t use uname calls for cross builds.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14034

   (2) https://bugs.python.org/14324

   (3) https://bugs.python.org/14327


File: python.info,  Node: Extension Modules<7>,  Next: Tests<17>,  Prev: Documentation<18>,  Up: Python 3 3 0 Alpha 2

1.14.25.5 Extension Modules
...........................

   - Issue #9041(1): An issue in ctypes.c_longdouble, ctypes.c_double,
     and ctypes.c_float that caused an incorrect exception to be
     returned in the case of overflow has been fixed.

   - Issue #14212(2): The re module didn’t retain a reference to buffers
     it was scanning, resulting in segfaults.

   - Issue #14259(3): The finditer() method of re objects did not take
     any keyword arguments, contrary to the documentation.

   - Issue #10142(4): Support for SEEK_HOLE/SEEK_DATA (for example,
     under ZFS).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/9041

   (2) https://bugs.python.org/14212

   (3) https://bugs.python.org/14259

   (4) https://bugs.python.org/10142


File: python.info,  Node: Tests<17>,  Prev: Extension Modules<7>,  Up: Python 3 3 0 Alpha 2

1.14.25.6 Tests
...............

   - Issue #14442(1): Add missing errno import in test_smtplib.

   - Issue #8315(2): (partial fix) python -m unittest test.test_email
     now works.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14442

   (2) https://bugs.python.org/8315


File: python.info,  Node: Python 3 3 0 Alpha 1,  Prev: Python 3 3 0 Alpha 2,  Up: Changelog

1.14.26 Python 3.3.0 Alpha 1
----------------------------

`Release date: 05-Mar-2012'

* Menu:

* Core and Builtins: Core and Builtins<25>. 
* Library: Library<25>. 
* Build: Build<21>. 
* IDLE: IDLE<18>. 
* Tools/Demos: Tools/Demos<13>. 
* Extension Modules: Extension Modules<8>. 
* Tests: Tests<18>. 
* C-API: C-API<6>. 
* Documentation: Documentation<19>. 


File: python.info,  Node: Core and Builtins<25>,  Next: Library<25>,  Up: Python 3 3 0 Alpha 1

1.14.26.1 Core and Builtins
...........................

   - Issue #14172(1): Fix reference leak when marshalling a buffer-like
     object (other than a bytes object).

   - Issue #13521(2): dict.setdefault() now does only one lookup for the
     given key, making it "atomic" for many purposes.  Patch by Filip
     Gruszczyński.

   - PEP 409, Issue #6210(3): "raise X from None" is now supported as a
     means of suppressing the display of the chained exception context.
     The chained context still remains available as the __context__
     attribute.

   - Issue #10181(4): New memoryview implementation fixes multiple
     ownership and lifetime issues of dynamically allocated Py_buffer
     members (#9990) as well as crashes (#8305, #7433).  Many new
     features have been added (See whatsnew/3.3), and the documentation
     has been updated extensively.  The ndarray test object from
     _testbuffer.c implements all aspects of PEP-3118, so further
     development towards the complete implementation of the PEP can
     proceed in a test-driven manner.

     Thanks to Nick Coghlan, Antoine Pitrou and Pauli Virtanen for
     review and many ideas.

   - Issue #12834(5): Fix incorrect results of memoryview.tobytes() for
     non-contiguous arrays.

   - Issue #5231(6): Introduce memoryview.cast() method that allows
     changing format and shape without making a copy of the underlying
     memory.

   - Issue #14084(7): Fix a file descriptor leak when importing a module
     with a bad encoding.

   - Upgrade Unicode data to Unicode 6.1.

   - Issue #14040(8): Remove rarely used file name suffixes for C
     extensions (under POSIX mainly).

   - Issue #14051(9): Allow arbitrary attributes to be set of
     classmethod and staticmethod.

   - Issue #13703(10): oCERT-2011-003: Randomize hashes of str and bytes
     to protect against denial of service attacks due to hash collisions
     within the dict and set types.  Patch by David Malcolm, based on
     work by Victor Stinner.

   - Issue #13020(11): Fix a reference leak when allocating a
     structsequence object fails.  Patch by Suman Saha.

   - Issue #13908(12): Ready types returned from PyType_FromSpec.

   - Issue #11235(13): Fix OverflowError when trying to import a source
     file whose modification time doesn’t fit in a 32-bit timestamp.

   - Issue #12705(14): A SyntaxError exception is now raised when
     attempting to compile multiple statements as a single interactive
     statement.

   - Fix the builtin module initialization code to store the init
     function for future reinitialization.

   - Issue #8052(15): The posix subprocess module would take a long time
     closing all possible file descriptors in the child process rather
     than just open file descriptors.  It now closes only the open fds
     if possible for the default close_fds=True behavior.

   - Issue #13629(16): Renumber the tokens in token.h so that they match
     the indexes into _PyParser_TokenNames.

   - Issue #13752(17): Add a casefold() method to str.

   - Issue #13761(18): Add a "flush" keyword argument to the print()
     function, used to ensure flushing the output stream.

   - Issue #13645(19): pyc files now contain the size of the
     corresponding source code, to avoid timestamp collisions
     (especially on filesystems with a low timestamp resolution) when
     checking for freshness of the bytecode.

   - PEP 380, Issue #11682(20): Add "yield from <x>" to support easy
     delegation to subgenerators (initial patch by Greg Ewing,
     integration into 3.3 by Renaud Blanch, Ryan Kelly, Zbigniew
     Jędrzejewski-Szmek and Nick Coghlan)

   - Issue #13748(21): Raw bytes literals can now be written with the
     ‘rb’ prefix as well as ‘br’.

   - Issue #12736(22): Use full unicode case mappings for upper, lower,
     and title case.

   - Issue #12760(23): Add a create mode to open().  Patch by David
     Townshend.

   - Issue #13738(24): Simplify implementation of bytes.lower() and
     bytes.upper().

   - Issue #13577(25): Built-in methods and functions now have a
     __qualname__.  Patch by sbt.

   - Issue #6695(26): Full garbage collection runs now clear the
     freelist of set objects.  Initial patch by Matthias Troffaes.

   - Fix OSError.__init__ and OSError.__new__ so that each of them can
     be overriden and take additional arguments (followup to issue
     #12555(27)).

   - Fix the fix for issue #12149(28): it was incorrect, although it had
     the side effect of appearing to resolve the issue.  Thanks to Mark
     Shannon for noticing.

   - Issue #13505(29): Pickle bytes objects in a way that is compatible
     with Python 2 when using protocols <= 2.

   - Issue #11147(30): Fix an unused argument in
     _Py_ANNOTATE_MEMORY_ORDER. (Fix given by Campbell Barton).

   - Issue #13503(31): Use a more efficient reduction format for
     bytearrays with pickle protocol >= 3.  The old reduction format is
     kept with older protocols in order to allow unpickling under Python
     2.  Patch by Irmen de Jong.

   - Issue #7111(32): Python can now be run without a stdin, stdout or
     stderr stream.  It was already the case with Python 2.  However,
     the corresponding sys module entries are now set to None (instead
     of an unusable file object).

   - Issue #11849(33): Ensure that free()d memory arenas are really
     released on POSIX systems supporting anonymous memory mappings.
     Patch by Charles-François Natali.

   - PEP 3155 / issue #13448(34): Qualified name for classes and
     functions.

   - Issue #13436(35): Fix a bogus error message when an AST object was
     passed an invalid integer value.

   - Issue #13411(36): memoryview objects are now hashable when the
     underlying object is hashable.

   - Issue #13338(37): Handle all enumerations in
     _Py_ANNOTATE_MEMORY_ORDER to allow compiling extension modules with
     -Wswitch-enum on gcc.  Initial patch by Floris Bruynooghe.

   - Issue #10227(38): Add an allocation cache for a single slice
     object.  Patch by Stefan Behnel.

   - Issue #13393(39): BufferedReader.read1() now asks the full
     requested size to the raw stream instead of limiting itself to the
     buffer size.

   - Issue #13392(40): Writing a pyc file should now be atomic under
     Windows as well.

   - Issue #13333(41): The UTF-7 decoder now accepts lone surrogates
     (the encoder already accepts them).

   - Issue #13389(42): Full garbage collection passes now clear the
     freelists for list and dict objects.  They already cleared other
     freelists in the interpreter.

   - Issue #13327(43): Remove the need for an explicit None as the
     second argument to os.utime, os.lutimes, os.futimes, os.futimens,
     os.futimesat, in order to update to the current time.  Also added
     keyword argument handling to os.utimensat in order to remove the
     need for explicit None.

   - Issue #13350(44): Simplify some C code by replacing most usages of
     PyUnicode_Format by PyUnicode_FromFormat.

   - Issue #13342(45): input() used to ignore sys.stdin’s and
     sys.stdout’s unicode error handler in interactive mode (when
     calling into PyOS_Readline()).

   - Issue #9896(46): Add start, stop, and step attributes to range
     objects.

   - Issue #13343(47): Fix a SystemError when a lambda expression uses a
     global variable in the default value of a keyword-only argument:
     ‘lambda *, arg=GLOBAL_NAME: None’

   - Issue #12797(48): Added custom opener parameter to builtin open()
     and FileIO.open().

   - Issue #10519(49): Avoid unnecessary recursive function calls in
     setobject.c.

   - Issue #10363(50): Deallocate global locks in Py_Finalize().

   - Issue #13018(51): Fix reference leaks in error paths in
     dictobject.c.  Patch by Suman Saha.

   - Issue #13201(52): Define ’==’ and ’!=’ to compare range objects
     based on the sequence of values they define (instead of comparing
     based on object identity).

   - Issue #1294232(53): In a few cases involving metaclass inheritance,
     the interpreter would sometimes invoke the wrong metaclass when
     building a new class object.  These cases now behave correctly.
     Patch by Daniel Urban.

   - Issue #12753(54): Add support for Unicode name aliases and named
     sequences.  Both ‘unicodedata.lookup()’ and ’N{...}’ now resolve
     aliases, and ‘unicodedata.lookup()’ resolves named sequences too.

   - Issue #12170(55): The count(), find(), rfind(), index() and
     rindex() methods of bytes and bytearray objects now accept an
     integer between 0 and 255 as their first argument.  Patch by Petri
     Lehtinen.

   - Issue #12604(56): VTRACE macro expanded to no-op in _sre.c to avoid
     compiler warnings.  Patch by Josh Triplett and Petri Lehtinen.

   - Issue #12281(57): Rewrite the MBCS codec to handle correctly
     replace and ignore error handlers on all Windows versions.  The
     MBCS codec is now supporting all error handlers, instead of only
     replace to encode and ignore to decode.

   - Issue #13188(58): When called without an explicit traceback
     argument, generator.throw() now gets the traceback from the passed
     exception’s ‘__traceback__’ attribute.  Patch by Petri Lehtinen.

   - Issue #13146(59): Writing a pyc file is now atomic under POSIX.

   - Issue #7833(60): Extension modules built using distutils on Windows
     will no longer include a "manifest" to prevent them failing at
     import time in some embedded situations.

   - PEP 3151 / issue #12555(61): reworking the OS and IO exception
     hierarchy.

   - Add internal API for static strings (_Py_identifier et al.).

   - Issue #13063(62): the Windows error ERROR_NO_DATA (numbered 232 and
     described as "The pipe is being closed") is now mapped to POSIX
     errno EPIPE (previously EINVAL).

   - Issue #12911(63): Fix memory consumption when calculating the
     repr() of huge tuples or lists.

   - PEP 393: flexible string representation.  Thanks to Torsten Becker
     for the initial implementation, and Victor Stinner for various bug
     fixes.

   - Issue #14081(64): The ’sep’ and ’maxsplit’ parameter to str.split,
     bytes.split, and bytearray.split may now be passed as keyword
     arguments.

   - Issue #13012(65): The ’keepends’ parameter to str.splitlines may
     now be passed as a keyword argument:
     "my_string.splitlines(keepends=True)".  The same change also
     applies to bytes.splitlines and bytearray.splitlines.

   - Issue #7732(66): Don’t open a directory as a file anymore while
     importing a module.  Ignore the direcotry if its name matchs the
     module name (e.g.  "__init__.py") and raise a ImportError instead.

   - Issue #13021(67): Missing decref on an error path.  Thanks to Suman
     Saha for finding the bug and providing a patch.

   - Issue #12973(68): Fix overflow checks that relied on undefined
     behaviour in list_repeat (listobject.c) and islice_next
     (itertoolsmodule.c).  These bugs caused test failures with recent
     versions of Clang.

   - Issue #12904(69): os.utime, os.futimes, os.lutimes, and
     os.futimesat now write atime and mtime with nanosecond precision on
     modern POSIX platforms.

   - Issue #12802(70): the Windows error ERROR_DIRECTORY (numbered 267)
     is now mapped to POSIX errno ENOTDIR (previously EINVAL).

   - Issue #9200(71): The str.is* methods now work with strings that
     contain non-BMP characters even in narrow Unicode builds.

   - Issue #12791(72): Break reference cycles early when a generator
     exits with an exception.

   - Issue #12773(73): Make __doc__ mutable on user-defined classes.

   - Issue #12766(74): Raise a ValueError when creating a class with a
     class variable that conflicts with a name in __slots__.

   - Issue #12266(75): Fix str.capitalize() to correctly
     uppercase/lowercase titlecased and cased non-letter characters.

   - Issue #12732(76): In narrow unicode builds, allow Unicode
     identifiers which fall outside the BMP.

   - Issue #12575(77): Validate user-generated AST before it is
     compiled.

   - Make type(None), type(Ellipsis), and type(NotImplemented) callable.
     They return the respective singleton instances.

   - Forbid summing bytes with sum().

   - Verify the types of AST strings and identifiers provided by the
     user before compiling them.

   - Issue #12647(78): The None object now has a __bool__() method that
     returns False.  Formerly, bool(None) returned False only because of
     special case logic in PyObject_IsTrue().

   - Issue #12579(79): str.format_map() now raises a ValueError if used
     on a format string that contains positional fields.  Initial patch
     by Julian Berman.

   - Issue #10271(80): Allow warnings.showwarning() be any callable.

   - Issue #11627(81): Fix segfault when __new__ on a exception returns
     a non-exception class.

   - Issue #12149(82): Update the method cache after a type’s dictionary
     gets cleared by the garbage collector.  This fixes a segfault when
     an instance and its type get caught in a reference cycle, and the
     instance’s deallocator calls one of the methods on the type (e.g.
     when subclassing IOBase).  Diagnosis and patch by Davide Rizzo.

   - Issue #9611(83), Issue #9015(84): FileIO.read() clamps the length
     to INT_MAX on Windows.

   - Issue #9642(85): Uniformize the tests on the availability of the
     mbcs codec, add a new HAVE_MBCS define.

   - Issue #9642(86): Fix filesystem encoding initialization: use the
     ANSI code page on Windows if the mbcs codec is not available, and
     fail with a fatal error if we cannot get the locale encoding (if
     nl_langinfo(CODESET) is not available) instead of using UTF-8.

   - When a generator yields, do not retain the caller’s exception state
     on the generator.

   - Issue #12475(87): Prevent generators from leaking their exception
     state into the caller’s frame as they return for the last time.

   - Issue #12291(88): You can now load multiple marshalled objects from
     a stream, with other data interleaved between marshalled objects.

   - Issue #12356(89): When required positional or keyword-only
     arguments are not given, produce a informative error message which
     includes the name(s) of the missing arguments.

   - Issue #12370(90): Fix super with no arguments when __class__ is
     overriden in the class body.

   - Issue #12084(91): os.stat on Windows now works properly with
     relative symbolic links when called from any directory.

   - Loosen type restrictions on the __dir__ method.  __dir__ can now
     return any sequence, which will be converted to a list and sorted
     by dir().

   - Issue #12265(92): Make error messages produced by passing an
     invalid set of arguments to a function more informative.

   - Issue #12225(93): Still allow Python to build if Python is not in
     its hg repo or mercurial is not installed.

   - Issue #1195(94): my_fgets() now always clears errors before calling
     fgets().  Fix the following case: sys.stdin.read() stopped with
     CTRL+d (end of file), raw_input() interrupted by CTRL+c.

   - Issue #12216(95): Allow unexpected EOF errors to happen on any line
     of the file.

   - Issue #12199(96): The TryExcept and TryFinally and AST nodes have
     been unified into a Try node.

   - Issue #9670(97): Increase the default stack size for secondary
     threads on Mac OS X and FreeBSD to reduce the chances of a crash
     instead of a "maximum recursion depth" RuntimeError exception.
     (patch by Ronald Oussoren)

   - Issue #12106(98): The use of the multiple-with shorthand syntax is
     now reflected in the AST.

   - Issue #12190(99): Try to use the same filename object when
     compiling unmarshalling a code objects in the same file.

   - Issue #12166(100): Move implementations of dir() specialized for
     various types into the __dir__() methods of those types.

   - Issue #5715(101): In socketserver, close the server socket in the
     child process.

   - Correct lookup of __dir__ on objects.  Among other things, this
     causes errors besides AttributeError found on lookup to be
     propagated.

   - Issue #12060(102): Use sig_atomic_t type and volatile keyword in
     the signal module.  Patch written by Charles-François Natali.

   - Issue #1746656(103): Added the if_nameindex, if_indextoname,
     if_nametoindex methods to the socket module.

   - Issue #12044(104): Fixed subprocess.Popen when used as a context
     manager to wait for the process to end when exiting the context to
     avoid unintentionally leaving zombie processes around.

   - Issue #1195(105): Fix input() if it is interrupted by CTRL+d and
     then CTRL+c, clear the end-of-file indicator after CTRL+d.

   - Issue #1856(106): Avoid crashes and lockups when daemon threads run
     while the interpreter is shutting down; instead, these threads are
     now killed when they try to take the GIL.

   - Issue #9756(107): When calling a method descriptor or a slot
     wrapper descriptor, the check of the object type doesn’t read the
     __class__ attribute anymore.  Fix a crash if a class override its
     __class__ attribute (e.g.  a proxy of the str type).  Patch written
     by Andreas Stührk.

   - Issue #10517(108): After fork(), reinitialize the TLS used by the
     PyGILState_* APIs, to avoid a crash with the pthread implementation
     in RHEL 5.  Patch by Charles-François Natali.

   - Issue #10914(109): Initialize correctly the filesystem codec when
     creating a new subinterpreter to fix a bootstrap issue with codecs
     implemented in Python, as the ISO-8859-15 codec.

   - Issue #11918(110): OS/2 and VMS are no more supported because of
     the lack of maintainer.

   - Issue #6780(111): fix starts/endswith error message to mention that
     tuples are accepted too.

   - Issue #5057(112): fix a bug in the peepholer that led to
     non-portable pyc files between narrow and wide builds while
     optimizing BINARY_SUBSCR on non-BMP chars (e.g.  "U00012345"[0]).

   - Issue #11845(113): Fix typo in rangeobject.c that caused a crash in
     compute_slice_indices.  Patch by Daniel Urban.

   - Issue #5673(114): Added a ‘timeout’ keyword argument to
     subprocess.Popen.wait, subprocess.Popen.communicated,
     subprocess.call, subprocess.check_call, and
     subprocess.check_output.  If the blocking operation takes more than
     ‘timeout’ seconds, the *note subprocess.TimeoutExpired: 9e5.
     exception is raised.

   - Issue #11650(115): PyOS_StdioReadline() retries fgets() if it was
     interrupted (EINTR), for example if the program is stopped with
     CTRL+z on Mac OS X. Patch written by Charles-Francois Natali.

   - Issue #9319(116): Include the filename in "Non-UTF8 code ..."
     syntax error.

   - Issue #10785(117): Store the filename as Unicode in the Python
     parser.

   - Issue #11619(118): _PyImport_LoadDynamicModule() doesn’t encode the
     path to bytes on Windows.

   - Issue #10998(119): Remove mentions of -Q,
     sys.flags.division_warning and Py_DivisionWarningFlag left over
     from Python 2.

   - Issue #11244(120): Remove an unnecessary peepholer check that was
     preventing negative zeros from being constant-folded properly.

   - Issue #11395(121): io.FileIO().write() clamps the data length to
     32,767 bytes on Windows if the file is a TTY to workaround a
     Windows bug.  The Windows console returns an error (12: not enough
     space error) on writing into stdout if stdout mode is binary and
     the length is greater than 66,000 bytes (or less, depending on heap
     usage).

   - Issue #11320(122): fix bogus memory management in
     Modules/getpath.c, leading to a possible crash when calling
     Py_SetPath().

   - Issue #11432(123): A bug was introduced in subprocess.Popen on
     posix systems with 3.2.0 where the stdout or stderr file descriptor
     being the same as the stdin file descriptor would raise an
     exception.  webbrowser.open would fail.  fixed.

   - Issue #9856(124): Change object.__format__ with a non-empty format
     string to be a DeprecationWarning.  In 3.2 it was a
     PendingDeprecationWarning.  In 3.4 it will be a TypeError.

   - Issue #11244(125): The peephole optimizer is now able to
     constant-fold arbitrarily complex expressions.  This also fixes a
     3.2 regression where operations involving negative numbers were not
     constant-folded.

   - Issue #11450(126): Don’t truncate hg version info in
     Py_GetBuildInfo() when there are many tags (e.g.  when using mq).
     Patch by Nadeem Vawda.

   - Issue #11335(127): Fixed a memory leak in list.sort when the key
     function throws an exception.

   - Issue #8923(128): When a string is encoded to UTF-8 in strict mode,
     the result is cached into the object.  Examples: str.encode(),
     str.encode(’utf-8’), PyUnicode_AsUTF8String() and
     PyUnicode_AsEncodedString(unicode, "utf-8", NULL).

   - Issue #10829(129): Refactor PyUnicode_FromFormat(), use the same
     function to parse the format string in the 3 steps, fix crashs on
     invalid format strings.

   - Issue #13007(130): whichdb should recognize gdbm 1.9 magic numbers.

   - Issue #11286(131): Raise a ValueError from calling
     PyMemoryView_FromBuffer with a buffer struct having a NULL data
     pointer.

   - Issue #11272(132): On Windows, input() strips ’r’ (and not only
     ’n’), and sys.stdin uses universal newline (replace ’rn’ by ’n’).

   - Issue #11828(133): startswith and endswith now accept None as slice
     index.  Patch by Torsten Becker.

   - Issue #11168(134): Remove filename debug variable from
     PyEval_EvalFrameEx().  It encoded the Unicode filename to UTF-8,
     but the encoding fails on undecodable filename (on surrogate
     characters) which raises an unexpected UnicodeEncodeError on
     recursion limit.

   - Issue #11187(135): Remove bootstrap code (use ASCII) of
     PyUnicode_AsEncodedString(), it was replaced by a better fallback
     (use the locale encoding) in PyUnicode_EncodeFSDefault().

   - Check for NULL result in PyType_FromSpec.

   - Issue #10516(136): New copy() and clear() methods for lists and
     bytearrays.

   - Issue #11386(137): bytearray.pop() now throws IndexError when the
     bytearray is empty, instead of OverflowError.

   - Issue #12380(138): The rjust, ljust and center methods of bytes and
     bytearray now accept a bytearray argument.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14172

   (2) https://bugs.python.org/13521

   (3) https://bugs.python.org/6210

   (4) https://bugs.python.org/10181

   (5) https://bugs.python.org/12834

   (6) https://bugs.python.org/5231

   (7) https://bugs.python.org/14084

   (8) https://bugs.python.org/14040

   (9) https://bugs.python.org/14051

   (10) https://bugs.python.org/13703

   (11) https://bugs.python.org/13020

   (12) https://bugs.python.org/13908

   (13) https://bugs.python.org/11235

   (14) https://bugs.python.org/12705

   (15) https://bugs.python.org/8052

   (16) https://bugs.python.org/13629

   (17) https://bugs.python.org/13752

   (18) https://bugs.python.org/13761

   (19) https://bugs.python.org/13645

   (20) https://bugs.python.org/11682

   (21) https://bugs.python.org/13748

   (22) https://bugs.python.org/12736

   (23) https://bugs.python.org/12760

   (24) https://bugs.python.org/13738

   (25) https://bugs.python.org/13577

   (26) https://bugs.python.org/6695

   (27) https://bugs.python.org/12555

   (28) https://bugs.python.org/12149

   (29) https://bugs.python.org/13505

   (30) https://bugs.python.org/11147

   (31) https://bugs.python.org/13503

   (32) https://bugs.python.org/7111

   (33) https://bugs.python.org/11849

   (34) https://bugs.python.org/13448

   (35) https://bugs.python.org/13436

   (36) https://bugs.python.org/13411

   (37) https://bugs.python.org/13338

   (38) https://bugs.python.org/10227

   (39) https://bugs.python.org/13393

   (40) https://bugs.python.org/13392

   (41) https://bugs.python.org/13333

   (42) https://bugs.python.org/13389

   (43) https://bugs.python.org/13327

   (44) https://bugs.python.org/13350

   (45) https://bugs.python.org/13342

   (46) https://bugs.python.org/9896

   (47) https://bugs.python.org/13343

   (48) https://bugs.python.org/12797

   (49) https://bugs.python.org/10519

   (50) https://bugs.python.org/10363

   (51) https://bugs.python.org/13018

   (52) https://bugs.python.org/13201

   (53) https://bugs.python.org/1294232

   (54) https://bugs.python.org/12753

   (55) https://bugs.python.org/12170

   (56) https://bugs.python.org/12604

   (57) https://bugs.python.org/12281

   (58) https://bugs.python.org/13188

   (59) https://bugs.python.org/13146

   (60) https://bugs.python.org/7833

   (61) https://bugs.python.org/12555

   (62) https://bugs.python.org/13063

   (63) https://bugs.python.org/12911

   (64) https://bugs.python.org/14081

   (65) https://bugs.python.org/13012

   (66) https://bugs.python.org/7732

   (67) https://bugs.python.org/13021

   (68) https://bugs.python.org/12973

   (69) https://bugs.python.org/12904

   (70) https://bugs.python.org/12802

   (71) https://bugs.python.org/9200

   (72) https://bugs.python.org/12791

   (73) https://bugs.python.org/12773

   (74) https://bugs.python.org/12766

   (75) https://bugs.python.org/12266

   (76) https://bugs.python.org/12732

   (77) https://bugs.python.org/12575

   (78) https://bugs.python.org/12647

   (79) https://bugs.python.org/12579

   (80) https://bugs.python.org/10271

   (81) https://bugs.python.org/11627

   (82) https://bugs.python.org/12149

   (83) https://bugs.python.org/9611

   (84) https://bugs.python.org/9015

   (85) https://bugs.python.org/9642

   (86) https://bugs.python.org/9642

   (87) https://bugs.python.org/12475

   (88) https://bugs.python.org/12291

   (89) https://bugs.python.org/12356

   (90) https://bugs.python.org/12370

   (91) https://bugs.python.org/12084

   (92) https://bugs.python.org/12265

   (93) https://bugs.python.org/12225

   (94) https://bugs.python.org/1195

   (95) https://bugs.python.org/12216

   (96) https://bugs.python.org/12199

   (97) https://bugs.python.org/9670

   (98) https://bugs.python.org/12106

   (99) https://bugs.python.org/12190

   (100) https://bugs.python.org/12166

   (101) https://bugs.python.org/5715

   (102) https://bugs.python.org/12060

   (103) https://bugs.python.org/1746656

   (104) https://bugs.python.org/12044

   (105) https://bugs.python.org/1195

   (106) https://bugs.python.org/1856

   (107) https://bugs.python.org/9756

   (108) https://bugs.python.org/10517

   (109) https://bugs.python.org/10914

   (110) https://bugs.python.org/11918

   (111) https://bugs.python.org/6780

   (112) https://bugs.python.org/5057

   (113) https://bugs.python.org/11845

   (114) https://bugs.python.org/5673

   (115) https://bugs.python.org/11650

   (116) https://bugs.python.org/9319

   (117) https://bugs.python.org/10785

   (118) https://bugs.python.org/11619

   (119) https://bugs.python.org/10998

   (120) https://bugs.python.org/11244

   (121) https://bugs.python.org/11395

   (122) https://bugs.python.org/11320

   (123) https://bugs.python.org/11432

   (124) https://bugs.python.org/9856

   (125) https://bugs.python.org/11244

   (126) https://bugs.python.org/11450

   (127) https://bugs.python.org/11335

   (128) https://bugs.python.org/8923

   (129) https://bugs.python.org/10829

   (130) https://bugs.python.org/13007

   (131) https://bugs.python.org/11286

   (132) https://bugs.python.org/11272

   (133) https://bugs.python.org/11828

   (134) https://bugs.python.org/11168

   (135) https://bugs.python.org/11187

   (136) https://bugs.python.org/10516

   (137) https://bugs.python.org/11386

   (138) https://bugs.python.org/12380

