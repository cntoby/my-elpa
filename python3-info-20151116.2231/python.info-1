This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 3.4.3, September 02, 2015

     Copyright © 1990-2015, Python Software Foundation

INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.3.1.


File: python.info,  Node: Top,  Next: What's New in Python,  Up: (dir)

Python
******

     Python 3.4.3, September 02, 2015

     Copyright © 1990-2015, Python Software Foundation

* Menu:

* What's New in Python:: 
* The Python Tutorial:: 
* Python Setup and Usage:: 
* The Python Language Reference:: 
* The Python Standard Library:: 
* Extending and Embedding the Python Interpreter:: 
* Python/C API Reference Manual:: 
* Distributing Python Modules:: 
* Installing Python Modules:: 
* Python HOWTOs:: 
* Python Frequently Asked Questions:: 
* Glossary:: 
* About these documents:: 
* Reporting Bugs:: 
* Copyright:: 
* History and License:: 
* Distributing Python Modules (Legacy version): Distributing Python Modules Legacy version. 
* Installing Python Modules (Legacy version): Installing Python Modules Legacy version. 
* Python Module Index:: 
* Index:: 

 — The Detailed Node Listing —

What’s New in Python

* What’s New In Python 3.4: What's New In Python 3 4. 
* What’s New In Python 3.3: What's New In Python 3 3. 
* What’s New In Python 3.2: What's New In Python 3 2. 
* What’s New In Python 3.1: What's New In Python 3 1. 
* What’s New In Python 3.0: What's New In Python 3 0. 
* What’s New in Python 2.7: What's New in Python 2 7. 
* What’s New in Python 2.6: What's New in Python 2 6. 
* What’s New in Python 2.5: What's New in Python 2 5. 
* What’s New in Python 2.4: What's New in Python 2 4. 
* What’s New in Python 2.3: What's New in Python 2 3. 
* What’s New in Python 2.2: What's New in Python 2 2. 
* What’s New in Python 2.1: What's New in Python 2 1. 
* What’s New in Python 2.0: What's New in Python 2 0. 
* Changelog:: 

What’s New In Python 3.4

* Summary: Summary -- Release Highlights. Release Highlights
* New Features:: 
* New Modules:: 
* Improved Modules:: 
* CPython Implementation Changes:: 
* Deprecated:: 
* Removed:: 
* Porting to Python 3.4: Porting to Python 3 4. 
* Changed in 3.4.3: Changed in 3 4 3. 

New Features

* PEP 453; Explicit Bootstrapping of PIP in Python Installations: PEP 453 Explicit Bootstrapping of PIP in Python Installations. 
* PEP 446; Newly Created File Descriptors Are Non-Inheritable: PEP 446 Newly Created File Descriptors Are Non-Inheritable. 
* Improvements to Codec Handling:: 
* PEP 451; A ModuleSpec Type for the Import System: PEP 451 A ModuleSpec Type for the Import System. 
* Other Language Changes:: 

PEP 453: Explicit Bootstrapping of PIP in Python Installations

* Bootstrapping pip By Default:: 
* Documentation Changes:: 

New Modules

* asyncio:: 
* ensurepip:: 
* enum:: 
* pathlib:: 
* selectors:: 
* statistics:: 
* tracemalloc:: 

Improved Modules

* abc:: 
* aifc:: 
* argparse:: 
* audioop:: 
* base64:: 
* collections:: 
* colorsys:: 
* contextlib:: 
* dbm:: 
* dis:: 
* doctest:: 
* email:: 
* filecmp:: 
* functools:: 
* gc:: 
* glob:: 
* hashlib:: 
* hmac:: 
* html:: 
* http:: 
* importlib:: 
* inspect:: 
* ipaddress:: 
* logging:: 
* marshal:: 
* mmap:: 
* multiprocessing:: 
* operator:: 
* os:: 
* pdb:: 
* pickle:: 
* plistlib:: 
* poplib:: 
* pprint:: 
* pty:: 
* pydoc:: 
* re:: 
* resource:: 
* select:: 
* shelve:: 
* shutil:: 
* smtpd:: 
* smtplib:: 
* socket:: 
* sqlite3:: 
* ssl:: 
* stat:: 
* struct:: 
* subprocess:: 
* sunau:: 
* sys:: 
* tarfile:: 
* textwrap:: 
* threading:: 
* traceback:: 
* types:: 
* urllib:: 
* unittest:: 
* venv:: 
* wave:: 
* weakref:: 
* xml.etree: xml etree. 
* zipfile:: 

CPython Implementation Changes

* PEP 445; Customization of CPython Memory Allocators: PEP 445 Customization of CPython Memory Allocators. 
* PEP 442; Safe Object Finalization: PEP 442 Safe Object Finalization. 
* PEP 456; Secure and Interchangeable Hash Algorithm: PEP 456 Secure and Interchangeable Hash Algorithm. 
* PEP 436; Argument Clinic: PEP 436 Argument Clinic. 
* Other Build and C API Changes:: 
* Other Improvements:: 
* Significant Optimizations:: 

Deprecated

* Deprecations in the Python API:: 
* Deprecated Features:: 

Removed

* Operating Systems No Longer Supported:: 
* API and Feature Removals:: 
* Code Cleanups:: 

Porting to Python 3.4

* Changes in 'python' Command Behavior:: 
* Changes in the Python API:: 
* Changes in the C API:: 

Changed in 3.4.3

* PEP 476; Enabling certificate verification by default for stdlib http clients: PEP 476 Enabling certificate verification by default for stdlib http clients. 

What’s New In Python 3.3

* Summary: Summary -- Release highlights. Release highlights
* PEP 405; Virtual Environments: PEP 405 Virtual Environments. 
* PEP 420; Implicit Namespace Packages: PEP 420 Implicit Namespace Packages. 
* PEP 3118; New memoryview implementation and buffer protocol documentation: PEP 3118 New memoryview implementation and buffer protocol documentation. 
* PEP 393; Flexible String Representation: PEP 393 Flexible String Representation. 
* PEP 397; Python Launcher for Windows: PEP 397 Python Launcher for Windows. 
* PEP 3151; Reworking the OS and IO exception hierarchy: PEP 3151 Reworking the OS and IO exception hierarchy. 
* PEP 380; Syntax for Delegating to a Subgenerator: PEP 380 Syntax for Delegating to a Subgenerator. 
* PEP 409; Suppressing exception context: PEP 409 Suppressing exception context. 
* PEP 414; Explicit Unicode literals: PEP 414 Explicit Unicode literals. 
* PEP 3155; Qualified name for classes and functions: PEP 3155 Qualified name for classes and functions. 
* PEP 412; Key-Sharing Dictionary: PEP 412 Key-Sharing Dictionary. 
* PEP 362; Function Signature Object: PEP 362 Function Signature Object. 
* PEP 421; Adding sys.implementation: PEP 421 Adding sys implementation. 
* Using importlib as the Implementation of Import:: 
* Other Language Changes: Other Language Changes<2>. 
* A Finer-Grained Import Lock:: 
* Builtin functions and types:: 
* New Modules: New Modules<2>. 
* Improved Modules: Improved Modules<2>. 
* Optimizations:: 
* Build and C API Changes:: 
* Deprecated: Deprecated<2>. 
* Porting to Python 3.3: Porting to Python 3 3. 

PEP 3118: New memoryview implementation and buffer protocol documentation

* Features:: 
* API changes:: 

PEP 393: Flexible String Representation

* Functionality:: 
* Performance and resource usage:: 

PEP 421: Adding sys.implementation

* SimpleNamespace:: 

Using importlib as the Implementation of Import

* New APIs:: 
* Visible Changes:: 

New Modules

* faulthandler:: 
* ipaddress: ipaddress<2>. 
* lzma:: 

Improved Modules

* abc: abc<2>. 
* array:: 
* base64: base64<2>. 
* binascii:: 
* bz2:: 
* codecs:: 
* collections: collections<2>. 
* contextlib: contextlib<2>. 
* crypt:: 
* curses:: 
* datetime:: 
* decimal:: 
* email: email<2>. 
* ftplib:: 
* functools: functools<2>. 
* gc: gc<2>. 
* hmac: hmac<2>. 
* http: http<2>. 
* html: html<2>. 
* imaplib:: 
* inspect: inspect<2>. 
* io:: 
* itertools:: 
* logging: logging<2>. 
* math:: 
* mmap: mmap<2>. 
* multiprocessing: multiprocessing<2>. 
* nntplib:: 
* os: os<2>. 
* pdb: pdb<2>. 
* pickle: pickle<2>. 
* pydoc: pydoc<2>. 
* re: re<2>. 
* sched:: 
* select: select<2>. 
* shlex:: 
* shutil: shutil<2>. 
* signal:: 
* smtpd: smtpd<2>. 
* smtplib: smtplib<2>. 
* socket: socket<2>. 
* socketserver:: 
* sqlite3: sqlite3<2>. 
* ssl: ssl<2>. 
* stat: stat<2>. 
* struct: struct<2>. 
* subprocess: subprocess<2>. 
* sys: sys<2>. 
* tarfile: tarfile<2>. 
* tempfile:: 
* textwrap: textwrap<2>. 
* threading: threading<2>. 
* time:: 
* types: types<2>. 
* unittest: unittest<2>. 
* urllib: urllib<2>. 
* webbrowser:: 
* xml.etree.ElementTree: xml etree ElementTree. 
* zlib:: 

decimal

* Features: Features<2>. 
* API changes: API changes<2>. 

email

* Policy Framework:: 
* Provisional Policy with New Header API:: 
* Other API Changes:: 

Deprecated

* Unsupported Operating Systems:: 
* Deprecated Python modules, functions and methods: Deprecated Python modules functions and methods. 
* Deprecated functions and types of the C API:: 
* Deprecated features:: 

Porting to Python 3.3

* Porting Python code:: 
* Porting C code:: 
* Building C extensions:: 
* Command Line Switch Changes:: 

What’s New In Python 3.2

* PEP 384; Defining a Stable ABI: PEP 384 Defining a Stable ABI. 
* PEP 389; Argparse Command Line Parsing Module: PEP 389 Argparse Command Line Parsing Module. 
* PEP 391; Dictionary Based Configuration for Logging: PEP 391 Dictionary Based Configuration for Logging. 
* PEP 3148; The concurrent.futures module: PEP 3148 The concurrent futures module. 
* PEP 3147; PYC Repository Directories: PEP 3147 PYC Repository Directories. 
* PEP 3149; ABI Version Tagged .so Files: PEP 3149 ABI Version Tagged so Files. 
* PEP 3333; Python Web Server Gateway Interface v1.0.1: PEP 3333 Python Web Server Gateway Interface v1 0 1. 
* Other Language Changes: Other Language Changes<3>. 
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules. 
* Multi-threading:: 
* Optimizations: Optimizations<2>. 
* Unicode:: 
* Codecs:: 
* Documentation:: 
* IDLE:: 
* Code Repository:: 
* Build and C API Changes: Build and C API Changes<2>. 
* Porting to Python 3.2: Porting to Python 3 2. 

New, Improved, and Deprecated Modules

* email: email<3>. 
* elementtree:: 
* functools: functools<3>. 
* itertools: itertools<2>. 
* collections: collections<3>. 
* threading: threading<3>. 
* datetime and time:: 
* math: math<2>. 
* abc: abc<3>. 
* io: io<2>. 
* reprlib:: 
* logging: logging<3>. 
* csv:: 
* contextlib: contextlib<3>. 
* decimal and fractions:: 
* ftp:: 
* popen:: 
* select: select<3>. 
* gzip and zipfile:: 
* tarfile: tarfile<3>. 
* hashlib: hashlib<2>. 
* ast:: 
* os: os<3>. 
* shutil: shutil<3>. 
* sqlite3: sqlite3<3>. 
* html: html<3>. 
* socket: socket<3>. 
* ssl: ssl<3>. 
* nntp:: 
* certificates:: 
* imaplib: imaplib<2>. 
* http.client: http client. 
* unittest: unittest<3>. 
* random:: 
* poplib: poplib<2>. 
* asyncore:: 
* tempfile: tempfile<2>. 
* inspect: inspect<3>. 
* pydoc: pydoc<3>. 
* dis: dis<2>. 
* dbm: dbm<2>. 
* ctypes:: 
* site:: 
* sysconfig:: 
* pdb: pdb<3>. 
* configparser:: 
* urllib.parse: urllib parse. 
* mailbox:: 
* turtledemo:: 

What’s New In Python 3.1

* PEP 372; Ordered Dictionaries: PEP 372 Ordered Dictionaries. 
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator. 
* Other Language Changes: Other Language Changes<4>. 
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<2>. 
* Optimizations: Optimizations<3>. 
* IDLE: IDLE<2>. 
* Build and C API Changes: Build and C API Changes<3>. 
* Porting to Python 3.1: Porting to Python 3 1. 

What’s New In Python 3.0

* Common Stumbling Blocks:: 
* Overview Of Syntax Changes:: 
* Changes Already Present In Python 2.6: Changes Already Present In Python 2 6. 
* Library Changes:: 
* PEP 3101; A New Approach To String Formatting: PEP 3101 A New Approach To String Formatting. 
* Changes To Exceptions:: 
* Miscellaneous Other Changes:: 
* Build and C API Changes: Build and C API Changes<4>. 
* Performance:: 
* Porting To Python 3.0: Porting To Python 3 0. 

Common Stumbling Blocks

* Print Is A Function:: 
* Views And Iterators Instead Of Lists:: 
* Ordering Comparisons:: 
* Integers:: 
* Text Vs. Data Instead Of Unicode Vs. 8-bit: Text Vs Data Instead Of Unicode Vs 8-bit. 

Overview Of Syntax Changes

* New Syntax:: 
* Changed Syntax:: 
* Removed Syntax:: 

Miscellaneous Other Changes

* Operators And Special Methods:: 
* Builtins:: 

What’s New in Python 2.7

* The Future for Python 2.x: The Future for Python 2 x. 
* Changes to the Handling of Deprecation Warnings:: 
* Python 3.1 Features: Python 3 1 Features. 
* PEP 372; Adding an Ordered Dictionary to collections: PEP 372 Adding an Ordered Dictionary to collections. 
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator<2>. 
* PEP 389; The argparse Module for Parsing Command Lines: PEP 389 The argparse Module for Parsing Command Lines. 
* PEP 391; Dictionary-Based Configuration For Logging: PEP 391 Dictionary-Based Configuration For Logging. 
* PEP 3106; Dictionary Views: PEP 3106 Dictionary Views. 
* PEP 3137; The memoryview Object: PEP 3137 The memoryview Object. 
* Other Language Changes: Other Language Changes<5>. 
* New and Improved Modules:: 
* Build and C API Changes: Build and C API Changes<5>. 
* Other Changes and Fixes:: 
* Porting to Python 2.7: Porting to Python 2 7. 
* New Features Added to Python 2.7 Maintenance Releases: New Features Added to Python 2 7 Maintenance Releases. 
* Acknowledgements:: 

Other Language Changes

* Interpreter Changes:: 
* Optimizations: Optimizations<4>. 

New and Improved Modules

* New module; importlib: New module importlib. 
* New module; sysconfig: New module sysconfig. 
* ttk; Themed Widgets for Tk: ttk Themed Widgets for Tk. 
* Updated module; unittest: Updated module unittest. 
* Updated module; ElementTree 1.3: Updated module ElementTree 1 3. 

Build and C API Changes

* Capsules:: 
* Port-Specific Changes; Windows: Port-Specific Changes Windows. 
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X. 
* Port-Specific Changes; FreeBSD: Port-Specific Changes FreeBSD. 

New Features Added to Python 2.7 Maintenance Releases

* PEP 434; IDLE Enhancement Exception for All Branches: PEP 434 IDLE Enhancement Exception for All Branches. 
* PEP 466; Network Security Enhancements for Python 2.7: PEP 466 Network Security Enhancements for Python 2 7. 

What’s New in Python 2.6

* Python 3.0: Python 3 0. 
* Changes to the Development Process:: 
* PEP 343; The ’with’ statement: PEP 343 The 'with' statement. 
* PEP 366; Explicit Relative Imports From a Main Module: PEP 366 Explicit Relative Imports From a Main Module. 
* PEP 370; Per-user site-packages Directory: PEP 370 Per-user site-packages Directory. 
* PEP 371; The multiprocessing Package: PEP 371 The multiprocessing Package. 
* PEP 3101; Advanced String Formatting: PEP 3101 Advanced String Formatting. 
* PEP 3105; print As a Function: PEP 3105 print As a Function. 
* PEP 3110; Exception-Handling Changes: PEP 3110 Exception-Handling Changes. 
* PEP 3112; Byte Literals: PEP 3112 Byte Literals. 
* PEP 3116; New I/O Library: PEP 3116 New I/O Library. 
* PEP 3118; Revised Buffer Protocol: PEP 3118 Revised Buffer Protocol. 
* PEP 3119; Abstract Base Classes: PEP 3119 Abstract Base Classes. 
* PEP 3127; Integer Literal Support and Syntax: PEP 3127 Integer Literal Support and Syntax. 
* PEP 3129; Class Decorators: PEP 3129 Class Decorators. 
* PEP 3141; A Type Hierarchy for Numbers: PEP 3141 A Type Hierarchy for Numbers. 
* Other Language Changes: Other Language Changes<6>. 
* New and Improved Modules: New and Improved Modules<2>. 
* Deprecations and Removals:: 
* Build and C API Changes: Build and C API Changes<6>. 
* Porting to Python 2.6: Porting to Python 2 6. 
* Acknowledgements: Acknowledgements<2>. 

Changes to the Development Process

* New Issue Tracker; Roundup: New Issue Tracker Roundup. 
* New Documentation Format; reStructuredText Using Sphinx: New Documentation Format reStructuredText Using Sphinx. 

PEP 343: The ’with’ statement

* Writing Context Managers:: 
* The contextlib module:: 

PEP 3141: A Type Hierarchy for Numbers

* The fractions Module:: 

Other Language Changes

* Optimizations: Optimizations<5>. 
* Interpreter Changes: Interpreter Changes<2>. 

New and Improved Modules

* The ast module:: 
* The future_builtins module:: 
* The json module; JavaScript Object Notation: The json module JavaScript Object Notation. 
* The plistlib module; A Property-List Parser: The plistlib module A Property-List Parser. 
* ctypes Enhancements:: 
* Improved SSL Support:: 

Build and C API Changes

* Port-Specific Changes; Windows: Port-Specific Changes Windows<2>. 
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X<2>. 
* Port-Specific Changes; IRIX: Port-Specific Changes IRIX. 

What’s New in Python 2.5

* PEP 308; Conditional Expressions: PEP 308 Conditional Expressions. 
* PEP 309; Partial Function Application: PEP 309 Partial Function Application. 
* PEP 314; Metadata for Python Software Packages v1.1: PEP 314 Metadata for Python Software Packages v1 1. 
* PEP 328; Absolute and Relative Imports: PEP 328 Absolute and Relative Imports. 
* PEP 338; Executing Modules as Scripts: PEP 338 Executing Modules as Scripts. 
* PEP 341; Unified try/except/finally: PEP 341 Unified try/except/finally. 
* PEP 342; New Generator Features: PEP 342 New Generator Features. 
* PEP 343; The ’with’ statement: PEP 343 The 'with' statement<2>. 
* PEP 352; Exceptions as New-Style Classes: PEP 352 Exceptions as New-Style Classes. 
* PEP 353; Using ssize_t as the index type: PEP 353 Using ssize_t as the index type. 
* PEP 357; The ’__index__’ method: PEP 357 The '__index__' method. 
* Other Language Changes: Other Language Changes<7>. 
* New, Improved, and Removed Modules: New Improved and Removed Modules. 
* Build and C API Changes: Build and C API Changes<7>. 
* Porting to Python 2.5: Porting to Python 2 5. 
* Acknowledgements: Acknowledgements<3>. 

PEP 343: The ’with’ statement

* Writing Context Managers: Writing Context Managers<2>. 
* The contextlib module: The contextlib module<2>. 

Other Language Changes

* Interactive Interpreter Changes:: 
* Optimizations: Optimizations<6>. 

New, Improved, and Removed Modules

* The ctypes package:: 
* The ElementTree package:: 
* The hashlib package:: 
* The sqlite3 package:: 
* The wsgiref package:: 

Build and C API Changes

* Port-Specific Changes:: 

What’s New in Python 2.4

* PEP 218; Built-In Set Objects: PEP 218 Built-In Set Objects. 
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers. 
* PEP 289; Generator Expressions: PEP 289 Generator Expressions. 
* PEP 292; Simpler String Substitutions: PEP 292 Simpler String Substitutions. 
* PEP 318; Decorators for Functions and Methods: PEP 318 Decorators for Functions and Methods. 
* PEP 322; Reverse Iteration: PEP 322 Reverse Iteration. 
* PEP 324; New subprocess Module: PEP 324 New subprocess Module. 
* PEP 327; Decimal Data Type: PEP 327 Decimal Data Type. 
* PEP 328; Multi-line Imports: PEP 328 Multi-line Imports. 
* PEP 331; Locale-Independent Float/String Conversions: PEP 331 Locale-Independent Float/String Conversions. 
* Other Language Changes: Other Language Changes<8>. 
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<3>. 
* Build and C API Changes: Build and C API Changes<8>. 
* Porting to Python 2.4: Porting to Python 2 4. 
* Acknowledgements: Acknowledgements<4>. 

PEP 327: Decimal Data Type

* Why is Decimal needed?:: 
* The Decimal type:: 
* The Context type:: 

Other Language Changes

* Optimizations: Optimizations<7>. 

New, Improved, and Deprecated Modules

* cookielib:: 
* doctest: doctest<2>. 

Build and C API Changes

* Port-Specific Changes: Port-Specific Changes<2>. 

What’s New in Python 2.3

* PEP 218; A Standard Set Datatype: PEP 218 A Standard Set Datatype. 
* PEP 255; Simple Generators: PEP 255 Simple Generators. 
* PEP 263; Source Code Encodings: PEP 263 Source Code Encodings. 
* PEP 273; Importing Modules from ZIP Archives: PEP 273 Importing Modules from ZIP Archives. 
* PEP 277; Unicode file name support for Windows NT: PEP 277 Unicode file name support for Windows NT. 
* PEP 278; Universal Newline Support: PEP 278 Universal Newline Support. 
* PEP 279; enumerate(): PEP 279 enumerate. 
* PEP 282; The logging Package: PEP 282 The logging Package. 
* PEP 285; A Boolean Type: PEP 285 A Boolean Type. 
* PEP 293; Codec Error Handling Callbacks: PEP 293 Codec Error Handling Callbacks. 
* PEP 301; Package Index and Metadata for Distutils: PEP 301 Package Index and Metadata for Distutils. 
* PEP 302; New Import Hooks: PEP 302 New Import Hooks. 
* PEP 305; Comma-separated Files: PEP 305 Comma-separated Files. 
* PEP 307; Pickle Enhancements: PEP 307 Pickle Enhancements. 
* Extended Slices:: 
* Other Language Changes: Other Language Changes<9>. 
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<4>. 
* Pymalloc; A Specialized Object Allocator: Pymalloc A Specialized Object Allocator. 
* Build and C API Changes: Build and C API Changes<9>. 
* Other Changes and Fixes: Other Changes and Fixes<2>. 
* Porting to Python 2.3: Porting to Python 2 3. 
* Acknowledgements: Acknowledgements<5>. 

Other Language Changes

* String Changes:: 
* Optimizations: Optimizations<8>. 

New, Improved, and Deprecated Modules

* Date/Time Type:: 
* The optparse Module:: 

Build and C API Changes

* Port-Specific Changes: Port-Specific Changes<3>. 

What’s New in Python 2.2

* Introduction:: 
* PEPs 252 and 253; Type and Class Changes: PEPs 252 and 253 Type and Class Changes. 
* PEP 234; Iterators: PEP 234 Iterators. 
* PEP 255; Simple Generators: PEP 255 Simple Generators<2>. 
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers<2>. 
* PEP 238; Changing the Division Operator: PEP 238 Changing the Division Operator. 
* Unicode Changes:: 
* PEP 227; Nested Scopes: PEP 227 Nested Scopes. 
* New and Improved Modules: New and Improved Modules<3>. 
* Interpreter Changes and Fixes:: 
* Other Changes and Fixes: Other Changes and Fixes<3>. 
* Acknowledgements: Acknowledgements<6>. 

PEPs 252 and 253: Type and Class Changes

* Old and New Classes:: 
* Descriptors:: 
* Multiple Inheritance; The Diamond Rule: Multiple Inheritance The Diamond Rule. 
* Attribute Access:: 
* Related Links:: 

What’s New in Python 2.1

* Introduction: Introduction<2>. 
* PEP 227; Nested Scopes: PEP 227 Nested Scopes<2>. 
* PEP 236; __future__ Directives: PEP 236 __future__ Directives. 
* PEP 207; Rich Comparisons: PEP 207 Rich Comparisons. 
* PEP 230; Warning Framework: PEP 230 Warning Framework. 
* PEP 229; New Build System: PEP 229 New Build System. 
* PEP 205; Weak References: PEP 205 Weak References. 
* PEP 232; Function Attributes: PEP 232 Function Attributes. 
* PEP 235; Importing Modules on Case-Insensitive Platforms: PEP 235 Importing Modules on Case-Insensitive Platforms. 
* PEP 217; Interactive Display Hook: PEP 217 Interactive Display Hook. 
* PEP 208; New Coercion Model: PEP 208 New Coercion Model. 
* PEP 241; Metadata in Python Packages: PEP 241 Metadata in Python Packages. 
* New and Improved Modules: New and Improved Modules<4>. 
* Other Changes and Fixes: Other Changes and Fixes<4>. 
* Acknowledgements: Acknowledgements<7>. 

What’s New in Python 2.0

* Introduction: Introduction<3>. 
* What About Python 1.6?: What About Python 1 6?. 
* New Development Process:: 
* Unicode: Unicode<2>. 
* List Comprehensions:: 
* Augmented Assignment:: 
* String Methods:: 
* Garbage Collection of Cycles:: 
* Other Core Changes:: 
* Porting to 2.0: Porting to 2 0. 
* Extending/Embedding Changes:: 
* Distutils; Making Modules Easy to Install: Distutils Making Modules Easy to Install. 
* XML Modules:: 
* Module changes:: 
* New modules:: 
* IDLE Improvements:: 
* Deleted and Deprecated Modules:: 
* Acknowledgements: Acknowledgements<8>. 

Other Core Changes

* Minor Language Changes:: 
* Changes to Built-in Functions:: 

XML Modules

* SAX2 Support:: 
* DOM Support:: 
* Relationship to PyXML:: 

Changelog

* Python 3.4.3: Python 3 4 3. 
* Python 3.4.2: Python 3 4 2. 
* Python 3.4.2rc1: Python 3 4 2rc1. 
* Python 3.4.1: Python 3 4 1. 
* Python 3.4.1rc1: Python 3 4 1rc1. 
* Python 3.4.0: Python 3 4 0. 
* Python 3.4.0 release candidate 3: Python 3 4 0 release candidate 3. 
* Python 3.4.0 release candidate 2: Python 3 4 0 release candidate 2. 
* Python 3.4.0 release candidate 1: Python 3 4 0 release candidate 1. 
* Python 3.4.0 Beta 3: Python 3 4 0 Beta 3. 
* Python 3.4.0 Beta 2: Python 3 4 0 Beta 2. 
* Python 3.4.0 Beta 1: Python 3 4 0 Beta 1. 
* Python 3.4.0 Alpha 4: Python 3 4 0 Alpha 4. 
* Python 3.4.0 Alpha 3: Python 3 4 0 Alpha 3. 
* Python 3.4.0 Alpha 2: Python 3 4 0 Alpha 2. 
* Python 3.4.0 Alpha 1: Python 3 4 0 Alpha 1. 
* Python 3.3.0: Python 3 3 0. 
* Python 3.3.0 Release Candidate 3: Python 3 3 0 Release Candidate 3. 
* Python 3.3.0 Release Candidate 2: Python 3 3 0 Release Candidate 2. 
* Python 3.3.0 Release Candidate 1: Python 3 3 0 Release Candidate 1. 
* Python 3.3.0 Beta 2: Python 3 3 0 Beta 2. 
* Python 3.3.0 Beta 1: Python 3 3 0 Beta 1. 
* Python 3.3.0 Alpha 4: Python 3 3 0 Alpha 4. 
* Python 3.3.0 Alpha 3: Python 3 3 0 Alpha 3. 
* Python 3.3.0 Alpha 2: Python 3 3 0 Alpha 2. 
* Python 3.3.0 Alpha 1: Python 3 3 0 Alpha 1. 

Python 3.4.3

* Core and Builtins:: 
* Library:: 
* IDLE: IDLE<3>. 
* Tests:: 
* Build:: 
* C API:: 
* Documentation: Documentation<2>. 
* Tools/Demos:: 
* Windows:: 

Python 3.4.2

* Core and Builtins: Core and Builtins<2>. 
* Library: Library<2>. 

Python 3.4.2rc1

* Core and Builtins: Core and Builtins<3>. 
* Library: Library<3>. 
* Extension Modules:: 
* Build: Build<2>. 
* IDLE: IDLE<4>. 
* Tests: Tests<2>. 
* Documentation: Documentation<3>. 
* Windows: Windows<2>. 
* Tools/Demos: Tools/Demos<2>. 

Python 3.4.1

* Core and Builtins: Core and Builtins<4>. 
* Library: Library<4>. 
* Tests: Tests<3>. 
* IDLE: IDLE<5>. 

Python 3.4.1rc1

* Core and Builtins: Core and Builtins<5>. 
* Library: Library<5>. 
* Extension Modules: Extension Modules<2>. 
* IDLE: IDLE<6>. 
* Build: Build<3>. 
* C API: C API<2>. 
* Documentation: Documentation<4>. 
* Tests: Tests<4>. 
* Tools/Demos: Tools/Demos<3>. 

Python 3.4.0

* Library: Library<6>. 
* Documentation: Documentation<5>. 

Python 3.4.0 release candidate 3

* Core and Builtins: Core and Builtins<6>. 
* Library: Library<7>. 
* Build: Build<4>. 

Python 3.4.0 release candidate 2

* Core and Builtins: Core and Builtins<7>. 
* Library: Library<8>. 
* Build: Build<5>. 

Python 3.4.0 release candidate 1

* Core and Builtins: Core and Builtins<8>. 
* Library: Library<9>. 
* IDLE: IDLE<7>. 
* Tests: Tests<5>. 
* Tools/Demos: Tools/Demos<4>. 
* Build: Build<6>. 
* C-API:: 
* Documentation: Documentation<6>. 

Python 3.4.0 Beta 3

* Core and Builtins: Core and Builtins<9>. 
* Library: Library<10>. 
* IDLE: IDLE<8>. 
* Tests: Tests<6>. 
* Tools/Demos: Tools/Demos<5>. 
* Build: Build<7>. 

Python 3.4.0 Beta 2

* Core and Builtins: Core and Builtins<10>. 
* Library: Library<11>. 
* IDLE: IDLE<9>. 
* Tests: Tests<7>. 
* Build: Build<8>. 
* Documentation: Documentation<7>. 
* Tools/Demos: Tools/Demos<6>. 

Python 3.4.0 Beta 1

* Core and Builtins: Core and Builtins<11>. 
* Library: Library<12>. 
* Tests: Tests<8>. 
* Documentation: Documentation<8>. 
* Build: Build<9>. 
* Tools/Demos: Tools/Demos<7>. 

Python 3.4.0 Alpha 4

* Core and Builtins: Core and Builtins<12>. 
* Library: Library<13>. 
* C API: C API<3>. 
* Tests: Tests<9>. 
* Documentation: Documentation<9>. 
* Build: Build<10>. 

Python 3.4.0 Alpha 3

* Core and Builtins: Core and Builtins<13>. 
* Library: Library<14>. 
* Tests: Tests<10>. 
* IDLE: IDLE<10>. 
* Documentation: Documentation<10>. 
* Build: Build<11>. 
* Tools/Demos: Tools/Demos<8>. 

Python 3.4.0 Alpha 2

* Core and Builtins: Core and Builtins<14>. 
* Library: Library<15>. 
* Tests: Tests<11>. 
* IDLE: IDLE<11>. 
* Documentation: Documentation<11>. 
* Build: Build<12>. 
* Tools/Demos: Tools/Demos<9>. 

Python 3.4.0 Alpha 1

* Core and Builtins: Core and Builtins<15>. 
* Library: Library<16>. 
* IDLE: IDLE<12>. 
* Tests: Tests<12>. 
* Build: Build<13>. 
* C-API: C-API<2>. 
* Documentation: Documentation<12>. 
* Tools/Demos: Tools/Demos<10>. 
* Windows: Windows<3>. 

Python 3.3.0

* Core and Builtins: Core and Builtins<16>. 
* Extension Modules: Extension Modules<3>. 

Python 3.3.0 Release Candidate 3

* Core and Builtins: Core and Builtins<17>. 
* Library: Library<17>. 
* Extension Modules: Extension Modules<4>. 

Python 3.3.0 Release Candidate 2

* Core and Builtins: Core and Builtins<18>. 
* Library: Library<18>. 
* Build: Build<14>. 
* Documentation: Documentation<13>. 

Python 3.3.0 Release Candidate 1

* Core and Builtins: Core and Builtins<19>. 
* Library: Library<19>. 
* IDLE: IDLE<13>. 
* Documentation: Documentation<14>. 
* Tests: Tests<13>. 
* Build: Build<15>. 

Python 3.3.0 Beta 2

* Core and Builtins: Core and Builtins<20>. 
* Library: Library<20>. 
* C API: C API<4>. 
* Extension Modules: Extension Modules<5>. 
* IDLE: IDLE<14>. 
* Tools/Demos: Tools/Demos<11>. 
* Documentation: Documentation<15>. 
* Tests: Tests<14>. 
* Build: Build<16>. 

Python 3.3.0 Beta 1

* Core and Builtins: Core and Builtins<21>. 
* Library: Library<21>. 
* C-API: C-API<3>. 
* Extension Modules: Extension Modules<6>. 
* IDLE: IDLE<15>. 
* Documentation: Documentation<16>. 
* Tests: Tests<15>. 
* Build: Build<17>. 

Python 3.3.0 Alpha 4

* Core and Builtins: Core and Builtins<22>. 
* Library: Library<22>. 
* IDLE: IDLE<16>. 
* Tools/Demos: Tools/Demos<12>. 
* Build: Build<18>. 
* C-API: C-API<4>. 
* Documentation: Documentation<17>. 

Python 3.3.0 Alpha 3

* Core and Builtins: Core and Builtins<23>. 
* Library: Library<23>. 
* Build: Build<19>. 
* Tests: Tests<16>. 
* IDLE: IDLE<17>. 
* Tools / Demos:: 
* C-API: C-API<5>. 

Python 3.3.0 Alpha 2

* Core and Builtins: Core and Builtins<24>. 
* Library: Library<24>. 
* Build: Build<20>. 
* Documentation: Documentation<18>. 
* Extension Modules: Extension Modules<7>. 
* Tests: Tests<17>. 

Python 3.3.0 Alpha 1

* Core and Builtins: Core and Builtins<25>. 
* Library: Library<25>. 
* Build: Build<21>. 
* IDLE: IDLE<18>. 
* Tools/Demos: Tools/Demos<13>. 
* Extension Modules: Extension Modules<8>. 
* Tests: Tests<18>. 
* C-API: C-API<6>. 
* Documentation: Documentation<19>. 

The Python Tutorial

* Whetting Your Appetite:: 
* Using the Python Interpreter:: 
* An Informal Introduction to Python:: 
* More Control Flow Tools:: 
* Data Structures:: 
* Modules:: 
* Input and Output:: 
* Errors and Exceptions:: 
* Classes:: 
* Brief Tour of the Standard Library:: 
* Brief Tour of the Standard Library: Brief Tour of the Standard Library -- Part II. Part II
* What Now?:: 
* Interactive Input Editing and History Substitution:: 
* Floating Point Arithmetic; Issues and Limitations: Floating Point Arithmetic Issues and Limitations. 
* Appendix:: 

Using the Python Interpreter

* Invoking the Interpreter:: 
* The Interpreter and Its Environment:: 

Invoking the Interpreter

* Argument Passing:: 
* Interactive Mode:: 

The Interpreter and Its Environment

* Source Code Encoding:: 

An Informal Introduction to Python

* Using Python as a Calculator:: 
* First Steps Towards Programming:: 

Using Python as a Calculator

* Numbers:: 
* Strings:: 
* Lists:: 

More Control Flow Tools

* if Statements:: 
* for Statements:: 
* The range() Function: The range Function. 
* break and continue Statements, and else Clauses on Loops: break and continue Statements and else Clauses on Loops. 
* pass Statements:: 
* Defining Functions:: 
* More on Defining Functions:: 
* Intermezzo; Coding Style: Intermezzo Coding Style. 

More on Defining Functions

* Default Argument Values:: 
* Keyword Arguments:: 
* Arbitrary Argument Lists:: 
* Unpacking Argument Lists:: 
* Lambda Expressions:: 
* Documentation Strings:: 
* Function Annotations:: 

Data Structures

* More on Lists:: 
* The del statement:: 
* Tuples and Sequences:: 
* Sets:: 
* Dictionaries:: 
* Looping Techniques:: 
* More on Conditions:: 
* Comparing Sequences and Other Types:: 

More on Lists

* Using Lists as Stacks:: 
* Using Lists as Queues:: 
* List Comprehensions: List Comprehensions<2>. 
* Nested List Comprehensions:: 

Modules

* More on Modules:: 
* Standard Modules:: 
* The dir() Function: The dir Function. 
* Packages:: 

More on Modules

* Executing modules as scripts:: 
* The Module Search Path:: 
* "Compiled" Python files:: 

Packages

* Importing * From a Package:: 
* Intra-package References:: 
* Packages in Multiple Directories:: 

Input and Output

* Fancier Output Formatting:: 
* Reading and Writing Files:: 

Fancier Output Formatting

* Old string formatting:: 

Reading and Writing Files

* Methods of File Objects:: 
* Saving structured data with json:: 

Errors and Exceptions

* Syntax Errors:: 
* Exceptions:: 
* Handling Exceptions:: 
* Raising Exceptions:: 
* User-defined Exceptions:: 
* Defining Clean-up Actions:: 
* Predefined Clean-up Actions:: 

Classes

* A Word About Names and Objects:: 
* Python Scopes and Namespaces:: 
* A First Look at Classes:: 
* Random Remarks:: 
* Inheritance:: 
* Private Variables:: 
* Odds and Ends:: 
* Exceptions Are Classes Too:: 
* Iterators:: 
* Generators:: 
* Generator Expressions:: 

Python Scopes and Namespaces

* Scopes and Namespaces Example:: 

A First Look at Classes

* Class Definition Syntax:: 
* Class Objects:: 
* Instance Objects:: 
* Method Objects:: 
* Class and Instance Variables:: 

Inheritance

* Multiple Inheritance:: 

Brief Tour of the Standard Library

* Operating System Interface:: 
* File Wildcards:: 
* Command Line Arguments:: 
* Error Output Redirection and Program Termination:: 
* String Pattern Matching:: 
* Mathematics:: 
* Internet Access:: 
* Dates and Times:: 
* Data Compression:: 
* Performance Measurement:: 
* Quality Control:: 
* Batteries Included:: 

Brief Tour of the Standard Library – Part II

* Output Formatting:: 
* Templating:: 
* Working with Binary Data Record Layouts:: 
* Multi-threading: Multi-threading<2>. 
* Logging:: 
* Weak References:: 
* Tools for Working with Lists:: 
* Decimal Floating Point Arithmetic:: 

Interactive Input Editing and History Substitution

* Tab Completion and History Editing:: 
* Alternatives to the Interactive Interpreter:: 

Floating Point Arithmetic:  Issues and Limitations

* Representation Error:: 

Appendix

* Interactive Mode: Interactive Mode<2>. 

Interactive Mode

* Error Handling:: 
* Executable Python Scripts:: 
* The Interactive Startup File:: 
* The Customization Modules:: 

Python Setup and Usage

* Command line and environment:: 
* Using Python on Unix platforms:: 
* Using Python on Windows:: 
* Using Python on a Macintosh:: 
* Additional Tools and Scripts:: 

Command line and environment

* Command line:: 
* Environment variables:: 

Command line

* Interface options:: 
* Generic options:: 
* Miscellaneous options:: 
* Options you shouldn't use:: 

Environment variables

* Debug-mode variables:: 

Using Python on Unix platforms

* Getting and installing the latest version of Python:: 
* Building Python:: 
* Python-related paths and files:: 
* Miscellaneous:: 
* Editors:: 

Getting and installing the latest version of Python

* On Linux:: 
* On FreeBSD and OpenBSD:: 
* On OpenSolaris:: 

Using Python on Windows

* Installing Python:: 
* Alternative bundles:: 
* Configuring Python:: 
* Python Launcher for Windows:: 
* Additional modules:: 
* Compiling Python on Windows:: 
* Other resources:: 

Configuring Python

* Excursus; Setting environment variables: Excursus Setting environment variables. 
* Finding the Python executable:: 
* Finding modules:: 
* Executing scripts:: 
* Executing scripts without the Python launcher:: 

Python Launcher for Windows

* Getting started:: 
* Shebang Lines:: 
* Arguments in shebang lines:: 
* Customization:: 
* Diagnostics:: 

Getting started

* From the command-line:: 
* From a script:: 
* From file associations:: 

Customization

* Customization via INI files:: 
* Customizing default Python versions:: 

Additional modules

* PyWin32:: 
* cx_Freeze:: 
* WConio:: 

Using Python on a Macintosh

* Getting and Installing MacPython:: 
* The IDE:: 
* Installing Additional Python Packages:: 
* GUI Programming on the Mac:: 
* Distributing Python Applications on the Mac:: 
* Other Resources:: 

Getting and Installing MacPython

* How to run a Python script:: 
* Running scripts with a GUI:: 
* Configuration:: 

Additional Tools and Scripts

* pyvenv - Creating virtual environments:: 

The Python Language Reference

* Introduction: Introduction<4>. 
* Lexical analysis:: 
* Data model:: 
* Execution model:: 
* The import system:: 
* Expressions:: 
* Simple statements:: 
* Compound statements:: 
* Top-level components:: 
* Full Grammar specification:: 

Introduction

* Alternate Implementations:: 
* Notation:: 

Lexical analysis

* Line structure:: 
* Other tokens:: 
* Identifiers and keywords:: 
* Literals:: 
* Operators:: 
* Delimiters:: 

Line structure

* Logical lines:: 
* Physical lines:: 
* Comments:: 
* Encoding declarations:: 
* Explicit line joining:: 
* Implicit line joining:: 
* Blank lines:: 
* Indentation:: 
* Whitespace between tokens:: 

Identifiers and keywords

* Keywords:: 
* Reserved classes of identifiers:: 

Literals

* String and Bytes literals:: 
* String literal concatenation:: 
* Numeric literals:: 
* Integer literals:: 
* Floating point literals:: 
* Imaginary literals:: 

Data model

* Objects, values and types: Objects values and types. 
* The standard type hierarchy:: 
* Special method names:: 

Special method names

* Basic customization:: 
* Customizing attribute access:: 
* Customizing class creation:: 
* Customizing instance and subclass checks:: 
* Emulating callable objects:: 
* Emulating container types:: 
* Emulating numeric types:: 
* With Statement Context Managers:: 
* Special method lookup:: 

Customizing attribute access

* Implementing Descriptors:: 
* Invoking Descriptors:: 
* __slots__:: 

__slots__

* Notes on using __slots__:: 

Customizing class creation

* Determining the appropriate metaclass:: 
* Preparing the class namespace:: 
* Executing the class body:: 
* Creating the class object:: 
* Metaclass example:: 

Execution model

* Naming and binding:: 
* Exceptions: Exceptions<2>. 

Naming and binding

* Interaction with dynamic features:: 

The import system

* importlib: importlib<2>. 
* Packages: Packages<2>. 
* Searching:: 
* Loading:: 
* The Path Based Finder:: 
* Replacing the standard import system:: 
* Special considerations for __main__:: 
* Open issues:: 
* References:: 

Packages

* Regular packages:: 
* Namespace packages:: 

Searching

* The module cache:: 
* Finders and loaders:: 
* Import hooks:: 
* The meta path:: 

Loading

* Loaders:: 
* Module spec:: 
* Import-related module attributes:: 
* module.__path__: module __path__. 
* Module reprs:: 

The Path Based Finder

* Path entry finders:: 
* Path entry finder protocol:: 

Special considerations for __main__

* __main__.__spec__: __main__ __spec__. 

Expressions

* Arithmetic conversions:: 
* Atoms:: 
* Primaries:: 
* The power operator:: 
* Unary arithmetic and bitwise operations:: 
* Binary arithmetic operations:: 
* Shifting operations:: 
* Binary bitwise operations:: 
* Comparisons:: 
* Boolean operations:: 
* Conditional expressions:: 
* Lambdas:: 
* Expression lists:: 
* Evaluation order:: 
* Operator precedence:: 

Atoms

* Identifiers (Names): Identifiers Names. 
* Literals: Literals<2>. 
* Parenthesized forms:: 
* Displays for lists, sets and dictionaries: Displays for lists sets and dictionaries. 
* List displays:: 
* Set displays:: 
* Dictionary displays:: 
* Generator expressions:: 
* Yield expressions:: 

Yield expressions

* Generator-iterator methods:: 
* Examples:: 

Primaries

* Attribute references:: 
* Subscriptions:: 
* Slicings:: 
* Calls:: 

Simple statements

* Expression statements:: 
* Assignment statements:: 
* The assert statement:: 
* The pass statement:: 
* The del statement: The del statement<2>. 
* The return statement:: 
* The yield statement:: 
* The raise statement:: 
* The break statement:: 
* The continue statement:: 
* The import statement:: 
* The global statement:: 
* The nonlocal statement:: 

Assignment statements

* Augmented assignment statements:: 

The import statement

* Future statements:: 

Compound statements

* The if statement:: 
* The while statement:: 
* The for statement:: 
* The try statement:: 
* The with statement:: 
* Function definitions:: 
* Class definitions:: 

Top-level components

* Complete Python programs:: 
* File input:: 
* Interactive input:: 
* Expression input:: 

The Python Standard Library

* Introduction: Introduction<5>. 
* Built-in Functions:: 
* Built-in Constants:: 
* Built-in Types:: 
* Built-in Exceptions:: 
* Text Processing Services:: 
* Binary Data Services:: 
* Data Types:: 
* Numeric and Mathematical Modules:: 
* Functional Programming Modules:: 
* File and Directory Access:: 
* Data Persistence:: 
* Data Compression and Archiving:: 
* File Formats:: 
* Cryptographic Services:: 
* Generic Operating System Services:: 
* Concurrent Execution:: 
* Interprocess Communication and Networking:: 
* Internet Data Handling:: 
* Structured Markup Processing Tools:: 
* Internet Protocols and Support:: 
* Multimedia Services:: 
* Internationalization:: 
* Program Frameworks:: 
* Graphical User Interfaces with Tk:: 
* Development Tools:: 
* Debugging and Profiling:: 
* Software Packaging and Distribution:: 
* Python Runtime Services:: 
* Custom Python Interpreters:: 
* Importing Modules:: 
* Python Language Services:: 
* Miscellaneous Services:: 
* MS Windows Specific Services:: 
* Unix Specific Services:: 
* Superseded Modules:: 
* Undocumented Modules:: 

Built-in Constants

* Constants added by the site module:: 

Built-in Types

* Truth Value Testing:: 
* Boolean Operations: Boolean Operations --- and or not. and, or, not
* Comparisons: Comparisons<2>. 
* Numeric Types: Numeric Types --- int float complex. int, float, complex
* Iterator Types:: 
* Sequence Types: Sequence Types --- list tuple range. list, tuple, range
* Text Sequence Type: Text Sequence Type --- str. str
* Binary Sequence Types: Binary Sequence Types --- bytes bytearray memoryview. bytes, bytearray, memoryview
* Set Types: Set Types --- set frozenset. set, frozenset
* Mapping Types: Mapping Types --- dict. dict
* Context Manager Types:: 
* Other Built-in Types:: 
* Special Attributes:: 

Numeric Types — int, float, complex

* Bitwise Operations on Integer Types:: 
* Additional Methods on Integer Types:: 
* Additional Methods on Float:: 
* Hashing of numeric types:: 

Iterator Types

* Generator Types:: 

Sequence Types — list, tuple, range

* Common Sequence Operations:: 
* Immutable Sequence Types:: 
* Mutable Sequence Types:: 
* Lists: Lists<2>. 
* Tuples:: 
* Ranges:: 

Text Sequence Type — str

* String Methods: String Methods<2>. 
* printf-style String Formatting:: 

Binary Sequence Types — bytes, bytearray, memoryview

* Bytes:: 
* Bytearray Objects:: 
* Bytes and Bytearray Operations:: 
* Memory Views:: 

Mapping Types — dict

* Dictionary view objects:: 

Other Built-in Types

* Modules: Modules<2>. 
* Classes and Class Instances:: 
* Functions:: 
* Methods:: 
* Code Objects:: 
* Type Objects:: 
* The Null Object:: 
* The Ellipsis Object:: 
* The NotImplemented Object:: 
* Boolean Values:: 
* Internal Objects:: 

Built-in Exceptions

* Base classes:: 
* Concrete exceptions:: 
* Warnings:: 
* Exception hierarchy:: 

Concrete exceptions

* OS exceptions:: 

Text Processing Services

* string: string --- Common string operations. Common string operations
* re: re --- Regular expression operations. Regular expression operations
* difflib: difflib --- Helpers for computing deltas. Helpers for computing deltas
* textwrap: textwrap --- Text wrapping and filling. Text wrapping and filling
* unicodedata: unicodedata --- Unicode Database. Unicode Database
* stringprep: stringprep --- Internet String Preparation. Internet String Preparation
* readline: readline --- GNU readline interface. GNU readline interface
* rlcompleter: rlcompleter --- Completion function for GNU readline. Completion function for GNU readline

string — Common string operations

* String constants:: 
* String Formatting:: 
* Format String Syntax:: 
* Template strings:: 
* Helper functions:: 

Format String Syntax

* Format Specification Mini-Language:: 
* Format examples:: 

re — Regular expression operations

* Regular Expression Syntax:: 
* Module Contents:: 
* Regular Expression Objects:: 
* Match Objects:: 
* Regular Expression Examples:: 

Regular Expression Examples

* Checking for a Pair:: 
* Simulating scanf(): Simulating scanf. 
* search() vs. match(): search vs match. 
* Making a Phonebook:: 
* Text Munging:: 
* Finding all Adverbs:: 
* Finding all Adverbs and their Positions:: 
* Raw String Notation:: 
* Writing a Tokenizer:: 

difflib — Helpers for computing deltas

* SequenceMatcher Objects:: 
* SequenceMatcher Examples:: 
* Differ Objects:: 
* Differ Example:: 
* A command-line interface to difflib:: 

readline — GNU readline interface

* Example:: 

rlcompleter — Completion function for GNU readline

* Completer Objects:: 

Binary Data Services

* struct: struct --- Interpret bytes as packed binary data. Interpret bytes as packed binary data
* codecs: codecs --- Codec registry and base classes. Codec registry and base classes

struct — Interpret bytes as packed binary data

* Functions and Exceptions:: 
* Format Strings:: 
* Classes: Classes<2>. 

Format Strings

* Byte Order, Size, and Alignment: Byte Order Size and Alignment. 
* Format Characters:: 
* Examples: Examples<2>. 

codecs — Codec registry and base classes

* Codec Base Classes:: 
* Encodings and Unicode:: 
* Standard Encodings:: 
* Python Specific Encodings:: 
* encodings.idna: encodings idna --- Internationalized Domain Names in Applications. Internationalized Domain Names in Applications
* encodings.mbcs: encodings mbcs --- Windows ANSI codepage. Windows ANSI codepage
* encodings.utf_8_sig: encodings utf_8_sig --- UTF-8 codec with BOM signature. UTF-8 codec with BOM signature

Codec Base Classes

* Error Handlers:: 
* Stateless Encoding and Decoding:: 
* Incremental Encoding and Decoding:: 
* Stream Encoding and Decoding:: 

Incremental Encoding and Decoding

* IncrementalEncoder Objects:: 
* IncrementalDecoder Objects:: 

Stream Encoding and Decoding

* StreamWriter Objects:: 
* StreamReader Objects:: 
* StreamReaderWriter Objects:: 
* StreamRecoder Objects:: 

Python Specific Encodings

* Text Encodings:: 
* Binary Transforms:: 
* Text Transforms:: 

Data Types

* datetime: datetime --- Basic date and time types. Basic date and time types
* calendar: calendar --- General calendar-related functions. General calendar-related functions
* collections: collections --- Container datatypes. Container datatypes
* collections.abc: collections abc --- Abstract Base Classes for Containers. Abstract Base Classes for Containers
* heapq: heapq --- Heap queue algorithm. Heap queue algorithm
* bisect: bisect --- Array bisection algorithm. Array bisection algorithm
* array: array --- Efficient arrays of numeric values. Efficient arrays of numeric values
* weakref: weakref --- Weak references. Weak references
* types: types --- Dynamic type creation and names for built-in types. Dynamic type creation and names for built-in types
* copy: copy --- Shallow and deep copy operations. Shallow and deep copy operations
* pprint: pprint --- Data pretty printer. Data pretty printer
* reprlib: reprlib --- Alternate repr implementation. Alternate repr() implementation
* enum: enum --- Support for enumerations. Support for enumerations

datetime — Basic date and time types

* Available Types:: 
* timedelta Objects:: 
* date Objects:: 
* datetime Objects:: 
* time Objects:: 
* tzinfo Objects:: 
* timezone Objects:: 
* strftime() and strptime() Behavior: strftime and strptime Behavior. 

collections — Container datatypes

* ChainMap objects:: 
* Counter objects:: 
* deque objects:: 
* defaultdict objects:: 
* namedtuple() Factory Function for Tuples with Named Fields: namedtuple Factory Function for Tuples with Named Fields. 
* OrderedDict objects:: 
* UserDict objects:: 
* UserList objects:: 
* UserString objects:: 

ChainMap objects

* ChainMap Examples and Recipes:: 

deque objects

* deque Recipes:: 

defaultdict objects

* defaultdict Examples:: 

OrderedDict objects

* OrderedDict Examples and Recipes:: 

collections.abc — Abstract Base Classes for Containers

* Collections Abstract Base Classes:: 

heapq — Heap queue algorithm

* Basic Examples:: 
* Priority Queue Implementation Notes:: 
* Theory:: 

bisect — Array bisection algorithm

* Searching Sorted Lists:: 
* Other Examples:: 

weakref — Weak references

* Weak Reference Objects:: 
* Example: Example<2>. 
* Finalizer Objects:: 
* Comparing finalizers with __del__() methods: Comparing finalizers with __del__ methods. 

types — Dynamic type creation and names for built-in types

* Dynamic Type Creation:: 
* Standard Interpreter Types:: 
* Additional Utility Classes and Functions:: 

pprint — Data pretty printer

* PrettyPrinter Objects:: 
* Example: Example<3>. 

reprlib — Alternate repr() implementation

* Repr Objects:: 
* Subclassing Repr Objects:: 

enum — Support for enumerations

* Module Contents: Module Contents<2>. 
* Creating an Enum:: 
* Programmatic access to enumeration members and their attributes:: 
* Duplicating enum members and values:: 
* Ensuring unique enumeration values:: 
* Iteration:: 
* Comparisons: Comparisons<3>. 
* Allowed members and attributes of enumerations:: 
* Restricted subclassing of enumerations:: 
* Pickling:: 
* Functional API:: 
* Derived Enumerations:: 
* Interesting examples:: 
* How are Enums different?:: 

Derived Enumerations

* IntEnum:: 
* Others:: 

Interesting examples

* AutoNumber:: 
* OrderedEnum:: 
* DuplicateFreeEnum:: 
* Planet:: 

How are Enums different?

* Enum Classes:: 
* Enum Members (aka instances): Enum Members aka instances. 
* Finer Points:: 

Numeric and Mathematical Modules

* numbers: numbers --- Numeric abstract base classes. Numeric abstract base classes
* math: math --- Mathematical functions. Mathematical functions
* cmath: cmath --- Mathematical functions for complex numbers. Mathematical functions for complex numbers
* decimal: decimal --- Decimal fixed point and floating point arithmetic. Decimal fixed point and floating point arithmetic
* fractions: fractions --- Rational numbers. Rational numbers
* random: random --- Generate pseudo-random numbers. Generate pseudo-random numbers
* statistics: statistics --- Mathematical statistics functions. Mathematical statistics functions

numbers — Numeric abstract base classes

* The numeric tower:: 
* Notes for type implementors:: 

Notes for type implementors

* Adding More Numeric ABCs:: 
* Implementing the arithmetic operations:: 

math — Mathematical functions

* Number-theoretic and representation functions:: 
* Power and logarithmic functions:: 
* Trigonometric functions:: 
* Angular conversion:: 
* Hyperbolic functions:: 
* Special functions:: 
* Constants:: 

cmath — Mathematical functions for complex numbers

* Conversions to and from polar coordinates:: 
* Power and logarithmic functions: Power and logarithmic functions<2>. 
* Trigonometric functions: Trigonometric functions<2>. 
* Hyperbolic functions: Hyperbolic functions<2>. 
* Classification functions:: 
* Constants: Constants<2>. 

decimal — Decimal fixed point and floating point arithmetic

* Quick-start Tutorial:: 
* Decimal objects:: 
* Context objects:: 
* Constants: Constants<3>. 
* Rounding modes:: 
* Signals:: 
* Floating Point Notes:: 
* Working with threads:: 
* Recipes:: 
* Decimal FAQ:: 

Decimal objects

* Logical operands:: 

Floating Point Notes

* Mitigating round-off error with increased precision:: 
* Special values:: 

random — Generate pseudo-random numbers

* Notes on Reproducibility:: 
* Examples and Recipes:: 

statistics — Mathematical statistics functions

* Averages and measures of central location:: 
* Measures of spread:: 
* Function details:: 
* Exceptions: Exceptions<3>. 

Functional Programming Modules

* itertools: itertools --- Functions creating iterators for efficient looping. Functions creating iterators for efficient looping
* functools: functools --- Higher-order functions and operations on callable objects. Higher-order functions and operations on callable
                        objects
* operator: operator --- Standard operators as functions. Standard operators as functions

itertools — Functions creating iterators for efficient looping

* Itertool functions:: 
* Itertools Recipes:: 

functools — Higher-order functions and operations on callable objects

* partial Objects:: 

operator — Standard operators as functions

* Mapping Operators to Functions:: 
* Inplace Operators:: 

File and Directory Access

* pathlib: pathlib --- Object-oriented filesystem paths. Object-oriented filesystem paths
* os.path: os path --- Common pathname manipulations. Common pathname manipulations
* fileinput: fileinput --- Iterate over lines from multiple input streams. Iterate over lines from multiple input streams
* stat: stat --- Interpreting stat results. Interpreting stat() results
* filecmp: filecmp --- File and Directory Comparisons. File and Directory Comparisons
* tempfile: tempfile --- Generate temporary files and directories. Generate temporary files and directories
* glob: glob --- Unix style pathname pattern expansion. Unix style pathname pattern expansion
* fnmatch: fnmatch --- Unix filename pattern matching. Unix filename pattern matching
* linecache: linecache --- Random access to text lines. Random access to text lines
* shutil: shutil --- High-level file operations. High-level file operations
* macpath: macpath --- Mac OS 9 path manipulation functions. Mac OS 9 path manipulation functions

pathlib — Object-oriented filesystem paths

* Basic use:: 
* Pure paths:: 
* Concrete paths:: 

Pure paths

* General properties:: 
* Operators: Operators<2>. 
* Accessing individual parts:: 
* Methods and properties:: 

Concrete paths

* Methods: Methods<2>. 

filecmp — File and Directory Comparisons

* The dircmp class:: 

tempfile — Generate temporary files and directories

* Examples: Examples<3>. 

shutil — High-level file operations

* Directory and files operations:: 
* Archiving operations:: 
* Querying the size of the output terminal:: 

Directory and files operations

* copytree example:: 

Archiving operations

* Archiving example:: 

Data Persistence

* pickle: pickle --- Python object serialization. Python object serialization
* copyreg: copyreg --- Register pickle support functions. Register pickle support functions
* shelve: shelve --- Python object persistence. Python object persistence
* marshal: marshal --- Internal Python object serialization. Internal Python object serialization
* dbm: dbm --- Interfaces to Unix "databases". Interfaces to Unix "databases"
* sqlite3: sqlite3 --- DB-API 2 0 interface for SQLite databases. DB-API 2.0 interface for SQLite databases

pickle — Python object serialization

* Relationship to other Python modules:: 
* Data stream format:: 
* Module Interface:: 
* What can be pickled and unpickled?:: 
* Pickling Class Instances:: 
* Restricting Globals:: 
* Performance: Performance<2>. 
* Examples: Examples<4>. 

Relationship to other Python modules

* Comparison with marshal:: 
* Comparison with json:: 

Pickling Class Instances

* Persistence of External Objects:: 
* Dispatch Tables:: 
* Handling Stateful Objects:: 

copyreg — Register pickle support functions

* Example: Example<4>. 

shelve — Python object persistence

* Restrictions:: 
* Example: Example<5>. 

dbm — Interfaces to Unix "databases"

* dbm.gnu: dbm gnu --- GNU's reinterpretation of dbm. GNU’s reinterpretation of dbm
* dbm.ndbm: dbm ndbm --- Interface based on ndbm. Interface based on ndbm
* dbm.dumb: dbm dumb --- Portable DBM implementation. Portable DBM implementation

sqlite3 — DB-API 2.0 interface for SQLite databases

* Module functions and constants:: 
* Connection Objects:: 
* Cursor Objects:: 
* Row Objects:: 
* SQLite and Python types:: 
* Controlling Transactions:: 
* Using sqlite3 efficiently:: 
* Common issues:: 

SQLite and Python types

* Introduction: Introduction<6>. 
* Using adapters to store additional Python types in SQLite databases:: 
* Converting SQLite values to custom Python types:: 
* Default adapters and converters:: 

Using adapters to store additional Python types in SQLite databases

* Letting your object adapt itself:: 
* Registering an adapter callable:: 

Using sqlite3 efficiently

* Using shortcut methods:: 
* Accessing columns by name instead of by index:: 
* Using the connection as a context manager:: 

Common issues

* Multithreading:: 

Data Compression and Archiving

* zlib: zlib --- Compression compatible with gzip. Compression compatible with gzip
* gzip: gzip --- Support for gzip files. Support for gzip files
* bz2: bz2 --- Support for bzip2 compression. Support for bzip2 compression
* lzma: lzma --- Compression using the LZMA algorithm. Compression using the LZMA algorithm
* zipfile: zipfile --- Work with ZIP archives. Work with ZIP archives
* tarfile: tarfile --- Read and write tar archive files. Read and write tar archive files

gzip — Support for gzip files

* Examples of usage:: 

bz2 — Support for bzip2 compression

* (De)compression of files: De compression of files. 
* Incremental (de)compression: Incremental de compression. 
* One-shot (de)compression: One-shot de compression. 

lzma — Compression using the LZMA algorithm

* Reading and writing compressed files:: 
* Compressing and decompressing data in memory:: 
* Miscellaneous: Miscellaneous<2>. 
* Specifying custom filter chains:: 
* Examples: Examples<5>. 

zipfile — Work with ZIP archives

* ZipFile Objects:: 
* PyZipFile Objects:: 
* ZipInfo Objects:: 

tarfile — Read and write tar archive files

* TarFile Objects:: 
* TarInfo Objects:: 
* Command Line Interface:: 
* Examples: Examples<6>. 
* Supported tar formats:: 
* Unicode issues:: 

Command Line Interface

* Command line options:: 

File Formats

* csv: csv --- CSV File Reading and Writing. CSV File Reading and Writing
* configparser: configparser --- Configuration file parser. Configuration file parser
* netrc: netrc --- netrc file processing. netrc file processing
* xdrlib: xdrlib --- Encode and decode XDR data. Encode and decode XDR data
* plistlib: plistlib --- Generate and parse Mac OS X plist files. Generate and parse Mac OS X .plist files

csv — CSV File Reading and Writing

* Module Contents: Module Contents<3>. 
* Dialects and Formatting Parameters:: 
* Reader Objects:: 
* Writer Objects:: 
* Examples: Examples<7>. 

configparser — Configuration file parser

* Quick Start:: 
* Supported Datatypes:: 
* Fallback Values:: 
* Supported INI File Structure:: 
* Interpolation of values:: 
* Mapping Protocol Access:: 
* Customizing Parser Behaviour:: 
* Legacy API Examples:: 
* ConfigParser Objects:: 
* RawConfigParser Objects:: 
* Exceptions: Exceptions<4>. 

netrc — netrc file processing

* netrc Objects:: 

xdrlib — Encode and decode XDR data

* Packer Objects:: 
* Unpacker Objects:: 
* Exceptions: Exceptions<5>. 

plistlib — Generate and parse Mac OS X .plist files

* Examples: Examples<8>. 

Cryptographic Services

* hashlib: hashlib --- Secure hashes and message digests. Secure hashes and message digests
* hmac: hmac --- Keyed-Hashing for Message Authentication. Keyed-Hashing for Message Authentication

hashlib — Secure hashes and message digests

* Hash algorithms:: 
* Key Derivation Function:: 

Generic Operating System Services

* os: os --- Miscellaneous operating system interfaces. Miscellaneous operating system interfaces
* io: io --- Core tools for working with streams. Core tools for working with streams
* time: time --- Time access and conversions. Time access and conversions
* argparse: argparse --- Parser for command-line options arguments and sub-commands. Parser for command-line options, arguments and sub-
                        commands
* getopt: getopt --- C-style parser for command line options. C-style parser for command line options
* logging: logging --- Logging facility for Python. Logging facility for Python
* logging.config: logging config --- Logging configuration. Logging configuration
* logging.handlers: logging handlers --- Logging handlers. Logging handlers
* getpass: getpass --- Portable password input. Portable password input
* curses: curses --- Terminal handling for character-cell displays. Terminal handling for character-cell displays
* curses.textpad: curses textpad --- Text input widget for curses programs. Text input widget for curses programs
* curses.ascii: curses ascii --- Utilities for ASCII characters. Utilities for ASCII characters
* curses.panel: curses panel --- A panel stack extension for curses. A panel stack extension for curses
* platform: platform --- Access to underlying platform's identifying data. Access to underlying platform’s identifying data
* errno: errno --- Standard errno system symbols. Standard errno system symbols
* ctypes: ctypes --- A foreign function library for Python. A foreign function library for Python

os — Miscellaneous operating system interfaces

* File Names, Command Line Arguments, and Environment Variables: File Names Command Line Arguments and Environment Variables. 
* Process Parameters:: 
* File Object Creation:: 
* File Descriptor Operations:: 
* Files and Directories:: 
* Process Management:: 
* Interface to the scheduler:: 
* Miscellaneous System Information:: 
* Miscellaneous Functions:: 

File Descriptor Operations

* Querying the size of a terminal:: 
* Inheritance of File Descriptors:: 

Files and Directories

* Linux extended attributes:: 

io — Core tools for working with streams

* Overview:: 
* High-level Module Interface:: 
* Class hierarchy:: 
* Performance: Performance<3>. 

Overview

* Text I/O:: 
* Binary I/O:: 
* Raw I/O:: 

High-level Module Interface

* In-memory streams:: 

Class hierarchy

* I/O Base Classes:: 
* Raw File I/O:: 
* Buffered Streams:: 
* Text I/O: Text I/O<2>. 

Performance

* Binary I/O: Binary I/O<2>. 
* Text I/O: Text I/O<3>. 
* Multi-threading: Multi-threading<3>. 
* Reentrancy:: 

argparse — Parser for command-line options, arguments and sub-commands

* Example: Example<6>. 
* ArgumentParser objects:: 
* The add_argument() method: The add_argument method. 
* The parse_args() method: The parse_args method. 
* Other utilities:: 
* Upgrading optparse code:: 

Example

* Creating a parser:: 
* Adding arguments:: 
* Parsing arguments:: 

ArgumentParser objects

* prog:: 
* usage:: 
* description:: 
* epilog:: 
* parents:: 
* formatter_class:: 
* prefix_chars:: 
* fromfile_prefix_chars:: 
* argument_default:: 
* conflict_handler:: 
* add_help:: 

The add_argument() method

* name or flags:: 
* action:: 
* nargs:: 
* const:: 
* default:: 
* type:: 
* choices:: 
* required:: 
* help:: 
* metavar:: 
* dest:: 
* Action classes:: 

The parse_args() method

* Option value syntax:: 
* Invalid arguments:: 
* Arguments containing -:: 
* Argument abbreviations (prefix matching): Argument abbreviations prefix matching. 
* Beyond sys.argv: Beyond sys argv. 
* The Namespace object:: 

Other utilities

* Sub-commands:: 
* FileType objects:: 
* Argument groups:: 
* Mutual exclusion:: 
* Parser defaults:: 
* Printing help:: 
* Partial parsing:: 
* Customizing file parsing:: 
* Exiting methods:: 

logging — Logging facility for Python

* Logger Objects:: 
* Logging Levels:: 
* Handler Objects:: 
* Formatter Objects:: 
* Filter Objects:: 
* LogRecord Objects:: 
* LogRecord attributes:: 
* LoggerAdapter Objects:: 
* Thread Safety:: 
* Module-Level Functions:: 
* Module-Level Attributes:: 
* Integration with the warnings module:: 

logging.config — Logging configuration

* Configuration functions:: 
* Configuration dictionary schema:: 
* Configuration file format:: 

Configuration dictionary schema

* Dictionary Schema Details:: 
* Incremental Configuration:: 
* Object connections:: 
* User-defined objects:: 
* Access to external objects:: 
* Access to internal objects:: 
* Import resolution and custom importers:: 

logging.handlers — Logging handlers

* StreamHandler:: 
* FileHandler:: 
* NullHandler:: 
* WatchedFileHandler:: 
* BaseRotatingHandler:: 
* RotatingFileHandler:: 
* TimedRotatingFileHandler:: 
* SocketHandler:: 
* DatagramHandler:: 
* SysLogHandler:: 
* NTEventLogHandler:: 
* SMTPHandler:: 
* MemoryHandler:: 
* HTTPHandler:: 
* QueueHandler:: 
* QueueListener:: 

curses — Terminal handling for character-cell displays

* Functions: Functions<2>. 
* Window Objects:: 
* Constants: Constants<4>. 

curses.textpad — Text input widget for curses programs

* Textbox objects:: 

curses.panel — A panel stack extension for curses

* Functions: Functions<3>. 
* Panel Objects:: 

platform —  Access to underlying platform’s identifying data

* Cross Platform:: 
* Java Platform:: 
* Windows Platform:: 
* Mac OS Platform:: 
* Unix Platforms:: 

Windows Platform

* Win95/98 specific:: 

ctypes — A foreign function library for Python

* ctypes tutorial:: 
* ctypes reference:: 

ctypes tutorial

* Loading dynamic link libraries:: 
* Accessing functions from loaded dlls:: 
* Calling functions:: 
* Fundamental data types:: 
* Calling functions, continued: Calling functions continued. 
* Calling functions with your own custom data types:: 
* Specifying the required argument types (function prototypes): Specifying the required argument types function prototypes. 
* Return types:: 
* Passing pointers (or; passing parameters by reference): Passing pointers or passing parameters by reference. 
* Structures and unions:: 
* Structure/union alignment and byte order:: 
* Bit fields in structures and unions:: 
* Arrays:: 
* Pointers:: 
* Type conversions:: 
* Incomplete Types:: 
* Callback functions:: 
* Accessing values exported from dlls:: 
* Surprises:: 
* Variable-sized data types:: 

ctypes reference

* Finding shared libraries:: 
* Loading shared libraries:: 
* Foreign functions:: 
* Function prototypes:: 
* Utility functions:: 
* Data types:: 
* Fundamental data types: Fundamental data types<2>. 
* Structured data types:: 
* Arrays and pointers:: 

Concurrent Execution

* threading: threading --- Thread-based parallelism. Thread-based parallelism
* multiprocessing: multiprocessing --- Process-based parallelism. Process-based parallelism
* The concurrent package:: 
* concurrent.futures: concurrent futures --- Launching parallel tasks. Launching parallel tasks
* subprocess: subprocess --- Subprocess management. Subprocess management
* sched: sched --- Event scheduler. Event scheduler
* queue: queue --- A synchronized queue class. A synchronized queue class
* dummy_threading: dummy_threading --- Drop-in replacement for the threading module. Drop-in replacement for the threading module
* _thread: _thread --- Low-level threading API. Low-level threading API
* _dummy_thread: _dummy_thread --- Drop-in replacement for the _thread module. Drop-in replacement for the _thread module

threading — Thread-based parallelism

* Thread-Local Data:: 
* Thread Objects:: 
* Lock Objects:: 
* RLock Objects:: 
* Condition Objects:: 
* Semaphore Objects:: 
* Event Objects:: 
* Timer Objects:: 
* Barrier Objects:: 
* Using locks, conditions, and semaphores in the with statement: Using locks conditions and semaphores in the with statement. 

Semaphore Objects

* Semaphore Example:: 

multiprocessing — Process-based parallelism

* Introduction: Introduction<7>. 
* Reference:: 
* Programming guidelines:: 
* Examples: Examples<9>. 

Introduction

* The Process class:: 
* Contexts and start methods:: 
* Exchanging objects between processes:: 
* Synchronization between processes:: 
* Sharing state between processes:: 
* Using a pool of workers:: 

Reference

* Process and exceptions:: 
* Pipes and Queues:: 
* Miscellaneous: Miscellaneous<3>. 
* Connection Objects: Connection Objects<2>. 
* Synchronization primitives:: 
* Shared ctypes Objects:: 
* Managers:: 
* Proxy Objects:: 
* Process Pools:: 
* Listeners and Clients:: 
* Authentication keys:: 
* Logging: Logging<2>. 
* The multiprocessing.dummy module: The multiprocessing dummy module. 

Shared ctypes Objects

* The multiprocessing.sharedctypes module: The multiprocessing sharedctypes module. 

Managers

* Namespace objects:: 
* Customized managers:: 
* Using a remote manager:: 

Proxy Objects

* Cleanup:: 

Listeners and Clients

* Address Formats:: 

Programming guidelines

* All start methods:: 
* The spawn and forkserver start methods:: 

concurrent.futures — Launching parallel tasks

* Executor Objects:: 
* ThreadPoolExecutor:: 
* ProcessPoolExecutor:: 
* Future Objects:: 
* Module Functions:: 
* Exception classes:: 

ThreadPoolExecutor

* ThreadPoolExecutor Example:: 

ProcessPoolExecutor

* ProcessPoolExecutor Example:: 

subprocess — Subprocess management

* Using the subprocess Module:: 
* Security Considerations:: 
* Popen Objects:: 
* Windows Popen Helpers:: 
* Replacing Older Functions with the subprocess Module:: 
* Legacy Shell Invocation Functions:: 
* Notes:: 

Using the subprocess Module

* Frequently Used Arguments:: 
* Popen Constructor:: 
* Exceptions: Exceptions<6>. 

Windows Popen Helpers

* Constants: Constants<5>. 

Replacing Older Functions with the subprocess Module

* Replacing /bin/sh shell backquote:: 
* Replacing shell pipeline:: 
* Replacing os.system(): Replacing os system. 
* Replacing the os.spawn family: Replacing the os spawn family. 
* Replacing os.popen(), os.popen2(), os.popen3(): Replacing os popen os popen2 os popen3. 
* Replacing functions from the popen2 module:: 

Notes

* Converting an argument sequence to a string on Windows:: 

sched — Event scheduler

* Scheduler Objects:: 

queue — A synchronized queue class

* Queue Objects:: 

Interprocess Communication and Networking

* socket: socket --- Low-level networking interface. Low-level networking interface
* ssl: ssl --- TLS/SSL wrapper for socket objects. TLS/SSL wrapper for socket objects
* select: select --- Waiting for I/O completion. Waiting for I/O completion
* selectors: selectors -- High-level I/O multiplexing. High-level I/O multiplexing
* asyncio: asyncio -- Asynchronous I/O event loop coroutines and tasks. Asynchronous I/O, event loop, coroutines and tasks
* asyncore: asyncore --- Asynchronous socket handler. Asynchronous socket handler
* asynchat: asynchat --- Asynchronous socket command/response handler. Asynchronous socket command/response handler
* signal: signal --- Set handlers for asynchronous events. Set handlers for asynchronous events
* mmap: mmap --- Memory-mapped file support. Memory-mapped file support

socket — Low-level networking interface

* Socket families:: 
* Module contents:: 
* Socket Objects:: 
* Notes on socket timeouts:: 
* Example: Example<7>. 

Module contents

* Exceptions: Exceptions<7>. 
* Constants: Constants<6>. 
* Functions: Functions<4>. 

Functions

* Creating sockets:: 
* Other functions:: 

Notes on socket timeouts

* Timeouts and the connect method:: 
* Timeouts and the accept method:: 

ssl — TLS/SSL wrapper for socket objects

* Functions, Constants, and Exceptions: Functions Constants and Exceptions. 
* SSL Sockets:: 
* SSL Contexts:: 
* Certificates:: 
* Examples: Examples<10>. 
* Notes on non-blocking sockets:: 
* Security considerations:: 

Functions, Constants, and Exceptions

* Socket creation:: 
* Context creation:: 
* Random generation:: 
* Certificate handling:: 
* Constants: Constants<7>. 

Certificates

* Certificate chains:: 
* CA certificates:: 
* Combined key and certificate:: 
* Self-signed certificates:: 

Examples

* Testing for SSL support:: 
* Client-side operation:: 
* Server-side operation:: 

Security considerations

* Best defaults:: 
* Manual settings:: 
* Multi-processing:: 

Manual settings

* Verifying certificates:: 
* Protocol versions:: 
* Cipher selection:: 

select — Waiting for I/O completion

* /dev/poll Polling Objects:: 
* Edge and Level Trigger Polling (epoll) Objects: Edge and Level Trigger Polling epoll Objects. 
* Polling Objects:: 
* Kqueue Objects:: 
* Kevent Objects:: 

selectors – High-level I/O multiplexing

* Introduction: Introduction<8>. 
* Classes: Classes<3>. 
* Examples: Examples<11>. 

asyncio – Asynchronous I/O, event loop, coroutines and tasks

* Base Event Loop:: 
* Event loops:: 
* Tasks and coroutines:: 
* Transports and protocols (low-level API): Transports and protocols low-level API. 
* Streams (high-level API): Streams high-level API. 
* Subprocess:: 
* Subprocess and threads:: 
* Subprocess examples:: 
* Synchronization primitives: Synchronization primitives<2>. 
* Develop with asyncio:: 

Base Event Loop

* Run an event loop:: 
* Calls: Calls<2>. 
* Delayed calls:: 
* Coroutines:: 
* Creating connections:: 
* Creating listening connections:: 
* Watch file descriptors:: 
* Low-level socket operations:: 
* Resolve host name:: 
* Connect pipes:: 
* UNIX signals:: 
* Executor:: 
* Error Handling API:: 
* Debug mode:: 
* Server:: 
* Handle:: 
* Event loop examples:: 

Event loop examples

* Hello World with call_soon(): Hello World with call_soon. 
* Display the current date with call_later(): Display the current date with call_later. 
* Watch a file descriptor for read events:: 
* Set signal handlers for SIGINT and SIGTERM:: 

Event loops

* Event loop functions:: 
* Available event loops:: 
* Platform support:: 
* Event loop policies and the default policy:: 
* Event loop policy interface:: 
* Access to the global loop policy:: 

Platform support

* Windows: Windows<4>. 
* Mac OS X:: 

Tasks and coroutines

* Coroutines: Coroutines<2>. 
* InvalidStateError:: 
* TimeoutError:: 
* Future:: 
* Task:: 
* Task functions:: 

Coroutines

* Example; Hello World coroutine: Example Hello World coroutine. 
* Example; Coroutine displaying the current date: Example Coroutine displaying the current date. 
* Example; Chain coroutines: Example Chain coroutines. 

Future

* Example; Future with run_until_complete(): Example Future with run_until_complete. 
* Example; Future with run_forever(): Example Future with run_forever. 

Task

* Example; Parallel execution of tasks: Example Parallel execution of tasks. 

Transports  and protocols (low-level API)

* Transports:: 
* Protocols:: 
* Protocol examples:: 

Transports

* BaseTransport:: 
* ReadTransport:: 
* WriteTransport:: 
* DatagramTransport:: 
* BaseSubprocessTransport:: 

Protocols

* Protocol classes:: 
* Connection callbacks:: 
* Streaming protocols:: 
* Datagram protocols:: 
* Flow control callbacks:: 
* Coroutines and protocols:: 

Protocol examples

* TCP echo client protocol:: 
* TCP echo server protocol:: 
* UDP echo client protocol:: 
* UDP echo server protocol:: 
* Register an open socket to wait for data using a protocol:: 

Streams (high-level API)

* Stream functions:: 
* StreamReader:: 
* StreamWriter:: 
* StreamReaderProtocol:: 
* IncompleteReadError:: 
* Stream examples:: 

Stream examples

* TCP echo client using streams:: 
* TCP echo server using streams:: 
* Get HTTP headers:: 
* Register an open socket to wait for data using streams:: 

Subprocess

* Windows event loop:: 
* Create a subprocess; high-level API using Process: Create a subprocess high-level API using Process. 
* Create a subprocess; low-level API using subprocess.Popen: Create a subprocess low-level API using subprocess Popen. 
* Constants: Constants<8>. 
* Process:: 

Subprocess examples

* Subprocess using transport and protocol:: 
* Subprocess using streams:: 

Synchronization primitives

* Locks:: 
* Semaphores:: 
* Queues:: 

Locks

* Lock:: 
* Event:: 
* Condition:: 

Semaphores

* Semaphore:: 
* BoundedSemaphore:: 

Queues

* Queue:: 
* PriorityQueue:: 
* LifoQueue:: 
* JoinableQueue:: 
* Exceptions: Exceptions<8>. 

Develop with asyncio

* Debug mode of asyncio:: 
* Cancellation:: 
* Concurrency and multithreading:: 
* Handle blocking functions correctly:: 
* Logging: Logging<3>. 
* Detect coroutine objects never scheduled:: 
* Detect exceptions never consumed:: 
* Chain coroutines correctly:: 
* Pending task destroyed:: 
* Close transports and event loops:: 

asyncore — Asynchronous socket handler

* asyncore Example basic HTTP client:: 
* asyncore Example basic echo server:: 

asynchat — Asynchronous socket command/response handler

* asynchat - Auxiliary Classes:: 
* asynchat Example:: 

signal — Set handlers for asynchronous events

* General rules:: 
* Module contents: Module contents<2>. 
* Example: Example<8>. 

General rules

* Execution of Python signal handlers:: 
* Signals and threads:: 

Internet Data Handling

* email: email --- An email and MIME handling package. An email and MIME handling package
* json: json --- JSON encoder and decoder. JSON encoder and decoder
* mailcap: mailcap --- Mailcap file handling. Mailcap file handling
* mailbox: mailbox --- Manipulate mailboxes in various formats. Manipulate mailboxes in various formats
* mimetypes: mimetypes --- Map filenames to MIME types. Map filenames to MIME types
* base64: base64 --- Base16 Base32 Base64 Base85 Data Encodings. Base16, Base32, Base64, Base85 Data Encodings
* binhex: binhex --- Encode and decode binhex4 files. Encode and decode binhex4 files
* binascii: binascii --- Convert between binary and ASCII. Convert between binary and ASCII
* quopri: quopri --- Encode and decode MIME quoted-printable data. Encode and decode MIME quoted-printable data
* uu: uu --- Encode and decode uuencode files. Encode and decode uuencode files

email — An email and MIME handling package

* email.message; Representing an email message: email message Representing an email message. 
* email.parser; Parsing email messages: email parser Parsing email messages. 
* email.generator; Generating MIME documents: email generator Generating MIME documents. 
* email.policy; Policy Objects: email policy Policy Objects. 
* email.headerregistry; Custom Header Objects: email headerregistry Custom Header Objects. 
* email.contentmanager; Managing MIME Content: email contentmanager Managing MIME Content. 
* email.mime; Creating email and MIME objects from scratch: email mime Creating email and MIME objects from scratch. 
* email.header; Internationalized headers: email header Internationalized headers. 
* email.charset; Representing character sets: email charset Representing character sets. 
* email.encoders; Encoders: email encoders Encoders. 
* email.errors; Exception and Defect classes: email errors Exception and Defect classes. 
* email.utils; Miscellaneous utilities: email utils Miscellaneous utilities. 
* email.iterators; Iterators: email iterators Iterators. 
* email; Examples: email Examples. 
* Package History:: 
* Differences from mimelib:: 

email.parser: Parsing email messages

* FeedParser API:: 
* Parser class API:: 
* Additional notes:: 

email.contentmanager: Managing MIME Content

* Content Manager Instances:: 

email: Examples

* Examples using the Provisional API:: 

json — JSON encoder and decoder

* Basic Usage:: 
* Encoders and Decoders:: 
* Standard Compliance and Interoperability:: 

Standard Compliance and Interoperability

* Character Encodings:: 
* Infinite and NaN Number Values:: 
* Repeated Names Within an Object:: 
* Top-level Non-Object, Non-Array Values: Top-level Non-Object Non-Array Values. 
* Implementation Limitations:: 

mailbox — Manipulate mailboxes in various formats

* Mailbox objects:: 
* Message objects:: 
* Exceptions: Exceptions<9>. 
* Examples: Examples<12>. 

Mailbox objects

* Maildir:: 
* mbox:: 
* MH:: 
* Babyl:: 
* MMDF:: 

Message objects

* MaildirMessage:: 
* mboxMessage:: 
* MHMessage:: 
* BabylMessage:: 
* MMDFMessage:: 

mimetypes — Map filenames to MIME types

* MimeTypes Objects:: 

binhex — Encode and decode binhex4 files

* Notes: Notes<2>. 

Structured Markup Processing Tools

* html: html --- HyperText Markup Language support. HyperText Markup Language support
* html.parser: html parser --- Simple HTML and XHTML parser. Simple HTML and XHTML parser
* html.entities: html entities --- Definitions of HTML general entities. Definitions of HTML general entities
* XML Processing Modules:: 
* xml.etree.ElementTree: xml etree ElementTree --- The ElementTree XML API. The ElementTree XML API
* xml.dom: xml dom --- The Document Object Model API. The Document Object Model API
* xml.dom.minidom: xml dom minidom --- Minimal DOM implementation. Minimal DOM implementation
* xml.dom.pulldom: xml dom pulldom --- Support for building partial DOM trees. Support for building partial DOM trees
* xml.sax: xml sax --- Support for SAX2 parsers. Support for SAX2 parsers
* xml.sax.handler: xml sax handler --- Base classes for SAX handlers. Base classes for SAX handlers
* xml.sax.saxutils: xml sax saxutils --- SAX Utilities. SAX Utilities
* xml.sax.xmlreader: xml sax xmlreader --- Interface for XML parsers. Interface for XML parsers
* xml.parsers.expat: xml parsers expat --- Fast XML parsing using Expat. Fast XML parsing using Expat

html.parser — Simple HTML and XHTML parser

* Example HTML Parser Application:: 
* HTMLParser Methods:: 
* Examples: Examples<13>. 

XML Processing Modules

* XML vulnerabilities:: 
* The defusedxml and defusedexpat Packages:: 

xml.etree.ElementTree — The ElementTree XML API

* Tutorial:: 
* XPath support:: 
* Reference: Reference<2>. 

Tutorial

* XML tree and elements:: 
* Parsing XML:: 
* Pull API for non-blocking parsing:: 
* Finding interesting elements:: 
* Modifying an XML File:: 
* Building XML documents:: 
* Additional resources:: 

XPath support

* Example: Example<9>. 
* Supported XPath syntax:: 

Reference

* Functions: Functions<5>. 
* Element Objects:: 
* ElementTree Objects:: 
* QName Objects:: 
* TreeBuilder Objects:: 
* XMLParser Objects:: 
* XMLPullParser Objects:: 
* Exceptions: Exceptions<10>. 

xml.dom — The Document Object Model API

* Module Contents: Module Contents<4>. 
* Objects in the DOM:: 
* Conformance:: 

Objects in the DOM

* DOMImplementation Objects:: 
* Node Objects:: 
* NodeList Objects:: 
* DocumentType Objects:: 
* Document Objects:: 
* Element Objects: Element Objects<2>. 
* Attr Objects:: 
* NamedNodeMap Objects:: 
* Comment Objects:: 
* Text and CDATASection Objects:: 
* ProcessingInstruction Objects:: 
* Exceptions: Exceptions<11>. 

Conformance

* Type Mapping:: 
* Accessor Methods:: 

xml.dom.minidom — Minimal DOM implementation

* DOM Objects:: 
* DOM Example:: 
* minidom and the DOM standard:: 

xml.dom.pulldom — Support for building partial DOM trees

* DOMEventStream Objects:: 

xml.sax — Support for SAX2 parsers

* SAXException Objects:: 

xml.sax.handler — Base classes for SAX handlers

* ContentHandler Objects:: 
* DTDHandler Objects:: 
* EntityResolver Objects:: 
* ErrorHandler Objects:: 

xml.sax.xmlreader — Interface for XML parsers

* XMLReader Objects:: 
* IncrementalParser Objects:: 
* Locator Objects:: 
* InputSource Objects:: 
* The Attributes Interface:: 
* The AttributesNS Interface:: 

xml.parsers.expat — Fast XML parsing using Expat

* XMLParser Objects: XMLParser Objects<2>. 
* ExpatError Exceptions:: 
* Example: Example<10>. 
* Content Model Descriptions:: 
* Expat error constants:: 

Internet Protocols and Support

* webbrowser: webbrowser --- Convenient Web-browser controller. Convenient Web-browser controller
* cgi: cgi --- Common Gateway Interface support. Common Gateway Interface support
* cgitb: cgitb --- Traceback manager for CGI scripts. Traceback manager for CGI scripts
* wsgiref: wsgiref --- WSGI Utilities and Reference Implementation. WSGI Utilities and Reference Implementation
* urllib: urllib --- URL handling modules. URL handling modules
* urllib.request: urllib request --- Extensible library for opening URLs. Extensible library for opening URLs
* urllib.response: urllib response --- Response classes used by urllib. Response classes used by urllib
* urllib.parse: urllib parse --- Parse URLs into components. Parse URLs into components
* urllib.error: urllib error --- Exception classes raised by urllib request. Exception classes raised by urllib.request
* urllib.robotparser: urllib robotparser --- Parser for robots txt. Parser for robots.txt
* http: http --- HTTP modules. HTTP modules
* http.client: http client --- HTTP protocol client. HTTP protocol client
* ftplib: ftplib --- FTP protocol client. FTP protocol client
* poplib: poplib --- POP3 protocol client. POP3 protocol client
* imaplib: imaplib --- IMAP4 protocol client. IMAP4 protocol client
* nntplib: nntplib --- NNTP protocol client. NNTP protocol client
* smtplib: smtplib --- SMTP protocol client. SMTP protocol client
* smtpd: smtpd --- SMTP Server. SMTP Server
* telnetlib: telnetlib --- Telnet client. Telnet client
* uuid: uuid --- UUID objects according to RFC 4122. UUID objects according to RFC 4122
* socketserver: socketserver --- A framework for network servers. A framework for network servers
* http.server: http server --- HTTP servers. HTTP servers
* http.cookies: http cookies --- HTTP state management. HTTP state management
* http.cookiejar: http cookiejar --- Cookie handling for HTTP clients. Cookie handling for HTTP clients
* xmlrpc: xmlrpc --- XMLRPC server and client modules. XMLRPC server and client modules
* xmlrpc.client: xmlrpc client --- XML-RPC client access. XML-RPC client access
* xmlrpc.server: xmlrpc server --- Basic XML-RPC servers. Basic XML-RPC servers
* ipaddress: ipaddress --- IPv4/IPv6 manipulation library. IPv4/IPv6 manipulation library

webbrowser — Convenient Web-browser controller

* Browser Controller Objects:: 

cgi — Common Gateway Interface support

* Introduction: Introduction<9>. 
* Using the cgi module:: 
* Higher Level Interface:: 
* Functions: Functions<6>. 
* Caring about security:: 
* Installing your CGI script on a Unix system:: 
* Testing your CGI script:: 
* Debugging CGI scripts:: 
* Common problems and solutions:: 

wsgiref — WSGI Utilities and Reference Implementation

* wsgiref.util: wsgiref util -- WSGI environment utilities. WSGI environment utilities
* wsgiref.headers: wsgiref headers -- WSGI response header tools. WSGI response header tools
* wsgiref.simple_server: wsgiref simple_server -- a simple WSGI HTTP server. a simple WSGI HTTP server
* wsgiref.validate: wsgiref validate --- WSGI conformance checker. WSGI conformance checker
* wsgiref.handlers: wsgiref handlers -- server/gateway base classes. server/gateway base classes
* Examples: Examples<14>. 

urllib.request — Extensible library for opening URLs

* Request Objects:: 
* OpenerDirector Objects:: 
* BaseHandler Objects:: 
* HTTPRedirectHandler Objects:: 
* HTTPCookieProcessor Objects:: 
* ProxyHandler Objects:: 
* HTTPPasswordMgr Objects:: 
* AbstractBasicAuthHandler Objects:: 
* HTTPBasicAuthHandler Objects:: 
* ProxyBasicAuthHandler Objects:: 
* AbstractDigestAuthHandler Objects:: 
* HTTPDigestAuthHandler Objects:: 
* ProxyDigestAuthHandler Objects:: 
* HTTPHandler Objects:: 
* HTTPSHandler Objects:: 
* FileHandler Objects:: 
* DataHandler Objects:: 
* FTPHandler Objects:: 
* CacheFTPHandler Objects:: 
* UnknownHandler Objects:: 
* HTTPErrorProcessor Objects:: 
* Examples: Examples<15>. 
* Legacy interface:: 
* urllib.request Restrictions: urllib request Restrictions. 

urllib.parse — Parse URLs into components

* URL Parsing:: 
* Parsing ASCII Encoded Bytes:: 
* Structured Parse Results:: 
* URL Quoting:: 

http.client — HTTP protocol client

* HTTPConnection Objects:: 
* HTTPResponse Objects:: 
* Examples: Examples<16>. 
* HTTPMessage Objects:: 

ftplib — FTP protocol client

* FTP Objects:: 
* FTP_TLS Objects:: 

poplib — POP3 protocol client

* POP3 Objects:: 
* POP3 Example:: 

imaplib — IMAP4 protocol client

* IMAP4 Objects:: 
* IMAP4 Example:: 

nntplib — NNTP protocol client

* NNTP Objects:: 
* Utility functions: Utility functions<2>. 

NNTP Objects

* Attributes:: 
* Methods: Methods<3>. 

smtplib — SMTP protocol client

* SMTP Objects:: 
* SMTP Example:: 

smtpd — SMTP Server

* SMTPServer Objects:: 
* DebuggingServer Objects:: 
* PureProxy Objects:: 
* MailmanProxy Objects:: 
* SMTPChannel Objects:: 

telnetlib — Telnet client

* Telnet Objects:: 
* Telnet Example:: 

uuid — UUID objects according to RFC 4122

* Example: Example<11>. 

socketserver — A framework for network servers

* Server Creation Notes:: 
* Server Objects:: 
* RequestHandler Objects:: 
* Examples: Examples<17>. 

Examples

* socketserver.TCPServer Example: socketserver TCPServer Example. 
* socketserver.UDPServer Example: socketserver UDPServer Example. 
* Asynchronous Mixins:: 

http.cookies — HTTP state management

* Cookie Objects:: 
* Morsel Objects:: 
* Example: Example<12>. 

http.cookiejar — Cookie handling for HTTP clients

* CookieJar and FileCookieJar Objects:: 
* FileCookieJar subclasses and co-operation with web browsers:: 
* CookiePolicy Objects:: 
* DefaultCookiePolicy Objects:: 
* Cookie Objects: Cookie Objects<2>. 
* Examples: Examples<18>. 

xmlrpc.client — XML-RPC client access

* ServerProxy Objects:: 
* DateTime Objects:: 
* Binary Objects:: 
* Fault Objects:: 
* ProtocolError Objects:: 
* MultiCall Objects:: 
* Convenience Functions:: 
* Example of Client Usage:: 
* Example of Client and Server Usage:: 

xmlrpc.server — Basic XML-RPC servers

* SimpleXMLRPCServer Objects:: 
* CGIXMLRPCRequestHandler:: 
* Documenting XMLRPC server:: 
* DocXMLRPCServer Objects:: 
* DocCGIXMLRPCRequestHandler:: 

SimpleXMLRPCServer Objects

* SimpleXMLRPCServer Example:: 

ipaddress — IPv4/IPv6 manipulation library

* Convenience factory functions:: 
* IP Addresses:: 
* IP Network definitions:: 
* Interface objects:: 
* Other Module Level Functions:: 
* Custom Exceptions:: 

IP Addresses

* Address objects:: 
* Conversion to Strings and Integers:: 
* Operators: Operators<3>. 

Operators

* Comparison operators:: 
* Arithmetic operators:: 

IP Network definitions

* Prefix, net mask and host mask: Prefix net mask and host mask. 
* Network objects:: 
* Operators: Operators<4>. 

Operators

* Logical operators:: 
* Iteration: Iteration<2>. 
* Networks as containers of addresses:: 

Multimedia Services

* audioop: audioop --- Manipulate raw audio data. Manipulate raw audio data
* aifc: aifc --- Read and write AIFF and AIFC files. Read and write AIFF and AIFC files
* sunau: sunau --- Read and write Sun AU files. Read and write Sun AU files
* wave: wave --- Read and write WAV files. Read and write WAV files
* chunk: chunk --- Read IFF chunked data. Read IFF chunked data
* colorsys: colorsys --- Conversions between color systems. Conversions between color systems
* imghdr: imghdr --- Determine the type of an image. Determine the type of an image
* sndhdr: sndhdr --- Determine type of sound file. Determine type of sound file
* ossaudiodev: ossaudiodev --- Access to OSS-compatible audio devices. Access to OSS-compatible audio devices

sunau — Read and write Sun AU files

* AU_read Objects:: 
* AU_write Objects:: 

wave — Read and write WAV files

* Wave_read Objects:: 
* Wave_write Objects:: 

ossaudiodev — Access to OSS-compatible audio devices

* Audio Device Objects:: 
* Mixer Device Objects:: 

Internationalization

* gettext: gettext --- Multilingual internationalization services. Multilingual internationalization services
* locale: locale --- Internationalization services. Internationalization services

gettext — Multilingual internationalization services

* GNU gettext API:: 
* Class-based API:: 
* Internationalizing your programs and modules:: 
* Acknowledgements: Acknowledgements<9>. 

Class-based API

* The NullTranslations class:: 
* The GNUTranslations class:: 
* Solaris message catalog support:: 
* The Catalog constructor:: 

Internationalizing your programs and modules

* Localizing your module:: 
* Localizing your application:: 
* Changing languages on the fly:: 
* Deferred translations:: 

locale — Internationalization services

* Background, details, hints, tips and caveats: Background details hints tips and caveats. 
* For extension writers and programs that embed Python:: 
* Access to message catalogs:: 

Program Frameworks

* turtle: turtle --- Turtle graphics. Turtle graphics
* cmd: cmd --- Support for line-oriented command interpreters. Support for line-oriented command interpreters
* shlex: shlex --- Simple lexical analysis. Simple lexical analysis

turtle — Turtle graphics

* Introduction: Introduction<10>. 
* Overview of available Turtle and Screen methods:: 
* Methods of RawTurtle/Turtle and corresponding functions:: 
* Methods of TurtleScreen/Screen and corresponding functions:: 
* Public classes:: 
* Help and configuration:: 
* turtledemo: turtledemo --- Demo scripts. Demo scripts
* Changes since Python 2.6: Changes since Python 2 6. 
* Changes since Python 3.0: Changes since Python 3 0. 

Overview of available Turtle and Screen methods

* Turtle methods:: 
* Methods of TurtleScreen/Screen:: 

Methods of RawTurtle/Turtle and corresponding functions

* Turtle motion:: 
* Tell Turtle's state:: 
* Settings for measurement:: 
* Pen control:: 
* Turtle state:: 
* Using events:: 
* Special Turtle methods:: 
* Compound shapes:: 

Pen control

* Drawing state:: 
* Color control:: 
* Filling:: 
* More drawing control:: 

Turtle state

* Visibility:: 
* Appearance:: 

Methods of TurtleScreen/Screen and corresponding functions

* Window control:: 
* Animation control:: 
* Using screen events:: 
* Input methods:: 
* Settings and special methods:: 
* Methods specific to Screen, not inherited from TurtleScreen: Methods specific to Screen not inherited from TurtleScreen. 

Help and configuration

* How to use help:: 
* Translation of docstrings into different languages:: 
* How to configure Screen and Turtles:: 

cmd — Support for line-oriented command interpreters

* Cmd Objects:: 
* Cmd Example:: 

shlex — Simple lexical analysis

* shlex Objects:: 
* Parsing Rules:: 

Graphical User Interfaces with Tk

* tkinter: tkinter --- Python interface to Tcl/Tk. Python interface to Tcl/Tk
* tkinter.ttk: tkinter ttk --- Tk themed widgets. Tk themed widgets
* tkinter.tix: tkinter tix --- Extension widgets for Tk. Extension widgets for Tk
* tkinter.scrolledtext: tkinter scrolledtext --- Scrolled Text Widget. Scrolled Text Widget
* IDLE: IDLE<19>. 
* Other Graphical User Interface Packages:: 

tkinter — Python interface to Tcl/Tk

* Tkinter Modules:: 
* Tkinter Life Preserver:: 
* A (Very) Quick Look at Tcl/Tk: A Very Quick Look at Tcl/Tk. 
* Mapping Basic Tk into Tkinter:: 
* How Tk and Tkinter are Related:: 
* Handy Reference:: 

Tkinter Life Preserver

* How To Use This Section:: 
* A Simple Hello World Program:: 

Handy Reference

* Setting Options:: 
* The Packer:: 
* Packer Options:: 
* Coupling Widget Variables:: 
* The Window Manager:: 
* Tk Option Data Types:: 
* Bindings and Events:: 
* The index Parameter:: 
* Images:: 

tkinter.ttk — Tk themed widgets

* Using Ttk:: 
* Ttk Widgets:: 
* Widget:: 
* Combobox:: 
* Notebook:: 
* Progressbar:: 
* Separator:: 
* Sizegrip:: 
* Treeview:: 
* Ttk Styling:: 

Widget

* Standard Options:: 
* Scrollable Widget Options:: 
* Label Options:: 
* Compatibility Options:: 
* Widget States:: 
* ttk.Widget: ttk Widget. 

Combobox

* Options:: 
* Virtual events:: 
* ttk.Combobox: ttk Combobox. 

Notebook

* Options: Options<2>. 
* Tab Options:: 
* Tab Identifiers:: 
* Virtual Events:: 
* ttk.Notebook: ttk Notebook. 

Progressbar

* Options: Options<3>. 
* ttk.Progressbar: ttk Progressbar. 

Separator

* Options: Options<4>. 

Sizegrip

* Platform-specific notes:: 
* Bugs:: 

Treeview

* Options: Options<5>. 
* Item Options:: 
* Tag Options:: 
* Column Identifiers:: 
* Virtual Events: Virtual Events<2>. 
* ttk.Treeview: ttk Treeview. 

Ttk Styling

* Layouts:: 

tkinter.tix — Extension widgets for Tk

* Using Tix:: 
* Tix Widgets:: 
* Tix Commands:: 

Tix Widgets

* Basic Widgets:: 
* File Selectors:: 
* Hierarchical ListBox:: 
* Tabular ListBox:: 
* Manager Widgets:: 
* Image Types:: 
* Miscellaneous Widgets:: 
* Form Geometry Manager:: 

IDLE

* Menus:: 
* Editing and navigation:: 
* Syntax colors:: 
* Startup:: 
* Help and preferences:: 

Menus

* File menu (Shell and Editor): File menu Shell and Editor. 
* Edit menu (Shell and Editor): Edit menu Shell and Editor. 
* Format menu (Editor window only): Format menu Editor window only. 
* Run menu (Editor window only): Run menu Editor window only. 
* Shell menu (Shell window only): Shell menu Shell window only. 
* Debug menu (Shell window only): Debug menu Shell window only. 
* Options menu (Shell and Editor): Options menu Shell and Editor. 
* Window menu (Shell and Editor): Window menu Shell and Editor. 
* Help menu (Shell and Editor): Help menu Shell and Editor. 
* Context Menus:: 

Editing and navigation

* Automatic indentation:: 
* Completions:: 
* Python Shell window:: 

Startup

* Command line usage:: 
* Running without a subprocess:: 

Help and preferences

* Additional help sources:: 
* Setting preferences:: 
* Extensions:: 

Development Tools

* pydoc: pydoc --- Documentation generator and online help system. Documentation generator and online help system
* doctest: doctest --- Test interactive Python examples. Test interactive Python examples
* unittest: unittest --- Unit testing framework. Unit testing framework
* unittest.mock: unittest mock --- mock object library. mock object library
* unittest.mock: unittest mock --- getting started. getting started
* 2to3 - Automated Python 2 to 3 code translation:: 
* test: test --- Regression tests package for Python. Regression tests package for Python
* test.support: test support --- Utilities for the Python test suite. Utilities for the Python test suite

doctest — Test interactive Python examples

* Simple Usage; Checking Examples in Docstrings: Simple Usage Checking Examples in Docstrings. 
* Simple Usage; Checking Examples in a Text File: Simple Usage Checking Examples in a Text File. 
* How It Works:: 
* Basic API:: 
* Unittest API:: 
* Advanced API:: 
* Debugging:: 
* Soapbox:: 

How It Works

* Which Docstrings Are Examined?:: 
* How are Docstring Examples Recognized?:: 
* What's the Execution Context?:: 
* What About Exceptions?:: 
* Option Flags:: 
* Directives:: 
* Warnings: Warnings<2>. 

Advanced API

* DocTest Objects:: 
* Example Objects:: 
* DocTestFinder objects:: 
* DocTestParser objects:: 
* DocTestRunner objects:: 
* OutputChecker objects:: 

unittest — Unit testing framework

* Basic example:: 
* Command-Line Interface:: 
* Test Discovery:: 
* Organizing test code:: 
* Re-using old test code:: 
* Skipping tests and expected failures:: 
* Distinguishing test iterations using subtests:: 
* Classes and functions:: 
* Class and Module Fixtures:: 
* Signal Handling:: 

Command-Line Interface

* Command-line options:: 

Classes and functions

* Test cases:: 
* Grouping tests:: 
* Loading and running tests:: 

Test cases

* Deprecated aliases:: 

Loading and running tests

* load_tests Protocol:: 

Class and Module Fixtures

* setUpClass and tearDownClass:: 
* setUpModule and tearDownModule:: 

unittest.mock — mock object library

* Quick Guide:: 
* The Mock Class:: 
* The patchers:: 
* MagicMock and magic method support:: 
* Helpers:: 

The Mock Class

* Calling:: 
* Deleting Attributes:: 
* Mock names and the name attribute:: 
* Attaching Mocks as Attributes:: 

The patchers

* patch:: 
* patch.object: patch object. 
* patch.dict: patch dict. 
* patch.multiple: patch multiple. 
* patch methods; start and stop: patch methods start and stop. 
* TEST_PREFIX:: 
* Nesting Patch Decorators:: 
* Where to patch:: 
* Patching Descriptors and Proxy Objects:: 

MagicMock and magic method support

* Mocking Magic Methods:: 
* Magic Mock:: 

Helpers

* sentinel:: 
* DEFAULT:: 
* call:: 
* create_autospec:: 
* ANY:: 
* FILTER_DIR:: 
* mock_open:: 
* Autospeccing:: 

unittest.mock — getting started

* Using Mock:: 
* Patch Decorators:: 
* Further Examples:: 

Using Mock

* Mock Patching Methods:: 
* Mock for Method Calls on an Object:: 
* Mocking Classes:: 
* Naming your mocks:: 
* Tracking all Calls:: 
* Setting Return Values and Attributes:: 
* Raising exceptions with mocks:: 
* Side effect functions and iterables:: 
* Creating a Mock from an Existing Object:: 

Further Examples

* Mocking chained calls:: 
* Partial mocking:: 
* Mocking a Generator Method:: 
* Applying the same patch to every test method:: 
* Mocking Unbound Methods:: 
* Checking multiple calls with mock:: 
* Coping with mutable arguments:: 
* Nesting Patches:: 
* Mocking a dictionary with MagicMock:: 
* Mock subclasses and their attributes:: 
* Mocking imports with patch.dict: Mocking imports with patch dict. 
* Tracking order of calls and less verbose call assertions:: 
* More complex argument matching:: 

2to3 - Automated Python 2 to 3 code translation

* Using 2to3:: 
* Fixers:: 
* lib2to3 - 2to3's library:: 

test — Regression tests package for Python

* Writing Unit Tests for the test package:: 
* Running tests using the command-line interface:: 

Debugging and Profiling

* bdb: bdb --- Debugger framework. Debugger framework
* faulthandler: faulthandler --- Dump the Python traceback. Dump the Python traceback
* pdb: pdb --- The Python Debugger. The Python Debugger
* The Python Profilers:: 
* timeit: timeit --- Measure execution time of small code snippets. Measure execution time of small code snippets
* trace: trace --- Trace or track Python statement execution. Trace or track Python statement execution
* tracemalloc: tracemalloc --- Trace memory allocations. Trace memory allocations

faulthandler — Dump the Python traceback

* Dumping the traceback:: 
* Fault handler state:: 
* Dumping the tracebacks after a timeout:: 
* Dumping the traceback on a user signal:: 
* Issue with file descriptors:: 
* Example: Example<13>. 

pdb — The Python Debugger

* Debugger Commands:: 

The Python Profilers

* Introduction to the profilers:: 
* Instant User's Manual:: 
* profile and cProfile Module Reference:: 
* The Stats Class:: 
* What Is Deterministic Profiling?:: 
* Limitations:: 
* Calibration:: 
* Using a custom timer:: 

timeit — Measure execution time of small code snippets

* Basic Examples: Basic Examples<2>. 
* Python Interface:: 
* Command-Line Interface: Command-Line Interface<2>. 
* Examples: Examples<19>. 

trace — Trace or track Python statement execution

* Command-Line Usage:: 
* Programmatic Interface:: 

Command-Line Usage

* Main options:: 
* Modifiers:: 
* Filters:: 

tracemalloc — Trace memory allocations

* Examples: Examples<20>. 
* API:: 

Examples

* Display the top 10:: 
* Compute differences:: 
* Get the traceback of a memory block:: 
* Pretty top:: 

API

* Functions: Functions<7>. 
* Filter:: 
* Frame:: 
* Snapshot:: 
* Statistic:: 
* StatisticDiff:: 
* Trace:: 
* Traceback:: 

Software Packaging and Distribution

* distutils: distutils --- Building and installing Python modules. Building and installing Python modules
* ensurepip: ensurepip --- Bootstrapping the pip installer. Bootstrapping the pip installer
* venv: venv --- Creation of virtual environments. Creation of virtual environments

ensurepip — Bootstrapping the pip installer

* Command line interface:: 
* Module API:: 

venv — Creation of virtual environments

* Creating virtual environments:: 
* API: API<2>. 
* An example of extending EnvBuilder:: 

Python Runtime Services

* sys: sys --- System-specific parameters and functions. System-specific parameters and functions
* sysconfig: sysconfig --- Provide access to Python's configuration information. Provide access to Python’s configuration information
* builtins: builtins --- Built-in objects. Built-in objects
* __main__: __main__ --- Top-level script environment. Top-level script environment
* warnings: warnings --- Warning control. Warning control
* contextlib: contextlib --- Utilities for with-statement contexts. Utilities for with-statement contexts
* abc: abc --- Abstract Base Classes. Abstract Base Classes
* atexit: atexit --- Exit handlers. Exit handlers
* traceback: traceback --- Print or retrieve a stack traceback. Print or retrieve a stack traceback
* __future__: __future__ --- Future statement definitions. Future statement definitions
* gc: gc --- Garbage Collector interface. Garbage Collector interface
* inspect: inspect --- Inspect live objects. Inspect live objects
* site: site --- Site-specific configuration hook. Site-specific configuration hook
* fpectl: fpectl --- Floating point exception control. Floating point exception control

sysconfig — Provide access to Python’s configuration information

* Configuration variables:: 
* Installation paths:: 
* Other functions: Other functions<2>. 
* Using sysconfig as a script:: 

warnings — Warning control

* Warning Categories:: 
* The Warnings Filter:: 
* Temporarily Suppressing Warnings:: 
* Testing Warnings:: 
* Updating Code For New Versions of Python:: 
* Available Functions:: 
* Available Context Managers:: 

The Warnings Filter

* Default Warning Filters:: 

contextlib — Utilities for with-statement contexts

* Utilities:: 
* Examples and Recipes: Examples and Recipes<2>. 
* Single use, reusable and reentrant context managers: Single use reusable and reentrant context managers. 

Examples and Recipes

* Supporting a variable number of context managers:: 
* Simplifying support for single optional context managers:: 
* Catching exceptions from __enter__ methods:: 
* Cleaning up in an __enter__ implementation:: 
* Replacing any use of try-finally and flag variables:: 
* Using a context manager as a function decorator:: 

Single use, reusable and reentrant context managers

* Reentrant context managers:: 
* Reusable context managers:: 

atexit — Exit handlers

* atexit Example:: 

traceback — Print or retrieve a stack traceback

* Traceback Examples:: 

inspect — Inspect live objects

* Types and members:: 
* Retrieving source code:: 
* Introspecting callables with the Signature object:: 
* Classes and functions: Classes and functions<2>. 
* The interpreter stack:: 
* Fetching attributes statically:: 
* Current State of a Generator:: 
* Command Line Interface: Command Line Interface<2>. 

site — Site-specific configuration hook

* Readline configuration:: 
* Module contents: Module contents<3>. 

fpectl — Floating point exception control

* Example: Example<14>. 
* Limitations and other considerations:: 

Custom Python Interpreters

* code: code --- Interpreter base classes. Interpreter base classes
* codeop: codeop --- Compile Python code. Compile Python code

code — Interpreter base classes

* Interactive Interpreter Objects:: 
* Interactive Console Objects:: 

Importing Modules

* zipimport: zipimport --- Import modules from Zip archives. Import modules from Zip archives
* pkgutil: pkgutil --- Package extension utility. Package extension utility
* modulefinder: modulefinder --- Find modules used by a script. Find modules used by a script
* runpy: runpy --- Locating and executing Python modules. Locating and executing Python modules
* importlib: importlib -- The implementation of import. The implementation of import

zipimport — Import modules from Zip archives

* zipimporter Objects:: 
* Examples: Examples<21>. 

modulefinder — Find modules used by a script

* Example usage of ModuleFinder:: 

importlib – The implementation of import

* Introduction: Introduction<11>. 
* Functions: Functions<8>. 
* importlib.abc: importlib abc -- Abstract base classes related to import. Abstract base classes related to import
* importlib.machinery: importlib machinery -- Importers and path hooks. Importers and path hooks
* importlib.util: importlib util -- Utility code for importers. Utility code for importers

Python Language Services

* parser: parser --- Access Python parse trees. Access Python parse trees
* ast: ast --- Abstract Syntax Trees. Abstract Syntax Trees
* symtable: symtable --- Access to the compiler's symbol tables. Access to the compiler’s symbol tables
* symbol: symbol --- Constants used with Python parse trees. Constants used with Python parse trees
* token: token --- Constants used with Python parse trees. Constants used with Python parse trees
* keyword: keyword --- Testing for Python keywords. Testing for Python keywords
* tokenize: tokenize --- Tokenizer for Python source. Tokenizer for Python source
* tabnanny: tabnanny --- Detection of ambiguous indentation. Detection of ambiguous indentation
* pyclbr: pyclbr --- Python class browser support. Python class browser support
* py_compile: py_compile --- Compile Python source files. Compile Python source files
* compileall: compileall --- Byte-compile Python libraries. Byte-compile Python libraries
* dis: dis --- Disassembler for Python bytecode. Disassembler for Python bytecode
* pickletools: pickletools --- Tools for pickle developers. Tools for pickle developers

parser — Access Python parse trees

* Creating ST Objects:: 
* Converting ST Objects:: 
* Queries on ST Objects:: 
* Exceptions and Error Handling:: 
* ST Objects:: 
* Example; Emulation of compile(): Example Emulation of compile. 

ast — Abstract Syntax Trees

* Node classes:: 
* Abstract Grammar:: 
* ast Helpers:: 

symtable — Access to the compiler’s symbol tables

* Generating Symbol Tables:: 
* Examining Symbol Tables:: 

tokenize — Tokenizer for Python source

* Tokenizing Input:: 
* Command-Line Usage: Command-Line Usage<2>. 
* Examples: Examples<22>. 

pyclbr — Python class browser support

* Class Objects: Class Objects<2>. 
* Function Objects:: 

compileall — Byte-compile Python libraries

* Command-line use:: 
* Public functions:: 

dis — Disassembler for Python bytecode

* Bytecode analysis:: 
* Analysis functions:: 
* Python Bytecode Instructions:: 
* Opcode collections:: 

pickletools — Tools for pickle developers

* Command line usage: Command line usage<2>. 
* Programmatic Interface: Programmatic Interface<2>. 

Command line usage

* Command line options: Command line options<2>. 

Miscellaneous Services

* formatter: formatter --- Generic output formatting. Generic output formatting

formatter — Generic output formatting

* The Formatter Interface:: 
* Formatter Implementations:: 
* The Writer Interface:: 
* Writer Implementations:: 

MS Windows Specific Services

* msilib: msilib --- Read and write Microsoft Installer files. Read and write Microsoft Installer files
* msvcrt: msvcrt -- Useful routines from the MS VC++ runtime. Useful routines from the MS VC++ runtime
* winreg: winreg -- Windows registry access. Windows registry access
* winsound: winsound --- Sound-playing interface for Windows. Sound-playing interface for Windows

msilib — Read and write Microsoft Installer files

* Database Objects:: 
* View Objects:: 
* Summary Information Objects:: 
* Record Objects:: 
* Errors:: 
* CAB Objects:: 
* Directory Objects:: 
* Features: Features<3>. 
* GUI classes:: 
* Precomputed tables:: 

msvcrt – Useful routines from the MS VC++ runtime

* File Operations:: 
* Console I/O:: 
* Other Functions:: 

winreg – Windows registry access

* Functions: Functions<9>. 
* Constants: Constants<9>. 
* Registry Handle Objects:: 

Constants

* HKEY_* Constants:: 
* Access Rights:: 
* Value Types:: 

Access Rights

* 64-bit Specific:: 

Unix Specific Services

* posix: posix --- The most common POSIX system calls. The most common POSIX system calls
* pwd: pwd --- The password database. The password database
* spwd: spwd --- The shadow password database. The shadow password database
* grp: grp --- The group database. The group database
* crypt: crypt --- Function to check Unix passwords. Function to check Unix passwords
* termios: termios --- POSIX style tty control. POSIX style tty control
* tty: tty --- Terminal control functions. Terminal control functions
* pty: pty --- Pseudo-terminal utilities. Pseudo-terminal utilities
* fcntl: fcntl --- The fcntl and ioctl system calls. The fcntl and ioctl system calls
* pipes: pipes --- Interface to shell pipelines. Interface to shell pipelines
* resource: resource --- Resource usage information. Resource usage information
* nis: nis --- Interface to Sun's NIS Yellow Pages. Interface to Sun’s NIS (Yellow Pages)
* syslog: syslog --- Unix syslog library routines. Unix syslog library routines

posix — The most common POSIX system calls

* Large File Support:: 
* Notable Module Contents:: 

crypt — Function to check Unix passwords

* Hashing Methods:: 
* Module Attributes:: 
* Module Functions: Module Functions<2>. 
* Examples: Examples<23>. 

termios — POSIX style tty control

* Example: Example<15>. 

pty — Pseudo-terminal utilities

* Example: Example<16>. 

pipes — Interface to shell pipelines

* Template Objects:: 

resource — Resource usage information

* Resource Limits:: 
* Resource Usage:: 

syslog — Unix syslog library routines

* Examples: Examples<24>. 

Examples

* Simple example:: 

Superseded Modules

* optparse: optparse --- Parser for command line options. Parser for command line options
* imp: imp --- Access the import internals. Access the import internals

optparse — Parser for command line options

* Background:: 
* Tutorial: Tutorial<2>. 
* Reference Guide:: 
* Option Callbacks:: 
* Extending optparse:: 

Background

* Terminology:: 
* What are options for?:: 
* What are positional arguments for?:: 

Tutorial

* Understanding option actions:: 
* The store action:: 
* Handling boolean (flag) options: Handling boolean flag options. 
* Other actions:: 
* Default values:: 
* Generating help:: 
* Printing a version string:: 
* How optparse handles errors:: 
* Putting it all together:: 

Generating help

* Grouping Options:: 

Reference Guide

* Creating the parser:: 
* Populating the parser:: 
* Defining options:: 
* Option attributes:: 
* Standard option actions:: 
* Standard option types:: 
* Parsing arguments: Parsing arguments<2>. 
* Querying and manipulating your option parser:: 
* Conflicts between options:: 
* Cleanup: Cleanup<2>. 
* Other methods:: 

Option Callbacks

* Defining a callback option:: 
* How callbacks are called:: 
* Raising errors in a callback:: 
* Callback example 1; trivial callback: Callback example 1 trivial callback. 
* Callback example 2; check option order: Callback example 2 check option order. 
* Callback example 3; check option order (generalized): Callback example 3 check option order generalized. 
* Callback example 4; check arbitrary condition: Callback example 4 check arbitrary condition. 
* Callback example 5; fixed arguments: Callback example 5 fixed arguments. 
* Callback example 6; variable arguments: Callback example 6 variable arguments. 

Extending optparse

* Adding new types:: 
* Adding new actions:: 

imp — Access the import internals

* Examples: Examples<25>. 

Undocumented Modules

* Platform specific modules:: 

Extending and Embedding the Python Interpreter

* Recommended third party tools:: 
* Creating extensions without third party tools:: 
* Embedding the CPython runtime in a larger application:: 

Creating extensions without third party tools

* Extending Python with C or C++:: 
* Defining New Types:: 
* Building C and C++ Extensions with distutils:: 
* Building C and C++ Extensions on Windows:: 

Extending Python with C or C++

* A Simple Example:: 
* Intermezzo; Errors and Exceptions: Intermezzo Errors and Exceptions. 
* Back to the Example:: 
* The Module's Method Table and Initialization Function:: 
* Compilation and Linkage:: 
* Calling Python Functions from C:: 
* Extracting Parameters in Extension Functions:: 
* Keyword Parameters for Extension Functions:: 
* Building Arbitrary Values:: 
* Reference Counts:: 
* Writing Extensions in C++:: 
* Providing a C API for an Extension Module:: 

Reference Counts

* Reference Counting in Python:: 
* Ownership Rules:: 
* Thin Ice:: 
* NULL Pointers:: 

Defining New Types

* The Basics:: 
* Type Methods:: 

The Basics

* Adding data and methods to the Basic example:: 
* Providing finer control over data attributes:: 
* Supporting cyclic garbage collection:: 
* Subclassing other types:: 

Type Methods

* Finalization and De-allocation:: 
* Object Presentation:: 
* Attribute Management:: 
* Object Comparison:: 
* Abstract Protocol Support:: 
* Weak Reference Support:: 
* More Suggestions:: 

Attribute Management

* Generic Attribute Management:: 
* Type-specific Attribute Management:: 

Building C and C++ Extensions with distutils

* Distributing your extension modules:: 

Building C and C++ Extensions on Windows

* A Cookbook Approach:: 
* Differences Between Unix and Windows:: 
* Using DLLs in Practice:: 

Embedding the CPython runtime in a larger application

* Embedding Python in Another Application:: 

Embedding Python in Another Application

* Very High Level Embedding:: 
* Beyond Very High Level Embedding; An overview: Beyond Very High Level Embedding An overview. 
* Pure Embedding:: 
* Extending Embedded Python:: 
* Embedding Python in C++:: 
* Compiling and Linking under Unix-like systems:: 

Python/C API Reference Manual

* Introduction: Introduction<12>. 
* Stable Application Binary Interface:: 
* The Very High Level Layer:: 
* Reference Counting:: 
* Exception Handling:: 
* Utilities: Utilities<2>. 
* Abstract Objects Layer:: 
* Concrete Objects Layer:: 
* Initialization, Finalization, and Threads: Initialization Finalization and Threads. 
* Memory Management:: 
* Object Implementation Support:: 
* API and ABI Versioning:: 

Introduction

* Include Files:: 
* Objects, Types and Reference Counts: Objects Types and Reference Counts. 
* Exceptions: Exceptions<12>. 
* Embedding Python:: 
* Debugging Builds:: 

Objects, Types and Reference Counts

* Reference Counts: Reference Counts<2>. 
* Types:: 

Reference Counts

* Reference Count Details:: 

Exception Handling

* Exception Objects:: 
* Unicode Exception Objects:: 
* Recursion Control:: 
* Standard Exceptions:: 

Utilities

* Operating System Utilities:: 
* System Functions:: 
* Process Control:: 
* Importing Modules: Importing Modules<2>. 
* Data marshalling support:: 
* Parsing arguments and building values:: 
* String conversion and formatting:: 
* Reflection:: 
* Codec registry and support functions:: 

Parsing arguments and building values

* Parsing arguments: Parsing arguments<3>. 
* Building values:: 

Parsing arguments

* Strings and buffers:: 
* Numbers: Numbers<2>. 
* Other objects:: 
* API Functions:: 

Codec registry and support functions

* Codec lookup API:: 
* Registry API for Unicode encoding error handlers:: 

Abstract Objects Layer

* Object Protocol:: 
* Number Protocol:: 
* Sequence Protocol:: 
* Mapping Protocol:: 
* Iterator Protocol:: 
* Buffer Protocol:: 
* Old Buffer Protocol:: 

Buffer Protocol

* Buffer structure:: 
* Buffer request types:: 
* Complex arrays:: 
* Buffer-related functions:: 

Buffer request types

* request-independent fields:: 
* readonly, format: readonly format. 
* shape, strides, suboffsets: shape strides suboffsets. 
* contiguity requests:: 
* compound requests:: 

Complex arrays

* NumPy-style; shape and strides: NumPy-style shape and strides. 
* PIL-style; shape, strides and suboffsets: PIL-style shape strides and suboffsets. 

Concrete Objects Layer

* Fundamental Objects:: 
* Numeric Objects:: 
* Sequence Objects:: 
* Container Objects:: 
* Function Objects: Function Objects<2>. 
* Other Objects:: 

Fundamental Objects

* Type Objects: Type Objects<2>. 
* The None Object:: 

Numeric Objects

* Integer Objects:: 
* Boolean Objects:: 
* Floating Point Objects:: 
* Complex Number Objects:: 

Complex Number Objects

* Complex Numbers as C Structures:: 
* Complex Numbers as Python Objects:: 

Sequence Objects

* Bytes Objects:: 
* Byte Array Objects:: 
* Unicode Objects and Codecs:: 
* Tuple Objects:: 
* Struct Sequence Objects:: 
* List Objects:: 

Byte Array Objects

* Type check macros:: 
* Direct API functions:: 
* Macros:: 

Unicode Objects and Codecs

* Unicode Objects:: 
* Built-in Codecs:: 
* Methods and Slot Functions:: 

Unicode Objects

* Unicode Type:: 
* Unicode Character Properties:: 
* Creating and accessing Unicode strings:: 
* Deprecated Py_UNICODE APIs:: 
* Locale Encoding:: 
* File System Encoding:: 
* wchar_t Support:: 
* UCS4 Support:: 

Built-in Codecs

* Generic Codecs:: 
* UTF-8 Codecs:: 
* UTF-32 Codecs:: 
* UTF-16 Codecs:: 
* UTF-7 Codecs:: 
* Unicode-Escape Codecs:: 
* Raw-Unicode-Escape Codecs:: 
* Latin-1 Codecs:: 
* ASCII Codecs:: 
* Character Map Codecs:: 
* MBCS codecs for Windows:: 
* Methods & Slots:: 

Container Objects

* Dictionary Objects:: 
* Set Objects:: 

Function Objects

* Function Objects: Function Objects<3>. 
* Instance Method Objects:: 
* Method Objects: Method Objects<2>. 
* Cell Objects:: 
* Code Objects: Code Objects<2>. 

Other Objects

* File Objects:: 
* Module Objects:: 
* Iterator Objects:: 
* Descriptor Objects:: 
* Slice Objects:: 
* MemoryView objects:: 
* Weak Reference Objects: Weak Reference Objects<2>. 
* Capsules: Capsules<2>. 
* Generator Objects:: 
* DateTime Objects: DateTime Objects<2>. 

Module Objects

* Initializing C modules:: 

Initialization, Finalization, and Threads

* Initializing and finalizing the interpreter:: 
* Process-wide parameters:: 
* Thread State and the Global Interpreter Lock:: 
* Sub-interpreter support:: 
* Asynchronous Notifications:: 
* Profiling and Tracing:: 
* Advanced Debugger Support:: 

Thread State and the Global Interpreter Lock

* Releasing the GIL from extension code:: 
* Non-Python created threads:: 
* High-level API:: 
* Low-level API:: 

Sub-interpreter support

* Bugs and caveats:: 

Memory Management

* Overview: Overview<2>. 
* Raw Memory Interface:: 
* Memory Interface:: 
* Customize Memory Allocators:: 
* Customize PyObject Arena Allocator:: 
* Examples: Examples<26>. 

Object Implementation Support

* Allocating Objects on the Heap:: 
* Common Object Structures:: 
* Type Objects: Type Objects<3>. 
* Number Object Structures:: 
* Mapping Object Structures:: 
* Sequence Object Structures:: 
* Buffer Object Structures:: 
* Supporting Cyclic Garbage Collection:: 

Distributing Python Modules

* Key terms:: 
* Open source licensing and collaboration:: 
* Installing the tools:: 
* Reading the guide:: 
* How do I...?: How do I ?. 

How do I...?

* ... choose a name for my project?: choose a name for my project?. 
* ... create and distribute binary extensions?: create and distribute binary extensions?. 

Installing Python Modules

* Key terms: Key terms<2>. 
* Basic usage:: 
* How do I ...?: How do I ?<2>. 
* Common installation issues:: 

How do I ...?

* ... install pip in versions of Python prior to Python 3.4?: install pip in versions of Python prior to Python 3 4?. 
* ... install packages just for the current user?: install packages just for the current user?. 
* ... install scientific Python packages?: install scientific Python packages?. 
* ... work with multiple versions of Python installed in parallel?: work with multiple versions of Python installed in parallel?. 

Common installation issues

* Installing into the system Python on Linux:: 
* Installing binary extensions:: 

Python HOWTOs

* Porting Python 2 Code to Python 3:: 
* Porting Extension Modules to Python 3:: 
* Curses Programming with Python:: 
* Descriptor HowTo Guide:: 
* Functional Programming HOWTO:: 
* Logging HOWTO:: 
* Logging Cookbook:: 
* Regular Expression HOWTO:: 
* Socket Programming HOWTO:: 
* Sorting HOW TO:: 
* Unicode HOWTO:: 
* HOWTO Fetch Internet Resources Using The urllib Package:: 
* HOWTO Use Python in the web:: 
* Argparse Tutorial:: 
* An introduction to the ipaddress module:: 
* Argument Clinic How-To:: 

Porting Python 2 Code to Python 3

* The Short Explanation:: 
* Details:: 
* Dropping Python 2 support completely:: 

Details

* Drop support for Python 2.5 and older (at least): Drop support for Python 2 5 and older at least. 
* Make sure you specify the proper version support in your setup.py file: Make sure you specify the proper version support in your setup py file. 
* Have good test coverage:: 
* Learn the differences between Python 2 & 3:: 
* Update your code:: 
* Prevent compatibility regressions:: 
* Check which dependencies block your transition:: 
* Update your setup.py file to denote Python 3 compatibility: Update your setup py file to denote Python 3 compatibility. 
* Use continuous integration to stay compatible:: 

Update your code

* Division:: 
* Text versus binary data:: 

Porting Extension Modules to Python 3

* Conditional compilation:: 
* Changes to Object APIs:: 
* Module initialization and state:: 
* CObject replaced with Capsule:: 
* Other options:: 

Changes to Object APIs

* str/unicode Unification:: 
* long/int Unification:: 

Curses Programming with Python

* What is curses?:: 
* Starting and ending a curses application:: 
* Windows and Pads:: 
* Displaying Text:: 
* User Input:: 
* For More Information:: 

What is curses?

* The Python curses module:: 

Displaying Text

* Attributes and Color:: 

Descriptor HowTo Guide

* Abstract:: 
* Definition and Introduction:: 
* Descriptor Protocol:: 
* Invoking Descriptors: Invoking Descriptors<2>. 
* Descriptor Example:: 
* Properties:: 
* Functions and Methods:: 
* Static Methods and Class Methods:: 

Functional Programming HOWTO

* Introduction: Introduction<13>. 
* Iterators: Iterators<2>. 
* Generator expressions and list comprehensions:: 
* Generators: Generators<2>. 
* Built-in functions:: 
* The itertools module:: 
* The functools module:: 
* Small functions and the lambda expression:: 
* Revision History and Acknowledgements:: 
* References: References<2>. 

Introduction

* Formal provability:: 
* Modularity:: 
* Ease of debugging and testing:: 
* Composability:: 

Iterators

* Data Types That Support Iterators:: 

Generators

* Passing values into a generator:: 

The itertools module

* Creating new iterators:: 
* Calling functions on elements:: 
* Selecting elements:: 
* Combinatoric functions:: 
* Grouping elements:: 

The functools module

* The operator module:: 

References

* General:: 
* Python-specific:: 
* Python documentation:: 

Logging HOWTO

* Basic Logging Tutorial:: 
* Advanced Logging Tutorial:: 
* Logging Levels: Logging Levels<2>. 
* Useful Handlers:: 
* Exceptions raised during logging:: 
* Using arbitrary objects as messages:: 
* Optimization:: 

Basic Logging Tutorial

* When to use logging:: 
* A simple example:: 
* Logging to a file:: 
* Logging from multiple modules:: 
* Logging variable data:: 
* Changing the format of displayed messages:: 
* Displaying the date/time in messages:: 
* Next Steps:: 

Advanced Logging Tutorial

* Logging Flow:: 
* Loggers:: 
* Handlers:: 
* Formatters:: 
* Configuring Logging:: 
* What happens if no configuration is provided:: 
* Configuring Logging for a Library:: 

Logging Levels

* Custom Levels:: 

Logging Cookbook

* Using logging in multiple modules:: 
* Multiple handlers and formatters:: 
* Logging to multiple destinations:: 
* Configuration server example:: 
* Dealing with handlers that block:: 
* Sending and receiving logging events across a network:: 
* Adding contextual information to your logging output:: 
* Logging to a single file from multiple processes:: 
* Using file rotation:: 
* Use of alternative formatting styles:: 
* Customizing LogRecord:: 
* Subclassing QueueHandler - a ZeroMQ example:: 
* Subclassing QueueListener - a ZeroMQ example:: 
* An example dictionary-based configuration:: 
* Using a rotator and namer to customize log rotation processing:: 
* A more elaborate multiprocessing example:: 
* Inserting a BOM into messages sent to a SysLogHandler:: 
* Implementing structured logging:: 
* Customizing handlers with dictConfig(): Customizing handlers with dictConfig. 
* Using particular formatting styles throughout your application:: 
* Configuring filters with dictConfig(): Configuring filters with dictConfig. 
* Customized exception formatting:: 
* Speaking logging messages:: 

Adding contextual information to your logging output

* Using LoggerAdapters to impart contextual information:: 
* Using Filters to impart contextual information:: 

Using LoggerAdapters to impart contextual information

* Using objects other than dicts to pass contextual information:: 

Using particular formatting styles throughout your application

* Using LogRecord factories:: 
* Using custom message objects:: 

Regular Expression HOWTO

* Introduction: Introduction<14>. 
* Simple Patterns:: 
* Using Regular Expressions:: 
* More Pattern Power:: 
* Modifying Strings:: 
* Common Problems:: 
* Feedback:: 

Simple Patterns

* Matching Characters:: 
* Repeating Things:: 

Using Regular Expressions

* Compiling Regular Expressions:: 
* The Backslash Plague:: 
* Performing Matches:: 
* Module-Level Functions: Module-Level Functions<2>. 
* Compilation Flags:: 

More Pattern Power

* More Metacharacters:: 
* Grouping:: 
* Non-capturing and Named Groups:: 
* Lookahead Assertions:: 

Modifying Strings

* Splitting Strings:: 
* Search and Replace:: 

Common Problems

* Use String Methods:: 
* match() versus search(): match versus search. 
* Greedy versus Non-Greedy:: 
* Using re.VERBOSE: Using re VERBOSE. 

Socket Programming HOWTO

* Sockets:: 
* Creating a Socket:: 
* Using a Socket:: 
* Disconnecting:: 
* Non-blocking Sockets:: 

Sockets

* History:: 

Creating a Socket

* IPC:: 

Using a Socket

* Binary Data:: 

Disconnecting

* When Sockets Die:: 

Sorting HOW TO

* Sorting Basics:: 
* Key Functions:: 
* Operator Module Functions:: 
* Ascending and Descending:: 
* Sort Stability and Complex Sorts:: 
* The Old Way Using Decorate-Sort-Undecorate:: 
* The Old Way Using the cmp Parameter:: 
* Odd and Ends:: 

Unicode HOWTO

* Introduction to Unicode:: 
* Python's Unicode Support:: 
* Reading and Writing Unicode Data:: 
* Acknowledgements: Acknowledgements<10>. 

Introduction to Unicode

* History of Character Codes:: 
* Definitions:: 
* Encodings:: 
* References: References<3>. 

Python’s Unicode Support

* The String Type:: 
* Converting to Bytes:: 
* Unicode Literals in Python Source Code:: 
* Unicode Properties:: 
* Unicode Regular Expressions:: 
* References: References<4>. 

Reading and Writing Unicode Data

* Unicode filenames:: 
* Tips for Writing Unicode-aware Programs:: 
* References: References<5>. 

Tips for Writing Unicode-aware Programs

* Converting Between File Encodings:: 
* Files in an Unknown Encoding:: 

HOWTO Fetch Internet Resources Using The urllib Package

* Introduction: Introduction<15>. 
* Fetching URLs:: 
* Handling Exceptions: Handling Exceptions<2>. 
* info and geturl:: 
* Openers and Handlers:: 
* Basic Authentication:: 
* Proxies:: 
* Sockets and Layers:: 
* Footnotes:: 

Fetching URLs

* Data:: 
* Headers:: 

Handling Exceptions

* URLError:: 
* HTTPError:: 
* Wrapping it Up:: 

HTTPError

* Error Codes:: 

Wrapping it Up

* Number 1:: 
* Number 2:: 

HOWTO Use Python in the web

* The Low-Level View:: 
* Step back; WSGI: Step back WSGI. 
* Model-View-Controller:: 
* Ingredients for Websites:: 
* Frameworks:: 

The Low-Level View

* Common Gateway Interface:: 
* mod_python:: 
* FastCGI and SCGI:: 
* mod_wsgi:: 

Common Gateway Interface

* Simple script for testing CGI:: 
* Setting up CGI on your own server:: 
* Common problems with CGI scripts:: 

FastCGI and SCGI

* Setting up FastCGI:: 

Step back: WSGI

* WSGI Servers:: 
* Case study; MoinMoin: Case study MoinMoin. 

Ingredients for Websites

* Templates:: 
* Data persistence:: 

Frameworks

* Some notable frameworks:: 

Some notable frameworks

* Django:: 
* TurboGears:: 
* Zope:: 
* Other notable frameworks:: 

Argparse Tutorial

* Concepts:: 
* The basics:: 
* Introducing Positional arguments:: 
* Introducing Optional arguments:: 
* Combining Positional and Optional arguments:: 
* Getting a little more advanced:: 
* Conclusion:: 

Introducing Optional arguments

* Short options:: 

Getting a little more advanced

* Conflicting options:: 

An introduction to the ipaddress module

* Creating Address/Network/Interface objects:: 
* Inspecting Address/Network/Interface Objects:: 
* Networks as lists of Addresses:: 
* Comparisons: Comparisons<4>. 
* Using IP Addresses with other modules:: 
* Getting more detail when instance creation fails:: 

Creating Address/Network/Interface objects

* A Note on IP Versions:: 
* IP Host Addresses:: 
* Defining Networks:: 
* Host Interfaces:: 

Argument Clinic How-To

* The Goals Of Argument Clinic:: 
* Basic Concepts And Usage:: 
* Converting Your First Function:: 
* Advanced Topics:: 

Advanced Topics

* Symbolic default values:: 
* Renaming the C functions and variables generated by Argument Clinic:: 
* Converting functions using PyArg_UnpackTuple:: 
* Optional Groups:: 
* Using real Argument Clinic converters, instead of "legacy converters": Using real Argument Clinic converters instead of "legacy converters". 
* Py_buffer:: 
* Advanced converters:: 
* Parameter default values:: 
* The NULL default value:: 
* Expressions specified as default values:: 
* Using a return converter:: 
* Cloning existing functions:: 
* Calling Python code:: 
* Using a "self converter":: 
* Writing a custom converter:: 
* Writing a custom return converter:: 
* METH_O and METH_NOARGS:: 
* tp_new and tp_init functions:: 
* Changing and redirecting Clinic's output:: 
* The #ifdef trick:: 
* Using Argument Clinic in Python files:: 

Python Frequently Asked Questions

* General Python FAQ:: 
* Programming FAQ:: 
* Design and History FAQ:: 
* Library and Extension FAQ:: 
* Extending/Embedding FAQ:: 
* Python on Windows FAQ:: 
* Graphic User Interface FAQ:: 
* "Why is Python Installed on my Computer?" FAQ:: 

General Python FAQ

* General Information:: 
* Python in the real world:: 

General Information

* What is Python?:: 
* What is the Python Software Foundation?:: 
* Are there copyright restrictions on the use of Python?:: 
* Why was Python created in the first place?:: 
* What is Python good for?:: 
* How does the Python version numbering scheme work?:: 
* How do I obtain a copy of the Python source?:: 
* How do I get documentation on Python?:: 
* I’ve never programmed before. Is there a Python tutorial?: I've never programmed before Is there a Python tutorial?. 
* Is there a newsgroup or mailing list devoted to Python?:: 
* How do I get a beta test version of Python?:: 
* How do I submit bug reports and patches for Python?:: 
* Are there any published articles about Python that I can reference?:: 
* Are there any books on Python?:: 
* Where in the world is www.python.org located?: Where in the world is www python org located?. 
* Why is it called Python?:: 
* Do I have to like "Monty Python's Flying Circus"?:: 

Python in the real world

* How stable is Python?:: 
* How many people are using Python?:: 
* Have any significant projects been done in Python?:: 
* What new developments are expected for Python in the future?:: 
* Is it reasonable to propose incompatible changes to Python?:: 
* Is Python a good language for beginning programmers?:: 

Programming FAQ

* General Questions:: 
* Core Language:: 
* Numbers and strings:: 
* Performance: Performance<4>. 
* Sequences (Tuples/Lists): Sequences Tuples/Lists. 
* Dictionaries: Dictionaries<2>. 
* Objects:: 
* Modules: Modules<3>. 

General Questions

* Is there a source code level debugger with breakpoints, single-stepping, etc.?: Is there a source code level debugger with breakpoints single-stepping etc ?. 
* Is there a tool to help find bugs or perform static analysis?:: 
* How can I create a stand-alone binary from a Python script?:: 
* Are there coding standards or a style guide for Python programs?:: 

Core Language

* Why am I getting an UnboundLocalError when the variable has a value?:: 
* What are the rules for local and global variables in Python?:: 
* Why do lambdas defined in a loop with different values all return the same result?:: 
* How do I share global variables across modules?:: 
* What are the "best practices" for using import in a module?:: 
* Why are default values shared between objects?:: 
* How can I pass optional or keyword parameters from one function to another?:: 
* What is the difference between arguments and parameters?:: 
* Why did changing list 'y' also change list 'x'?:: 
* How do I write a function with output parameters (call by reference)?: How do I write a function with output parameters call by reference ?. 
* How do you make a higher order function in Python?:: 
* How do I copy an object in Python?:: 
* How can I find the methods or attributes of an object?:: 
* How can my code discover the name of an object?:: 
* What's up with the comma operator's precedence?:: 
* Is there an equivalent of C’s "?;" ternary operator?: Is there an equivalent of C's "? " ternary operator?. 
* Is it possible to write obfuscated one-liners in Python?:: 

Numbers and strings

* How do I specify hexadecimal and octal integers?:: 
* Why does -22 // 10 return -3?:: 
* How do I convert a string to a number?:: 
* How do I convert a number to a string?:: 
* How do I modify a string in place?:: 
* How do I use strings to call functions/methods?:: 
* Is there an equivalent to Perl’s chomp() for removing trailing newlines from strings?: Is there an equivalent to Perl's chomp for removing trailing newlines from strings?. 
* Is there a scanf() or sscanf() equivalent?: Is there a scanf or sscanf equivalent?. 
* What does 'UnicodeDecodeError' or 'UnicodeEncodeError' error mean?:: 

Performance

* My program is too slow. How do I speed it up?: My program is too slow How do I speed it up?. 
* What is the most efficient way to concatenate many strings together?:: 

Sequences (Tuples/Lists)

* How do I convert between tuples and lists?:: 
* What's a negative index?:: 
* How do I iterate over a sequence in reverse order?:: 
* How do you remove duplicates from a list?:: 
* How do you make an array in Python?:: 
* How do I create a multidimensional list?:: 
* How do I apply a method to a sequence of objects?:: 
* Why does a_tuple[i] += ['item'] raise an exception when the addition works?:: 

Dictionaries

* How can I get a dictionary to store and display its keys in a consistent order?:: 
* I want to do a complicated sort; can you do a Schwartzian Transform in Python?: I want to do a complicated sort can you do a Schwartzian Transform in Python?. 
* How can I sort one list by values from another list?:: 

Objects

* What is a class?:: 
* What is a method?:: 
* What is self?:: 
* How do I check if an object is an instance of a given class or of a subclass of it?:: 
* What is delegation?:: 
* How do I call a method defined in a base class from a derived class that overrides it?:: 
* How can I organize my code to make it easier to change the base class?:: 
* How do I create static class data and static class methods?:: 
* How can I overload constructors (or methods) in Python?: How can I overload constructors or methods in Python?. 
* I try to use __spam and I get an error about _SomeClassName__spam.: I try to use __spam and I get an error about _SomeClassName__spam. 
* My class defines __del__ but it is not called when I delete the object.: My class defines __del__ but it is not called when I delete the object. 
* How do I get a list of all instances of a given class?:: 
* Why does the result of id() appear to be not unique?: Why does the result of id appear to be not unique?. 

Modules

* How do I create a .pyc file?: How do I create a pyc file?. 
* How do I find the current module name?:: 
* How can I have modules that mutually import each other?:: 
* __import__(’x.y.z’) returns <module ’x’>; how do I get z?: __import__ 'x y z' returns <module 'x'>; how do I get z?. 
* When I edit an imported module and reimport it, the changes don’t show up. Why does this happen?: When I edit an imported module and reimport it the changes don't show up Why does this happen?. 

Design and History FAQ

* Why does Python use indentation for grouping of statements?:: 
* Why am I getting strange results with simple arithmetic operations?:: 
* Why are floating-point calculations so inaccurate?:: 
* Why are Python strings immutable?:: 
* Why must 'self' be used explicitly in method definitions and calls?:: 
* Why can't I use an assignment in an expression?:: 
* Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?: Why does Python use methods for some functionality e g list index but functions for other e g len list ?. 
* Why is join() a string method instead of a list or tuple method?: Why is join a string method instead of a list or tuple method?. 
* How fast are exceptions?:: 
* Why isn't there a switch or case statement in Python?:: 
* Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?:: 
* Why can't lambda expressions contain statements?:: 
* Can Python be compiled to machine code, C or some other language?: Can Python be compiled to machine code C or some other language?. 
* How does Python manage memory?:: 
* Why doesn't CPython use a more traditional garbage collection scheme?:: 
* Why isn't all memory freed when CPython exits?:: 
* Why are there separate tuple and list data types?:: 
* How are lists implemented?:: 
* How are dictionaries implemented?:: 
* Why must dictionary keys be immutable?:: 
* Why doesn’t list.sort() return the sorted list?: Why doesn't list sort return the sorted list?. 
* How do you specify and enforce an interface spec in Python?:: 
* Why is there no goto?:: 
* Why can’t raw strings (r-strings) end with a backslash?: Why can't raw strings r-strings end with a backslash?. 
* Why doesn't Python have a "with" statement for attribute assignments?:: 
* Why are colons required for the if/while/def/class statements?:: 
* Why does Python allow commas at the end of lists and tuples?:: 

Library and Extension FAQ

* General Library Questions:: 
* Common tasks:: 
* Threads:: 
* Input and Output: Input and Output<2>. 
* Network/Internet Programming:: 
* Databases:: 
* Mathematics and Numerics:: 

General Library Questions

* How do I find a module or application to perform task X?:: 
* Where is the math.py (socket.py, regex.py, etc.) source file?: Where is the math py socket py regex py etc source file?. 
* How do I make a Python script executable on Unix?:: 
* Is there a curses/termcap package for Python?:: 
* Is there an equivalent to C’s onexit() in Python?: Is there an equivalent to C's onexit in Python?. 
* Why don't my signal handlers work?:: 

Common tasks

* How do I test a Python program or component?:: 
* How do I create documentation from doc strings?:: 
* How do I get a single keypress at a time?:: 

Threads

* How do I program using threads?:: 
* None of my threads seem to run; why?: None of my threads seem to run why?. 
* How do I parcel out work among a bunch of worker threads?:: 
* What kinds of global value mutation are thread-safe?:: 
* Can't we get rid of the Global Interpreter Lock?:: 

Input and Output

* How do I delete a file? (And other file questions...): How do I delete a file? And other file questions. 
* How do I copy a file?:: 
* How do I read (or write) binary data?: How do I read or write binary data?. 
* I can’t seem to use os.read() on a pipe created with os.popen(); why?: I can't seem to use os read on a pipe created with os popen ; why?. 
* How do I access the serial (RS232) port?: How do I access the serial RS232 port?. 
* Why doesn’t closing sys.stdout (stdin, stderr) really close it?: Why doesn't closing sys stdout stdin stderr really close it?. 

Network/Internet Programming

* What WWW tools are there for Python?:: 
* How can I mimic CGI form submission (METHOD=POST)?: How can I mimic CGI form submission METHOD=POST ?. 
* What module should I use to help with generating HTML?:: 
* How do I send mail from a Python script?:: 
* How do I avoid blocking in the connect() method of a socket?: How do I avoid blocking in the connect method of a socket?. 

Databases

* Are there any interfaces to database packages in Python?:: 
* How do you implement persistent objects in Python?:: 

Mathematics and Numerics

* How do I generate random numbers in Python?:: 

Extending/Embedding FAQ

* Can I create my own functions in C?:: 
* Can I create my own functions in C++?:: 
* Writing C is hard; are there any alternatives?:: 
* How can I execute arbitrary Python statements from C?:: 
* How can I evaluate an arbitrary Python expression from C?:: 
* How do I extract C values from a Python object?:: 
* How do I use Py_BuildValue() to create a tuple of arbitrary length?: How do I use Py_BuildValue to create a tuple of arbitrary length?. 
* How do I call an object's method from C?:: 
* How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?. 
* How do I access a module written in Python from C?:: 
* How do I interface to C++ objects from Python?:: 
* I added a module using the Setup file and the make fails; why?:: 
* How do I debug an extension?:: 
* I want to compile a Python module on my Linux system, but some files are missing. Why?: I want to compile a Python module on my Linux system but some files are missing Why?. 
* What does "SystemError; _PyImport_FixupExtension; module yourmodule not loaded" mean?: What does "SystemError _PyImport_FixupExtension module yourmodule not loaded" mean?. 
* How do I tell "incomplete input" from "invalid input"?:: 
* How do I find undefined g++ symbols __builtin_new or __pure_virtual?:: 
* Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?. 

Python on Windows FAQ

* How do I run a Python program under Windows?:: 
* How do I make Python scripts executable?:: 
* Why does Python sometimes take so long to start?:: 
* How do I make an executable from a Python script?:: 
* Is a *.pyd file the same as a DLL?: Is a * pyd file the same as a DLL?. 
* How can I embed Python into a Windows application?:: 
* How do I keep editors from inserting tabs into my Python source?:: 
* How do I check for a keypress without blocking?:: 
* How do I emulate os.kill() in Windows?: How do I emulate os kill in Windows?. 
* How do I extract the downloaded documentation on Windows?:: 

Graphic User Interface FAQ

* General GUI Questions:: 
* What platform-independent GUI toolkits exist for Python?:: 
* What platform-specific GUI toolkits exist for Python?:: 
* Tkinter questions:: 

What platform-independent GUI toolkits exist for Python?

* Tkinter:: 
* wxWidgets:: 
* Qt:: 
* Gtk+:: 
* FLTK:: 
* FOX:: 
* OpenGL:: 

Tkinter questions

* How do I freeze Tkinter applications?:: 
* Can I have Tk events handled while waiting for I/O?:: 
* I can’t get key bindings to work in Tkinter; why?: I can't get key bindings to work in Tkinter why?. 

"Why is Python Installed on my Computer?" FAQ

* What is Python?: What is Python?<2>. 
* Why is Python installed on my machine?:: 
* Can I delete Python?:: 

About these documents

* Contributors to the Python Documentation:: 

Reporting Bugs

* Documentation bugs:: 
* Using the Python issue tracker:: 
* Getting started contributing to Python yourself:: 

History and License

* History of the software:: 
* Terms and conditions for accessing or otherwise using Python:: 
* Licenses and Acknowledgements for Incorporated Software:: 

Licenses and Acknowledgements for Incorporated Software

* Mersenne Twister:: 
* Sockets: Sockets<2>. 
* Floating point exception control:: 
* Asynchronous socket services:: 
* Cookie management:: 
* Execution tracing:: 
* UUencode and UUdecode functions:: 
* XML Remote Procedure Calls:: 
* test_epoll:: 
* Select kqueue:: 
* SipHash24:: 
* strtod and dtoa:: 
* OpenSSL:: 
* expat:: 
* libffi:: 
* zlib: zlib<2>. 
* cfuhash:: 
* libmpdec:: 

Distributing Python Modules (Legacy version)

* An Introduction to Distutils:: 
* Writing the Setup Script:: 
* Writing the Setup Configuration File:: 
* Creating a Source Distribution:: 
* Creating Built Distributions:: 
* The Python Package Index (PyPI): The Python Package Index PyPI. 
* Examples: Examples<27>. 
* Extending Distutils:: 
* Command Reference:: 
* API Reference:: 

An Introduction to Distutils

* Concepts & Terminology:: 
* A Simple Example: A Simple Example<2>. 
* General Python terminology:: 
* Distutils-specific terminology:: 

Writing the Setup Script

* Listing whole packages:: 
* Listing individual modules:: 
* Describing extension modules:: 
* Relationships between Distributions and Packages:: 
* Installing Scripts:: 
* Installing Package Data:: 
* Installing Additional Files:: 
* Additional meta-data:: 
* Debugging the setup script:: 

Describing extension modules

* Extension names and packages:: 
* Extension source files:: 
* Preprocessor options:: 
* Library options:: 
* Other options: Other options<2>. 

Creating a Source Distribution

* Specifying the files to distribute:: 
* Manifest-related options:: 

Creating Built Distributions

* Creating RPM packages:: 
* Creating Windows Installers:: 
* Cross-compiling on Windows:: 
* Vista User Access Control (UAC): Vista User Access Control UAC. 

Cross-compiling on Windows

* The Postinstallation script:: 

The Python Package Index (PyPI)

* PyPI overview:: 
* Distutils commands:: 
* PyPI package display:: 

Distutils commands

* The register command:: 
* The upload command:: 
* Additional command options:: 
* The .pypirc file: The pypirc file. 

Examples

* Pure Python distribution (by module): Pure Python distribution by module. 
* Pure Python distribution (by package): Pure Python distribution by package. 
* Single extension module:: 
* Checking a package:: 
* Reading the metadata:: 

Extending Distutils

* Integrating new commands:: 
* Adding new distribution types:: 

Command Reference

* Installing modules; the install command family: Installing modules the install command family. 
* Creating a source distribution; the sdist command: Creating a source distribution the sdist command. 

Installing modules: the install command family

* install_data:: 
* install_scripts:: 

API Reference

* distutils.core: distutils core --- Core Distutils functionality. Core Distutils functionality
* distutils.ccompiler: distutils ccompiler --- CCompiler base class. CCompiler base class
* distutils.unixccompiler: distutils unixccompiler --- Unix C Compiler. Unix C Compiler
* distutils.msvccompiler: distutils msvccompiler --- Microsoft Compiler. Microsoft Compiler
* distutils.bcppcompiler: distutils bcppcompiler --- Borland Compiler. Borland Compiler
* distutils.cygwincompiler: distutils cygwincompiler --- Cygwin Compiler. Cygwin Compiler
* distutils.archive_util: distutils archive_util --- Archiving utilities. Archiving utilities
* distutils.dep_util: distutils dep_util --- Dependency checking. Dependency checking
* distutils.dir_util: distutils dir_util --- Directory tree operations. Directory tree operations
* distutils.file_util: distutils file_util --- Single file operations. Single file operations
* distutils.util: distutils util --- Miscellaneous other utility functions. Miscellaneous other utility functions
* distutils.dist: distutils dist --- The Distribution class. The Distribution class
* distutils.extension: distutils extension --- The Extension class. The Extension class
* distutils.debug: distutils debug --- Distutils debug mode. Distutils debug mode
* distutils.errors: distutils errors --- Distutils exceptions. Distutils exceptions
* distutils.fancy_getopt: distutils fancy_getopt --- Wrapper around the standard getopt module. Wrapper around the standard getopt module
* distutils.filelist: distutils filelist --- The FileList class. The FileList class
* distutils.log: distutils log --- Simple PEP 282-style logging. Simple PEP 282-style logging
* distutils.spawn: distutils spawn --- Spawn a sub-process. Spawn a sub-process
* distutils.sysconfig: distutils sysconfig --- System configuration information. System configuration information
* distutils.text_file: distutils text_file --- The TextFile class. The TextFile class
* distutils.version: distutils version --- Version number classes. Version number classes
* distutils.cmd: distutils cmd --- Abstract base class for Distutils commands. Abstract base class for Distutils commands
* Creating a new Distutils command:: 
* distutils.command: distutils command --- Individual Distutils commands. Individual Distutils commands
* distutils.command.bdist: distutils command bdist --- Build a binary installer. Build a binary installer
* distutils.command.bdist_packager: distutils command bdist_packager --- Abstract base class for packagers. Abstract base class for packagers
* distutils.command.bdist_dumb: distutils command bdist_dumb --- Build a "dumb" installer. Build a "dumb" installer
* distutils.command.bdist_msi: distutils command bdist_msi --- Build a Microsoft Installer binary package. Build a Microsoft Installer binary package
* distutils.command.bdist_rpm: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM. Build a binary distribution as a Redhat RPM and
                               SRPM
* distutils.command.bdist_wininst: distutils command bdist_wininst --- Build a Windows installer. Build a Windows installer
* distutils.command.sdist: distutils command sdist --- Build a source distribution. Build a source distribution
* distutils.command.build: distutils command build --- Build all files of a package. Build all files of a package
* distutils.command.build_clib: distutils command build_clib --- Build any C libraries in a package. Build any C libraries in a package
* distutils.command.build_ext: distutils command build_ext --- Build any extensions in a package. Build any extensions in a package
* distutils.command.build_py: distutils command build_py --- Build the py/ pyc files of a package. Build the .py/.pyc files of a package
* distutils.command.build_scripts: distutils command build_scripts --- Build the scripts of a package. Build the scripts of a package
* distutils.command.clean: distutils command clean --- Clean a package build area. Clean a package build area
* distutils.command.config: distutils command config --- Perform package configuration. Perform package configuration
* distutils.command.install: distutils command install --- Install a package. Install a package
* distutils.command.install_data: distutils command install_data --- Install data files from a package. Install data files from a package
* distutils.command.install_headers: distutils command install_headers --- Install C/C++ header files from a package. Install C/C++ header files from a package
* distutils.command.install_lib: distutils command install_lib --- Install library files from a package. Install library files from a package
* distutils.command.install_scripts: distutils command install_scripts --- Install script files from a package. Install script files from a package
* distutils.command.register: distutils command register --- Register a module with the Python Package Index. Register a module with the Python Package Index
* distutils.command.check: distutils command check --- Check the meta-data of a package. Check the meta-data of a package

Installing Python Modules (Legacy version)

* Introduction: Introduction<16>. 
* Standard Build and Install:: 
* Alternate Installation:: 
* Custom Installation:: 
* Distutils Configuration Files:: 
* Building Extensions; Tips and Tricks: Building Extensions Tips and Tricks. 

Introduction

* Best case; trivial installation: Best case trivial installation. 
* The new standard; Distutils: The new standard Distutils. 

Standard Build and Install

* Platform variations:: 
* Splitting the job up:: 
* How building works:: 
* How installation works:: 

Alternate Installation

* Alternate installation; the user scheme: Alternate installation the user scheme. 
* Alternate installation; the home scheme: Alternate installation the home scheme. 
* Alternate installation; Unix (the prefix scheme): Alternate installation Unix the prefix scheme. 
* Alternate installation; Windows (the prefix scheme): Alternate installation Windows the prefix scheme. 

Custom Installation

* Modifying Python's Search Path:: 

Distutils Configuration Files

* Location and names of config files:: 
* Syntax of config files:: 

Building Extensions: Tips and Tricks

* Tweaking compiler/linker flags:: 
* Using non-Microsoft compilers on Windows:: 

Using non-Microsoft compilers on Windows

* Borland/CodeGear C++:: 
* GNU C / Cygwin / MinGW:: 

GNU C / Cygwin / MinGW

* Older Versions of Python and MinGW:: 



File: python.info,  Node: What's New in Python,  Next: The Python Tutorial,  Prev: Top,  Up: Top

1 What’s New in Python
**********************

The "What’s New in Python" series of essays takes tours through the most
important changes between major Python versions.  They are a "must read"
for anyone wishing to stay up-to-date after a new release.

* Menu:

* What’s New In Python 3.4: What's New In Python 3 4. 
* What’s New In Python 3.3: What's New In Python 3 3. 
* What’s New In Python 3.2: What's New In Python 3 2. 
* What’s New In Python 3.1: What's New In Python 3 1. 
* What’s New In Python 3.0: What's New In Python 3 0. 
* What’s New in Python 2.7: What's New in Python 2 7. 
* What’s New in Python 2.6: What's New in Python 2 6. 
* What’s New in Python 2.5: What's New in Python 2 5. 
* What’s New in Python 2.4: What's New in Python 2 4. 
* What’s New in Python 2.3: What's New in Python 2 3. 
* What’s New in Python 2.2: What's New in Python 2 2. 
* What’s New in Python 2.1: What's New in Python 2 1. 
* What’s New in Python 2.0: What's New in Python 2 0. 
* Changelog:: 


File: python.info,  Node: What's New In Python 3 4,  Next: What's New In Python 3 3,  Up: What's New in Python

1.1 What’s New In Python 3.4
============================


Author: R. David Murray <<rdmurray@bitdance.com>> (Editor)

This article explains the new features in Python 3.4, compared to 3.3.
Python 3.4 was released on March 16, 2014.  For full details, see the
changelog(1).

See also
........

PEP 429(2) – Python 3.4 Release Schedule

* Menu:

* Summary: Summary -- Release Highlights. Release Highlights
* New Features:: 
* New Modules:: 
* Improved Modules:: 
* CPython Implementation Changes:: 
* Deprecated:: 
* Removed:: 
* Porting to Python 3.4: Porting to Python 3 4. 
* Changed in 3.4.3: Changed in 3 4 3. 

   ---------- Footnotes ----------

   (1) https://docs.python.org/3.4/whatsnew/changelog.html

   (2) https://www.python.org/dev/peps/pep-0429


File: python.info,  Node: Summary -- Release Highlights,  Next: New Features,  Up: What's New In Python 3 4

1.1.1 Summary – Release Highlights
----------------------------------

New syntax features:

   * No new syntax features were added in Python 3.4.

Other new features:

   * *note pip should always be available: 145. ( PEP 453(1)).

   * *note Newly created file descriptors are non-inheritable: 146. (
     PEP 446(2)).

   * command line option for *note isolated mode: 147. (issue 16499(3)).

   * *note improvements in the handling of codecs: 148. that are not
     text encodings (multiple issues).

   * *note A ModuleSpec Type: 149. for the Import System ( PEP 451(4)).
     (Affects importer authors.)

   * The *note marshal: ad. format has been made *note more compact and
     efficient: 14a. (issue 16475(5)).

New library modules:

   * *note asyncio: a.: *note New provisional API for asynchronous IO:
     14b. ( PEP 3156(6)).

   * *note ensurepip: 78.: *note Bootstrapping the pip installer: 14c. (
     PEP 453(7)).

   * *note enum: 79.: *note Support for enumeration types: 14d. ( PEP
     435(8)).

   * *note pathlib: c4.: *note Object-oriented filesystem paths: 14e. (
     PEP 428(9)).

   * *note selectors: e1.: *note High-level and efficient I/O
     multiplexing: 14f, built upon the *note select: e0. module
     primitives (part of PEP 3156(10)).

   * *note statistics: f0.: A basic *note numerically stable statistics
     library: 150. ( PEP 450(11)).

   * *note tracemalloc: 10e.: *note Trace Python memory allocations:
     151. ( PEP 454(12)).

Significantly improved library modules:

   * *note Single-dispatch generic functions: 152. in *note functools:
     84. ( PEP 443(13)).

   * New *note pickle: c6. *note protocol 4: 153. ( PEP 3154(14)).

   * *note multiprocessing: b4. now has *note an option to avoid using
     os.fork on Unix: 154. (issue 8713(15)).

   * *note email: 67. has a new submodule, *note contentmanager: 69, and
     a new *note Message: 155. subclass (‘EmailMessage’) that *note
     simplify MIME handling: 156. (issue 18891(16)).

   * The *note inspect: 9d. and *note pydoc: d5. modules are now capable
     of correct introspection of a much wider variety of callable
     objects, which improves the output of the Python *note help(): 157.
     system.

   * The *note ipaddress: 9f. module API has been declared stable

Security improvements:

   * *note Secure and interchangeable hash algorithm: 158. ( PEP
     456(17)).

   * *note Make newly created file descriptors non-inheritable: 146. (
     PEP 446(18)) to avoid leaking file descriptors to child processes.

   * New command line option for *note isolated mode: 147, (issue
     16499(19)).

   * *note multiprocessing: b4. now has *note an option to avoid using
     os.fork on Unix: 154.  `spawn' and `forkserver' are more secure
     because they avoid sharing data with child processes.

   * *note multiprocessing: b4. child processes on Windows no longer
     inherit all of the parent’s inheritable handles, only the necessary
     ones.

   * A new *note hashlib.pbkdf2_hmac(): 159. function provides the
     PKCS#5 password-based key derivation function 2(20).

   * *note TLSv1.1 and TLSv1.2 support: 15a. for *note ssl: ee.

   * *note Retrieving certificates from the Windows system cert store
     support: 15b. for *note ssl: ee.

   * *note Server-side SNI (Server Name Indication) support: 15c. for
     *note ssl: ee.

   * The *note ssl.SSLContext: 15d. class has a *note lot of
     improvements: 15e.

   * All modules in the standard library that support SSL now support
     server certificate verification, including hostname matching (*note
     ssl.match_hostname(): 15f.) and CRLs (Certificate Revocation lists,
     see *note ssl.SSLContext.load_verify_locations(): 160.).

CPython implementation improvements:

   * *note Safe object finalization: 161. ( PEP 442(21)).

   * Leveraging PEP 442(22), in most cases *note module globals are no
     longer set to None during finalization: 161. (issue 18214(23)).

   * *note Configurable memory allocators: 162. ( PEP 445(24)).

   * *note Argument Clinic: 163. ( PEP 436(25)).

Please read on for a comprehensive list of user-facing changes,
including many other smaller improvements, CPython optimizations,
deprecations, and potential porting issues.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0453

   (2) https://www.python.org/dev/peps/pep-0446

   (3) https://bugs.python.org/issue16499

   (4) https://www.python.org/dev/peps/pep-0451

   (5) https://bugs.python.org/issue16475

   (6) https://www.python.org/dev/peps/pep-3156

   (7) https://www.python.org/dev/peps/pep-0453

   (8) https://www.python.org/dev/peps/pep-0435

   (9) https://www.python.org/dev/peps/pep-0428

   (10) https://www.python.org/dev/peps/pep-3156

   (11) https://www.python.org/dev/peps/pep-0450

   (12) https://www.python.org/dev/peps/pep-0454

   (13) https://www.python.org/dev/peps/pep-0443

   (14) https://www.python.org/dev/peps/pep-3154

   (15) https://bugs.python.org/issue8713

   (16) https://bugs.python.org/issue18891

   (17) https://www.python.org/dev/peps/pep-0456

   (18) https://www.python.org/dev/peps/pep-0446

   (19) https://bugs.python.org/issue16499

   (20) http://en.wikipedia.org/wiki/PBKDF2

   (21) https://www.python.org/dev/peps/pep-0442

   (22) https://www.python.org/dev/peps/pep-0442

   (23) https://bugs.python.org/issue18214

   (24) https://www.python.org/dev/peps/pep-0445

   (25) https://www.python.org/dev/peps/pep-0436


File: python.info,  Node: New Features,  Next: New Modules,  Prev: Summary -- Release Highlights,  Up: What's New In Python 3 4

1.1.2 New Features
------------------

* Menu:

* PEP 453; Explicit Bootstrapping of PIP in Python Installations: PEP 453 Explicit Bootstrapping of PIP in Python Installations. 
* PEP 446; Newly Created File Descriptors Are Non-Inheritable: PEP 446 Newly Created File Descriptors Are Non-Inheritable. 
* Improvements to Codec Handling:: 
* PEP 451; A ModuleSpec Type for the Import System: PEP 451 A ModuleSpec Type for the Import System. 
* Other Language Changes:: 


File: python.info,  Node: PEP 453 Explicit Bootstrapping of PIP in Python Installations,  Next: PEP 446 Newly Created File Descriptors Are Non-Inheritable,  Up: New Features

1.1.2.1 PEP 453: Explicit Bootstrapping of PIP in Python Installations
......................................................................

* Menu:

* Bootstrapping pip By Default:: 
* Documentation Changes:: 


File: python.info,  Node: Bootstrapping pip By Default,  Next: Documentation Changes,  Up: PEP 453 Explicit Bootstrapping of PIP in Python Installations

1.1.2.2 Bootstrapping pip By Default
....................................

The new *note ensurepip: 78. module (defined in PEP 453(1)) provides a
standard cross-platform mechanism to bootstrap the pip installer into
Python installations and virtual environments.  The version of ‘pip’
included with Python 3.4.0 is ‘pip’ 1.5.4, and future 3.4.x maintenance
releases will update the bundled version to the latest version of ‘pip’
that is available at the time of creating the release candidate.

By default, the commands ‘pipX’ and ‘pipX.Y’ will be installed on all
platforms (where X.Y stands for the version of the Python installation),
along with the ‘pip’ Python package and its dependencies.  On Windows
and in virtual environments on all platforms, the unversioned ‘pip’
command will also be installed.  On other platforms, the system wide
unversioned ‘pip’ command typically refers to the separately installed
Python 2 version.

The *note pyvenv: 167. command line utility and the *note venv: 11e.
module make use of the *note ensurepip: 78. module to make ‘pip’ readily
available in virtual environments.  When using the command line utility,
‘pip’ is installed by default, while when using the *note venv: 11e.
module *note API: 168. installation of ‘pip’ must be requested
explicitly.

For CPython *note source builds on POSIX systems: 169, the ‘make
install’ and ‘make altinstall’ commands bootstrap ‘pip’ by default.
This behaviour can be controlled through configure options, and
overridden through Makefile options.

On Windows and Mac OS X, the CPython installers now default to
installing ‘pip’ along with CPython itself (users may opt out of
installing it during the installation process).  Window users will need
to opt in to the automatic ‘PATH’ modifications to have ‘pip’ available
from the command line by default, otherwise it can still be accessed
through the Python launcher for Windows as ‘py -m pip’.

As discussed in the PEP(2), platform packagers may choose not to install
these commands by default, as long as, when invoked, they provide clear
and simple directions on how to install them on that platform (usually
using the system package manager).

     Note: To avoid conflicts between parallel Python 2 and Python 3
     installations, only the versioned ‘pip3’ and ‘pip3.4’ commands are
     bootstrapped by default when ‘ensurepip’ is invoked directly - the
     ‘--default-pip’ option is needed to also request the unversioned
     ‘pip’ command.  ‘pyvenv’ and the Windows installer ensure that the
     unqualified ‘pip’ command is made available in those environments,
     and ‘pip’ can always be invoked via the ‘-m’ switch rather than
     directly to avoid ambiguity on systems with multiple Python
     installations.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0453

   (2) 
https://www.python.org/dev/peps/pep-0453/#recommendations-for-downstream-distributors


File: python.info,  Node: Documentation Changes,  Prev: Bootstrapping pip By Default,  Up: PEP 453 Explicit Bootstrapping of PIP in Python Installations

1.1.2.3 Documentation Changes
.............................

As part of this change, the *note Installing Python Modules: 16b. and
*note Distributing Python Modules: 16c. sections of the documentation
have been completely redesigned as short getting started and FAQ
documents.  Most packaging documentation has now been moved out to the
Python Packaging Authority maintained Python Packaging User Guide(1) and
the documentation of the individual projects.

However, as this migration is currently still incomplete, the legacy
versions of those guides remaining available as *note Installing Python
Modules (Legacy version): 16d. and *note Distributing Python Modules
(Legacy version): 16e.

See also
........

PEP 453(2) – Explicit bootstrapping of pip in Python installations

     PEP written by Donald Stufft and Nick Coghlan, implemented by
     Donald Stufft, Nick Coghlan, Martin von Löwis and Ned Deily.

   ---------- Footnotes ----------

   (1) https://packaging.python.org

   (2) https://www.python.org/dev/peps/pep-0453


File: python.info,  Node: PEP 446 Newly Created File Descriptors Are Non-Inheritable,  Next: Improvements to Codec Handling,  Prev: PEP 453 Explicit Bootstrapping of PIP in Python Installations,  Up: New Features

1.1.2.4 PEP 446: Newly Created File Descriptors Are Non-Inheritable
...................................................................

PEP 446(1) makes newly created file descriptors *note non-inheritable:
170.  In general, this is the behavior an application will want: when
launching a new process, having currently open files also open in the
new process can lead to all sorts of hard to find bugs, and potentially
to security issues.

However, there are occasions when inheritance is desired.  To support
these cases, the following new functions and methods are available:

   * *note os.get_inheritable(): 171, *note os.set_inheritable(): 172.

   * *note os.get_handle_inheritable(): 173, *note
     os.set_handle_inheritable(): 174.

   * *note socket.socket.get_inheritable(): 175, *note
     socket.socket.set_inheritable(): 176.

See also
........

PEP 446(2) – Make newly created file descriptors non-inheritable

     PEP written and implemented by Victor Stinner.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0446

   (2) https://www.python.org/dev/peps/pep-0446


File: python.info,  Node: Improvements to Codec Handling,  Next: PEP 451 A ModuleSpec Type for the Import System,  Prev: PEP 446 Newly Created File Descriptors Are Non-Inheritable,  Up: New Features

1.1.2.5 Improvements to Codec Handling
......................................

Since it was first introduced, the *note codecs: 1c. module has always
been intended to operate as a type-neutral dynamic encoding and decoding
system.  However, its close coupling with the Python text model,
especially the type restricted convenience methods on the builtin *note
str: 178, *note bytes: 179. and *note bytearray: 17a. types, has
historically obscured that fact.

As a key step in clarifying the situation, the *note codecs.encode():
17b. and *note codecs.decode(): 17c. convenience functions are now
properly documented in Python 2.7, 3.3 and 3.4.  These functions have
existed in the *note codecs: 1c. module (and have been covered by the
regression test suite) since Python 2.4, but were previously only
discoverable through runtime introspection.

Unlike the convenience methods on *note str: 178, *note bytes: 179. and
*note bytearray: 17a, the *note codecs: 1c. convenience functions
support arbitrary codecs in both Python 2 and Python 3, rather than
being limited to Unicode text encodings (in Python 3) or ‘basestring’
<-> ‘basestring’ conversions (in Python 2).

In Python 3.4, the interpreter is able to identify the known non-text
encodings provided in the standard library and direct users towards
these general purpose convenience functions when appropriate:

     >>> b"abcdef".decode("hex")
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     LookupError: 'hex' is not a text encoding; use codecs.decode() to handle arbitrary codecs

     >>> "hello".encode("rot13")
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     LookupError: 'rot13' is not a text encoding; use codecs.encode() to handle arbitrary codecs

     >>> open("foo.txt", encoding="hex")
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     LookupError: 'hex' is not a text encoding; use codecs.open() to handle arbitrary codecs

In a related change, whenever it is feasible without breaking backwards
compatibility, exceptions raised during encoding and decoding operations
are wrapped in a chained exception of the same type that mentions the
name of the codec responsible for producing the error:

     >>> import codecs

     >>> codecs.decode(b"abcdefgh", "hex")
     Traceback (most recent call last):
       File "/usr/lib/python3.4/encodings/hex_codec.py", line 20, in hex_decode
         return (binascii.a2b_hex(input), len(input))
     binascii.Error: Non-hexadecimal digit found

     The above exception was the direct cause of the following exception:

     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     binascii.Error: decoding with 'hex' codec failed (Error: Non-hexadecimal digit found)

     >>> codecs.encode("hello", "bz2")
     Traceback (most recent call last):
       File "/usr/lib/python3.4/encodings/bz2_codec.py", line 17, in bz2_encode
         return (bz2.compress(input), len(input))
       File "/usr/lib/python3.4/bz2.py", line 498, in compress
         return comp.compress(data) + comp.flush()
     TypeError: 'str' does not support the buffer interface

     The above exception was the direct cause of the following exception:

     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     TypeError: encoding with 'bz2' codec failed (TypeError: 'str' does not support the buffer interface)

Finally, as the examples above show, these improvements have permitted
the restoration of the convenience aliases for the non-Unicode codecs
that were themselves restored in Python 3.2.  This means that encoding
binary data to and from its hexadecimal representation (for example) can
now be written as:

     >>> from codecs import encode, decode
     >>> encode(b"hello", "hex")
     b'68656c6c6f'
     >>> decode(b"68656c6c6f", "hex")
     b'hello'

The binary and text transforms provided in the standard library are
detailed in *note Binary Transforms: 17d. and *note Text Transforms:
17e.

(Contributed by Nick Coghlan in issue 7475(1), issue 17827(2), issue
17828(3) and issue 19619(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7475

   (2) https://bugs.python.org/issue17827

   (3) https://bugs.python.org/issue17828

   (4) https://bugs.python.org/issue19619


File: python.info,  Node: PEP 451 A ModuleSpec Type for the Import System,  Next: Other Language Changes,  Prev: Improvements to Codec Handling,  Up: New Features

1.1.2.6 PEP 451: A ModuleSpec Type for the Import System
........................................................

PEP 451(1) provides an encapsulation of the information about a module
that the import machinery will use to load it (that is, a module
specification).  This helps simplify both the import implementation and
several import-related APIs.  The change is also a stepping stone for
several future import-related improvements(2).

The public-facing changes from the PEP are entirely backward-compatible.
Furthermore, they should be transparent to everyone but importer
authors.  Key finder and loader methods have been deprecated, but they
will continue working.  New importers should use the new methods
described in the PEP. Existing importers should be updated to implement
the new methods.  See the *note Deprecated: 180. section for a list of
methods that should be replaced and their replacements.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0451

   (2) 
https://mail.python.org/pipermail/python-dev/2013-November/130111.html


File: python.info,  Node: Other Language Changes,  Prev: PEP 451 A ModuleSpec Type for the Import System,  Up: New Features

1.1.2.7 Other Language Changes
..............................

Some smaller changes made to the core Python language are:

   * Unicode database updated to UCD version 6.3.

   * *note min(): 182. and *note max(): 183. now accept a `default'
     keyword-only argument that can be used to specify the value they
     return if the iterable they are evaluating has no elements.
     (Contributed by Julian Berman in issue 18111(1).)

   * Module objects are now *note weakref: 121.’able.

   * Module ‘__file__’ attributes (and related values) should now always
     contain absolute paths by default, with the sole exception of
     ‘__main__.__file__’ when a script has been executed directly using
     a relative path.  (Contributed by Brett Cannon in issue 18416(2).)

   * All the UTF-* codecs (except UTF-7) now reject surrogates during
     both encoding and decoding unless the ‘surrogatepass’ error handler
     is used, with the exception of the UTF-16 decoder (which accepts
     valid surrogate pairs) and the UTF-16 encoder (which produces them
     while encoding non-BMP characters).  (Contributed by Victor
     Stinner, Kang-Hao (Kenny) Lu and Serhiy Storchaka in issue
     12892(3).)

   * New German EBCDIC *note codec: 184. ‘cp273’.  (Contributed by
     Michael Bierenfeld and Andrew Kuchling in issue 1097797(4).)

   * New Ukrainian *note codec: 184. ‘cp1125’.  (Contributed by Serhiy
     Storchaka in issue 19668(5).)

   * *note bytes: 179.join() and *note bytearray: 17a.join() now accept
     arbitrary buffer objects as arguments.  (Contributed by Antoine
     Pitrou in issue 15958(6).)

   * The *note int: 185. constructor now accepts any object that has an
     ‘__index__’ method for its `base' argument.  (Contributed by Mark
     Dickinson in issue 16772(7).)

   * Frame objects now have a *note clear(): 186. method that clears all
     references to local variables from the frame.  (Contributed by
     Antoine Pitrou in issue 17934(8).)

   * *note memoryview: 187. is now registered as a *note Sequence: 1f,
     and supports the *note reversed(): 188. builtin.  (Contributed by
     Nick Coghlan and Claudiu Popa in issue 18690(9) and issue
     19078(10).)

   * Signatures reported by *note help(): 157. have been modified and
     improved in several cases as a result of the introduction of
     Argument Clinic and other changes to the *note inspect: 9d. and
     *note pydoc: d5. modules.

   * *note __length_hint__(): 189. is now part of the formal language
     specification (see PEP 424(11)).  (Contributed by Armin Ronacher in
     issue 16148(12).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18111

   (2) https://bugs.python.org/issue18416

   (3) https://bugs.python.org/issue12892

   (4) https://bugs.python.org/issue1097797

   (5) https://bugs.python.org/issue19668

   (6) https://bugs.python.org/issue15958

   (7) https://bugs.python.org/issue16772

   (8) https://bugs.python.org/issue17934

   (9) https://bugs.python.org/issue18690

   (10) https://bugs.python.org/issue19078

   (11) https://www.python.org/dev/peps/pep-0424

   (12) https://bugs.python.org/issue16148


File: python.info,  Node: New Modules,  Next: Improved Modules,  Prev: New Features,  Up: What's New In Python 3 4

1.1.3 New Modules
-----------------

* Menu:

* asyncio:: 
* ensurepip:: 
* enum:: 
* pathlib:: 
* selectors:: 
* statistics:: 
* tracemalloc:: 


File: python.info,  Node: asyncio,  Next: ensurepip,  Up: New Modules

1.1.3.1 asyncio
...............

The new *note asyncio: a. module (defined in PEP 3156(1)) provides a
standard pluggable event loop model for Python, providing solid
asynchronous IO support in the standard library, and making it easier
for other event loop implementations to interoperate with the standard
library and each other.

For Python 3.4, this module is considered a *note provisional API: 18c.

See also
........

PEP 3156(2) – Asynchronous IO Support Rebooted: the "asyncio" Module

     PEP written and implementation led by Guido van Rossum.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3156

   (2) https://www.python.org/dev/peps/pep-3156


File: python.info,  Node: ensurepip,  Next: enum,  Prev: asyncio,  Up: New Modules

1.1.3.2 ensurepip
.................

The new *note ensurepip: 78. module is the primary infrastructure for
the PEP 453(1) implementation.  In the normal course of events end users
will not need to interact with this module, but it can be used to
manually bootstrap ‘pip’ if the automated bootstrapping into an
installation or virtual environment was declined.

*note ensurepip: 78. includes a bundled copy of ‘pip’, up-to-date as of
the first release candidate of the release of CPython with which it
ships (this applies to both maintenance releases and feature releases).
‘ensurepip’ does not access the internet.  If the installation has
Internet access, after ‘ensurepip’ is run the bundled ‘pip’ can be used
to upgrade ‘pip’ to a more recent release than the bundled one.  (Note
that such an upgraded version of ‘pip’ is considered to be a separately
installed package and will not be removed if Python is uninstalled.)

The module is named `ensure'pip because if called when ‘pip’ is already
installed, it does nothing.  It also has an ‘--upgrade’ option that will
cause it to install the bundled copy of ‘pip’ if the existing installed
version of ‘pip’ is older than the bundled copy.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0453


File: python.info,  Node: enum,  Next: pathlib,  Prev: ensurepip,  Up: New Modules

1.1.3.3 enum
............

The new *note enum: 79. module (defined in PEP 435(1)) provides a
standard implementation of enumeration types, allowing other modules
(such as *note socket: ea.) to provide more informative error messages
and better debugging support by replacing opaque integer constants with
backwards compatible enumeration values.

See also
........

PEP 435(2) – Adding an Enum type to the Python standard library

     PEP written by Barry Warsaw, Eli Bendersky and Ethan Furman,
     implemented by Ethan Furman.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0435

   (2) https://www.python.org/dev/peps/pep-0435


File: python.info,  Node: pathlib,  Next: selectors,  Prev: enum,  Up: New Modules

1.1.3.4 pathlib
...............

The new *note pathlib: c4. module offers classes representing filesystem
paths with semantics appropriate for different operating systems.  Path
classes are divided between `pure paths', which provide purely
computational operations without I/O, and `concrete paths', which
inherit from pure paths but also provide I/O operations.

For Python 3.4, this module is considered a *note provisional API: 18c.

See also
........

PEP 428(1) – The pathlib module – object-oriented filesystem paths

     PEP written and implemented by Antoine Pitrou.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0428


File: python.info,  Node: selectors,  Next: statistics,  Prev: pathlib,  Up: New Modules

1.1.3.5 selectors
.................

The new *note selectors: e1. module (created as part of implementing PEP
3156(1)) allows high-level and efficient I/O multiplexing, built upon
the *note select: e0. module primitives.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3156


File: python.info,  Node: statistics,  Next: tracemalloc,  Prev: selectors,  Up: New Modules

1.1.3.6 statistics
..................

The new *note statistics: f0. module (defined in PEP 450(1)) offers some
core statistics functionality directly in the standard library.  This
module supports calculation of the mean, median, mode, variance and
standard deviation of a data series.

See also
........

PEP 450(2) – Adding A Statistics Module To The Standard Library

     PEP written and implemented by Steven D’Aprano

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0450

   (2) https://www.python.org/dev/peps/pep-0450


File: python.info,  Node: tracemalloc,  Prev: statistics,  Up: New Modules

1.1.3.7 tracemalloc
...................

The new *note tracemalloc: 10e. module (defined in PEP 454(1)) is a
debug tool to trace memory blocks allocated by Python.  It provides the
following information:

   * Trace where an object was allocated

   * Statistics on allocated memory blocks per filename and per line
     number: total size, number and average size of allocated memory
     blocks

   * Compute the differences between two snapshots to detect memory
     leaks

See also
........

PEP 454(2) – Add a new tracemalloc module to trace Python memory allocations

     PEP written and implemented by Victor Stinner

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0454

   (2) https://www.python.org/dev/peps/pep-0454


File: python.info,  Node: Improved Modules,  Next: CPython Implementation Changes,  Prev: New Modules,  Up: What's New In Python 3 4

1.1.4 Improved Modules
----------------------

* Menu:

* abc:: 
* aifc:: 
* argparse:: 
* audioop:: 
* base64:: 
* collections:: 
* colorsys:: 
* contextlib:: 
* dbm:: 
* dis:: 
* doctest:: 
* email:: 
* filecmp:: 
* functools:: 
* gc:: 
* glob:: 
* hashlib:: 
* hmac:: 
* html:: 
* http:: 
* importlib:: 
* inspect:: 
* ipaddress:: 
* logging:: 
* marshal:: 
* mmap:: 
* multiprocessing:: 
* operator:: 
* os:: 
* pdb:: 
* pickle:: 
* plistlib:: 
* poplib:: 
* pprint:: 
* pty:: 
* pydoc:: 
* re:: 
* resource:: 
* select:: 
* shelve:: 
* shutil:: 
* smtpd:: 
* smtplib:: 
* socket:: 
* sqlite3:: 
* ssl:: 
* stat:: 
* struct:: 
* subprocess:: 
* sunau:: 
* sys:: 
* tarfile:: 
* textwrap:: 
* threading:: 
* traceback:: 
* types:: 
* urllib:: 
* unittest:: 
* venv:: 
* wave:: 
* weakref:: 
* xml.etree: xml etree. 
* zipfile:: 


File: python.info,  Node: abc,  Next: aifc,  Up: Improved Modules

1.1.4.1 abc
...........

New function *note abc.get_cache_token(): 195. can be used to know when
to invalidate caches that are affected by changes in the object graph.
(Contributed by Łukasz Langa in issue 16832(1).)

New class *note ABC: 196. has *note ABCMeta: 197. as its meta class.
Using ‘ABC’ as a base class has essentially the same effect as
specifying ‘metaclass=abc.ABCMeta’, but is simpler to type and easier to
read.  (Contributed by Bruno Dupuis in issue 16049(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16832

   (2) https://bugs.python.org/issue16049


File: python.info,  Node: aifc,  Next: argparse,  Prev: abc,  Up: Improved Modules

1.1.4.2 aifc
............

The *note getparams(): 199. method now returns a namedtuple rather than
a plain tuple.  (Contributed by Claudiu Popa in issue 17818(1).)

*note aifc.open(): 19a. now supports the context management protocol:
when used in a *note with: 19b. block, the *note close(): 19c. method of
the returned object will be called automatically at the end of the
block.  (Contributed by Serhiy Storchacha in issue 16486(2).)

The *note writeframesraw(): 19d. and *note writeframes(): 19e. methods
now accept any *note bytes-like object: 19f.  (Contributed by Serhiy
Storchaka in issue 8311(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17818

   (2) https://bugs.python.org/issue16486

   (3) https://bugs.python.org/issue8311


File: python.info,  Node: argparse,  Next: audioop,  Prev: aifc,  Up: Improved Modules

1.1.4.3 argparse
................

The *note FileType: 1a1. class now accepts `encoding' and `errors'
arguments, which are passed through to *note open(): 1a2.  (Contributed
by Lucas Maystre in issue 11175(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11175


File: python.info,  Node: audioop,  Next: base64,  Prev: argparse,  Up: Improved Modules

1.1.4.4 audioop
...............

*note audioop: d. now supports 24-bit samples.  (Contributed by Serhiy
Storchaka in issue 12866(1).)

New *note byteswap(): 1a4. function converts big-endian samples to
little-endian and vice versa.  (Contributed by Serhiy Storchaka in issue
19641(2).)

All *note audioop: d. functions now accept any *note bytes-like object:
19f.  Strings are not accepted: they didn’t work before, now they raise
an error right away.  (Contributed by Serhiy Storchaka in issue
16685(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12866

   (2) https://bugs.python.org/issue19641

   (3) https://bugs.python.org/issue16685


File: python.info,  Node: base64,  Next: collections,  Prev: audioop,  Up: Improved Modules

1.1.4.5 base64
..............

The encoding and decoding functions in *note base64: e. now accept any
*note bytes-like object: 19f. in cases where it previously required a
*note bytes: 179. or *note bytearray: 17a. instance.  (Contributed by
Nick Coghlan in issue 17839(1).)

New functions *note a85encode(): 1a6, *note a85decode(): 1a7, *note
b85encode(): 1a8, and *note b85decode(): 1a9. provide the ability to
encode and decode binary data from and to ‘Ascii85’ and the
git/mercurial ‘Base85’ formats, respectively.  The ‘a85’ functions have
options that can be used to make them compatible with the variants of
the ‘Ascii85’ encoding, including the Adobe variant.  (Contributed by
Martin Morrison, the Mercurial project, Serhiy Storchaka, and Antoine
Pitrou in issue 17618(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17839

   (2) https://bugs.python.org/issue17618


File: python.info,  Node: collections,  Next: colorsys,  Prev: base64,  Up: Improved Modules

1.1.4.6 collections
...................

The *note ChainMap.new_child(): 1ab. method now accepts an `m' argument
specifying the child map to add to the chain.  This allows an existing
mapping and/or a custom mapping type to be used for the child.
(Contributed by Vinay Sajip in issue 16613(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16613


File: python.info,  Node: colorsys,  Next: contextlib,  Prev: collections,  Up: Improved Modules

1.1.4.7 colorsys
................

The number of digits in the coefficients for the RGB — YIQ conversions
have been expanded so that they match the FCC NTSC versions.  The change
in results should be less than 1% and may better match results found
elsewhere.  (Contributed by Brian Landers and Serhiy Storchaka in issue
14323(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14323


File: python.info,  Node: contextlib,  Next: dbm,  Prev: colorsys,  Up: Improved Modules

1.1.4.8 contextlib
..................

The new *note contextlib.suppress: 1ae. context manager helps to clarify
the intent of code that deliberately suppresses exceptions from a single
statement.  (Contributed by Raymond Hettinger in issue 15806(1) and Zero
Piraeus in issue 19266(2).)

The new *note contextlib.redirect_stdout(): 1af. context manager makes
it easier for utility scripts to handle inflexible APIs that write their
output to *note sys.stdout: 1b0. and don’t provide any options to
redirect it.  Using the context manager, the *note sys.stdout: 1b0.
output can be redirected to any other stream or, in conjunction with
*note io.StringIO: 1b1, to a string.  The latter can be especially
useful, for example, to capture output from a function that was written
to implement a command line interface.  It is recommended only for
utility scripts because it affects the global state of *note sys.stdout:
1b0.  (Contributed by Raymond Hettinger in issue 15805(3).)

The *note contextlib: 24. documentation has also been updated to include
a *note discussion: 1b2. of the differences between single use, reusable
and reentrant context managers.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15806

   (2) https://bugs.python.org/issue19266

   (3) https://bugs.python.org/issue15805


File: python.info,  Node: dbm,  Next: dis,  Prev: contextlib,  Up: Improved Modules

1.1.4.9 dbm
...........

*note dbm.open(): 1b4. objects now support the context management
protocol.  When used in a *note with: 19b. statement, the ‘close’ method
of the database object will be called automatically at the end of the
block.  (Contributed by Claudiu Popa and Nick Coghlan in issue
19282(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19282


File: python.info,  Node: dis,  Next: doctest,  Prev: dbm,  Up: Improved Modules

1.1.4.10 dis
............

Functions *note show_code(): 1b6, *note dis(): 1b7, *note distb(): 1b8,
and *note disassemble(): 1b9. now accept a keyword-only `file' argument
that controls where they write their output.

The *note dis: 36. module is now built around an *note Instruction: 1ba.
class that provides object oriented access to the details of each
individual bytecode operation.

A new method, *note get_instructions(): 1bb, provides an iterator that
emits the Instruction stream for a given piece of Python code.  Thus it
is now possible to write a program that inspects and manipulates a
bytecode object in ways different from those provided by the *note dis:
36. module itself.  For example:

     >>> import dis
     >>> for instr in dis.get_instructions(lambda x: x + 1):
     ...     print(instr.opname)
     LOAD_FAST
     LOAD_CONST
     BINARY_ADD
     RETURN_VALUE

The various display tools in the *note dis: 36. module have been
rewritten to use these new components.

In addition, a new application-friendly class *note Bytecode: 1bc.
provides an object-oriented API for inspecting bytecode in both in
human-readable form and for iterating over instructions.  The *note
Bytecode: 1bc. constructor takes the same arguments that
‘get_instruction()’ does (plus an optional `current_offset'), and the
resulting object can be iterated to produce *note Instruction: 1ba.
objects.  But it also has a *note dis: 1bd. method, equivalent to
calling *note dis: 1b7. on the constructor argument, but returned as a
multi-line string:

     >>> bytecode = dis.Bytecode(lambda x: x +1, current_offset=3)
     >>> for instr in bytecode:
     ...     print('{} ({})'.format(instr.opname, instr.opcode))
     LOAD_FAST (124)
     LOAD_CONST (100)
     BINARY_ADD (23)
     RETURN_VALUE (83)
     >>> bytecode.dis().splitlines()       # doctest: +NORMALIZE_WHITESPACE
     ['  1           0 LOAD_FAST                0 (x)',
      '      -->     3 LOAD_CONST               1 (1)',
      '              6 BINARY_ADD',
      '              7 RETURN_VALUE']

*note Bytecode: 1bc. also has a class method, *note from_traceback():
1be, that provides the ability to manipulate a traceback (that is,
‘print(Bytecode.from_traceback(tb).dis())’ is equivalent to
‘distb(tb)’).

(Contributed by Nick Coghlan, Ryan Kelly and Thomas Kluyver in issue
11816(1) and Claudiu Popa in issue 17916(2).)

New function *note stack_effect(): 1bf. computes the effect on the
Python stack of a given opcode and argument, information that is not
otherwise available.  (Contributed by Larry Hastings in issue 19722(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11816

   (2) https://bugs.python.org/issue17916

   (3) https://bugs.python.org/issue19722


File: python.info,  Node: doctest,  Next: email,  Prev: dis,  Up: Improved Modules

1.1.4.11 doctest
................

A new *note option flag: 1c1, *note FAIL_FAST: 1c2, halts test running
as soon as the first failure is detected.  (Contributed by R. David
Murray and Daniel Urban in issue 16522(1).)

The *note doctest: 65. command line interface now uses *note argparse:
6, and has two new options, ‘-o’ and ‘-f’.  ‘-o’ allows *note doctest
options: 1c1. to be specified on the command line, and ‘-f’ is a
shorthand for ‘-o FAIL_FAST’ (to parallel the similar option supported
by the *note unittest: 114. CLI). (Contributed by R. David Murray in
issue 11390(2).)

*note doctest: 65. will now find doctests in extension module ‘__doc__’
strings.  (Contributed by Zachary Ware in issue 3158(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16522

   (2) https://bugs.python.org/issue11390

   (3) https://bugs.python.org/issue3158


File: python.info,  Node: email,  Next: filecmp,  Prev: doctest,  Up: Improved Modules

1.1.4.12 email
..............

*note as_string(): 1c4. now accepts a `policy' argument to override the
default policy of the message when generating a string representation of
it.  This means that ‘as_string’ can now be used in more circumstances,
instead of having to create and use a *note generator: 6c. in order to
pass formatting parameters to its ‘flatten’ method.  (Contributed by R.
David Murray in issue 18600(1).)

New method *note as_bytes(): 1c5. added to produce a bytes
representation of the message in a fashion similar to how ‘as_string’
produces a string representation.  It does not accept the `maxheaderlen'
argument, but does accept the `unixfrom' and `policy' arguments.  The
*note Message: 155. *note __bytes__(): 1c6. method calls it, meaning
that ‘bytes(mymsg)’ will now produce the intuitive result: a bytes
object containing the fully formatted message.  (Contributed by R. David
Murray in issue 18600(2).)

The *note Message.set_param(): 1c7. message now accepts a `replace'
keyword argument.  When specified, the associated header will be updated
without changing its location in the list of headers.  For backward
compatibility, the default is ‘False’.  (Contributed by R. David Murray
in issue 18891(3).)  A pair of new subclasses of *note Message: 155.
have been added (*note EmailMessage: 1c8. and *note MIMEPart: 1c9.),
along with a new sub-module, *note contentmanager: 69. and a new *note
policy: 73. attribute *note content_manager: 1ca.  All documentation is
currently in the new module, which is being added as part of email’s new
*note provisional API: 18c.  These classes provide a number of new
methods that make extracting content from and inserting content into
email messages much easier.  For details, see the *note contentmanager:
69. documentation and the *note Examples using the Provisional API: 1cb.
These API additions complete the bulk of the work that was planned as
part of the email6 project.  The currently provisional API is scheduled
to become final in Python 3.5 (possibly with a few minor additions in
the area of error handling).  (Contributed by R. David Murray in issue
18891(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18600

   (2) https://bugs.python.org/issue18600

   (3) https://bugs.python.org/issue18891

   (4) https://bugs.python.org/issue18891


File: python.info,  Node: filecmp,  Next: functools,  Prev: email,  Up: Improved Modules

1.1.4.13 filecmp
................

A new *note clear_cache(): 1cd. function provides the ability to clear
the *note filecmp: 7d. comparison cache, which uses *note os.stat():
1ce. information to determine if the file has changed since the last
compare.  This can be used, for example, if the file might have been
changed and re-checked in less time than the resolution of a particular
filesystem’s file modification time field.  (Contributed by Mark Levitt
in issue 18149(1).)

New module attribute *note DEFAULT_IGNORES: 1cf. provides the list of
directories that are used as the default value for the `ignore'
parameter of the *note dircmp(): 1d0. function.  (Contributed by Eli
Bendersky in issue 15442(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18149

   (2) https://bugs.python.org/issue15442


File: python.info,  Node: functools,  Next: gc,  Prev: filecmp,  Up: Improved Modules

1.1.4.14 functools
..................

The new *note partialmethod(): 1d2. descriptor brings partial argument
application to descriptors, just as *note partial(): 1d3. provides for
normal callables.  The new descriptor also makes it easier to get
arbitrary callables (including *note partial(): 1d3. instances) to
behave like normal instance methods when included in a class definition.
(Contributed by Alon Horev and Nick Coghlan in issue 4331(1).)  The new
*note singledispatch(): 1d4. decorator brings support for
single-dispatch generic functions to the Python standard library.  Where
object oriented programming focuses on grouping multiple operations on a
common set of data into a class, a generic function focuses on grouping
multiple implementations of an operation that allows it to work with
`different' kinds of data.

See also
........

PEP 443(2) – Single-dispatch generic functions

     PEP written and implemented by Łukasz Langa.

*note total_ordering(): 1d5. now supports a return value of *note
NotImplemented: 1d6. from the underlying comparison function.
(Contributed by Katie Miller in issue 10042(3).)

A pure-python version of the *note partial(): 1d3. function is now in
the stdlib; in CPython it is overridden by the C accelerated version,
but it is available for other implementations to use.  (Contributed by
Brian Thorne in issue 12428(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4331

   (2) https://www.python.org/dev/peps/pep-0443

   (3) https://bugs.python.org/issue10042

   (4) https://bugs.python.org/issue12428


File: python.info,  Node: gc,  Next: glob,  Prev: functools,  Up: Improved Modules

1.1.4.15 gc
...........

New function *note get_stats(): 1d8. returns a list of three
per-generation dictionaries containing the collections statistics since
interpreter startup.  (Contributed by Antoine Pitrou in issue 16351(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16351


File: python.info,  Node: glob,  Next: hashlib,  Prev: gc,  Up: Improved Modules

1.1.4.16 glob
.............

A new function *note escape(): 1da. provides a way to escape special
characters in a filename so that they do not become part of the globbing
expansion but are instead matched literally.  (Contributed by Serhiy
Storchaka in issue 8402(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8402


File: python.info,  Node: hashlib,  Next: hmac,  Prev: glob,  Up: Improved Modules

1.1.4.17 hashlib
................

A new *note hashlib.pbkdf2_hmac(): 159. function provides the PKCS#5
password-based key derivation function 2(1).  (Contributed by Christian
Heimes in issue 18582(2).)

The *note name: 1dc. attribute of *note hashlib: 8c. hash objects is now
a formally supported interface.  It has always existed in CPython’s
*note hashlib: 8c. (although it did not return lower case names for all
supported hashes), but it was not a public interface and so some other
Python implementations have not previously supported it.  (Contributed
by Jason R. Coombs in issue 18532(3).)

   ---------- Footnotes ----------

   (1) http://en.wikipedia.org/wiki/PBKDF2

   (2) https://bugs.python.org/issue18582

   (3) https://bugs.python.org/issue18532


File: python.info,  Node: hmac,  Next: html,  Prev: hashlib,  Up: Improved Modules

1.1.4.18 hmac
.............

*note hmac: 8e. now accepts ‘bytearray’ as well as ‘bytes’ for the `key'
argument to the *note new(): 1de. function, and the `msg' parameter to
both the *note new(): 1de. function and the *note update(): 1df. method
now accepts any type supported by the *note hashlib: 8c. module.
(Contributed by Jonas Borgström in issue 18240(1).)

The `digestmod' argument to the *note hmac.new(): 1de. function may now
be any hash digest name recognized by *note hashlib: 8c.  In addition,
the current behavior in which the value of `digestmod' defaults to ‘MD5’
is deprecated: in a future version of Python there will be no default
value.  (Contributed by Christian Heimes in issue 17276(2).)

With the addition of *note block_size: 1e0. and *note name: 1e1.
attributes (and the formal documentation of the *note digest_size: 1e2.
attribute), the *note hmac: 8e. module now conforms fully to the PEP
247(3) API. (Contributed by Christian Heimes in issue 18775(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18240

   (2) https://bugs.python.org/issue17276

   (3) https://www.python.org/dev/peps/pep-0247

   (4) https://bugs.python.org/issue18775


File: python.info,  Node: html,  Next: http,  Prev: hmac,  Up: Improved Modules

1.1.4.19 html
.............

New function *note unescape(): 1e4. function converts HTML5 character
references to the corresponding Unicode characters.  (Contributed by
Ezio Melotti in issue 2927(1).)

*note HTMLParser: 1e5. accepts a new keyword argument `convert_charrefs'
that, when ‘True’, automatically converts all character references.  For
backward-compatibility, its value defaults to ‘False’, but it will
change to ‘True’ in a future version of Python, so you are invited to
set it explicitly and update your code to use this new feature.
(Contributed by Ezio Melotti in issue 13633(2).)

The `strict' argument of *note HTMLParser: 1e5. is now deprecated.
(Contributed by Ezio Melotti in issue 15114(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2927

   (2) https://bugs.python.org/issue13633

   (3) https://bugs.python.org/issue15114


File: python.info,  Node: http,  Next: importlib,  Prev: html,  Up: Improved Modules

1.1.4.20 http
.............

*note send_error(): 1e7. now accepts an optional additional `explain'
parameter which can be used to provide an extended error description,
overriding the hardcoded default if there is one.  This extended error
description will be formatted using the ‘error_message_format’ attribute
and sent as the body of the error response.  (Contributed by Karl Cow in
issue 12921(1).)

The *note http.server: 95. *note command line interface: 1e8. now has a
‘-b/--bind’ option that causes the server to listen on a specific
address.  (Contributed by Malte Swart in issue 17764(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12921

   (2) https://bugs.python.org/issue17764


File: python.info,  Node: importlib,  Next: inspect,  Prev: http,  Up: Improved Modules

1.1.4.21 importlib
..................

The *note InspectLoader: 1ea. ABC defines a new method, *note
source_to_code(): 1eb. that accepts source data and a path and returns a
code object.  The default implementation is equivalent to ‘compile(data,
path, 'exec', dont_inherit=True)’.  (Contributed by Eric Snow and Brett
Cannon in issue 15627(1).)

*note InspectLoader: 1ea. also now has a default implementation for the
*note get_code(): 1ec. method.  However, it will normally be desirable
to override the default implementation for performance reasons.
(Contributed by Brett Cannon in issue 18072(2).)

The *note reload(): 1ed. function has been moved from *note imp: 98. to
*note importlib: 99. as part of the *note imp: 98. module deprecation.
(Contributed by Berker Peksag in issue 18193(3).)

*note importlib.util: 9c. now has a *note MAGIC_NUMBER: 1ee. attribute
providing access to the bytecode version number.  This replaces the
*note get_magic(): 1ef. function in the deprecated *note imp: 98.
module.  (Contributed by Brett Cannon in issue 18192(4).)

New *note importlib.util: 9c. functions *note cache_from_source(): 1f0.
and *note source_from_cache(): 1f1. replace the same-named functions in
the deprecated *note imp: 98. module.  (Contributed by Brett Cannon in
issue 18194(5).)

The *note importlib: 99. bootstrap ‘NamespaceLoader’ now conforms to the
*note InspectLoader: 1ea. ABC, which means that ‘runpy’ and ‘python -m’
can now be used with namespace packages.  (Contributed by Brett Cannon
in issue 18058(6).)

*note importlib.util: 9c. has a new function *note decode_source(): 1f2.
that decodes source from bytes using universal newline processing.  This
is useful for implementing *note InspectLoader.get_source(): 1f3.
methods.

*note importlib.machinery.ExtensionFileLoader: 1f4. now has a *note
get_filename(): 1f5. method.  This was inadvertently omitted in the
original implementation.  (Contributed by Eric Snow in issue 19152(7).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15627

   (2) https://bugs.python.org/issue18072

   (3) https://bugs.python.org/issue18193

   (4) https://bugs.python.org/issue18192

   (5) https://bugs.python.org/issue18194

   (6) https://bugs.python.org/issue18058

   (7) https://bugs.python.org/issue19152


File: python.info,  Node: inspect,  Next: ipaddress,  Prev: importlib,  Up: Improved Modules

1.1.4.22 inspect
................

The *note inspect: 9d. module now offers a basic *note command line
interface: 1f7. to quickly display source code and other information for
modules, classes and functions.  (Contributed by Claudiu Popa and Nick
Coghlan in issue 18626(1).)

*note unwrap(): 1f8. makes it easy to unravel wrapper function chains
created by *note functools.wraps(): 1f9. (and any other API that sets
the ‘__wrapped__’ attribute on a wrapper function).  (Contributed by
Daniel Urban, Aaron Iles and Nick Coghlan in issue 13266(2).)

As part of the implementation of the new *note enum: 79. module, the
*note inspect: 9d. module now has substantially better support for
custom ‘__dir__’ methods and dynamic class attributes provided through
metaclasses.  (Contributed by Ethan Furman in issue 18929(3) and issue
19030(4).)

*note getfullargspec(): 1fa. and *note getargspec(): 1fb. now use the
*note signature(): 1fc. API. This allows them to support a much broader
range of callables, including those with ‘__signature__’ attributes,
those with metadata provided by argument clinic, *note
functools.partial(): 1d3. objects and more.  Note that, unlike *note
signature(): 1fc, these functions still ignore ‘__wrapped__’ attributes,
and report the already bound first argument for bound methods, so it is
still necessary to update your code to use *note signature(): 1fc.
directly if those features are desired.  (Contributed by Yury Selivanov
in issue 17481(5).)

*note signature(): 1fc. now supports duck types of CPython functions,
which adds support for functions compiled with Cython.  (Contributed by
Stefan Behnel and Yury Selivanov in issue 17159(6).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18626

   (2) https://bugs.python.org/issue13266

   (3) https://bugs.python.org/issue18929

   (4) https://bugs.python.org/issue19030

   (5) https://bugs.python.org/issue17481

   (6) https://bugs.python.org/issue17159


File: python.info,  Node: ipaddress,  Next: logging,  Prev: inspect,  Up: Improved Modules

1.1.4.23 ipaddress
..................

*note ipaddress: 9f. was added to the standard library in Python 3.3 as
a *note provisional API: 18c.  With the release of Python 3.4, this
qualification has been removed: *note ipaddress: 9f. is now considered a
stable API, covered by the normal standard library requirements to
maintain backwards compatibility.

A new *note is_global: 1fe. property is ‘True’ if an address is globally
routeable.  (Contributed by Peter Moody in issue 17400(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17400


File: python.info,  Node: logging,  Next: marshal,  Prev: ipaddress,  Up: Improved Modules

1.1.4.24 logging
................

The *note TimedRotatingFileHandler: 200. has a new `atTime' parameter
that can be used to specify the time of day when rollover should happen.
(Contributed by Ronald Oussoren in issue 9556(1).)

*note SocketHandler: 201. and *note DatagramHandler: 202. now support
Unix domain sockets (by setting `port' to ‘None’).  (Contributed by
Vinay Sajip in commit ce46195b56a9.)

*note fileConfig(): 203. now accepts a *note
configparser.RawConfigParser: 204. subclass instance for the `fname'
parameter.  This facilitates using a configuration file when logging
configuration is just a part of the overall application configuration,
or where the application modifies the configuration before passing it to
*note fileConfig(): 203.  (Contributed by Vinay Sajip in issue
16110(2).)

Logging configuration data received from a socket via the *note
logging.config.listen(): 205. function can now be validated before being
processed by supplying a verification function as the argument to the
new `verify' keyword argument.  (Contributed by Vinay Sajip in issue
15452(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9556

   (2) https://bugs.python.org/issue16110

   (3) https://bugs.python.org/issue15452


File: python.info,  Node: marshal,  Next: mmap,  Prev: logging,  Up: Improved Modules

1.1.4.25 marshal
................

The default *note marshal: ad. version has been bumped to 3.  The code
implementing the new version restores the Python2 behavior of recording
only one copy of interned strings and preserving the interning on
deserialization, and extends this "one copy" ability to any object type
(including handling recursive references).  This reduces both the size
of ‘.pyc’ files and the amount of memory a module occupies in memory
when it is loaded from a ‘.pyc’ (or ‘.pyo’) file.  (Contributed by
Kristján Valur Jónsson in issue 16475(1), with additional speedups by
Antoine Pitrou in issue 19219(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16475

   (2) https://bugs.python.org/issue19219


File: python.info,  Node: mmap,  Next: multiprocessing,  Prev: marshal,  Up: Improved Modules

1.1.4.26 mmap
.............

mmap objects can now be *note weakref: 121.ed.  (Contributed by Valerie
Lambert in issue 4885(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4885


File: python.info,  Node: multiprocessing,  Next: operator,  Prev: mmap,  Up: Improved Modules

1.1.4.27 multiprocessing
........................

On Unix two new *note start methods: 209, (‘spawn’ and ‘forkserver’,
have been added for starting processes using *note multiprocessing: b4.
These make the mixing of processes with threads more robust, and the
‘spawn’ method matches the semantics that multiprocessing has always
used on Windows.  New function *note get_all_start_methods(): 20a.
reports all start methods available on the platform, *note
get_start_method(): 20b. reports the current start method, and *note
set_start_method(): 20c. sets the start method.  (Contributed by Richard
Oudkerk in issue 8713(1).)

*note multiprocessing: b4. also now has the concept of a ‘context’,
which determines how child processes are created.  New function *note
get_context(): 20d. returns a context that uses a specified start
method.  It has the same API as the *note multiprocessing: b4. module
itself, so you can use it to create *note Pool: 20e.s and other objects
that will operate within that context.  This allows a framework and an
application or different parts of the same application to use
multiprocessing without interfering with each other.  (Contributed by
Richard Oudkerk in issue 18999(2).)

Except when using the old `fork' start method, child processes no longer
inherit unneeded handles/file descriptors from their parents (part of
issue 8713(3)).

*note multiprocessing: b4. now relies on *note runpy: de. (which
implements the ‘-m’ switch) to initialise ‘__main__’ appropriately in
child processes when using the ‘spawn’ or ‘forkserver’ start methods.
This resolves some edge cases where combining multiprocessing, the ‘-m’
command line switch, and explicit relative imports could cause obscure
failures in child processes.  (Contributed by Nick Coghlan in issue
19946(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8713

   (2) https://bugs.python.org/issue18999

   (3) https://bugs.python.org/issue8713

   (4) https://bugs.python.org/issue19946


File: python.info,  Node: operator,  Next: os,  Prev: multiprocessing,  Up: Improved Modules

1.1.4.28 operator
.................

New function *note length_hint(): 210. provides an implementation of the
specification for how the *note __length_hint__(): 189. special method
should be used, as part of the PEP 424(1) formal specification of this
language feature.  (Contributed by Armin Ronacher in issue 16148(2).)

There is now a pure-python version of the *note operator: be. module
available for reference and for use by alternate implementations of
Python.  (Contributed by Zachary Ware in issue 16694(3).)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0424

   (2) https://bugs.python.org/issue16148

   (3) https://bugs.python.org/issue16694


File: python.info,  Node: os,  Next: pdb,  Prev: operator,  Up: Improved Modules

1.1.4.29 os
...........

There are new functions to get and set the *note inheritable flag: 170.
of a file descriptor (*note os.get_inheritable(): 171, *note
os.set_inheritable(): 172.) or a Windows handle (*note
os.get_handle_inheritable(): 173, *note os.set_handle_inheritable():
174.).

New function *note cpu_count(): 212. reports the number of CPUs
available on the platform on which Python is running (or ‘None’ if the
count can’t be determined).  The *note multiprocessing.cpu_count(): 213.
function is now implemented in terms of this function).  (Contributed by
Trent Nelson, Yogesh Chaudhari, Victor Stinner, and Charles-François
Natali in issue 17914(1).)

*note os.path.samestat(): 214. is now available on the Windows platform
(and the *note os.path.samefile(): 215. implementation is now shared
between Unix and Windows).  (Contributed by Brian Curtin in issue
11939(2).)

*note os.path.ismount(): 216. now recognizes volumes mounted below a
drive root on Windows.  (Contributed by Tim Golden in issue 9035(3).)

*note os.open(): 217. supports two new flags on platforms that provide
them, *note O_PATH: 218. (un-opened file descriptor), and *note
O_TMPFILE: 219. (unnamed temporary file; as of 3.4.0 release available
only on Linux systems with a kernel version of 3.11 or newer that have
uapi headers).  (Contributed by Christian Heimes in issue 18673(4) and
Benjamin Peterson, respectively.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17914

   (2) https://bugs.python.org/issue11939

   (3) https://bugs.python.org/issue9035

   (4) https://bugs.python.org/issue18673


File: python.info,  Node: pdb,  Next: pickle,  Prev: os,  Up: Improved Modules

1.1.4.30 pdb
............

*note pdb: c5. has been enhanced to handle generators, *note yield: 21b,
and ‘yield from’ in a more useful fashion.  This is especially helpful
when debugging *note asyncio: a. based programs.  (Contributed by Andrew
Svetlov and Xavier de Gaye in issue 16596(1).)

The ‘print’ command has been removed from *note pdb: c5, restoring
access to the Python *note print(): 21c. function from the pdb command
line.  Python2’s ‘pdb’ did not have a ‘print’ command; instead, entering
‘print’ executed the ‘print’ statement.  In Python3 ‘print’ was
mistakenly made an alias for the pdb *note p: 21d. command.  ‘p’,
however, prints the ‘repr’ of its argument, not the ‘str’ like the
Python2 ‘print’ command did.  Worse, the Python3 ‘pdb print’ command
shadowed the Python3 ‘print’ function, making it inaccessible at the
‘pdb’ prompt.  (Contributed by Connor Osborn in issue 18764(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16596

   (2) https://bugs.python.org/issue18764


File: python.info,  Node: pickle,  Next: plistlib,  Prev: pdb,  Up: Improved Modules

1.1.4.31 pickle
...............

*note pickle: c6. now supports (but does not use by default) a new
pickle protocol, protocol 4.  This new protocol addresses a number of
issues that were present in previous protocols, such as the
serialization of nested classes, very large strings and containers, and
classes whose *note __new__(): 21f. method takes keyword-only arguments.
It also provides some efficiency improvements.

See also
........

PEP 3154(1) – Pickle protocol 4

     PEP written by Antoine Pitrou and implemented by Alexandre
     Vassalotti.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3154


File: python.info,  Node: plistlib,  Next: poplib,  Prev: pickle,  Up: Improved Modules

1.1.4.32 plistlib
.................

*note plistlib: cb. now has an API that is similar to the standard
pattern for stdlib serialization protocols, with new *note load(): 221,
*note dump(): 222, *note loads(): 223, and *note dumps(): 224.
functions.  (The older API is now deprecated.)  In addition to the
already supported XML plist format (*note FMT_XML: 225.), it also now
supports the binary plist format (*note FMT_BINARY: 226.).  (Contributed
by Ronald Oussoren and others in issue 14455(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14455


File: python.info,  Node: poplib,  Next: pprint,  Prev: plistlib,  Up: Improved Modules

1.1.4.33 poplib
...............

Two new methods have been added to *note poplib: cc.: *note capa(): 228,
which returns the list of capabilities advertised by the POP server, and
*note stls(): 229, which switches a clear-text POP3 session into an
encrypted POP3 session if the POP server supports it.  (Contributed by
Lorenzo Catucci in issue 4473(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4473


File: python.info,  Node: pprint,  Next: pty,  Prev: poplib,  Up: Improved Modules

1.1.4.34 pprint
...............

The *note pprint: ce. module’s *note PrettyPrinter: 22b. class and its
*note pformat(): 22c, and *note pprint(): 22d. functions have a new
option, `compact', that controls how the output is formatted.  Currently
setting `compact' to ‘True’ means that sequences will be printed with as
many sequence elements as will fit within `width' on each (indented)
line.  (Contributed by Serhiy Storchaka in issue 19132(1).)

Long strings are now wrapped using Python’s normal line continuation
syntax.  (Contributed by Antoine Pitrou in issue 17150(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19132

   (2) https://bugs.python.org/issue17150


File: python.info,  Node: pty,  Next: pydoc,  Prev: pprint,  Up: Improved Modules

1.1.4.35 pty
............

*note pty.spawn(): 22f. now returns the status value from *note
os.waitpid(): 230. on the child process, instead of ‘None’.
(Contributed by Gregory P. Smith.)


File: python.info,  Node: pydoc,  Next: re,  Prev: pty,  Up: Improved Modules

1.1.4.36 pydoc
..............

The *note pydoc: d5. module is now based directly on the *note
inspect.signature(): 1fc. introspection API, allowing it to provide
signature information for a wider variety of callable objects.  This
change also means that ‘__wrapped__’ attributes are now taken into
account when displaying help information.  (Contributed by Larry
Hastings in issue 19674(1).)

The *note pydoc: d5. module no longer displays the ‘self’ parameter for
already bound methods.  Instead, it aims to always display the exact
current signature of the supplied callable.  (Contributed by Larry
Hastings in issue 20710(2).)

In addition to the changes that have been made to *note pydoc: d5.
directly, its handling of custom ‘__dir__’ methods and various
descriptor behaviours has also been improved substantially by the
underlying changes in the *note inspect: 9d. module.

As the *note help(): 157. builtin is based on *note pydoc: d5, the above
changes also affect the behaviour of *note help(): 157.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19674

   (2) https://bugs.python.org/issue20710


File: python.info,  Node: re,  Next: resource,  Prev: pydoc,  Up: Improved Modules

1.1.4.37 re
...........

New *note fullmatch(): 233. function and *note regex.fullmatch(): 234.
method anchor the pattern at both ends of the string to match.  This
provides a way to be explicit about the goal of the match, which avoids
a class of subtle bugs where ‘$’ characters get lost during code changes
or the addition of alternatives to an existing regular expression.
(Contributed by Matthew Barnett in issue 16203(1).)

The repr of *note regex objects: 235. now includes the pattern and the
flags; the repr of *note match objects: 236. now includes the start,
end, and the part of the string that matched.  (Contributed by Hugo
Lopes Tavares and Serhiy Storchaka in issue 13592(2) and issue
17087(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16203

   (2) https://bugs.python.org/issue13592

   (3) https://bugs.python.org/issue17087


File: python.info,  Node: resource,  Next: select,  Prev: re,  Up: Improved Modules

1.1.4.38 resource
.................

New *note prlimit(): 238. function, available on Linux platforms with a
kernel version of 2.6.36 or later and glibc of 2.13 or later, provides
the ability to query or set the resource limits for processes other than
the one making the call.  (Contributed by Christian Heimes in issue
16595(1).)

On Linux kernel version 2.6.36 or later, there are there are also some
new Linux specific constants: *note RLIMIT_MSGQUEUE: 239, *note
RLIMIT_NICE: 23a, *note RLIMIT_RTPRIO: 23b, *note RLIMIT_RTTIME: 23c,
and *note RLIMIT_SIGPENDING: 23d.  (Contributed by Christian Heimes in
issue 19324(2).)

On FreeBSD version 9 and later, there some new FreeBSD specific
constants: *note RLIMIT_SBSIZE: 23e, *note RLIMIT_SWAP: 23f, and *note
RLIMIT_NPTS: 240.  (Contributed by Claudiu Popa in issue 19343(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16595

   (2) https://bugs.python.org/issue19324

   (3) https://bugs.python.org/issue19343


File: python.info,  Node: select,  Next: shelve,  Prev: resource,  Up: Improved Modules

1.1.4.39 select
...............

*note epoll: 242. objects now support the context management protocol.
When used in a *note with: 19b. statement, the *note close(): 243.
method will be called automatically at the end of the block.
(Contributed by Serhiy Storchaka in issue 16488(1).)

*note devpoll: 244. objects now have *note fileno(): 245. and *note
close(): 246. methods, as well as a new attribute *note closed: 247.
(Contributed by Victor Stinner in issue 18794(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16488

   (2) https://bugs.python.org/issue18794


File: python.info,  Node: shelve,  Next: shutil,  Prev: select,  Up: Improved Modules

1.1.4.40 shelve
...............

*note Shelf: 249. instances may now be used in *note with: 19b.
statements, and will be automatically closed at the end of the *note
with: 19b. block.  (Contributed by Filip Gruszczyński in issue
13896(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13896


File: python.info,  Node: shutil,  Next: smtpd,  Prev: shelve,  Up: Improved Modules

1.1.4.41 shutil
...............

*note copyfile(): 24b. now raises a specific *note Error: 24c. subclass,
*note SameFileError: 24d, when the source and destination are the same
file, which allows an application to take appropriate action on this
specific error.  (Contributed by Atsuo Ishimoto and Hynek Schlawack in
issue 1492704(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1492704


File: python.info,  Node: smtpd,  Next: smtplib,  Prev: shutil,  Up: Improved Modules

1.1.4.42 smtpd
..............

The *note SMTPServer: 24f. and *note SMTPChannel: 250. classes now
accept a `map' keyword argument which, if specified, is passed in to
*note asynchat.async_chat: 251. as its `map' argument.  This allows an
application to avoid affecting the global socket map.  (Contributed by
Vinay Sajip in issue 11959(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11959


File: python.info,  Node: smtplib,  Next: socket,  Prev: smtpd,  Up: Improved Modules

1.1.4.43 smtplib
................

*note SMTPException: 253. is now a subclass of *note OSError: 254, which
allows both socket level errors and SMTP protocol level errors to be
caught in one try/except statement by code that only cares whether or
not an error occurred.  (Contributed by Ned Jackson Lovely in issue
2118(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2118


File: python.info,  Node: socket,  Next: sqlite3,  Prev: smtplib,  Up: Improved Modules

1.1.4.44 socket
...............

The socket module now supports the *note CAN_BCM: 256. protocol on
platforms that support it.  (Contributed by Brian Thorne in issue
15359(1).)

Socket objects have new methods to get or set their *note inheritable
flag: 170, *note get_inheritable(): 175. and *note set_inheritable():
176.

The ‘socket.AF_*’ and ‘socket.SOCK_*’ constants are now enumeration
values using the new *note enum: 79. module.  This allows meaningful
names to be printed during debugging, instead of integer "magic
numbers".

The *note AF_LINK: 257. constant is now available on BSD and OSX.

*note inet_pton(): 258. and *note inet_ntop(): 259. are now supported on
Windows.  (Contributed by Atsuo Ishimoto in issue 7171(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15359

   (2) https://bugs.python.org/issue7171


File: python.info,  Node: sqlite3,  Next: ssl,  Prev: socket,  Up: Improved Modules

1.1.4.45 sqlite3
................

A new boolean parameter to the *note connect(): 25b. function, `uri',
can be used to indicate that the `database' parameter is a ‘uri’ (see
the SQLite URI documentation(1)).  (Contributed by poq in issue
13773(2).)

   ---------- Footnotes ----------

   (1) http://www.sqlite.org/uri.html

   (2) https://bugs.python.org/issue13773


File: python.info,  Node: ssl,  Next: stat,  Prev: sqlite3,  Up: Improved Modules

1.1.4.46 ssl
............

*note PROTOCOL_TLSv1_1: 25d. and *note PROTOCOL_TLSv1_2: 25e. (TLSv1.1
and TLSv1.2 support) have been added; support for these protocols is
only available if Python is linked with OpenSSL 1.0.1 or later.
(Contributed by Michele Orrù and Antoine Pitrou in issue 16692(1).)  New
function *note create_default_context(): 25f. provides a standard way to
obtain an *note SSLContext: 15d. whose settings are intended to be a
reasonable balance between compatibility and security.  These settings
are more stringent than the defaults provided by the *note SSLContext:
15d. constructor, and may be adjusted in the future, without prior
deprecation, if best-practice security requirements change.  The new
recommended best practice for using stdlib libraries that support SSL is
to use *note create_default_context(): 25f. to obtain an *note
SSLContext: 15d. object, modify it if needed, and then pass it as the
`context' argument of the appropriate stdlib API. (Contributed by
Christian Heimes in issue 19689(2).)

*note SSLContext: 15d. method *note load_verify_locations(): 160.
accepts a new optional argument `cadata', which can be used to provide
PEM or DER encoded certificates directly via strings or bytes,
respectively.  (Contributed by Christian Heimes in issue 18138(3).)

New function *note get_default_verify_paths(): 260. returns a named
tuple of the paths and environment variables that the *note
set_default_verify_paths(): 261. method uses to set OpenSSL’s default
‘cafile’ and ‘capath’.  This can be an aid in debugging default
verification issues.  (Contributed by Christian Heimes in issue
18143(4).)

*note SSLContext: 15d. has a new method, *note cert_store_stats(): 262,
that reports the number of loaded ‘X.509’ certs, ‘X.509 CA’ certs, and
certificate revocation lists (‘crl’s), as well as a *note
get_ca_certs(): 263. method that returns a list of the loaded ‘CA’
certificates.  (Contributed by Christian Heimes in issue 18147(5).)

If OpenSSL 0.9.8 or later is available, *note SSLContext: 15d. has an
new attribute *note verify_flags: 264. that can be used to control the
certificate verification process by setting it to some combination of
the new constants *note VERIFY_DEFAULT: 265, *note
VERIFY_CRL_CHECK_LEAF: 266, *note VERIFY_CRL_CHECK_CHAIN: 267, or *note
VERIFY_X509_STRICT: 268.  OpenSSL does not do any CRL verification by
default.  (Contributed by Christien Heimes in issue 8813(6).)

New *note SSLContext: 15d. method *note load_default_certs(): 269. loads
a set of default "certificate authority" (CA) certificates from default
locations, which vary according to the platform.  It can be used to load
both TLS web server authentication certificates (‘purpose=’*note
SERVER_AUTH: 26a.) for a client to use to verify a server, and
certificates for a server to use in verifying client certificates
(‘purpose=’*note CLIENT_AUTH: 26b.).  (Contributed by Christian Heimes
in issue 19292(7).)  Two new windows-only functions, *note
enum_certificates(): 26c. and *note enum_crls(): 26d. provide the
ability to retrieve certificates, certificate information, and CRLs from
the Windows cert store.  (Contributed by Christian Heimes in issue
17134(8).)  Support for server-side SNI (Server Name Indication) using
the new *note ssl.SSLContext.set_servername_callback(): 26e. method.
(Contributed by Daniel Black in issue 8109(9).)

The dictionary returned by *note SSLSocket.getpeercert(): 26f. contains
additional ‘X509v3’ extension items: ‘crlDistributionPoints’,
‘calIssuers’, and ‘OCSP’ URIs.  (Contributed by Christian Heimes in
issue 18379(10).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16692

   (2) https://bugs.python.org/issue19689

   (3) https://bugs.python.org/issue18138

   (4) https://bugs.python.org/issue18143

   (5) https://bugs.python.org/issue18147

   (6) https://bugs.python.org/issue8813

   (7) https://bugs.python.org/issue19292

   (8) https://bugs.python.org/issue17134

   (9) https://bugs.python.org/issue8109

   (10) https://bugs.python.org/issue18379


File: python.info,  Node: stat,  Next: struct,  Prev: ssl,  Up: Improved Modules

1.1.4.47 stat
.............

The *note stat: ef. module is now backed by a C implementation in
‘_stat’.  A C implementation is required as most of the values aren’t
standardized and are platform-dependent.  (Contributed by Christian
Heimes in issue 11016(1).)

The module supports new *note ST_MODE: 271. flags, *note S_IFDOOR: 272,
*note S_IFPORT: 273, and *note S_IFWHT: 274.  (Contributed by Christian
Hiemes in issue 11016(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11016

   (2) https://bugs.python.org/issue11016


File: python.info,  Node: struct,  Next: subprocess,  Prev: stat,  Up: Improved Modules

1.1.4.48 struct
...............

New function *note iter_unpack: 276. and a new *note
struct.Struct.iter_unpack(): 277. method on compiled formats provide
streamed unpacking of a buffer containing repeated instances of a given
format of data.  (Contributed by Antoine Pitrou in issue 17804(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17804


File: python.info,  Node: subprocess,  Next: sunau,  Prev: struct,  Up: Improved Modules

1.1.4.49 subprocess
...................

*note check_output(): 279. now accepts an `input' argument that can be
used to provide the contents of ‘stdin’ for the command that is run.
(Contributed by Zack Weinberg in issue 16624(1).)

‘getstatus()’ and *note getstatusoutput(): 27a. now work on Windows.
This change was actually inadvertently made in 3.3.4.  (Contributed by
Tim Golden in issue 10197(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16624

   (2) https://bugs.python.org/issue10197


File: python.info,  Node: sunau,  Next: sys,  Prev: subprocess,  Up: Improved Modules

1.1.4.50 sunau
..............

The ‘getparams()’ method now returns a namedtuple rather than a plain
tuple.  (Contributed by Claudiu Popa in issue 18901(1).)

*note sunau.open(): 27c. now supports the context management protocol:
when used in a *note with: 19b. block, the ‘close’ method of the
returned object will be called automatically at the end of the block.
(Contributed by Serhiy Storchaka in issue 18878(2).)

*note AU_write.setsampwidth(): 27d. now supports 24 bit samples, thus
adding support for writing 24 sample using the module.  (Contributed by
Serhiy Storchaka in issue 19261(3).)

The *note writeframesraw(): 27e. and *note writeframes(): 27f. methods
now accept any *note bytes-like object: 19f.  (Contributed by Serhiy
Storchaka in issue 8311(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18901

   (2) https://bugs.python.org/issue18878

   (3) https://bugs.python.org/issue19261

   (4) https://bugs.python.org/issue8311


File: python.info,  Node: sys,  Next: tarfile,  Prev: sunau,  Up: Improved Modules

1.1.4.51 sys
............

New function *note sys.getallocatedblocks(): 281. returns the current
number of blocks allocated by the interpreter.  (In CPython with the
default ‘--with-pymalloc’ setting, this is allocations made through the
‘PyObject_Malloc()’ API.) This can be useful for tracking memory leaks,
especially if automated via a test suite.  (Contributed by Antoine
Pitrou in issue 13390(1).)

When the Python interpreter starts in *note interactive mode: 282, it
checks for an *note __interactivehook__: 283. attribute on the *note
sys: f8. module.  If the attribute exists, its value is called with no
arguments just before interactive mode is started.  The check is made
after the *note PYTHONSTARTUP: 284. file is read, so it can be set
there.  The *note site: e6. module *note sets it: 285. to a function
that enables tab completion and history saving (in ‘~/.python-history’)
if the platform supports *note readline: da.  If you do not want this
(new) behavior, you can override it in *note PYTHONSTARTUP: 284,
‘sitecustomize’, or ‘usercustomize’ by deleting this attribute from
*note sys: f8. (or setting it to some other callable).  (Contributed by
Éric Araujo and Antoine Pitrou in issue 5845(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13390

   (2) https://bugs.python.org/issue5845


File: python.info,  Node: tarfile,  Next: textwrap,  Prev: sys,  Up: Improved Modules

1.1.4.52 tarfile
................

The *note tarfile: fc. module now supports a simple *note Command Line
Interface: 287. when called as a script directly or via ‘-m’.  This can
be used to create and extract tarfile archives.  (Contributed by Berker
Peksag in issue 13477(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13477


File: python.info,  Node: textwrap,  Next: threading,  Prev: tarfile,  Up: Improved Modules

1.1.4.53 textwrap
.................

The *note TextWrapper: 289. class has two new attributes/constructor
arguments: *note max_lines: 28a, which limits the number of lines in the
output, and *note placeholder: 28b, which is a string that will appear
at the end of the output if it has been truncated because of
`max_lines'.  Building on these capabilities, a new convenience function
*note shorten(): 28c. collapses all of the whitespace in the input to
single spaces and produces a single line of a given `width' that ends
with the `placeholder' (by default, ‘[...]’).  (Contributed by Antoine
Pitrou and Serhiy Storchaka in issue 18585(1) and issue 18725(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18585

   (2) https://bugs.python.org/issue18725


File: python.info,  Node: threading,  Next: traceback,  Prev: textwrap,  Up: Improved Modules

1.1.4.54 threading
..................

The *note Thread: 28e. object representing the main thread can be
obtained from the new *note main_thread(): 28f. function.  In normal
conditions this will be the thread from which the Python interpreter was
started.  (Contributed by Andrew Svetlov in issue 18882(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18882


File: python.info,  Node: traceback,  Next: types,  Prev: threading,  Up: Improved Modules

1.1.4.55 traceback
..................

A new *note traceback.clear_frames(): 291. function takes a traceback
object and clears the local variables in all of the frames it
references, reducing the amount of memory consumed.  (Contributed by
Andrew Kuchling in issue 1565525(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1565525


File: python.info,  Node: types,  Next: urllib,  Prev: traceback,  Up: Improved Modules

1.1.4.56 types
..............

A new *note DynamicClassAttribute(): 293. descriptor provides a way to
define an attribute that acts normally when looked up through an
instance object, but which is routed to the `class' ‘__getattr__’ when
looked up through the class.  This allows one to have properties active
on a class, and have virtual attributes on the class with the same name
(see ‘Enum’ for an example).  (Contributed by Ethan Furman in issue
19030(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19030


File: python.info,  Node: urllib,  Next: unittest,  Prev: types,  Up: Improved Modules

1.1.4.57 urllib
...............

*note urllib.request: 119. now supports ‘data:’ URLs via the *note
DataHandler: 295. class.  (Contributed by Mathias Panzenböck in issue
16423(1).)

The http method that will be used by a *note Request: 296. class can now
be specified by setting a *note method: 297. class attribute on the
subclass.  (Contributed by Jason R Coombs in issue 18978(2).)

*note Request: 296. objects are now reusable: if the *note full_url:
298. or *note data: 299. attributes are modified, all relevant internal
properties are updated.  This means, for example, that it is now
possible to use the same *note Request: 296. object in more than one
*note OpenerDirector.open(): 29a. call with different `data' arguments,
or to modify a *note Request: 296.’s ‘url’ rather than recomputing it
from scratch.  There is also a new *note remove_header(): 29b. method
that can be used to remove headers from a *note Request: 296.
(Contributed by Alexey Kachayev in issue 16464(3), Daniel Wozniak in
issue 17485(4), and Damien Brecht and Senthil Kumaran in issue
17272(5).)

*note HTTPError: 29c. objects now have a *note headers: 29d. attribute
that provides access to the HTTP response headers associated with the
error.  (Contributed by Berker Peksag in issue 15701(6).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16423

   (2) https://bugs.python.org/issue18978

   (3) https://bugs.python.org/issue16464

   (4) https://bugs.python.org/issue17485

   (5) https://bugs.python.org/issue17272

   (6) https://bugs.python.org/issue15701


File: python.info,  Node: unittest,  Next: venv,  Prev: urllib,  Up: Improved Modules

1.1.4.58 unittest
.................

The *note TestCase: 29f. class has a new method, *note subTest(): 2a0,
that produces a context manager whose *note with: 19b. block becomes a
"sub-test".  This context manager allows a test method to dynamically
generate subtests by, say, calling the ‘subTest’ context manager inside
a loop.  A single test method can thereby produce an indefinite number
of separately-identified and separately-counted tests, all of which will
run even if one or more of them fail.  For example:

     class NumbersTest(unittest.TestCase):
         def test_even(self):
             for i in range(6):
                 with self.subTest(i=i):
                     self.assertEqual(i % 2, 0)

will result in six subtests, each identified in the unittest verbose
output with a label consisting of the variable name ‘i’ and a particular
value for that variable (‘i=0’, ‘i=1’, etc).  See *note Distinguishing
test iterations using subtests: 2a1. for the full version of this
example.  (Contributed by Antoine Pitrou in issue 16997(1).)

*note unittest.main(): 2a2. now accepts an iterable of test names for
`defaultTest', where previously it only accepted a single test name as a
string.  (Contributed by Jyrki Pulliainen in issue 15132(2).)

If *note SkipTest: 2a3. is raised during test discovery (that is, at the
module level in the test file), it is now reported as a skip instead of
an error.  (Contributed by Zach Ware in issue 16935(3).)

*note discover(): 2a4. now sorts the discovered files to provide
consistent test ordering.  (Contributed by Martin Melin and Jeff Ramnani
in issue 16709(4).)

*note TestSuite: 2a5. now drops references to tests as soon as the test
has been run, if the test is successful.  On Python interpreters that do
garbage collection, this allows the tests to be garbage collected if
nothing else is holding a reference to the test.  It is possible to
override this behavior by creating a *note TestSuite: 2a5. subclass that
defines a custom ‘_removeTestAtIndex’ method.  (Contributed by Tom
Wardill, Matt McClure, and Andrew Svetlov in issue 11798(5).)

A new test assertion context-manager, *note assertLogs(): 2a6, will
ensure that a given block of code emits a log message using the *note
logging: a6. module.  By default the message can come from any logger
and have a priority of ‘INFO’ or higher, but both the logger name and an
alternative minimum logging level may be specified.  The object returned
by the context manager can be queried for the *note LogRecord: 2a7.s
and/or formatted messages that were logged.  (Contributed by Antoine
Pitrou in issue 18937(6).)

Test discovery now works with namespace packages (Contributed by Claudiu
Popa in issue 17457(7).)

*note unittest.mock: 115. objects now inspect their specification
signatures when matching calls, which means an argument can now be
matched by either position or name, instead of only by position.
(Contributed by Antoine Pitrou in issue 17015(8).)

‘mock_open()’ objects now have ‘readline’ and ‘readlines’ methods.
(Contributed by Toshio Kuratomi in issue 17467(9).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16997

   (2) https://bugs.python.org/issue15132

   (3) https://bugs.python.org/issue16935

   (4) https://bugs.python.org/issue16709

   (5) https://bugs.python.org/issue11798

   (6) https://bugs.python.org/issue18937

   (7) https://bugs.python.org/issue17457

   (8) https://bugs.python.org/issue17015

   (9) https://bugs.python.org/issue17467


File: python.info,  Node: venv,  Next: wave,  Prev: unittest,  Up: Improved Modules

1.1.4.59 venv
.............

*note venv: 11e. now includes activation scripts for the ‘csh’ and
‘fish’ shells.  (Contributed by Andrew Svetlov in issue 15417(1).)

*note EnvBuilder: 2a9. and the *note create(): 2aa. convenience function
take a new keyword argument `with_pip', which defaults to ‘False’, that
controls whether or not *note EnvBuilder: 2a9. ensures that ‘pip’ is
installed in the virtual environment.  (Contributed by Nick Coghlan in
issue 19552(2) as part of the PEP 453(3) implementation.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15417

   (2) https://bugs.python.org/issue19552

   (3) https://www.python.org/dev/peps/pep-0453


File: python.info,  Node: wave,  Next: weakref,  Prev: venv,  Up: Improved Modules

1.1.4.60 wave
.............

The ‘getparams()’ method now returns a namedtuple rather than a plain
tuple.  (Contributed by Claudiu Popa in issue 17487(1).)

*note wave.open(): 2ac. now supports the context management protocol.
(Contributed by Claudiu Popa in issue 17616(2).)

*note wave: 120. can now *note write output to unseekable files: 2ad.
(Contributed by David Jones, Guilherme Polo, and Serhiy Storchaka in
issue 5202(3).)

The *note writeframesraw(): 2ae. and *note writeframes(): 2af. methods
now accept any *note bytes-like object: 19f.  (Contributed by Serhiy
Storchaka in issue 8311(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17487

   (2) https://bugs.python.org/issue17616

   (3) https://bugs.python.org/issue5202

   (4) https://bugs.python.org/issue8311


File: python.info,  Node: weakref,  Next: xml etree,  Prev: wave,  Up: Improved Modules

1.1.4.61 weakref
................

New *note WeakMethod: 2b1. class simulates weak references to bound
methods.  (Contributed by Antoine Pitrou in issue 14631(1).)

New *note finalize: 2b2. class makes it possible to register a callback
to be invoked when an object is garbage collected, without needing to
carefully manage the lifecycle of the weak reference itself.
(Contributed by Richard Oudkerk in issue 15528(2).)

The callback, if any, associated with a *note ref: 2b3. is now exposed
via the *note __callback__: 2b4. attribute.  (Contributed by Mark
Dickinson in issue 17643(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14631

   (2) https://bugs.python.org/issue15528

   (3) https://bugs.python.org/issue17643


File: python.info,  Node: xml etree,  Next: zipfile,  Prev: weakref,  Up: Improved Modules

1.1.4.62 xml.etree
..................

A new parser, *note XMLPullParser: 2b6, allows a non-blocking
applications to parse XML documents.  An example can be seen at *note
Pull API for non-blocking parsing: 2b7.  (Contributed by Antoine Pitrou
in issue 17741(1).)

The *note xml.etree.ElementTree: 130. *note tostring(): 2b8. and *note
tostringlist(): 2b9. functions, and the *note ElementTree: 2ba. *note
write(): 2bb. method, now have a `short_empty_elements' *note
keyword-only parameter: 2bc. providing control over whether elements
with no content are written in abbreviated (‘<tag />’) or expanded
(‘<tag></tag>’) form.  (Contributed by Ariel Poliak and Serhiy Storchaka
in issue 14377(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17741

   (2) https://bugs.python.org/issue14377


File: python.info,  Node: zipfile,  Prev: xml etree,  Up: Improved Modules

1.1.4.63 zipfile
................

The *note writepy(): 2be. method of the *note PyZipFile: 2bf. class has
a new `filterfunc' option that can be used to control which directories
and files are added to the archive.  For example, this could be used to
exclude test files from the archive.  (Contributed by Christian Tismer
in issue 19274(1).)

The `allowZip64' parameter to *note ZipFile: 2c0. and ‘PyZipfile’ is now
‘True’ by default.  (Contributed by William Mallard in issue 17201(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue19274

   (2) https://bugs.python.org/issue17201


File: python.info,  Node: CPython Implementation Changes,  Next: Deprecated,  Prev: Improved Modules,  Up: What's New In Python 3 4

1.1.5 CPython Implementation Changes
------------------------------------

* Menu:

* PEP 445; Customization of CPython Memory Allocators: PEP 445 Customization of CPython Memory Allocators. 
* PEP 442; Safe Object Finalization: PEP 442 Safe Object Finalization. 
* PEP 456; Secure and Interchangeable Hash Algorithm: PEP 456 Secure and Interchangeable Hash Algorithm. 
* PEP 436; Argument Clinic: PEP 436 Argument Clinic. 
* Other Build and C API Changes:: 
* Other Improvements:: 
* Significant Optimizations:: 


File: python.info,  Node: PEP 445 Customization of CPython Memory Allocators,  Next: PEP 442 Safe Object Finalization,  Up: CPython Implementation Changes

1.1.5.1 PEP 445: Customization of CPython Memory Allocators
...........................................................

PEP 445(1) adds new C level interfaces to customize memory allocation in
the CPython interpreter.

See also
........

PEP 445(2) – Add new APIs to customize Python memory allocators

     PEP written and implemented by Victor Stinner.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0445

   (2) https://www.python.org/dev/peps/pep-0445


File: python.info,  Node: PEP 442 Safe Object Finalization,  Next: PEP 456 Secure and Interchangeable Hash Algorithm,  Prev: PEP 445 Customization of CPython Memory Allocators,  Up: CPython Implementation Changes

1.1.5.2 PEP 442: Safe Object Finalization
.........................................

PEP 442(1) removes the current limitations and quirks of object
finalization in CPython.  With it, objects with *note __del__(): 2c4.
methods, as well as generators with *note finally: 2c5. clauses, can be
finalized when they are part of a reference cycle.

As part of this change, module globals are no longer forcibly set to
*note None: 2c6. during interpreter shutdown in most cases, instead
relying on the normal operation of the cyclic garbage collector.  This
avoids a whole class of interpreter-shutdown-time errors, usually
involving ‘__del__’ methods, that have plagued Python since the cyclic
GC was first introduced.

See also
........

PEP 442(2) – Safe object finalization

     PEP written and implemented by Antoine Pitrou.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0442

   (2) https://www.python.org/dev/peps/pep-0442


File: python.info,  Node: PEP 456 Secure and Interchangeable Hash Algorithm,  Next: PEP 436 Argument Clinic,  Prev: PEP 442 Safe Object Finalization,  Up: CPython Implementation Changes

1.1.5.3 PEP 456: Secure and Interchangeable Hash Algorithm
..........................................................

PEP 456(1) follows up on earlier security fix work done on Python’s hash
algorithm to address certain DOS attacks to which public facing APIs
backed by dictionary lookups may be subject.  (See issue 14621(2) for
the start of the current round of improvements.)  The PEP unifies
CPython’s hash code to make it easier for a packager to substitute a
different hash algorithm, and switches Python’s default implementation
to a SipHash implementation on platforms that have a 64 bit data type.
Any performance differences in comparison with the older FNV algorithm
are trivial.

The PEP adds additional fields to the *note sys.hash_info: 2c8. struct
sequence to describe the hash algorithm in use by the currently
executing binary.  Otherwise, the PEP does not alter any existing
CPython APIs.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0456

   (2) https://bugs.python.org/issue14621


File: python.info,  Node: PEP 436 Argument Clinic,  Next: Other Build and C API Changes,  Prev: PEP 456 Secure and Interchangeable Hash Algorithm,  Up: CPython Implementation Changes

1.1.5.4 PEP 436: Argument Clinic
................................

"Argument Clinic" ( PEP 436(1)) is now part of the CPython build process
and can be used to simplify the process of defining and maintaining
accurate signatures for builtins and standard library extension modules
implemented in C.

Some standard library extension modules have been converted to use
Argument Clinic in Python 3.4, and *note pydoc: d5. and *note inspect:
9d. have been updated accordingly.

It is expected that signature metadata for programmatic introspection
will be added to additional callables implemented in C as part of Python
3.4 maintenance releases.

     Note: The Argument Clinic PEP is not fully up to date with the
     state of the implementation.  This has been deemed acceptable by
     the release manager and core development team in this case, as
     Argument Clinic will not be made available as a public API for
     third party use in Python 3.4.

See also
........

PEP 436(2) – The Argument Clinic DSL

     PEP written and implemented by Larry Hastings.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0436

   (2) https://www.python.org/dev/peps/pep-0436


File: python.info,  Node: Other Build and C API Changes,  Next: Other Improvements,  Prev: PEP 436 Argument Clinic,  Up: CPython Implementation Changes

1.1.5.5 Other Build and C API Changes
.....................................

   * The new *note PyType_GetSlot(): 2cb. function has been added to the
     stable ABI, allowing retrieval of function pointers from named type
     slots when using the limited API. (Contributed by Martin von Löwis
     in issue 17162(1).)

   * The new *note Py_SetStandardStreamEncoding(): 2cc.
     pre-initialization API allows applications embedding the CPython
     interpreter to reliably force a particular encoding and error
     handler for the standard streams.  (Contributed by Bastien Montagne
     and Nick Coghlan in issue 16129(2).)

   * Most Python C APIs that don’t mutate string arguments are now
     correctly marked as accepting ‘const char *’ rather than ‘char *’.
     (Contributed by Serhiy Storchaka in issue 1772673(3).)

   * A new shell version of ‘python-config’ can be used even when a
     python interpreter is not available (for example, in cross
     compilation scenarios).

   * *note PyUnicode_FromFormat(): 2cd. now supports width and precision
     specifications for ‘%s’, ‘%A’, ‘%U’, ‘%V’, ‘%S’, and ‘%R’.
     (Contributed by Ysj Ray and Victor Stinner in issue 7330(4).)

   * New function *note PyStructSequence_InitType2(): 2ce. supplements
     the existing *note PyStructSequence_InitType(): 2cf. function.  The
     difference is that it returns ‘0’ on success and ‘-1’ on failure.

   * The CPython source can now be compiled using the address sanity
     checking features of recent versions of GCC and clang: the false
     alarms in the small object allocator have been silenced.
     (Contributed by Dhiru Kholia in issue 18596(5).)

   * The Windows build now uses Address Space Layout Randomization(6)
     and Data Execution Prevention(7).  (Contributed by Christian Heimes
     in issue 16632(8).)

   * New function *note PyObject_LengthHint(): 2d0. is the C API
     equivalent of *note operator.length_hint(): 210.  (Contributed by
     Armin Ronacher in issue 16148(9).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17162

   (2) https://bugs.python.org/issue16129

   (3) https://bugs.python.org/issue1772673

   (4) https://bugs.python.org/issue7330

   (5) https://bugs.python.org/issue18596

   (6) http://en.wikipedia.org/wiki/ASLR

   (7) http://en.wikipedia.org/wiki/Data_Execution_Prevention

   (8) https://bugs.python.org/issue16632

   (9) https://bugs.python.org/issue16148


File: python.info,  Node: Other Improvements,  Next: Significant Optimizations,  Prev: Other Build and C API Changes,  Up: CPython Implementation Changes

1.1.5.6 Other Improvements
..........................

   * The *note python: 2d3. command has a new *note option: 2d4, ‘-I’,
     which causes it to run in "isolated mode", which means that *note
     sys.path: 2d5. contains neither the script’s directory nor the
     user’s ‘site-packages’ directory, and all ‘PYTHON*’ environment
     variables are ignored (it implies both ‘-s’ and ‘-E’).  Other
     restrictions may also be applied in the future, with the goal being
     to isolate the execution of a script from the user’s environment.
     This is appropriate, for example, when Python is used to run a
     system script.  On most POSIX systems it can and should be used in
     the ‘#!’ line of system scripts.  (Contributed by Christian Heimes
     in issue 16499(1).)

   * Tab-completion is now enabled by default in the interactive
     interpreter on systems that support *note readline: da.  History is
     also enabled by default, and is written to (and read from) the file
     ‘~/.python-history’.  (Contributed by Antoine Pitrou and Éric
     Araujo in issue 5845(2).)

   * Invoking the Python interpreter with ‘--version’ now outputs the
     version to standard output instead of standard error (issue
     18338(3)).  Similar changes were made to *note argparse: 6. (issue
     18920(4)) and other modules that have script-like invocation
     capabilities (issue 18922(5)).

   * The CPython Windows installer now adds ‘.py’ to the ‘PATHEXT’
     variable when extensions are registered, allowing users to run a
     python script at the windows command prompt by just typing its name
     without the ‘.py’ extension.  (Contributed by Paul Moore in issue
     18569(6).)

   * A new ‘make’ target coverage-report(7) will build python, run the
     test suite, and generate an HTML coverage report for the C codebase
     using ‘gcov’ and lcov(8).

   * The ‘-R’ option to the *note python regression test suite: 2d6. now
     also checks for memory allocation leaks, using *note
     sys.getallocatedblocks(): 281.  (Contributed by Antoine Pitrou in
     issue 13390(9).)

   * ‘python -m’ now works with namespace packages.

   * The *note stat: ef. module is now implemented in C, which means it
     gets the values for its constants from the C header files, instead
     of having the values hard-coded in the python module as was
     previously the case.

   * Loading multiple python modules from a single OS module (‘.so’,
     ‘.dll’) now works correctly (previously it silently returned the
     first python module in the file).  (Contributed by Václav Šmilauer
     in issue 16421(10).)

   * A new opcode, *note LOAD_CLASSDEREF: 2d7, has been added to fix a
     bug in the loading of free variables in class bodies that could be
     triggered by certain uses of *note __prepare__: 2d8.  (Contributed
     by Benjamin Peterson in issue 17853(11).)

   * A number of MemoryError-related crashes were identified and fixed
     by Victor Stinner using his PEP 445(12)-based ‘pyfailmalloc’ tool
     (issue 18408(13), issue 18520(14)).

   * The *note pyvenv: 167. command now accepts a ‘--copies’ option to
     use copies rather than symlinks even on systems where symlinks are
     the default.  (Contributed by Vinay Sajip in issue 18807(15).)

   * The *note pyvenv: 167. command also accepts a ‘--without-pip’
     option to suppress the otherwise-automatic bootstrapping of pip
     into the virtual environment.  (Contributed by Nick Coghlan in
     issue 19552(16) as part of the PEP 453(17) implementation.)

   * The encoding name is now optional in the value set for the *note
     PYTHONIOENCODING: 2d9. environment variable.  This makes it
     possible to set just the error handler, without changing the
     default encoding.  (Contributed by Serhiy Storchaka in issue
     18818(18).)

   * The *note bz2: 14, *note lzma: a9, and *note gzip: 8b. module
     ‘open’ functions now support ‘x’ (exclusive creation) mode.
     (Contributed by Tim Heaney and Vajrasky Kok in issue 19201(19),
     issue 19222(20), and issue 19223(21).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16499

   (2) https://bugs.python.org/issue5845

   (3) https://bugs.python.org/issue18338

   (4) https://bugs.python.org/issue18920

   (5) https://bugs.python.org/issue18922

   (6) https://bugs.python.org/issue18569

   (7) 
https://docs.python.org/devguide/coverage.html#measuring-coverage-of-c-code-with-gcov-and-lcov

   (8) http://ltp.sourceforge.net/coverage/lcov.php

   (9) https://bugs.python.org/issue13390

   (10) https://bugs.python.org/issue16421

   (11) https://bugs.python.org/issue17853

   (12) https://www.python.org/dev/peps/pep-0445

   (13) https://bugs.python.org/issue18408

   (14) https://bugs.python.org/issue18520

   (15) https://bugs.python.org/issue18807

   (16) https://bugs.python.org/issue19552

   (17) https://www.python.org/dev/peps/pep-0453

   (18) https://bugs.python.org/issue18818

   (19) https://bugs.python.org/issue19201

   (20) https://bugs.python.org/issue19222

   (21) https://bugs.python.org/issue19223


File: python.info,  Node: Significant Optimizations,  Prev: Other Improvements,  Up: CPython Implementation Changes

1.1.5.7 Significant Optimizations
.................................

   * The UTF-32 decoder is now 3x to 4x faster.  (Contributed by Serhiy
     Storchaka in issue 14625(1).)

   * The cost of hash collisions for sets is now reduced.  Each hash
     table probe now checks a series of consecutive, adjacent key/hash
     pairs before continuing to make random probes through the hash
     table.  This exploits cache locality to make collision resolution
     less expensive.  The collision resolution scheme can be described
     as a hybrid of linear probing and open addressing.  The number of
     additional linear probes defaults to nine.  This can be changed at
     compile-time by defining LINEAR_PROBES to be any value.  Set
     LINEAR_PROBES=0 to turn-off linear probing entirely.  (Contributed
     by Raymond Hettinger in issue 18771(2).)

   * The interpreter starts about 30% faster.  A couple of measures lead
     to the speedup.  The interpreter loads fewer modules on startup,
     e.g.  the *note re: d9, *note collections: 1e. and *note locale:
     a5. modules and their dependencies are no longer imported by
     default.  The marshal module has been improved to load compiled
     Python code faster.  (Contributed by Antoine Pitrou, Christian
     Heimes and Victor Stinner in issue 19219(3), issue 19218(4), issue
     19209(5), issue 19205(6) and issue 9548(7).)

   * *note bz2.BZ2File: 2db. is now as fast or faster than the Python2
     version for most cases.  *note lzma.LZMAFile: 2dc. has also been
     optimized.  (Contributed by Serhiy Storchaka and Nadeem Vawda in
     issue 16034(8).)

   * *note random.getrandbits(): 2dd. is 20%-40% faster for small
     integers (the most common use case).  (Contributed by Serhiy
     Storchaka in issue 16674(9).)

   * By taking advantage of the new storage format for strings, pickling
     of strings is now significantly faster.  (Contributed by Victor
     Stinner and Antoine Pitrou in issue 15596(10).)

   * A performance issue in ‘io.FileIO.readall()’ has been solved.  This
     particularly affects Windows, and significantly speeds up the case
     of piping significant amounts of data through *note subprocess: f4.
     (Contributed by Richard Oudkerk in issue 15758(11).)

   * *note html.escape(): 2de. is now 10x faster.  (Contributed by Matt
     Bryant in issue 18020(12).)

   * On Windows, the native ‘VirtualAlloc’ is now used instead of the
     CRT ‘malloc’ in ‘obmalloc’.  Artificial benchmarks show about a 3%
     memory savings.

   * *note os.urandom(): 2df. now uses a lazily-opened persistent file
     descriptor so as to avoid using many file descriptors when run in
     parallel from multiple threads.  (Contributed by Antoine Pitrou in
     issue 18756(13).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14625

   (2) https://bugs.python.org/issue18771

   (3) https://bugs.python.org/issue19219

   (4) https://bugs.python.org/issue19218

   (5) https://bugs.python.org/issue19209

   (6) https://bugs.python.org/issue19205

   (7) https://bugs.python.org/issue9548

   (8) https://bugs.python.org/issue16034

   (9) https://bugs.python.org/issue16674

   (10) https://bugs.python.org/issue15596

   (11) https://bugs.python.org/issue15758

   (12) https://bugs.python.org/issue18020

   (13) https://bugs.python.org/issue18756


File: python.info,  Node: Deprecated,  Next: Removed,  Prev: CPython Implementation Changes,  Up: What's New In Python 3 4

1.1.6 Deprecated
----------------

This section covers various APIs and other features that have been
deprecated in Python 3.4, and will be removed in Python 3.5 or later.
In most (but not all) cases, using the deprecated APIs will produce a
*note DeprecationWarning: 2e1. when the interpreter is run with
deprecation warnings enabled (for example, by using ‘-Wd’).

* Menu:

* Deprecations in the Python API:: 
* Deprecated Features:: 


File: python.info,  Node: Deprecations in the Python API,  Next: Deprecated Features,  Up: Deprecated

1.1.6.1 Deprecations in the Python API
......................................

   * As mentioned in *note PEP 451; A ModuleSpec Type for the Import
     System: 149, a number of ‘importilb’ methods and functions are
     deprecated: *note importlib.find_loader(): 2e3. is replaced by
     *note importlib.util.find_spec(): 2e4.; *note
     importlib.machinery.PathFinder.find_module(): 2e5. is replaced by
     *note importlib.machinery.PathFinder.find_spec(): 2e6.; *note
     importlib.abc.MetaPathFinder.find_module(): 2e7. is replaced by
     *note importlib.abc.MetaPathFinder.find_spec(): 2e8.; *note
     importlib.abc.PathEntryFinder.find_loader(): 2e9. and *note
     find_module(): 2ea. are replaced by *note
     importlib.abc.PathEntryFinder.find_spec(): 2eb.; all of the
     ‘xxxLoader’ ABC ‘load_module’ methods (*note
     importlib.abc.Loader.load_module(): 2ec, *note
     importlib.abc.InspectLoader.load_module(): 2ed, *note
     importlib.abc.FileLoader.load_module(): 2ee, *note
     importlib.abc.SourceLoader.load_module(): 2ef.) should no longer be
     implemented, instead loaders should implement an ‘exec_module’
     method (*note importlib.abc.Loader.exec_module(): 2f0, *note
     importlib.abc.InspectLoader.exec_module(): 2f1. *note
     importlib.abc.SourceLoader.exec_module(): 2f2.) and let the import
     system take care of the rest; and *note
     importlib.abc.Loader.module_repr(): 2f3, *note
     importlib.util.module_for_loader(): 2f4, *note
     importlib.util.set_loader(): 2f5, and *note
     importlib.util.set_package(): 2f6. are no longer needed because
     their functions are now handled automatically by the import system.

   * The *note imp: 98. module is pending deprecation.  To keep
     compatibility with Python 2/3 code bases, the module’s removal is
     currently not scheduled.

   * The *note formatter: 80. module is pending deprecation and is
     slated for removal in Python 3.6.

   * ‘MD5’ as the default `digestmod' for the *note hmac.new(): 1de.
     function is deprecated.  Python 3.6 will require an explicit digest
     name or constructor as `digestmod' argument.

   * The internal ‘Netrc’ class in the *note ftplib: 83. module has been
     documented as deprecated in its docstring for quite some time.  It
     now emits a *note DeprecationWarning: 2e1. and will be removed
     completely in Python 3.5.

   * The undocumented `endtime' argument to *note
     subprocess.Popen.wait(): 2f7. should not have been exposed and is
     hopefully not in use; it is deprecated and will mostly likely be
     removed in Python 3.5.

   * The `strict' argument of *note HTMLParser: 1e5. is deprecated.

   * The *note plistlib: cb. *note readPlist(): 2f8, *note writePlist():
     2f9, *note readPlistFromBytes(): 2fa, and *note
     writePlistToBytes(): 2fb. functions are deprecated in favor of the
     corresponding new functions *note load(): 221, *note dump(): 222,
     *note loads(): 223, and *note dumps(): 224.  *note Data(): 2fc. is
     deprecated in favor of just using the *note bytes: 179.
     constructor.

   * The *note sysconfig: f9. key ‘SO’ is deprecated, it has been
     replaced by ‘EXT_SUFFIX’.

   * The ‘U’ mode accepted by various ‘open’ functions is deprecated.
     In Python3 it does not do anything useful, and should be replaced
     by appropriate uses of *note io.TextIOWrapper: 2fd. (if needed) and
     its `newline' argument.

   * The `parser' argument of *note xml.etree.ElementTree.iterparse():
     2fe. has been deprecated, as has the `html' argument of *note
     XMLParser(): 2ff.  To prepare for the removal of the latter, all
     arguments to ‘XMLParser’ should be passed by keyword.


File: python.info,  Node: Deprecated Features,  Prev: Deprecations in the Python API,  Up: Deprecated

1.1.6.2 Deprecated Features
...........................

   * Running *note IDLE: 301. with the ‘-n’ flag (no subprocess) is
     deprecated.  However, the feature will not be removed until issue
     18823(1) is resolved.

   * The site module adding a "site-python" directory to sys.path, if it
     exists, is deprecated (issue 19375(2)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18823

   (2) https://bugs.python.org/issue19375


File: python.info,  Node: Removed,  Next: Porting to Python 3 4,  Prev: Deprecated,  Up: What's New In Python 3 4

1.1.7 Removed
-------------

* Menu:

* Operating Systems No Longer Supported:: 
* API and Feature Removals:: 
* Code Cleanups:: 


File: python.info,  Node: Operating Systems No Longer Supported,  Next: API and Feature Removals,  Up: Removed

1.1.7.1 Operating Systems No Longer Supported
.............................................

Support for the following operating systems has been removed from the
source and build tools:

   * OS/2 (issue 16135(1)).

   * Windows 2000 (changeset e52df05b496a).

   * Windows systems where ‘COMSPEC’ points to ‘command.com’ (issue
     14470(2)).

   * VMS (issue 16136(3)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16135

   (2) https://bugs.python.org/issue14470

   (3) https://bugs.python.org/issue16136


File: python.info,  Node: API and Feature Removals,  Next: Code Cleanups,  Prev: Operating Systems No Longer Supported,  Up: Removed

1.1.7.2 API and Feature Removals
................................

The following obsolete and previously deprecated APIs and features have
been removed:

   * The unmaintained ‘Misc/TextMate’ and ‘Misc/vim’ directories have
     been removed (see the devguide(1) for suggestions on what to use
     instead).

   * The ‘SO’ makefile macro is removed (it was replaced by the
     ‘SHLIB_SUFFIX’ and ‘EXT_SUFFIX’ macros) (issue 16754(2)).

   * The ‘PyThreadState.tick_counter’ field has been removed; its value
     has been meaningless since Python 3.2, when the "new GIL" was
     introduced (issue 19199(3)).

   * ‘PyLoader’ and ‘PyPycLoader’ have been removed from *note
     importlib: 99.  (Contributed by Taras Lyapun in issue 15641(4).)

   * The `strict' argument to *note HTTPConnection: 305. and *note
     HTTPSConnection: 306. has been removed.  HTTP 0.9-style "Simple
     Responses" are no longer supported.

   * The deprecated *note urllib.request.Request: 296. getter and setter
     methods ‘add_data’, ‘has_data’, ‘get_data’, ‘get_type’, ‘get_host’,
     ‘get_selector’, ‘set_proxy’, ‘get_origin_req_host’, and
     ‘is_unverifiable’ have been removed (use direct attribute access
     instead).

   * Support for loading the deprecated ‘TYPE_INT64’ has been removed
     from *note marshal: ad.  (Contributed by Dan Riti in issue
     15480(5).)

   * *note inspect.Signature: 307.: positional-only parameters are now
     required to have a valid name.

   * *note object.__format__(): 308. no longer accepts non-empty format
     strings, it now raises a *note TypeError: 309. instead.  Using a
     non-empty string has been deprecated since Python 3.2.  This change
     has been made to prevent a situation where previously working (but
     incorrect) code would start failing if an object gained a
     __format__ method, which means that your code may now raise a *note
     TypeError: 309. if you are using an ‘'s'’ format code with objects
     that do not have a __format__ method that handles it.  See issue
     7994(6) for background.

   * ‘difflib.SequenceMatcher.isbjunk()’ and
     ‘difflib.SequenceMatcher.isbpopular()’ were deprecated in 3.2, and
     have now been removed: use ‘x in sm.bjunk’ and ‘x in sm.bpopular’,
     where `sm' is a *note SequenceMatcher: 30a. object (issue
     13248(7)).

   ---------- Footnotes ----------

   (1) https://docs.python.org/devguide

   (2) https://bugs.python.org/issue16754

   (3) https://bugs.python.org/issue19199

   (4) https://bugs.python.org/issue15641

   (5) https://bugs.python.org/issue15480

   (6) https://bugs.python.org/issue7994

   (7) https://bugs.python.org/issue13248


File: python.info,  Node: Code Cleanups,  Prev: API and Feature Removals,  Up: Removed

1.1.7.3 Code Cleanups
.....................

   * The unused and undocumented internal ‘Scanner’ class has been
     removed from the *note pydoc: d5. module.

   * The private and effectively unused ‘_gestalt’ module has been
     removed, along with the private *note platform: ca. functions
     ‘_mac_ver_lookup’, ‘_mac_ver_gstalt’, and ‘_bcd2str’, which would
     only have ever been called on badly broken OSX systems (see issue
     18393(1)).

   * The hardcoded copies of certain *note stat: ef. constants that were
     included in the *note tarfile: fc. module namespace have been
     removed.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue18393


File: python.info,  Node: Porting to Python 3 4,  Next: Changed in 3 4 3,  Prev: Removed,  Up: What's New In Python 3 4

1.1.8 Porting to Python 3.4
---------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code.

* Menu:

* Changes in 'python' Command Behavior:: 
* Changes in the Python API:: 
* Changes in the C API:: 


File: python.info,  Node: Changes in 'python' Command Behavior,  Next: Changes in the Python API,  Up: Porting to Python 3 4

1.1.8.1 Changes in ’python’ Command Behavior
............................................

   * In a posix shell, setting the ‘PATH’ environment variable to an
     empty value is equivalent to not setting it at all.  However,
     setting *note PYTHONPATH: 30e. to an empty value was `not'
     equivalent to not setting it at all: setting *note PYTHONPATH: 30e.
     to an empty value was equivalent to setting it to ‘.’, which leads
     to confusion when reasoning by analogy to how ‘PATH’ works.  The
     behavior now conforms to the posix convention for ‘PATH’.

   * The [X refs, Y blocks] output of a debug (‘--with-pydebug’) build
     of the CPython interpreter is now off by default.  It can be
     re-enabled using the ‘-X showrefcount’ option.  (Contributed by
     Ezio Melotti in issue 17323(1).)

   * The python command and most stdlib scripts (as well as *note
     argparse: 6.) now output ‘--version’ information to ‘stdout’
     instead of ‘stderr’ (for issue list see *note Other Improvements:
     2d1. above).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17323


File: python.info,  Node: Changes in the Python API,  Next: Changes in the C API,  Prev: Changes in 'python' Command Behavior,  Up: Porting to Python 3 4

1.1.8.2 Changes in the Python API
.................................

   * The ABCs defined in *note importlib.abc: 9a. now either raise the
     appropriate exception or return a default value instead of raising
     *note NotImplementedError: 310. blindly.  This will only affect
     code calling *note super(): 311. and falling through all the way to
     the ABCs.  For compatibility, catch both *note NotImplementedError:
     310. or the appropriate exception as needed.

   * The module type now initializes the *note __package__: 312. and
     *note __loader__: 313. attributes to ‘None’ by default.  To
     determine if these attributes were set in a backwards-compatible
     fashion, use e.g.  ‘getattr(module, '__loader__', None) is not
     None’.  (issue 17115(1).)

   * *note importlib.util.module_for_loader(): 2f4. now sets
     ‘__loader__’ and ‘__package__’ unconditionally to properly support
     reloading.  If this is not desired then you will need to set these
     attributes manually.  You can use ‘importlib.util.module_to_load()’
     for module management.

   * Import now resets relevant attributes (e.g.  ‘__name__’,
     ‘__loader__’, ‘__package__’, ‘__file__’, ‘__cached__’)
     unconditionally when reloading.  Note that this restores a pre-3.3
     behavior in that it means a module is re-found when re-loaded
     (issue 19413(2)).

   * Frozen packages no longer set ‘__path__’ to a list containing the
     package name, they now set it to an empty list.  The previous
     behavior could cause the import system to do the wrong thing on
     submodule imports if there was also a directory with the same name
     as the frozen package.  The correct way to determine if a module is
     a package or not is to use ‘hasattr(module, '__path__')’ (issue
     18065(3)).

   * Frozen modules no longer define a ‘__file__’ attribute.  It’s
     semantically incorrect for frozen modules to set the attribute as
     they are not loaded from any explicit location.  If you must know
     that a module comes from frozen code then you can see if the
     module’s ‘__spec__.location’ is set to ‘'frozen'’, check if the
     loader is a subclass of *note importlib.machinery.FrozenImporter:
     314, or if Python 2 compatibility is necessary you can use
     ‘imp.is_frozen()’.

   * *note py_compile.compile(): 315. now raises *note FileExistsError:
     316. if the file path it would write to is a symlink or a
     non-regular file.  This is to act as a warning that import will
     overwrite those files with a regular file regardless of what type
     of file path they were originally.

   * *note importlib.abc.SourceLoader.get_source(): 317. no longer
     raises *note ImportError: 318. when the source code being loaded
     triggers a *note SyntaxError: 319. or *note UnicodeDecodeError:
     31a.  As *note ImportError: 318. is meant to be raised only when
     source code cannot be found but it should, it was felt to be
     over-reaching/overloading of that meaning when the source code is
     found but improperly structured.  If you were catching ImportError
     before and wish to continue to ignore syntax or decoding issues,
     catch all three exceptions now.

   * *note functools.update_wrapper(): 31b. and *note functools.wraps():
     1f9. now correctly set the ‘__wrapped__’ attribute to the function
     being wrapped, even if that function also had its ‘__wrapped__’
     attribute set.  This means ‘__wrapped__’ attributes now correctly
     link a stack of decorated functions rather than every ‘__wrapped__’
     attribute in the chain referring to the innermost function.
     Introspection libraries that assumed the previous behaviour was
     intentional can use *note inspect.unwrap(): 1f8. to access the
     first function in the chain that has no ‘__wrapped__’ attribute.

   * *note inspect.getfullargspec(): 1fa. has been reimplemented on top
     of *note inspect.signature(): 1fc. and hence handles a much wider
     variety of callable objects than it did in the past.  It is
     expected that additional builtin and extension module callables
     will gain signature metadata over the course of the Python 3.4
     series.  Code that assumes that *note inspect.getfullargspec():
     1fa. will fail on non-Python callables may need to be adjusted
     accordingly.

   * *note importlib.machinery.PathFinder: 31c. now passes on the
     current working directory to objects in *note sys.path_hooks: 31d.
     for the empty string.  This results in *note
     sys.path_importer_cache: 31e. never containing ‘''’, thus iterating
     through *note sys.path_importer_cache: 31e. based on *note
     sys.path: 2d5. will not find all keys.  A module’s ‘__file__’ when
     imported in the current working directory will also now have an
     absolute path, including when using ‘-m’ with the interpreter
     (except for ‘__main__.__file__’ when a script has been executed
     directly using a relative path) (Contributed by Brett Cannon in
     issue 18416(4)).  is specified on the command-line) (issue
     18416(5)).

   * The removal of the `strict' argument to *note HTTPConnection: 305.
     and *note HTTPSConnection: 306. changes the meaning of the
     remaining arguments if you are specifying them positionally rather
     than by keyword.  If you’ve been paying attention to deprecation
     warnings your code should already be specifying any additional
     arguments via keywords.

   * Strings between ‘from __future__ import ...’ statements now
     `always' raise a *note SyntaxError: 319.  Previously if there was
     no leading docstring, an interstitial string would sometimes be
     ignored.  This brings CPython into compliance with the language
     spec; Jython and PyPy already were.  (issue 17434(6)).

   * *note ssl.SSLSocket.getpeercert(): 26f. and *note
     ssl.SSLSocket.do_handshake(): 31f. now raise an *note OSError: 254.
     with ‘ENOTCONN’ when the ‘SSLSocket’ is not connected, instead of
     the previous behavior of raising an *note AttributeError: 320.  In
     addition, *note getpeercert(): 26f. will raise a *note ValueError:
     321. if the handshake has not yet been done.

   * *note base64.b32decode(): 322. now raises a *note binascii.Error:
     323. when the input string contains non-b32-alphabet characters,
     instead of a *note TypeError: 309.  This particular *note
     TypeError: 309. was missed when the other *note TypeError: 309.s
     were converted.  (Contributed by Serhiy Storchaka in issue
     18011(7).)  Note: this change was also inadvertently applied in
     Python 3.3.3.

   * The ‘file’ attribute is now automatically closed when the creating
     ‘cgi.FieldStorage’ instance is garbage collected.  If you were
     pulling the file object out separately from the ‘cgi.FieldStorage’
     instance and not keeping the instance alive, then you should either
     store the entire ‘cgi.FieldStorage’ instance or read the contents
     of the file before the ‘cgi.FieldStorage’ instance is garbage
     collected.

   * Calling ‘read’ or ‘write’ on a closed SSL socket now raises an
     informative *note ValueError: 321. rather than the previous more
     mysterious *note AttributeError: 320. (issue 9177(8)).

   * *note slice.indices(): 324. no longer produces an *note
     OverflowError: 325. for huge values.  As a consequence of this fix,
     *note slice.indices(): 324. now raises a *note ValueError: 321. if
     given a negative length; previously it returned nonsense values
     (issue 14794(9)).

   * The *note complex: 326. constructor, unlike the *note cmath: 19.
     functions, was incorrectly accepting *note float: 327. values if an
     object’s ‘__complex__’ special method returned one.  This now
     raises a *note TypeError: 309.  (issue 16290(10).)

   * The *note int: 185. constructor in 3.2 and 3.3 erroneously accepts
     *note float: 327. values for the `base' parameter.  It is unlikely
     anyone was doing this, but if so, it will now raise a *note
     TypeError: 309. (issue 16772(11)).

   * Defaults for keyword-only arguments are now evaluated `after'
     defaults for regular keyword arguments, instead of before.
     Hopefully no one wrote any code that depends on the previous buggy
     behavior (issue 16967(12)).

   * Stale thread states are now cleared after *note fork(): 328.  This
     may cause some system resources to be released that previously were
     incorrectly kept perpetually alive (for example, database
     connections kept in thread-local storage).  (issue 17094(13).)

   * Parameter names in ‘__annotations__’ dicts are now mangled
     properly, similarly to ‘__kwdefaults__’.  (Contributed by Yury
     Selivanov in issue 20625(14).)

   * *note hashlib.hash.name: 1dc. now always returns the identifier in
     lower case.  Previously some builtin hashes had uppercase names,
     but now that it is a formal public interface the naming has been
     made consistent (issue 18532(15)).

   * Because *note unittest.TestSuite: 2a5. now drops references to
     tests after they are run, test harnesses that re-use a *note
     TestSuite: 2a5. to re-run a set of tests may fail.  Test suites
     should not be re-used in this fashion since it means state is
     retained between test runs, breaking the test isolation that *note
     unittest: 114. is designed to provide.  However, if the lack of
     isolation is considered acceptable, the old behavior can be
     restored by creating a *note TestSuite: 2a5. subclass that defines
     a ‘_removeTestAtIndex’ method that does nothing (see *note
     TestSuite.__iter__(): 329.) (issue 11798(16)).

   * *note unittest: 114. now uses *note argparse: 6. for command line
     parsing.  There are certain invalid command forms that used to work
     that are no longer allowed; in theory this should not cause
     backward compatibility issues since the disallowed command forms
     didn’t make any sense and are unlikely to be in use.

   * The *note re.split(): 32a, *note re.findall(): 32b, and *note
     re.sub(): 32c. functions, and the *note group(): 32d. and *note
     groups(): 32e. methods of ‘match’ objects now always return a
     `bytes' object when the string to be matched is a *note bytes-like
     object: 19f.  Previously the return type matched the input type, so
     if your code was depending on the return value being, say, a
     ‘bytearray’, you will need to change your code.

   * *note audioop: d. functions now raise an error immediately if
     passed string input, instead of failing randomly later on (issue
     16685(17)).

   * The new `convert_charrefs' argument to *note HTMLParser: 1e5.
     currently defaults to ‘False’ for backward compatibility, but will
     eventually be changed to default to ‘True’.  It is recommended that
     you add this keyword, with the appropriate value, to any *note
     HTMLParser: 1e5. calls in your code (issue 13633(18)).

   * Since the `digestmod' argument to the *note hmac.new(): 1de.
     function will in the future have no default, all calls to *note
     hmac.new(): 1de. should be changed to explicitly specify a
     `digestmod' (issue 17276(19)).

   * Calling *note sysconfig.get_config_var(): 32f. with the ‘SO’ key,
     or looking ‘SO’ up in the results of a call to *note
     sysconfig.get_config_vars(): 330. is deprecated.  This key should
     be replaced by ‘EXT_SUFFIX’ or ‘SHLIB_SUFFIX’, depending on the
     context (issue 19555(20)).

   * Any calls to ‘open’ functions that specify ‘U’ should be modified.
     ‘U’ is ineffective in Python3 and will eventually raise an error if
     used.  Depending on the function, the equivalent of its old Python2
     behavior can be achieved using either a `newline' argument, or if
     necessary by wrapping the stream in *note TextIOWrapper: 2fd. to
     use its `newline' argument (issue 15204(21)).

   * If you use *note pyvenv: 167. in a script and desire that pip `not'
     be installed, you must add ‘--without-pip’ to your command
     invocation.

   * The default behavior of *note json.dump(): 331. and *note
     json.dumps(): 332. when an indent is specified has changed: it no
     longer produces trailing spaces after the item separating commas at
     the ends of lines.  This will matter only if you have tests that
     are doing white-space-sensitive comparisons of such output (issue
     16333(22)).

   * *note doctest: 65. now looks for doctests in extension module
     ‘__doc__’ strings, so if your doctest test discovery includes
     extension modules that have things that look like doctests in them
     you may see test failures you’ve never seen before when running
     your tests (issue 3158(23)).

   * The *note collections.abc: 1f. module has been slightly refactored
     as part of the Python startup improvements.  As a consequence of
     this, it is no longer the case that importing *note collections:
     1e. automatically imports *note collections.abc: 1f.  If your
     program depended on the (undocumented) implicit import, you will
     need to add an explicit ‘import collections.abc’ (issue 20784(24)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue17115

   (2) https://bugs.python.org/issue19413

   (3) https://bugs.python.org/issue18065

   (4) https://bugs.python.org/issue18416

   (5) https://bugs.python.org/issue18416

   (6) https://bugs.python.org/issue17434

   (7) https://bugs.python.org/issue18011

   (8) https://bugs.python.org/issue9177

   (9) https://bugs.python.org/issue14794

   (10) https://bugs.python.org/issue16290

   (11) https://bugs.python.org/issue16772

   (12) https://bugs.python.org/issue16967

   (13) https://bugs.python.org/issue17094

   (14) https://bugs.python.org/issue20625

   (15) https://bugs.python.org/issue18532

   (16) https://bugs.python.org/issue11798

   (17) https://bugs.python.org/issue16685

   (18) https://bugs.python.org/issue13633

   (19) https://bugs.python.org/issue17276

   (20) https://bugs.python.org/issue19555

   (21) https://bugs.python.org/issue15204

   (22) https://bugs.python.org/issue16333

   (23) https://bugs.python.org/issue3158

   (24) https://bugs.python.org/issue20784


File: python.info,  Node: Changes in the C API,  Prev: Changes in the Python API,  Up: Porting to Python 3 4

1.1.8.3 Changes in the C API
............................

   * *note PyEval_EvalFrameEx(): 334, *note PyObject_Repr(): 335, and
     *note PyObject_Str(): 336, along with some other internal C APIs,
     now include a debugging assertion that ensures they are not used in
     situations where they may silently discard a currently active
     exception.  In cases where discarding the active exception is
     expected and desired (for example, because it has already been
     saved locally with *note PyErr_Fetch(): 337. or is being
     deliberately replaced with a different exception), an explicit
     *note PyErr_Clear(): 338. call will be needed to avoid triggering
     the assertion when invoking these operations (directly or
     indirectly) and running against a version of Python that is
     compiled with assertions enabled.

   * *note PyErr_SetImportError(): 339. now sets *note TypeError: 309.
     when its `msg' argument is not set.  Previously only ‘NULL’ was
     returned with no exception set.

   * The result of the *note PyOS_ReadlineFunctionPointer: 33a. callback
     must now be a string allocated by *note PyMem_RawMalloc(): 33b. or
     *note PyMem_RawRealloc(): 33c, or `NULL' if an error occurred,
     instead of a string allocated by *note PyMem_Malloc(): 33d. or
     *note PyMem_Realloc(): 33e. (issue 16742(1))

   * ‘PyThread_set_key_value()’ now always set the value.  In Python
     3.3, the function did nothing if the key already exists (if the
     current value is a non-NULL pointer).

   * The ‘f_tstate’ (thread state) field of the ‘PyFrameObject’
     structure has been removed to fix a bug: see issue 14432(2) for the
     rationale.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue16742

   (2) https://bugs.python.org/issue14432


File: python.info,  Node: Changed in 3 4 3,  Prev: Porting to Python 3 4,  Up: What's New In Python 3 4

1.1.9 Changed in 3.4.3
----------------------

* Menu:

* PEP 476; Enabling certificate verification by default for stdlib http clients: PEP 476 Enabling certificate verification by default for stdlib http clients. 


File: python.info,  Node: PEP 476 Enabling certificate verification by default for stdlib http clients,  Up: Changed in 3 4 3

1.1.9.1 PEP 476: Enabling certificate verification by default for stdlib http clients
.....................................................................................

*note http.client: 92. and modules which use it, such as *note
urllib.request: 119. and *note xmlrpc.client: 138, will now verify that
the server presents a certificate which is signed by a CA in the
platform trust store and whose hostname matches the hostname being
requested by default, significantly improving security for many
applications.

For applications which require the old previous behavior, they can pass
an alternate context:

     import urllib.request
     import ssl

     # This disables all verification
     context = ssl._create_unverified_context()

     # This allows using a specific certificate for the host, which doesn't need
     # to be in the trust store
     context = ssl.create_default_context(cafile="/path/to/file.crt")

     urllib.request.urlopen("https://invalid-cert", context=context)


File: python.info,  Node: What's New In Python 3 3,  Next: What's New In Python 3 2,  Prev: What's New In Python 3 4,  Up: What's New in Python

1.2 What’s New In Python 3.3
============================

This article explains the new features in Python 3.3, compared to 3.2.
Python 3.3 was released on September 29, 2012.  For full details, see
the changelog(1).

See also
........

PEP 398(2) - Python 3.3 Release Schedule

* Menu:

* Summary: Summary -- Release highlights. Release highlights
* PEP 405; Virtual Environments: PEP 405 Virtual Environments. 
* PEP 420; Implicit Namespace Packages: PEP 420 Implicit Namespace Packages. 
* PEP 3118; New memoryview implementation and buffer protocol documentation: PEP 3118 New memoryview implementation and buffer protocol documentation. 
* PEP 393; Flexible String Representation: PEP 393 Flexible String Representation. 
* PEP 397; Python Launcher for Windows: PEP 397 Python Launcher for Windows. 
* PEP 3151; Reworking the OS and IO exception hierarchy: PEP 3151 Reworking the OS and IO exception hierarchy. 
* PEP 380; Syntax for Delegating to a Subgenerator: PEP 380 Syntax for Delegating to a Subgenerator. 
* PEP 409; Suppressing exception context: PEP 409 Suppressing exception context. 
* PEP 414; Explicit Unicode literals: PEP 414 Explicit Unicode literals. 
* PEP 3155; Qualified name for classes and functions: PEP 3155 Qualified name for classes and functions. 
* PEP 412; Key-Sharing Dictionary: PEP 412 Key-Sharing Dictionary. 
* PEP 362; Function Signature Object: PEP 362 Function Signature Object. 
* PEP 421; Adding sys.implementation: PEP 421 Adding sys implementation. 
* Using importlib as the Implementation of Import:: 
* Other Language Changes: Other Language Changes<2>. 
* A Finer-Grained Import Lock:: 
* Builtin functions and types:: 
* New Modules: New Modules<2>. 
* Improved Modules: Improved Modules<2>. 
* Optimizations:: 
* Build and C API Changes:: 
* Deprecated: Deprecated<2>. 
* Porting to Python 3.3: Porting to Python 3 3. 

   ---------- Footnotes ----------

   (1) https://docs.python.org/3.3/whatsnew/changelog.html

   (2) https://www.python.org/dev/peps/pep-0398

