This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 3.4.3, September 02, 2015

     Copyright © 1990-2015, Python Software Foundation

INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.3.1.


File: python.info,  Node: Library<25>,  Next: Build<21>,  Prev: Core and Builtins<25>,  Up: Python 3 3 0 Alpha 1

1.14.26.2 Library
.................

   - Issue #14195(1): An issue that caused weakref.WeakSet instances to
     incorrectly return True for a WeakSet instance ’a’ in both ’a < a’
     and ’a > a’ has been fixed.

   - Issue #14166(2): Pickler objects now have an optional
     ‘dispatch_table’ attribute which allows to set custom per-pickler
     reduction functions.  Patch by sbt.

   - Issue #14177(3): marshal.loads() now raises TypeError when given an
     unicode string.  Patch by Guilherme Gonçalves.

   - Issue #13550(4): Remove the debug machinery from the threading
     module: remove verbose arguments from all threading classes and
     functions.

   - Issue #14159(5): Fix the len() of weak containers (WeakSet,
     WeakKeyDictionary, WeakValueDictionary) to return a better
     approximation when some objects are dead or dying.  Moreover, the
     implementation is now O(1) rather than O(n).

   - Issue #11841(6): Fix comparison bug with ’rc’ versions in
     packaging.version.  Patch by Filip Gruszczyński.

   - Issue #6884(7): Fix long-standing bugs with MANIFEST.in parsing in
     distutils on Windows.  Also fixed in packaging.

   - Issue #8033(8): sqlite3: Fix 64-bit integer handling in user
     functions on 32-bit architectures.  Initial patch by Philippe
     Devalkeneer.

   - HTMLParser is now able to handle slashes in the start tag.

   - Issue #13641(9): Decoding functions in the base64 module now accept
     ASCII-only unicode strings.  Patch by Catalin Iacob.

   - Issue #14043(10): Speed up importlib’s _FileFinder by at least 8x,
     and add a new importlib.invalidate_caches() function.

   - Issue #14001(11): CVE-2012-0845: xmlrpc: Fix an endless loop in
     SimpleXMLRPCServer upon malformed POST request.

   - Issue #13961(12): Move importlib over to using os.replace() for
     atomic renaming.

   - Do away with ambiguous level values (as suggested by PEP 328) in
     importlib.__import__() by raising ValueError when level < 0.

   - Issue #2489(13): pty.spawn could consume 100% cpu when it
     encountered an EOF.

   - Issue #13014(14): Fix a possible reference leak in
     SSLSocket.getpeercert().

   - Issue #13777(15): Add PF_SYSTEM sockets on OS X. Patch by Michael
     Goderbauer.

   - Issue #13015(16): Fix a possible reference leak in
     defaultdict.__repr__.  Patch by Suman Saha.

   - Issue #1326113(17): distutils’ and packaging’s build_ext commands
     option now correctly parses multiple values (separated by
     whitespace or commas) given to their –libraries option.

   - Issue #10287(18): nntplib now queries the server’s CAPABILITIES
     first before sending MODE READER, and only sends it if not already
     in READER mode.  Patch by Hynek Schlawack.

   - Issue #13993(19): HTMLParser is now able to handle broken end tags
     when strict=False.

   - Issue #13930(20): lib2to3 now supports writing converted output
     files to another directory tree as well as copying unchanged files
     and altering the file suffix.

   - Issue #9750(21): Fix sqlite3.Connection.iterdump on tables and
     fields with a name that is a keyword or contains quotes.  Patch by
     Marko Kohtala.

   - Issue #10287(22): nntplib now queries the server’s CAPABILITIES
     again after authenticating (since the result may change, according
     to RFC 4643).  Patch by Hynek Schlawack.

   - Issue #13590(23): On OS X 10.7 and 10.6 with Xcode 4.2, building
     Distutils-based packages with C extension modules may fail because
     Apple has removed gcc-4.2, the version used to build python.org
     64-bit/32-bit Pythons.  If the user does not explicitly override
     the default C compiler by setting the CC environment variable,
     Distutils will now attempt to compile extension modules with clang
     if gcc-4.2 is required but not found.  Also as a convenience, if
     the user does explicitly set CC, substitute its value as the
     default compiler in the Distutils LDSHARED configuration variable
     for OS X. (Note, the python.org 32-bit-only Pythons use gcc-4.0 and
     the 10.4u SDK, neither of which are available in Xcode 4.  This
     change does not attempt to override settings to support their use
     with Xcode 4.)

   - Issue #13960(24): HTMLParser is now able to handle broken comments
     when strict=False.

   - When ’’ is a path (e.g.  in sys.path), make sure __file__ uses the
     current working directory instead of ’’ in importlib.

   - Issue #13609(25): Add two functions to query the terminal size:
     os.get_terminal_size (low level) and shutil.get_terminal_size (high
     level).  Patch by Zbigniew Jędrzejewski-Szmek.

   - Issue #13845(26): On Windows, time.time() now uses
     GetSystemTimeAsFileTime() instead of ftime() to have a resolution
     of 100 ns instead of 1 ms (the clock accuracy is between 0.5 ms and
     15 ms).

   - Issue #13846(27): Add time.monotonic(), monotonic clock.

   - Issue #8184(28): multiprocessing: On Windows, don’t set
     SO_REUSEADDR on Connection sockets, and set
     FILE_FLAG_FIRST_PIPE_INSTANCE on named pipes, to make sure two
     listeners can’t bind to the same socket/pipe (or any existing
     socket/pipe).

   - Issue #10811(29): Fix recursive usage of cursors.  Instead of
     crashing, raise a ProgrammingError now.

   - Issue #13734(30): Add os.fwalk(), a directory walking function
     yielding file descriptors.

   - Issue #2945(31): Make the distutils upload command aware of
     bdist_rpm products.

   - Issue #13712(32): pysetup create should not convert package_data to
     extra_files.

   - Issue #11805(33): package_data in setup.cfg should allow more than
     one value.

   - Issue #13676(34): Handle strings with embedded zeros correctly in
     sqlite3.

   - Issue #8828(35): Add new function os.replace(), for cross-platform
     renaming with overwriting.

   - Issue #13848(36): open() and the FileIO constructor now check for
     NUL characters in the file name.  Patch by Hynek Schlawack.

   - Issue #13806(37): The size check in audioop decompression functions
     was too strict and could reject valid compressed data.  Patch by
     Oleg Plakhotnyuk.

   - Issue #13812(38): When a multiprocessing Process child raises an
     exception, flush stderr after printing the exception traceback.

   - Issue #13885(39): CVE-2011-3389: the _ssl module would always
     disable the CBC IV attack countermeasure.

   - Issue #13847(40): time.localtime() and time.gmtime() now raise an
     OSError instead of ValueError on failure.  time.ctime() and
     time.asctime() now raises an OSError if localtime() failed.
     time.clock() now raises a RuntimeError if the processor time used
     is not available or its value cannot be represented

   - Issue #13772(41): In os.symlink() under Windows, do not try to
     guess the link target’s type (file or directory).  The detection
     was buggy and made the call non-atomic (therefore prone to race
     conditions).

   - Issue #6631(42): Disallow relative file paths in urllib urlopen
     methods.

   - Issue #13722(43): Avoid silencing ImportErrors when initializing
     the codecs registry.

   - Issue #13781(44): Fix GzipFile bug that caused an exception to be
     raised when opening for writing using a fileobj returned by
     os.fdopen().

   - Issue #13803(45): Under Solaris, distutils doesn’t include bitness
     in the directory name.

   - Issue #10278(46): Add time.wallclock() function, monotonic clock.

   - Issue #13809(47): Fix regression where bz2 module wouldn’t work
     when threads are disabled.  Original patch by Amaury Forgeot d’Arc.

   - Issue #13589(48): Fix some serialization primitives in the aifc
     module.  Patch by Oleg Plakhotnyuk.

   - Issue #13642(49): Unquote before b64encoding user:password during
     Basic Authentication.  Patch contributed by Joonas Kuorilehto.

   - Issue #12364(50): Fix a hang in
     concurrent.futures.ProcessPoolExecutor.  The hang would occur when
     retrieving the result of a scheduled future after the executor had
     been shut down.

   - Issue #13502(51): threading: Fix a race condition in Event.wait()
     that made it return False when the event was set and cleared right
     after.

   - Issue #9993(52): When the source and destination are on different
     filesystems, and the source is a symlink, shutil.move() now
     recreates a symlink on the destination instead of copying the file
     contents.  Patch by Jonathan Niehof and Hynek Schlawack.

   - Issue #12926(53): Fix a bug in tarfile’s link extraction.

   - Issue #13696(54): Fix the 302 Relative URL Redirection problem.

   - Issue #13636(55): Weak ciphers are now disabled by default in the
     ssl module (except when SSLv2 is explicitly asked for).

   - Issue #12715(56): Add an optional symlinks argument to shutil
     functions (copyfile, copymode, copystat, copy, copy2).  When that
     parameter is true, symlinks aren’t dereferenced and the operation
     instead acts on the symlink itself (or creates one, if relevant).
     Patch by Hynek Schlawack.

   - Add a flags parameter to select.epoll.

   - Issue #13626(57): Add support for SSL Diffie-Hellman key exchange,
     through the SSLContext.load_dh_params() method and the
     ssl.OP_SINGLE_DH_USE option.

   - Issue #11006(58): Don’t issue low level warning in subprocess when
     pipe2() fails.

   - Issue #13620(59): Support for Chrome browser in webbrowser.  Patch
     contributed by Arnaud Calmettes.

   - Issue #11829(60): Fix code execution holes in
     inspect.getattr_static for metaclasses with metaclasses.  Patch by
     Andreas Stührk.

   - Issue #12708(61): Add starmap() and starmap_async() methods
     (similar to itertools.starmap()) to multiprocessing.Pool.  Patch by
     Hynek Schlawack.

   - Issue #1785(62): Fix inspect and pydoc with misbehaving
     descriptors.

   - Issue #13637(63): "a2b" functions in the binascii module now accept
     ASCII-only unicode strings.

   - Issue #13634(64): Add support for querying and disabling SSL
     compression.

   - Issue #13627(65): Add support for SSL Elliptic Curve-based
     Diffie-Hellman key exchange, through the
     SSLContext.set_ecdh_curve() method and the ssl.OP_SINGLE_ECDH_USE
     option.

   - Issue #13635(66): Add ssl.OP_CIPHER_SERVER_PREFERENCE, so that SSL
     servers choose the cipher based on their own preferences, rather
     than on the client’s.

   - Issue #11813(67): Fix inspect.getattr_static for modules.  Patch by
     Andreas Stührk.

   - Issue #7502(68): Fix equality comparison for DocTestCase instances.
     Patch by Cédric Krier.

   - Issue #11870(69): threading: Properly reinitialize threads internal
     locks and condition variables to avoid deadlocks in child
     processes.

   - Issue #8035(70): urllib: Fix a bug where the client could remain
     stuck after a redirection or an error.

   - Issue #13560(71): os.strerror() now uses the current locale
     encoding instead of UTF-8.

   - Issue #8373(72): The filesystem path of AF_UNIX sockets now uses
     the filesystem encoding and the surrogateescape error handler,
     rather than UTF-8.  Patch by David Watson.

   - Issue #10350(73): Read and save errno before calling a function
     which might overwrite it.  Original patch by Hallvard B Furuseth.

   - Issue #11610(74): Introduce a more general way to declare abstract
     properties.

   - Issue #13591(75): A bug in importlib has been fixed that caused
     import_module to load a module twice.

   - Issue #13449(76) sched.scheduler.run() method has a new "blocking"
     parameter which when set to False makes run() execute the scheduled
     events due to expire soonest (if any) and then return.  Patch by
     Giampaolo Rodolà.

   - Issue #8684(77) sched.scheduler class can be safely used in
     multi-threaded environments.  Patch by Josiah Carlson and Giampaolo
     Rodolà.

   - Alias resource.error to OSError ala PEP 3151.

   - Issue #5689(78): Add support for lzma compression to the tarfile
     module.

   - Issue #13248(79): Turn 3.2’s PendingDeprecationWarning into 3.3’s
     DeprecationWarning.  It covers ’cgi.escape’,
     ’importlib.abc.PyLoader’, ’importlib.abc.PyPycLoader’,
     ’nntplib.NNTP.xgtitle’, ’nntplib.NNTP.xpath’, and private
     attributes of ’smtpd.SMTPChannel’.

   - Issue #5905(80), Issue #13560(81): time.strftime() is now using the
     current locale encoding, instead of UTF-8, if the wcsftime()
     function is not available.

   - Issue #13464(82): Add a readinto() method to
     http.client.HTTPResponse.  Patch by Jon Kuhn.

   - tarfile.py: Correctly detect bzip2 compressed streams with
     blocksizes other than 900k.

   - Issue #13439(83): Fix many errors in turtle docstrings.

   - Issue #6715(84): Add a module ’lzma’ for compression using the LZMA
     algorithm.  Thanks to Per Øyvind Karlsen for the initial
     implementation.

   - Issue #13487(85): Make inspect.getmodule robust against changes
     done to sys.modules while it is iterating over it.

   - Issue #12618(86): Fix a bug that prevented py_compile from creating
     byte compiled files in the current directory.  Initial patch by
     Sjoerd de Vries.

   - Issue #13444(87): When stdout has been closed explicitly, we should
     not attempt to flush it at shutdown and print an error.

   - Issue #12567(88): The curses module uses Unicode functions for
     Unicode arguments when it is linked to the ncurses library.  It
     encodes also Unicode strings to the locale encoding instead of
     UTF-8.

   - Issue #12856(89): Ensure child processes do not inherit the
     parent’s random seed for filename generation in the tempfile
     module.  Patch by Brian Harring.

   - Issue #9957(90): SpooledTemporaryFile.truncate() now accepts an
     optional size parameter, as other file-like objects.  Patch by Ryan
     Kelly.

   - Issue #13458(91): Fix a memory leak in the ssl module when decoding
     a certificate with a subjectAltName.  Patch by Robert Xiao.

   - Issue #13415(92): os.unsetenv() doesn’t ignore errors anymore.

   - Issue #13245(93): sched.scheduler class constructor’s timefunc and
     delayfunct parameters are now optional.  scheduler.enter and
     scheduler.enterabs methods gained a new kwargs parameter.  Patch
     contributed by Chris Clark.

   - Issue #12328(94): Under Windows, refactor handling of Ctrl-C events
     and make _multiprocessing.win32.WaitForMultipleObjects
     interruptible when the wait_flag parameter is false.  Patch by sbt.

   - Issue #13322(95): Fix BufferedWriter.write() to ensure that
     BlockingIOError is raised when the wrapped raw file is non-blocking
     and the write would block.  Previous code assumed that the raw
     write() would raise BlockingIOError, but RawIOBase.write() is
     defined to returned None when the call would block.  Patch by sbt.

   - Issue #13358(96): HTMLParser now calls handle_data only once for
     each CDATA.

   - Issue #4147(97): minidom’s toprettyxml no longer adds whitespace
     around a text node when it is the only child of an element.
     Initial patch by Dan Kenigsberg.

   - Issue #13374(98): The Windows bytes API has been deprecated in the
     os module.  Use Unicode filenames instead of bytes filenames to not
     depend on the ANSI code page anymore and to support any filename.

   - Issue #13297(99): Use bytes type to send and receive binary data
     through XMLRPC.

   - Issue #6397(100): Support "/dev/poll" polling objects in select
     module, under Solaris & derivatives.

   - Issues #1745761, #755670, #13357, #12629, #1200313: HTMLParser now
     correctly handles non-valid attributes, including adjacent and
     unquoted attributes.

   - Issue #13193(101): Fix distutils.filelist.FileList and
     packaging.manifest.Manifest under Windows.

   - Issue #13384(102): Remove unnecessary __future__ import in
     Lib/random.py

   - Issue #13149(103): Speed up append-only StringIO objects.

   - Issue #13373(104): multiprocessing.Queue.get() could sometimes
     block indefinitely when called with a timeout.  Patch by Arnaud
     Ysmal.

   - Issue #13254(105): Fix Maildir initialization so that maildir
     contents are read correctly.

   - Issue #3067(106): locale.setlocale() now raises TypeError if the
     second argument is an invalid iterable.  Its documentation and
     docstring were also updated.  Initial patch by Jyrki Pulliainen.

   - Issue #13140(107): Fix the daemon_threads attribute of
     ThreadingMixIn.

   - Issue #13339(108): Fix compile error in posixmodule.c due to
     missing semicolon.  Thanks to Robert Xiao.

   - Byte compilation in packaging is now isolated from the calling
     Python -B or -O options, instead of being disallowed under -B or
     buggy under -O.

   - Issue #10570(109): curses.putp() and curses.tparm() are now
     expecting a byte string, instead of a Unicode string.

   - Issue #13295(110): http.server now produces valid HTML 4.01 strict.

   - Issue #2892(111): preserve iterparse events in case of SyntaxError.

   - Issue #13287(112): urllib.request and urllib.error now contains an
     __all__ attribute to expose only relevant classes and functions.
     Patch by Florent Xicluna.

   - Issue #670664(113): Fix HTMLParser to correctly handle the content
     of ‘<script>...</script>’ and ‘<style>...</style>’.

   - Issue #10817(114): Fix urlretrieve function to raise
     ContentTooShortError even when reporthook is None.  Patch by Jyrki
     Pulliainen.

   - Fix the xmlrpc.client user agent to return something similar to
     urllib.request user agent: "Python-xmlrpc/3.3".

   - Issue #13293(115): Better error message when trying to marshal
     bytes using xmlrpc.client.

   - Issue #13291(116): NameError in xmlrpc package.

   - Issue #13258(117): Use callable() built-in in the standard library.

   - Issue #13273(118): fix a bug that prevented HTMLParser to properly
     detect some tags when strict=False.

   - Issue #11183(119): Add finer-grained exceptions to the ssl module,
     so that you don’t have to inspect the exception’s attributes in the
     common case.

   - Issue #13216(120): Add cp65001 codec, the Windows UTF-8 (CP_UTF8).

   - Issue #13226(121): Add RTLD_xxx constants to the os module.  These
     constants can be used with sys.setdlopenflags().

   - Issue #10278(122): Add clock_getres(), clock_gettime() and
     CLOCK_xxx constants to the time module.
     time.clock_gettime(time.CLOCK_MONOTONIC) provides a monotonic clock

   - Issue #10332(123): multiprocessing: fix a race condition when a
     Pool is closed before all tasks have completed.

   - Issue #13255(124): wrong docstrings in array module.

   - Issue #8540(125): Remove deprecated Context._clamp attribute in
     Decimal module.

   - Issue #13235(126): Added DeprecationWarning to logging.warn()
     method and function.

   - Issue #9168(127): now smtpd is able to bind privileged port.

   - Issue #12529(128): fix cgi.parse_header issue on strings with
     double-quotes and semicolons together.  Patch by Ben Darnell and
     Petri Lehtinen.

   - Issue #13227(129): functools.lru_cache() now has a option to
     distinguish calls with different argument types.

   - Issue #6090(130): zipfile raises a ValueError when a document with
     a timestamp earlier than 1980 is provided.  Patch contributed by
     Petri Lehtinen.

   - Issue #13150(131): sysconfig no longer parses the Makefile and
     config.h files when imported, instead doing it at build time.  This
     makes importing sysconfig faster and reduces Python startup time by
     20%.

   - Issue #12448(132): smtplib now flushes stdout while running ‘python
     -m smtplib’ in order to display the prompt correctly.

   - Issue #12454(133): The mailbox module is now using ASCII, instead
     of the locale encoding, to read and write .mh_sequences files.

   - Issue #13194(134): zlib.compressobj().copy() and
     zlib.decompressobj().copy() are now available on Windows.

   - Issue #1673007(135): urllib.request now supports HEAD request via
     new method argument.  Patch contributions by David Stanek, Patrick
     Westerhoff and Ezio Melotti.

   - Issue #12386(136): packaging does not fail anymore when writing the
     RESOURCES file.

   - Issue #13158(137): Fix decoding and encoding of GNU tar specific
     base-256 number fields in tarfile.

   - Issue #13025(138): mimetypes is now reading MIME types using the
     UTF-8 encoding, instead of the locale encoding.

   - Issue #10653(139): On Windows, use strftime() instead of wcsftime()
     because wcsftime() doesn’t format time zone correctly.

   - Issue #13150(140): The tokenize module doesn’t compile large
     regular expressions at startup anymore.

   - Issue #11171(141): Fix distutils.sysconfig.get_makefile_filename
     when Python was configured with different prefix and exec-prefix.

   - Issue #11254(142): Teach distutils and packaging to compile .pyc
     and .pyo files in PEP 3147-compliant __pycache__ directories.

   - Issue #7367(143): Fix pkgutil.walk_paths to skip directories whose
     contents cannot be read.

   - Issue #3163(144): The struct module gets new format characters ’n’
     and ’N’ supporting C integer types ‘ssize_t’ and ‘size_t’,
     respectively.

   - Issue #13099(145): Fix sqlite3.Cursor.lastrowid under a Turkish
     locale.  Reported and diagnosed by Thomas Kluyver.

   - Issue #13087(146): BufferedReader.seek() now always raises
     UnsupportedOperation if the underlying raw stream is unseekable,
     even if the seek could be satisfied using the internal buffer.
     Patch by John O’Connor.

   - Issue #7689(147): Allow pickling of dynamically created classes
     when their metaclass is registered with copyreg.  Patch by Nicolas
     M. Thiéry and Craig Citro.

   - Issue #13034(148): When decoding some SSL certificates, the
     subjectAltName extension could be unreported.

   - Issue #12306(149): Expose the runtime version of the zlib C library
     as a constant, ZLIB_RUNTIME_VERSION, in the zlib module.  Patch by
     Torsten Landschoff.

   - Issue #12959(150): Add collections.ChainMap to collections.__all__.

   - Issue #8933(151): distutils’ PKG-INFO files and packaging’s
     METADATA files will now correctly report Metadata-Version: 1.1
     instead of 1.0 if a Classifier or Download-URL field is present.

   - Issue #12567(152): Add curses.unget_wch() function.  Push a
     character so the next get_wch() will return it.

   - Issue #9561(153): distutils and packaging now writes egg-info files
     using UTF-8, instead of the locale encoding.

   - Issue #8286(154): The distutils command sdist will print a warning
     message instead of crashing when an invalid path is given in the
     manifest template.

   - Issue #12841(155): tarfile unnecessarily checked the existence of
     numerical user and group ids on extraction.  If one of them did not
     exist the respective id of the current user (i.e.  root) was used
     for the file and ownership information was lost.

   - Issue #12888(156): Fix a bug in HTMLParser.unescape that prevented
     it to escape more than 128 entities.  Patch by Peter Otten.

   - Issue #12878(157): Expose a __dict__ attribute on io.IOBase and its
     subclasses.

   - Issue #12494(158): On error, call(), check_call(), check_output()
     and getstatusoutput() functions of the subprocess module now kill
     the process, read its status (to avoid zombis) and close pipes.

   - Issue #12720(159): Expose low-level Linux extended file attribute
     functions in os.

   - Issue #10946(160): The distutils commands bdist_dumb, bdist_wininst
     and bdist_msi now respect a –skip-build option given to bdist.  The
     packaging commands were fixed too.

   - Issue #12847(161): Fix a crash with negative PUT and LONG_BINPUT
     arguments in the C pickle implementation.

   - Issue #11564(162): Avoid crashes when trying to pickle huge objects
     or containers (more than 2**31 items).  Instead, in most cases, an
     OverflowError is raised.

   - Issue #12287(163): Fix a stack corruption in ossaudiodev module
     when the FD is greater than FD_SETSIZE.

   - Issue #12839(164): Fix crash in zlib module due to version
     mismatch.  Fix by Richard M. Tew.

   - Issue #9923(165): The mailcap module now correctly uses the
     platform path separator for the MAILCAP environment variable on
     non-POSIX platforms.

   - Issue #12835(166): Follow up to #6560 that unconditionally prevents
     use of the unencrypted sendmsg/recvmsg APIs on SSL wrapped sockets.
     Patch by David Watson.

   - Issue #12803(167): SSLContext.load_cert_chain() now accepts a
     password argument to be used if the private key is encrypted.
     Patch by Adam Simpkins.

   - Issue #11657(168): Fix sending file descriptors over 255 over a
     multiprocessing Pipe.

   - Issue #12811(169): tabnanny.check() now promptly closes checked
     files.  Patch by Anthony Briggs.

   - Issue #6560(170): The sendmsg/recvmsg API is now exposed by the
     socket module when provided by the underlying platform, supporting
     processing of ancillary data in pure Python code.  Patch by David
     Watson and Heiko Wundram.

   - Issue #12326(171): On Linux, sys.platform doesn’t contain the major
     version anymore.  It is now always ’linux’, instead of ’linux2’ or
     ’linux3’ depending on the Linux version used to build Python.

   - Issue #12213(172): Fix a buffering bug with interleaved reads and
     writes that could appear on BufferedRandom streams.

   - Issue #12778(173): Reduce memory consumption when JSON-encoding a
     large container of many small objects.

   - Issue #12650(174): Fix a race condition where a subprocess.Popen
     could leak resources (FD/zombie) when killed at the wrong time.

   - Issue #12744(175): Fix inefficient representation of integers
     between 2**31 and 2**63 on systems with a 64-bit C "long".

   - Issue #12646(176): Add an ’eof’ attribute to zlib.Decompress, to
     make it easier to detect truncated input streams.

   - Issue #11513(177): Fix exception handling
     ‘tarfile.TarFile.gzopen()’ when the file cannot be opened.

   - Issue #12687(178): Fix a possible buffering bug when unpickling
     text mode (protocol 0, mostly) pickles.

   - Issue #10087(179): Fix the html output format of the calendar
     module.

   - Issue #13121(180): add support for inplace math operators to
     collections.Counter.

   - Add support for unary plus and unary minus to collections.Counter.

   - Issue #12683(181): urlparse updated to include svn as schemes that
     uses relative paths.  (svn from 1.5 onwards support relative path).

   - Issue #12655(182): Expose functions from sched.h in the os module:
     sched_yield(), sched_setscheduler(), sched_getscheduler(),
     sched_setparam(), sched_get_min_priority(),
     sched_get_max_priority(), sched_rr_get_interval(),
     sched_getaffinity(), sched_setaffinity().

   - Add ThreadError to threading.__all__.

   - Issues #11104, #8688: Fix the behavior of distutils’ sdist command
     with manually-maintained MANIFEST files.

   - Issue #11281(183): smtplib.STMP gets source_address parameter,
     which adds the ability to bind to specific source address on a
     machine with multiple interfaces.  Patch by Paulo Scardine.

   - Issue #12464(184): tempfile.TemporaryDirectory.cleanup() should not
     follow symlinks: fix it.  Patch by Petri Lehtinen.

   - Issue #8887(185): "pydoc somebuiltin.somemethod" (or
     help(’somebuiltin.somemethod’) in Python code) now finds the doc of
     the method.

   - Issue #10968(186): Remove indirection in threading.  The public
     names (Event, Condition, etc.)  used to be factory functions
     returning instances of hidden classes (_Event, _Condition, etc.),
     because (if Guido recalls correctly) this code pre-dates the
     ability to subclass extension types.  It is now possible to inherit
     from these classes, without having to import the private
     underscored names like multiprocessing did.

   - Issue #9723(187): Add shlex.quote functions, to escape filenames
     and command lines.

   - Issue #12603(188): Fix pydoc.synopsis() on files with non-negative
     st_mtime.

   - Issue #12514(189): Use try/finally to assure the timeit module
     restores garbage collections when it is done.

   - Issue #12607(190): In subprocess, fix issue where if stdin, stdout
     or stderr is given as a low fd, it gets overwritten.

   - Issue #12576(191): Fix urlopen behavior on sites which do not send
     (or obfuscates) ‘Connection: close’ header.

   - Issue #12560(192): Build libpython.so on OpenBSD. Patch by Stefan
     Sperling.

   - Issue #1813(193): Fix codec lookup under Turkish locales.

   - Issue #12591(194): Improve support of "universal newlines" in the
     subprocess module: the piped streams can now be properly read from
     or written to.

   - Issue #12591(195): Allow io.TextIOWrapper to work with raw IO
     objects (without a read1() method), and add a `write_through'
     parameter to mandate unbuffered writes.

   - Issue #10883(196): Fix socket leaks in urllib.request when using
     FTP.

   - Issue #12592(197): Make Python build on OpenBSD 5 (and future major
     releases).

   - Issue #12372(198): POSIX semaphores are broken on AIX: don’t use
     them.

   - Issue #12551(199): Provide a get_channel_binding() method on SSL
     sockets so as to get channel binding data for the current SSL
     session (only the "tls-unique" channel binding is implemented).
     This allows the implementation of certain authentication mechanisms
     such as SCRAM-SHA-1-PLUS. Patch by Jacek Konieczny.

   - Issue #665194(200): email.utils now has format_datetime and
     parsedate_to_datetime functions, allowing for round tripping of
     RFC2822 format dates.

   - Issue #12571(201): Add a plat-linux3 directory mirroring the
     plat-linux2 directory, so that "import DLFCN" and other similar
     imports work on Linux 3.0.

   - Issue #7484(202): smtplib no longer puts <> around addresses in
     VRFY and EXPN commands; they aren’t required and in fact postfix
     doesn’t support that form.

   - Issue #12273(203): Remove ast.__version__.  AST changes can be
     accounted for by checking sys.version_info or sys._mercurial.

   - Silence spurious "broken pipe" tracebacks when shutting down a
     ProcessPoolExecutor.

   - Fix potential resource leaks in
     concurrent.futures.ProcessPoolExecutor by joining all queues and
     processes when shutdown() is called.

   - Issue #11603(204): Fix a crash when __str__ is rebound as __repr__.
     Patch by Andreas Stührk.

   - Issue #11321(205): Fix a crash with multiple imports of the _pickle
     module when embedding Python.  Patch by Andreas Stührk.

   - Issue #6755(206): Add get_wch() method to curses.window class.
     Patch by Iñigo Serna.

   - Add cgi.closelog() function to close the log file.

   - Issue #12502(207): asyncore: fix polling loop with AF_UNIX sockets.

   - Issue #4376(208): ctypes now supports nested structures in a endian
     different than the parent structure.  Patch by Vlad Riscutia.

   - Raise ValueError when attempting to set the _CHUNK_SIZE attribute
     of a TextIOWrapper to a huge value, not TypeError.

   - Issue #12504(209): Close file handles in a timely manner in
     packaging.database.  This fixes a bug with the remove (uninstall)
     feature on Windows.

   - Issues #12169 and #10510: Factor out code used by various packaging
     commands to make HTTP POST requests, and make sure it uses CRLF.

   - Issue #12016(210): Multibyte CJK decoders now resynchronize faster.
     They only ignore the first byte of an invalid byte sequence.  For
     example, b’xffn’.decode(’gb2312’, ’replace’) gives ’ufffdn’ instead
     of ’ufffd’.

   - Issue #12459(211): time.sleep() now raises a ValueError if the
     sleep length is negative, instead of an infinite sleep on Windows
     or raising an IOError on Linux for example, to have the same
     behaviour on all platforms.

   - Issue #12451(212): pydoc: html_getfile() now uses tokenize.open()
     to support Python scripts using a encoding different than UTF-8
     (read the coding cookie of the script).

   - Issue #12493(213): subprocess: Popen.communicate() now also handles
     EINTR errors if the process has only one pipe.

   - Issue #12467(214): warnings: fix a race condition if a warning is
     emitted at shutdown, if globals()[’__file__’] is None.

   - Issue #12451(215): pydoc: importfile() now opens the Python script
     in binary mode, instead of text mode using the locale encoding, to
     avoid encoding issues.

   - Issue #12451(216): runpy: run_path() now opens the Python script in
     binary mode, instead of text mode using the locale encoding, to
     support other encodings than UTF-8 (scripts using the coding
     cookie).

   - Issue #12451(217): xml.dom.pulldom: parse() now opens files in
     binary mode instead of the text mode (using the locale encoding) to
     avoid encoding issues.

   - Issue #12147(218): Adjust the new-in-3.2 smtplib.send_message
     method for better conformance to the RFCs: correctly handle Sender
     and Resent- headers.

   - Issue #12352(219): Fix a deadlock in multiprocessing.Heap when a
     block is freed by the garbage collector while the Heap lock is
     held.

   - Issue #12462(220): time.sleep() now immediately calls the (Python)
     signal handler if it is interrupted by a signal, instead of having
     to wait until the next instruction.

   - Issue #12442(221): new shutil.disk_usage function, providing total,
     used and free disk space statistics.

   - Issue #12451(222): The XInclude default loader of xml.etree now
     decodes files from UTF-8 instead of the locale encoding if the
     encoding is not specified.  It now also opens XML files for the
     parser in binary mode instead of the text mode to avoid encoding
     issues.

   - Issue #12451(223): doctest.debug_script() doesn’t create a
     temporary file anymore to avoid encoding issues.

   - Issue #12451(224): pydoc.synopsis() now reads the encoding cookie
     if available, to read the Python script from the right encoding.

   - Issue #12451(225): distutils now opens the setup script in binary
     mode to read the encoding cookie, instead of opening it in UTF-8.

   - Issue #9516(226): On Mac OS X, change Distutils to no longer
     globally attempt to check or set the MACOSX_DEPLOYMENT_TARGET
     environment variable for the interpreter process.  This could cause
     failures in non-Distutils subprocesses and was unreliable since
     tests or user programs could modify the interpreter environment
     after Distutils set it.  Instead, have Distutils set the deployment
     target only in the environment of each build subprocess.  It is
     still possible to globally override the default by setting
     MACOSX_DEPLOYMENT_TARGET before launching the interpreter; its
     value must be greater or equal to the default value, the value with
     which the interpreter was built.  Also, implement the same handling
     in packaging.

   - Issue #12422(227): In the copy module, don’t store objects that are
     their own copy in the memo dict.

   - Issue #12303(228): Add sigwaitinfo() and sigtimedwait() to the
     signal module.

   - Issue #12404(229): Remove C89 incompatible code from mmap module.
     Patch by Akira Kitada.

   - Issue #1874(230): email now detects and reports as a defect the
     presence of any CTE other than 7bit, 8bit, or binary on a
     multipart.

   - Issue #12383(231): Fix subprocess module with env={}: don’t copy
     the environment variables, start with an empty environment.

   - Issue #11637(232): Fix support for importing packaging setup hooks
     from the project directory.

   - Issue #6771(233): Moved the curses.wrapper function from the
     single-function wrapper module into __init__, eliminating the
     module.  Since __init__ was already importing the function to
     curses.wrapper, there is no API change.

   - Issue #11584(234): email.header.decode_header no longer fails if
     the header passed to it is a Header object, and Header/make_header
     no longer fail if given binary unknown-8bit input.

   - Issue #11700(235): mailbox proxy object close methods can now be
     called multiple times without error.

   - Issue #11767(236): Correct file descriptor leak in mailbox’s
     __getitem__ method.

   - Issue #12133(237): AbstractHTTPHandler.do_open() of urllib.request
     closes the HTTP connection if its getresponse() method fails with a
     socket error.  Patch written by Ezio Melotti.

   - Issue #12240(238): Allow multiple setup hooks in packaging’s
     setup.cfg files.  Original patch by Erik Bray.

   - Issue #9284(239): Allow inspect.findsource() to find the source of
     doctest functions.

   - Issue #11595(240): Fix assorted bugs in packaging.util.cfg_to_args,
     a compatibility helper for the distutils-packaging transition.
     Original patch by Erik Bray.

   - Issue #12287(241): In ossaudiodev, check that the device isn’t
     closed in several methods.

   - Issue #12009(242): Fixed regression in netrc file comment handling.

   - Issue #12246(243): Warn and fail when trying to install a
     third-party project from an uninstalled Python (built in a source
     checkout).  Original patch by Tshepang Lekhonkhobe.

   - Issue #10694(244): zipfile now ignores garbage at the end of a
     zipfile.

   - Issue #12283(245): Fixed regression in smtplib quoting of leading
     dots in DATA.

   - Issue #10424(246): Argparse now includes the names of the missing
     required arguments in the missing arguments error message.

   - Issue #12168(247): SysLogHandler now allows NUL termination to be
     controlled using a new ’append_nul’ attribute on the handler.

   - Issue #11583(248): Speed up os.path.isdir on Windows by using
     GetFileAttributes instead of os.stat.

   - Issue #12021(249): Make mmap’s read() method argument optional.
     Patch by Petri Lehtinen.

   - Issue #9205(250): concurrent.futures.ProcessPoolExecutor now
     detects killed children and raises BrokenProcessPool in such a
     situation.  Previously it would reliably freeze/deadlock.

   - Issue #12040(251): Expose a new attribute ‘sentinel’ on instances
     of ‘multiprocessing.Process’.  Also, fix Process.join() to not use
     polling anymore, when given a timeout.

   - Issue #11893(252): Remove obsolete internal wrapper class
     ‘SSLFakeFile’ in the smtplib module.  Patch by Catalin Iacob.

   - Issue #12080(253): Fix a Decimal.power() case that took an
     unreasonably long time to compute.

   - Issue #12221(254): Remove __version__ attributes from pyexpat,
     pickle, tarfile, pydoc, tkinter, and xml.parsers.expat.  This were
     useless version constants left over from the Mercurial transition

   - Named tuples now work correctly with vars().

   - Issue #12085(255): Fix an attribute error in subprocess.Popen
     destructor if the constructor has failed, e.g.  because of an
     undeclared keyword argument.  Patch written by Oleg Oshmyan.

   - Issue #12028(256): Make threading._get_ident() public, rename it to
     threading.get_ident() and document it.  This function was already
     used using _thread.get_ident().

   - Issue #12171(257): IncrementalEncoder.reset() of CJK codecs
     (multibytecodec) calls encreset() instead of decreset().

   - Issue #12218(258): Removed wsgiref.egg-info.

   - Issue #12196(259): Add pipe2() to the os module.

   - Issue #985064(260): Make plistlib more resilient to faulty input
     plists.  Patch by Mher Movsisyan.

   - Issue #1625(261): BZ2File and bz2.decompress() now support
     multi-stream files.  Initial patch by Nir Aides.

   - Issue #12175(262): BufferedReader.read(-1) now calls raw.readall()
     if available.

   - Issue #12175(263): FileIO.readall() now only reads the file
     position and size once.

   - Issue #12175(264): RawIOBase.readall() now returns None if read()
     returns None.

   - Issue #12175(265): FileIO.readall() now raises a ValueError instead
     of an IOError if the file is closed.

   - Issue #11109(266): New service_action method for BaseServer, used
     by ForkingMixin class for cleanup.  Initial Patch by Justin
     Warkentin.

   - Issue #12045(267): Avoid duplicate execution of command in
     ctypes.util._get_soname().  Patch by Sijin Joseph.

   - Issue #10818(268): Remove the Tk GUI and the serve() function of
     the pydoc module, pydoc -g has been deprecated in Python 3.2 and it
     has a new enhanced web server.

   - Issue #1441530(269): In imaplib, read the data in one chunk to
     speed up large reads and simplify code.

   - Issue #12070(270): Fix the Makefile parser of the sysconfig module
     to handle correctly references to "bogus variable" (e.g.
     "prefix=$/opt/python").

   - Issue #12100(271): Don’t reset incremental encoders of CJK codecs
     at each call to their encode() method anymore, but continue to call
     the reset() method if the final argument is True.

   - Issue #12049(272): Add RAND_bytes() and RAND_pseudo_bytes()
     functions to the ssl module.

   - Issue #6501(273): os.device_encoding() returns None on Windows if
     the application has no console.

   - Issue #12105(274): Add O_CLOEXEC to the os module.

   - Issue #12079(275): Decimal(’Infinity’).fma(Decimal(’0’),
     (3.91224318126786e+19+0j)) now raises TypeError (reflecting the
     invalid type of the 3rd argument) rather than
     Decimal.InvalidOperation.

   - Issue #12124(276): zipimport doesn’t keep a reference to
     zlib.decompress() anymore to be able to unload the module.

   - Add the packaging module, an improved fork of distutils (also known
     as distutils2).

   - Issue #12065(277): connect_ex() on an SSL socket now returns the
     original errno when the socket’s timeout expires (it used to return
     None).

   - Issue #8809(278): The SMTP_SSL constructor and SMTP.starttls() now
     support passing a ‘context’ argument pointing to an ssl.SSLContext
     instance.  Patch by Kasun Herath.

   - Issue #9516(279): Issue #9516(280): avoid errors in sysconfig when
     MACOSX_DEPLOYMENT_TARGET is set in shell.

   - Issue #8650(281): Make zlib module 64-bit clean.  compress(),
     decompress() and their incremental counterparts now raise
     OverflowError if given an input larger than 4GB, instead of
     silently truncating the input and returning an incorrect result.

   - Issue #12050(282): zlib.decompressobj().decompress() now clears the
     unconsumed_tail attribute when called without a max_length
     argument.

   - Issue #12062(283): Fix a flushing bug when doing a certain type of
     I/O sequence on a file opened in read+write mode (namely: reading,
     seeking a bit forward, writing, then seeking before the previous
     write but still within buffered data, and writing again).

   - Issue #9971(284): Write an optimized implementation of
     BufferedReader.readinto().  Patch by John O’Connor.

   - Issue #11799(285): urllib.request Authentication Handlers will
     raise a ValueError when presented with an unsupported
     Authentication Scheme.  Patch contributed by Yuval Greenfield.

   - Issue #10419(286), #6011: build_scripts command of distutils
     handles correctly non-ASCII path (path to the Python executable).
     Open and write the script in binary mode, but ensure that the
     shebang is decodable from UTF-8 and from the encoding of the
     script.

   - Issue #8498(287): In socket.accept(), allow to specify 0 as a
     backlog value in order to accept exactly one connection.  Patch by
     Daniel Evers.

   - Issue #12011(288): signal.signal() and signal.siginterrupt() raise
     an OSError, instead of a RuntimeError: OSError has an errno
     attribute.

   - Issue #3709(289): add a flush_headers method to
     BaseHTTPRequestHandler, which manages the sending of headers to
     output stream and flushing the internal headers buffer.  Patch
     contribution by Andrew Schaaf

   - Issue #11743(290): Rewrite multiprocessing connection classes in
     pure Python.

   - Issue #11164(291): Stop trying to use _xmlplus in the xml module.

   - Issue #11888(292): Add log2 function to math module.  Patch written
     by Mark Dickinson.

   - Issue #12012(293): ssl.PROTOCOL_SSLv2 becomes optional.

   - Issue #8407(294): The signal handler writes the signal number as a
     single byte instead of a nul byte into the wakeup file descriptor.
     So it is possible to wait more than one signal and know which
     signals were raised.

   - Issue #8407(295): Add pthread_kill(), sigpending() and sigwait()
     functions to the signal module.

   - Issue #11927(296): SMTP_SSL now uses port 465 by default as
     documented.  Patch by Kasun Herath.

   - Issue #12002(297): ftplib’s abort() method raises TypeError.

   - Issue #11916(298): Add a number of MacOSX specific definitions to
     the errno module.  Patch by Pierre Carrier.

   - Issue #11999(299): fixed sporadic sync failure mailbox.Maildir due
     to its trying to detect mtime changes by comparing to the system
     clock instead of to the previous value of the mtime.

   - Issue #11072(300): added MLSD command (RFC-3659) support to ftplib.

   - Issue #8808(301): The IMAP4_SSL constructor now allows passing an
     SSLContext parameter to control parameters of the secure channel.
     Patch by Sijin Joseph.

   - ntpath.samefile failed to notice that "a.txt" and "A.TXT" refer to
     the same file on Windows XP. As noticed in issue #10684(302).

   - Issue #12000(303): When a SSL certificate has a subjectAltName
     without any dNSName entry, ssl.match_hostname() should use the
     subject’s commonName.  Patch by Nicolas Bareil.

   - Issue #10775(304): assertRaises, assertRaisesRegex, assertWarns,
     and assertWarnsRegex now accept a keyword argument ’msg’ when used
     as context managers.  Initial patch by Winston Ewert.

   - Issue #10684(305): shutil.move used to delete a folder on case
     insensitive filesystems when the source and destination name where
     the same except for the case.

   - Issue #11647(306): objects created using contextlib.contextmanager
     now support more than one call to the function when used as a
     decorator.  Initial patch by Ysj Ray.

   - Issue #11930(307): Removed deprecated time.accept2dyear variable.
     Removed year >= 1000 restriction from datetime.strftime.

   - logging: don’t define QueueListener if Python has no thread
     support.

   - functools.cmp_to_key() now works with collections.Hashable().

   - Issue #11277(308): mmap.mmap() calls fcntl(fd, F_FULLFSYNC) on Mac
     OS X to get around a mmap bug with sparse files.  Patch written by
     Steffen Daode Nurpmeso.

   - Issue #8407(309): Add signal.pthread_sigmask() function to fetch
     and/or change the signal mask of the calling thread.

   - Issue #11858(310): configparser.ExtendedInterpolation expected
     lower-case section names.

   - Issue #11324(311): ConfigParser(interpolation=None) now works
     correctly.

   - Issue #11811(312): ssl.get_server_certificate() is now
     IPv6-compatible.  Patch by Charles-François Natali.

   - Issue #11763(313): don’t use difflib in
     TestCase.assertMultiLineEqual if the strings are too long.

   - Issue #11236(314): getpass.getpass responds to ctrl-c or ctrl-z on
     terminal.

   - Issue #11856(315): Speed up parsing of JSON numbers.

   - Issue #11005(316): threading.RLock()._release_save() raises a
     RuntimeError if the lock was not acquired.

   - Issue #11258(317): Speed up ctypes.util.find_library() under Linux
     by a factor of 5 to 10.  Initial patch by Jonas H.

   - Issue #11382(318): Trivial system calls, such as dup() or pipe(),
     needn’t release the GIL. Patch by Charles-François Natali.

   - Issue #11223(319): Add threading._info() function providing
     informations about the thread implementation.

   - Issue #11731(320): simplify/enhance email parser/generator API by
     introducing policy objects.

   - Issue #11768(321): The signal handler of the signal module only
     calls Py_AddPendingCall() for the first signal to fix a deadlock on
     reentrant or parallel calls.  PyErr_SetInterrupt() writes also into
     the wake up file.

   - Issue #11492(322): fix several issues with header folding in the
     email package.

   - Issue #11852(323): Add missing imports and update tests.

   - Issue #11875(324): collections.OrderedDict’s __reduce__ was
     temporarily mutating the object instead of just working on a copy.

   - Issue #11467(325): Fix urlparse behavior when handling urls which
     contains scheme specific part only digits.  Patch by Santoso
     Wijaya.

   - collections.Counter().copy() now works correctly for subclasses.

   - Issue #11474(326): Fix the bug with url2pathname() handling of
     ’/C|/’ on Windows.  Patch by Santoso Wijaya.

   - Issue #11684(327): complete email.parser bytes API by adding
     BytesHeaderParser.

   - The bz2 module now handles 4GiB+ input buffers correctly.

   - Issue #9233(328): Fix json.loads(’{}’) to return a dict (instead of
     a list), when _json is not available.

   - Issue #11830(329): Remove unnecessary introspection code in the
     decimal module.

   - Issue #11703(330): urllib2.geturl() does not return correct url
     when the original url contains #fragment.

   - Issue #10019(331): Fixed regression in json module where an indent
     of 0 stopped adding newlines and acted instead like ’None’.

   - Issue #11186(332): pydoc ignores a module if its name contains a
     surrogate character in the index of modules.

   - Issue #11815(333): Use a light-weight SimpleQueue for the result
     queue in concurrent.futures.ProcessPoolExecutor.

   - Issue #5162(334): Treat services like frozen executables to allow
     child spawning from multiprocessing.forking on Windows.

   - logging.basicConfig now supports an optional ’handlers’ argument
     taking an iterable of handlers to be added to the root logger.
     Additional parameter checks were also added to basicConfig.

   - Issue #11814(335): Fix likely typo in
     multiprocessing.Pool._terminate().

   - Issue #11747(336): Fix range formatting in difflib.context_diff()
     and difflib.unified_diff().

   - Issue #8428(337): Fix a race condition in multiprocessing.Pool when
     terminating worker processes: new processes would be spawned while
     the pool is being shut down.  Patch by Charles-François Natali.

   - Issue #2650(338): re.escape() no longer escapes the ’_’.

   - Issue #11757(339): select.select() now raises ValueError when a
     negative timeout is passed (previously, a select.error with EINVAL
     would be raised).  Patch by Charles-François Natali.

   - Issue #7311(340): fix html.parser to accept non-ASCII attribute
     values.

   - Issue #11605(341): email.parser.BytesFeedParser was incorrectly
     converting multipart subparts with an 8-bit CTE into unicode
     instead of preserving the bytes.

   - Issue #1690608(342): email.util.formataddr is now RFC 2047 aware:
     it now has a charset parameter that defaults to utf-8 and is used
     as the charset for RFC 2047 encoding when the realname contains
     non-ASCII characters.

   - Issue #10963(343): Ensure that subprocess.communicate() never
     raises EPIPE.

   - Issue #10791(344): Implement missing method GzipFile.read1(),
     allowing GzipFile to be wrapped in a TextIOWrapper.  Patch by
     Nadeem Vawda.

   - Issue #11707(345): Added a fast C version of
     functools.cmp_to_key().  Patch by Filip Gruszczyński.

   - Issue #11688(346): Add sqlite3.Connection.set_trace_callback().
     Patch by Torsten Landschoff.

   - Issue #11746(347): Fix SSLContext.load_cert_chain() to accept
     elliptic curve private keys.

   - Issue #5863(348): Rewrite BZ2File in pure Python, and allow it to
     accept file-like objects using a new ‘fileobj’ constructor
     argument.  Patch by Nadeem Vawda.

   - unittest.TestCase.assertSameElements has been removed.

   - sys.getfilesystemencoding() raises a RuntimeError if
     initfsencoding() was not called yet: detect bootstrap (startup)
     issues earlier.

   - Issue #11393(349): Add the new faulthandler module.

   - Issue #11618(350): Fix the timeout logic in
     threading.Lock.acquire() under Windows.

   - Removed the ’strict’ argument to email.parser.Parser, which has
     been deprecated since Python 2.4.

   - Issue #11256(351): Fix inspect.getcallargs on functions that take
     only keyword arguments.

   - Issue #11696(352): Fix ID generation in msilib.

   - itertools.accumulate now supports an optional `func' argument for a
     user-supplied binary function.

   - Issue #11692(353): Remove unnecessary demo functions in subprocess
     module.

   - Issue #9696(354): Fix exception incorrectly raised by
     xdrlib.Packer.pack_int when trying to pack a negative (in-range)
     integer.

   - Issue #11675(355): multiprocessing.[Raw]Array objects created from
     an integer size are now zeroed on creation.  This matches the
     behaviour specified by the documentation.

   - Issue #7639(356): Fix short file name generation in bdist_msi

   - Issue #11635(357): Don’t use polling in worker threads and
     processes launched by concurrent.futures.

   - Issue #5845(358): Automatically read readline configuration to
     enable completion in interactive mode.

   - Issue #6811(359): Allow importlib to change a code object’s
     co_filename attribute to match the path to where the source code
     currently is, not where the code object originally came from.

   - Issue #8754(360): Have importlib use the repr of a module name in
     error messages.

   - Issue #11591(361): Prevent "import site" from modifying sys.path
     when python was started with -S.

   - collections.namedtuple() now adds a _source attribute to the
     generated class.  This make the source more accessible than the
     outdated "verbose" option which prints to stdout but doesn’t make
     the source string available.

   - Issue #11371(362): Mark getopt error messages as localizable.
     Patch by Filip Gruszczyński.

   - Issue #11333(363): Add __slots__ to collections ABCs.

   - Issue #11628(364): cmp_to_key generated class should use __slots__.

   - Issue #11666(365): let help() display named tuple attributes and
     methods that start with a leading underscore.

   - Issue #11662(366): Make urllib and urllib2 ignore redirections if
     the scheme is not HTTP, HTTPS or FTP (CVE-2011-1521).

   - Issue #5537(367): Fix time2isoz() and time2netscape() functions of
     httplib.cookiejar for expiration year greater than 2038 on 32-bit
     systems.

   - Issue #4391(368): Use proper gettext plural forms in optparse.

   - Issue #11127(369): Raise a TypeError when trying to pickle a socket
     object.

   - Issue #11563(370): ‘Connection: close’ header is sent by requests
     using URLOpener class which helps in closing of sockets after
     connection is over.  Patch contributions by Jeff McNeil and Nadeem
     Vawda.

   - Issue #11459(371): A ‘bufsize’ value of 0 in subprocess.Popen()
     really creates unbuffered pipes, such that select() works properly
     on them.

   - Issue #5421(372): Fix misleading error message when one of
     socket.sendto()’s arguments has the wrong type.  Patch by Nikita
     Vetoshkin.

   - Issue #10812(373): Add some extra posix functions to the os module.

   - Issue #10979(374): unittest stdout buffering now works with class
     and module setup and teardown.

   - Issue #11243(375): fix the parameter querying methods of Message to
     work if the headers contain un-encoded non-ASCII data.

   - Issue #11401(376): fix handling of headers with no value; this
     fixes a regression relative to Python2 and the result is now the
     same as it was in Python2.

   - Issue #9298(377): base64 bodies weren’t being folded to line
     lengths less than 78, which was a regression relative to Python2.
     Unlike Python2, the last line of the folded body now ends with a
     carriage return.

   - Issue #11560(378): shutil.unpack_archive now correctly handles the
     format parameter.  Patch by Evan Dandrea.

   - Issue #5870(379): Add *note subprocess.DEVNULL: 4af. constant.

   - Issue #11133(380): fix two cases where inspect.getattr_static can
     trigger code execution.  Patch by Andreas Stührk.

   - Issue #11569(381): use absolute path to the sysctl command in
     multiprocessing to ensure that it will be found regardless of the
     shell PATH. This ensures that multiprocessing.cpu_count works on
     default installs of MacOSX.

   - Issue #11501(382): disutils.archive_utils.make_zipfile no longer
     fails if zlib is not installed.  Instead, the zipfile.ZIP_STORED
     compression is used to create the ZipFile.  Patch by Natalia B.
     Bidart.

   - Issue #11289(383): ‘smtp.SMTP’ class is now a context manager so it
     can be used in a ‘with’ statement.  Contributed by Giampaolo
     Rodola.

   - Issue #11554(384): Fixed support for Japanese codecs; previously
     the body output encoding was not done if euc-jp or shift-jis was
     specified as the charset.

   - Issue #11407(385): ‘TestCase.run’ returns the result object used or
     created.  Contributed by Janathan Hartley.

   - Issue #11500(386): Fixed a bug in the OS X proxy bypass code for
     fully qualified IP addresses in the proxy exception list.

   - Issue #11491(387): dbm.error is no longer raised when dbm.open is
     called with the "n" as the flag argument and the file exists.  The
     behavior matches the documentation and general logic.

   - Issue #1162477(388): Postel Principle adjustment to email date
     parsing: handle the fact that some non-compliant MUAs use ’.’
     instead of ’:’ in time specs.

   - Issue #11131(389): Fix sign of zero in decimal.Decimal plus and
     minus operations when the rounding mode is ROUND_FLOOR.

   - Issue #9935(390): Speed up pickling of instances of user-defined
     classes.

   - Issue #5622(391): Fix curses.wrapper to raise correct exception if
     curses initialization fails.

   - Issue #11408(392): In threading.Lock.acquire(), only call
     gettimeofday() when really necessary.  Patch by Charles-François
     Natali.

   - Issue #11391(393): Writing to a mmap object created with
     ‘mmap.PROT_READ|mmap.PROT_EXEC’ would segfault instead of raising a
     TypeError.  Patch by Charles-François Natali.

   - Issue #9795(394): add context manager protocol support for
     nntplib.NNTP class.

   - Issue #11306(395): mailbox in certain cases adapts to an inability
     to open certain files in read-write mode.  Previously it detected
     this by checking for EACCES, now it also checks for EROFS.

   - Issue #11265(396): asyncore now correctly handles EPIPE, EBADF and
     EAGAIN errors on accept(), send() and recv().

   - Issue #11377(397): Deprecate platform.popen() and reimplement it
     with os.popen().

   - Issue #8513(398): On UNIX, subprocess supports bytes command
     string.

   - Issue #10866(399): Add socket.sethostname().  Initial patch by Ross
     Lagerwall.

   - Issue #11140(400): Lock.release() now raises a RuntimeError when
     attempting to release an unacquired lock, as claimed in the
     threading documentation.  The _thread.error exception is now an
     alias of RuntimeError.  Patch by Filip Gruszczyński.  Patch for
     _dummy_thread by Aymeric Augustin.

   - Issue #8594(401): ftplib now provides a source_address parameter to
     specify which (address, port) to bind to before connecting.

   - Issue #11326(402): Add the missing connect_ex() implementation for
     SSL sockets, and make it work for non-blocking connects.

   - Issue #11297(403): Add collections.ChainMap().

   - Issue #10755(404): Add the posix.flistdir() function.  Patch by
     Ross Lagerwall.

   - Issue #4761(405): Add the ‘*at()’ family of functions (openat(),
     etc.)  to the posix module.  Patch by Ross Lagerwall.

   - Issue #7322(406): Trying to read from a socket’s file-like object
     after a timeout occurred now raises an error instead of silently
     losing data.

   - Issue #11291(407): poplib.POP no longer suppresses errors on
     quit().

   - Issue #11177(408): asyncore’s create_socket() arguments can now be
     omitted.

   - Issue #6064(409): Add a ‘daemon’ keyword argument to the
     threading.Thread and multiprocessing.Process constructors in order
     to override the default behaviour of inheriting the daemonic
     property from the current thread/process.

   - Issue #10956(410): Buffered I/O classes retry reading or writing
     after a signal has arrived and the handler returned successfully.

   - Issue #10784(411): New os.getpriority() and os.setpriority()
     functions.

   - Issue #11114(412): Fix catastrophic performance of tell() on text
     files (up to 1000x faster in some cases).  It is still one to two
     order of magnitudes slower than binary tell().

   - Issue #10882(413): Add os.sendfile function.

   - Issue #10868(414): Allow usage of the register method of an ABC as
     a class decorator.

   - Issue #11224(415): Fixed a regression in tarfile that affected the
     file-like objects returned by TarFile.extractfile() regarding
     performance, memory consumption and failures with the stream
     interface.

   - Issue #10924(416): Adding salt and Modular Crypt Format to crypt
     library.  Moved old C wrapper to _crypt, and added a Python wrapper
     with enhanced salt generation and simpler API for password
     generation.

   - Issue #11074(417): Make ’tokenize’ so it can be reloaded.

   - Issue #11085(418): Moved collections abstract base classes into a
     separate module called collections.abc, following the pattern used
     by importlib.abc.  For backwards compatibility, the names are
     imported into the collections module.

   - Issue #4681(419): Allow mmap() to work on file sizes and offsets
     larger than 4GB, even on 32-bit builds.  Initial patch by Ross
     Lagerwall, adapted for 32-bit Windows.

   - Issue #11169(420): compileall module uses repr() to format
     filenames and paths to escape surrogate characters and show spaces.

   - Issue #11089(421): Fix performance issue limiting the use of
     ConfigParser() with large config files.

   - Issue #10276(422): Fix the results of zlib.crc32() and
     zlib.adler32() on buffers larger than 4GB. Patch by Nadeem Vawda.

   - Issue #11388(423): Added a clear() method to MutableSequence

   - Issue #11174(424): Add argparse.MetavarTypeHelpFormatter, which
     uses type names for the names of optional and positional arguments
     in help messages.

   - Issue #9348(425): Raise an early error if argparse nargs and
     metavar don’t match.

   - Issue #9026(426): Fix order of argparse sub-commands in help
     messages.

   - Issue #9347(427): Fix formatting for tuples in argparse type= error
     messages.

   - Issue #12191(428): Added shutil.chown() to change user and/or group
     owner of a given path also specifying their names.

   - Issue #13988(429): The _elementtree accelerator is used whenever
     available.  Now xml.etree.cElementTree becomes a deprecated alias
     to ElementTree.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14195

   (2) https://bugs.python.org/14166

   (3) https://bugs.python.org/14177

   (4) https://bugs.python.org/13550

   (5) https://bugs.python.org/14159

   (6) https://bugs.python.org/11841

   (7) https://bugs.python.org/6884

   (8) https://bugs.python.org/8033

   (9) https://bugs.python.org/13641

   (10) https://bugs.python.org/14043

   (11) https://bugs.python.org/14001

   (12) https://bugs.python.org/13961

   (13) https://bugs.python.org/2489

   (14) https://bugs.python.org/13014

   (15) https://bugs.python.org/13777

   (16) https://bugs.python.org/13015

   (17) https://bugs.python.org/1326113

   (18) https://bugs.python.org/10287

   (19) https://bugs.python.org/13993

   (20) https://bugs.python.org/13930

   (21) https://bugs.python.org/9750

   (22) https://bugs.python.org/10287

   (23) https://bugs.python.org/13590

   (24) https://bugs.python.org/13960

   (25) https://bugs.python.org/13609

   (26) https://bugs.python.org/13845

   (27) https://bugs.python.org/13846

   (28) https://bugs.python.org/8184

   (29) https://bugs.python.org/10811

   (30) https://bugs.python.org/13734

   (31) https://bugs.python.org/2945

   (32) https://bugs.python.org/13712

   (33) https://bugs.python.org/11805

   (34) https://bugs.python.org/13676

   (35) https://bugs.python.org/8828

   (36) https://bugs.python.org/13848

   (37) https://bugs.python.org/13806

   (38) https://bugs.python.org/13812

   (39) https://bugs.python.org/13885

   (40) https://bugs.python.org/13847

   (41) https://bugs.python.org/13772

   (42) https://bugs.python.org/6631

   (43) https://bugs.python.org/13722

   (44) https://bugs.python.org/13781

   (45) https://bugs.python.org/13803

   (46) https://bugs.python.org/10278

   (47) https://bugs.python.org/13809

   (48) https://bugs.python.org/13589

   (49) https://bugs.python.org/13642

   (50) https://bugs.python.org/12364

   (51) https://bugs.python.org/13502

   (52) https://bugs.python.org/9993

   (53) https://bugs.python.org/12926

   (54) https://bugs.python.org/13696

   (55) https://bugs.python.org/13636

   (56) https://bugs.python.org/12715

   (57) https://bugs.python.org/13626

   (58) https://bugs.python.org/11006

   (59) https://bugs.python.org/13620

   (60) https://bugs.python.org/11829

   (61) https://bugs.python.org/12708

   (62) https://bugs.python.org/1785

   (63) https://bugs.python.org/13637

   (64) https://bugs.python.org/13634

   (65) https://bugs.python.org/13627

   (66) https://bugs.python.org/13635

   (67) https://bugs.python.org/11813

   (68) https://bugs.python.org/7502

   (69) https://bugs.python.org/11870

   (70) https://bugs.python.org/8035

   (71) https://bugs.python.org/13560

   (72) https://bugs.python.org/8373

   (73) https://bugs.python.org/10350

   (74) https://bugs.python.org/11610

   (75) https://bugs.python.org/13591

   (76) https://bugs.python.org/13449

   (77) https://bugs.python.org/8684

   (78) https://bugs.python.org/5689

   (79) https://bugs.python.org/13248

   (80) https://bugs.python.org/5905

   (81) https://bugs.python.org/13560

   (82) https://bugs.python.org/13464

   (83) https://bugs.python.org/13439

   (84) https://bugs.python.org/6715

   (85) https://bugs.python.org/13487

   (86) https://bugs.python.org/12618

   (87) https://bugs.python.org/13444

   (88) https://bugs.python.org/12567

   (89) https://bugs.python.org/12856

   (90) https://bugs.python.org/9957

   (91) https://bugs.python.org/13458

   (92) https://bugs.python.org/13415

   (93) https://bugs.python.org/13245

   (94) https://bugs.python.org/12328

   (95) https://bugs.python.org/13322

   (96) https://bugs.python.org/13358

   (97) https://bugs.python.org/4147

   (98) https://bugs.python.org/13374

   (99) https://bugs.python.org/13297

   (100) https://bugs.python.org/6397

   (101) https://bugs.python.org/13193

   (102) https://bugs.python.org/13384

   (103) https://bugs.python.org/13149

   (104) https://bugs.python.org/13373

   (105) https://bugs.python.org/13254

   (106) https://bugs.python.org/3067

   (107) https://bugs.python.org/13140

   (108) https://bugs.python.org/13339

   (109) https://bugs.python.org/10570

   (110) https://bugs.python.org/13295

   (111) https://bugs.python.org/2892

   (112) https://bugs.python.org/13287

   (113) https://bugs.python.org/670664

   (114) https://bugs.python.org/10817

   (115) https://bugs.python.org/13293

   (116) https://bugs.python.org/13291

   (117) https://bugs.python.org/13258

   (118) https://bugs.python.org/13273

   (119) https://bugs.python.org/11183

   (120) https://bugs.python.org/13216

   (121) https://bugs.python.org/13226

   (122) https://bugs.python.org/10278

   (123) https://bugs.python.org/10332

   (124) https://bugs.python.org/13255

   (125) https://bugs.python.org/8540

   (126) https://bugs.python.org/13235

   (127) https://bugs.python.org/9168

   (128) https://bugs.python.org/12529

   (129) https://bugs.python.org/13227

   (130) https://bugs.python.org/6090

   (131) https://bugs.python.org/13150

   (132) https://bugs.python.org/12448

   (133) https://bugs.python.org/12454

   (134) https://bugs.python.org/13194

   (135) https://bugs.python.org/1673007

   (136) https://bugs.python.org/12386

   (137) https://bugs.python.org/13158

   (138) https://bugs.python.org/13025

   (139) https://bugs.python.org/10653

   (140) https://bugs.python.org/13150

   (141) https://bugs.python.org/11171

   (142) https://bugs.python.org/11254

   (143) https://bugs.python.org/7367

   (144) https://bugs.python.org/3163

   (145) https://bugs.python.org/13099

   (146) https://bugs.python.org/13087

   (147) https://bugs.python.org/7689

   (148) https://bugs.python.org/13034

   (149) https://bugs.python.org/12306

   (150) https://bugs.python.org/12959

   (151) https://bugs.python.org/8933

   (152) https://bugs.python.org/12567

   (153) https://bugs.python.org/9561

   (154) https://bugs.python.org/8286

   (155) https://bugs.python.org/12841

   (156) https://bugs.python.org/12888

   (157) https://bugs.python.org/12878

   (158) https://bugs.python.org/12494

   (159) https://bugs.python.org/12720

   (160) https://bugs.python.org/10946

   (161) https://bugs.python.org/12847

   (162) https://bugs.python.org/11564

   (163) https://bugs.python.org/12287

   (164) https://bugs.python.org/12839

   (165) https://bugs.python.org/9923

   (166) https://bugs.python.org/12835

   (167) https://bugs.python.org/12803

   (168) https://bugs.python.org/11657

   (169) https://bugs.python.org/12811

   (170) https://bugs.python.org/6560

   (171) https://bugs.python.org/12326

   (172) https://bugs.python.org/12213

   (173) https://bugs.python.org/12778

   (174) https://bugs.python.org/12650

   (175) https://bugs.python.org/12744

   (176) https://bugs.python.org/12646

   (177) https://bugs.python.org/11513

   (178) https://bugs.python.org/12687

   (179) https://bugs.python.org/10087

   (180) https://bugs.python.org/13121

   (181) https://bugs.python.org/12683

   (182) https://bugs.python.org/12655

   (183) https://bugs.python.org/11281

   (184) https://bugs.python.org/12464

   (185) https://bugs.python.org/8887

   (186) https://bugs.python.org/10968

   (187) https://bugs.python.org/9723

   (188) https://bugs.python.org/12603

   (189) https://bugs.python.org/12514

   (190) https://bugs.python.org/12607

   (191) https://bugs.python.org/12576

   (192) https://bugs.python.org/12560

   (193) https://bugs.python.org/1813

   (194) https://bugs.python.org/12591

   (195) https://bugs.python.org/12591

   (196) https://bugs.python.org/10883

   (197) https://bugs.python.org/12592

   (198) https://bugs.python.org/12372

   (199) https://bugs.python.org/12551

   (200) https://bugs.python.org/665194

   (201) https://bugs.python.org/12571

   (202) https://bugs.python.org/7484

   (203) https://bugs.python.org/12273

   (204) https://bugs.python.org/11603

   (205) https://bugs.python.org/11321

   (206) https://bugs.python.org/6755

   (207) https://bugs.python.org/12502

   (208) https://bugs.python.org/4376

   (209) https://bugs.python.org/12504

   (210) https://bugs.python.org/12016

   (211) https://bugs.python.org/12459

   (212) https://bugs.python.org/12451

   (213) https://bugs.python.org/12493

   (214) https://bugs.python.org/12467

   (215) https://bugs.python.org/12451

   (216) https://bugs.python.org/12451

   (217) https://bugs.python.org/12451

   (218) https://bugs.python.org/12147

   (219) https://bugs.python.org/12352

   (220) https://bugs.python.org/12462

   (221) https://bugs.python.org/12442

   (222) https://bugs.python.org/12451

   (223) https://bugs.python.org/12451

   (224) https://bugs.python.org/12451

   (225) https://bugs.python.org/12451

   (226) https://bugs.python.org/9516

   (227) https://bugs.python.org/12422

   (228) https://bugs.python.org/12303

   (229) https://bugs.python.org/12404

   (230) https://bugs.python.org/1874

   (231) https://bugs.python.org/12383

   (232) https://bugs.python.org/11637

   (233) https://bugs.python.org/6771

   (234) https://bugs.python.org/11584

   (235) https://bugs.python.org/11700

   (236) https://bugs.python.org/11767

   (237) https://bugs.python.org/12133

   (238) https://bugs.python.org/12240

   (239) https://bugs.python.org/9284

   (240) https://bugs.python.org/11595

   (241) https://bugs.python.org/12287

   (242) https://bugs.python.org/12009

   (243) https://bugs.python.org/12246

   (244) https://bugs.python.org/10694

   (245) https://bugs.python.org/12283

   (246) https://bugs.python.org/10424

   (247) https://bugs.python.org/12168

   (248) https://bugs.python.org/11583

   (249) https://bugs.python.org/12021

   (250) https://bugs.python.org/9205

   (251) https://bugs.python.org/12040

   (252) https://bugs.python.org/11893

   (253) https://bugs.python.org/12080

   (254) https://bugs.python.org/12221

   (255) https://bugs.python.org/12085

   (256) https://bugs.python.org/12028

   (257) https://bugs.python.org/12171

   (258) https://bugs.python.org/12218

   (259) https://bugs.python.org/12196

   (260) https://bugs.python.org/985064

   (261) https://bugs.python.org/1625

   (262) https://bugs.python.org/12175

   (263) https://bugs.python.org/12175

   (264) https://bugs.python.org/12175

   (265) https://bugs.python.org/12175

   (266) https://bugs.python.org/11109

   (267) https://bugs.python.org/12045

   (268) https://bugs.python.org/10818

   (269) https://bugs.python.org/1441530

   (270) https://bugs.python.org/12070

   (271) https://bugs.python.org/12100

   (272) https://bugs.python.org/12049

   (273) https://bugs.python.org/6501

   (274) https://bugs.python.org/12105

   (275) https://bugs.python.org/12079

   (276) https://bugs.python.org/12124

   (277) https://bugs.python.org/12065

   (278) https://bugs.python.org/8809

   (279) https://bugs.python.org/9516

   (280) https://bugs.python.org/9516

   (281) https://bugs.python.org/8650

   (282) https://bugs.python.org/12050

   (283) https://bugs.python.org/12062

   (284) https://bugs.python.org/9971

   (285) https://bugs.python.org/11799

   (286) https://bugs.python.org/10419

   (287) https://bugs.python.org/8498

   (288) https://bugs.python.org/12011

   (289) https://bugs.python.org/3709

   (290) https://bugs.python.org/11743

   (291) https://bugs.python.org/11164

   (292) https://bugs.python.org/11888

   (293) https://bugs.python.org/12012

   (294) https://bugs.python.org/8407

   (295) https://bugs.python.org/8407

   (296) https://bugs.python.org/11927

   (297) https://bugs.python.org/12002

   (298) https://bugs.python.org/11916

   (299) https://bugs.python.org/11999

   (300) https://bugs.python.org/11072

   (301) https://bugs.python.org/8808

   (302) https://bugs.python.org/10684

   (303) https://bugs.python.org/12000

   (304) https://bugs.python.org/10775

   (305) https://bugs.python.org/10684

   (306) https://bugs.python.org/11647

   (307) https://bugs.python.org/11930

   (308) https://bugs.python.org/11277

   (309) https://bugs.python.org/8407

   (310) https://bugs.python.org/11858

   (311) https://bugs.python.org/11324

   (312) https://bugs.python.org/11811

   (313) https://bugs.python.org/11763

   (314) https://bugs.python.org/11236

   (315) https://bugs.python.org/11856

   (316) https://bugs.python.org/11005

   (317) https://bugs.python.org/11258

   (318) https://bugs.python.org/11382

   (319) https://bugs.python.org/11223

   (320) https://bugs.python.org/11731

   (321) https://bugs.python.org/11768

   (322) https://bugs.python.org/11492

   (323) https://bugs.python.org/11852

   (324) https://bugs.python.org/11875

   (325) https://bugs.python.org/11467

   (326) https://bugs.python.org/11474

   (327) https://bugs.python.org/11684

   (328) https://bugs.python.org/9233

   (329) https://bugs.python.org/11830

   (330) https://bugs.python.org/11703

   (331) https://bugs.python.org/10019

   (332) https://bugs.python.org/11186

   (333) https://bugs.python.org/11815

   (334) https://bugs.python.org/5162

   (335) https://bugs.python.org/11814

   (336) https://bugs.python.org/11747

   (337) https://bugs.python.org/8428

   (338) https://bugs.python.org/2650

   (339) https://bugs.python.org/11757

   (340) https://bugs.python.org/7311

   (341) https://bugs.python.org/11605

   (342) https://bugs.python.org/1690608

   (343) https://bugs.python.org/10963

   (344) https://bugs.python.org/10791

   (345) https://bugs.python.org/11707

   (346) https://bugs.python.org/11688

   (347) https://bugs.python.org/11746

   (348) https://bugs.python.org/5863

   (349) https://bugs.python.org/11393

   (350) https://bugs.python.org/11618

   (351) https://bugs.python.org/11256

   (352) https://bugs.python.org/11696

   (353) https://bugs.python.org/11692

   (354) https://bugs.python.org/9696

   (355) https://bugs.python.org/11675

   (356) https://bugs.python.org/7639

   (357) https://bugs.python.org/11635

   (358) https://bugs.python.org/5845

   (359) https://bugs.python.org/6811

   (360) https://bugs.python.org/8754

   (361) https://bugs.python.org/11591

   (362) https://bugs.python.org/11371

   (363) https://bugs.python.org/11333

   (364) https://bugs.python.org/11628

   (365) https://bugs.python.org/11666

   (366) https://bugs.python.org/11662

   (367) https://bugs.python.org/5537

   (368) https://bugs.python.org/4391

   (369) https://bugs.python.org/11127

   (370) https://bugs.python.org/11563

   (371) https://bugs.python.org/11459

   (372) https://bugs.python.org/5421

   (373) https://bugs.python.org/10812

   (374) https://bugs.python.org/10979

   (375) https://bugs.python.org/11243

   (376) https://bugs.python.org/11401

   (377) https://bugs.python.org/9298

   (378) https://bugs.python.org/11560

   (379) https://bugs.python.org/5870

   (380) https://bugs.python.org/11133

   (381) https://bugs.python.org/11569

   (382) https://bugs.python.org/11501

   (383) https://bugs.python.org/11289

   (384) https://bugs.python.org/11554

   (385) https://bugs.python.org/11407

   (386) https://bugs.python.org/11500

   (387) https://bugs.python.org/11491

   (388) https://bugs.python.org/1162477

   (389) https://bugs.python.org/11131

   (390) https://bugs.python.org/9935

   (391) https://bugs.python.org/5622

   (392) https://bugs.python.org/11408

   (393) https://bugs.python.org/11391

   (394) https://bugs.python.org/9795

   (395) https://bugs.python.org/11306

   (396) https://bugs.python.org/11265

   (397) https://bugs.python.org/11377

   (398) https://bugs.python.org/8513

   (399) https://bugs.python.org/10866

   (400) https://bugs.python.org/11140

   (401) https://bugs.python.org/8594

   (402) https://bugs.python.org/11326

   (403) https://bugs.python.org/11297

   (404) https://bugs.python.org/10755

   (405) https://bugs.python.org/4761

   (406) https://bugs.python.org/7322

   (407) https://bugs.python.org/11291

   (408) https://bugs.python.org/11177

   (409) https://bugs.python.org/6064

   (410) https://bugs.python.org/10956

   (411) https://bugs.python.org/10784

   (412) https://bugs.python.org/11114

   (413) https://bugs.python.org/10882

   (414) https://bugs.python.org/10868

   (415) https://bugs.python.org/11224

   (416) https://bugs.python.org/10924

   (417) https://bugs.python.org/11074

   (418) https://bugs.python.org/11085

   (419) https://bugs.python.org/4681

   (420) https://bugs.python.org/11169

   (421) https://bugs.python.org/11089

   (422) https://bugs.python.org/10276

   (423) https://bugs.python.org/11388

   (424) https://bugs.python.org/11174

   (425) https://bugs.python.org/9348

   (426) https://bugs.python.org/9026

   (427) https://bugs.python.org/9347

   (428) https://bugs.python.org/12191

   (429) https://bugs.python.org/13988


File: python.info,  Node: Build<21>,  Next: IDLE<18>,  Prev: Library<25>,  Up: Python 3 3 0 Alpha 1

1.14.26.3 Build
...............

   - Issue #6807(1): Run msisupport.mak earlier.

   - Issue #10580(2): Minor grammar change in Windows installer.

   - Issue #13326(3): Clean __pycache__ directories correctly on
     OpenBSD.

   - PEP 393: the configure option –with-wide-unicode is removed.

   - Issue #12852(4): Set _XOPEN_SOURCE to 700, instead of 600, to get
     POSIX 2008 functions on OpenBSD (e.g.  fdopendir).

   - Issue #11863(5): Remove support for legacy systems deprecated in
     Python 3.2 (following PEP 11).  These systems are systems using
     Mach C Threads, SunOS lightweight processes, GNU pth threads and
     IRIX threads.

   - Issue #8746(6): Correct faulty configure checks so that
     os.chflags() and os.lchflags() are once again built on systems that
     support these functions (BSD and OS X). Also add new stat file
     flags for OS X (UF_HIDDEN and UF_COMPRESSED).

   - Issue #10645(7): Installing Python no longer creates a
     Python-X.Y.Z-pyX.Y.egg-info file in the lib-dynload directory.

   - Do not accidentally include the directory containing sqlite.h twice
     when building sqlite3.

   - Issue #11217(8): For 64-bit/32-bit Mac OS X universal framework
     builds, ensure "make install" creates symlinks in –prefix bin for
     the "-32" files in the framework bin directory like the installer
     does.

   - Issue #11347(9): Use –no-as-needed when linking libpython3.so.

   - Issue #11411(10): Fix ’make DESTDIR=’ with a relative destination.

   - Issue #11268(11): Prevent Mac OS X Installer failure if
     Documentation package had previously been installed.

   - Issue #11495(12): OSF support is eliminated.  It was deprecated in
     Python 3.2.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/6807

   (2) https://bugs.python.org/10580

   (3) https://bugs.python.org/13326

   (4) https://bugs.python.org/12852

   (5) https://bugs.python.org/11863

   (6) https://bugs.python.org/8746

   (7) https://bugs.python.org/10645

   (8) https://bugs.python.org/11217

   (9) https://bugs.python.org/11347

   (10) https://bugs.python.org/11411

   (11) https://bugs.python.org/11268

   (12) https://bugs.python.org/11495


File: python.info,  Node: IDLE<18>,  Next: Tools/Demos<13>,  Prev: Build<21>,  Up: Python 3 3 0 Alpha 1

1.14.26.4 IDLE
..............

   - Issue #14409(1): IDLE now properly executes commands in the Shell
     window when it cannot read the normal config files on startup and
     has to use the built-in default key bindings.  There was previously
     a bug in one of the defaults.

   - IDLE can be launched as python -m idlelib

   - Issue #3573(2): IDLE hangs when passing invalid command line args
     (directory(ies) instead of file(s)) (Patch by Guilherme Polo)

   - Issue #14200(3): IDLE shell crash on printing non-BMP unicode
     character.

   - Issue #5219(4): Prevent event handler cascade in IDLE.

   - Issue #964437(5): Make IDLE help window non-modal.  Patch by
     Guilherme Polo and Roger Serwy.

   - Issue #13933(6): IDLE auto-complete did not work with some imported
     module, like hashlib.  (Patch by Roger Serwy)

   - Issue #13506(7): Add ’’ to path for IDLE Shell when started and
     restarted with Restart Shell.  Original patches by Marco Scataglini
     and Roger Serwy.

   - Issue #4625(8): If IDLE cannot write to its recent file or
     breakpoint files, display a message popup and continue rather than
     crash.  Original patch by Roger Serwy.

   - Issue #8641(9): Update IDLE 3 syntax coloring to recognize b".."
     and not u"..".  Patch by Tal Einat.

   - Issue #13296(10): Fix IDLE to clear compile __future__ flags on
     shell restart.  (Patch by Roger Serwy)

   - Issue #9871(11): Prevent IDLE 3 crash when given byte stings with
     invalid hex escape sequences, like b’x0’.  (Original patch by
     Claudiu Popa.)

   - Issue #12636(12): IDLE reads the coding cookie when executing a
     Python script.

   - Issue #12540(13): Prevent zombie IDLE processes on Windows due to
     changes in os.kill().

   - Issue #12590(14): IDLE editor window now always displays the first
     line when opening a long file.  With Tk 8.5, the first line was
     hidden.

   - Issue #11088(15): don’t crash when using F5 to run a script in IDLE
     on MacOSX with Tk 8.5.

   - Issue #1028(16): Tk returns invalid Unicode null in %A:
     UnicodeDecodeError.  With Tk < 8.5 _tkinter.c:PythonCmd() raised
     UnicodeDecodeError, caused IDLE to exit.  Converted to valid
     Unicode null in PythonCmd().

   - Issue #11718(17): IDLE’s open module dialog couldn’t find the
     __init__.py file in a package.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14409

   (2) https://bugs.python.org/3573

   (3) https://bugs.python.org/14200

   (4) https://bugs.python.org/5219

   (5) https://bugs.python.org/964437

   (6) https://bugs.python.org/13933

   (7) https://bugs.python.org/13506

   (8) https://bugs.python.org/4625

   (9) https://bugs.python.org/8641

   (10) https://bugs.python.org/13296

   (11) https://bugs.python.org/9871

   (12) https://bugs.python.org/12636

   (13) https://bugs.python.org/12540

   (14) https://bugs.python.org/12590

   (15) https://bugs.python.org/11088

   (16) https://bugs.python.org/1028

   (17) https://bugs.python.org/11718


File: python.info,  Node: Tools/Demos<13>,  Next: Extension Modules<8>,  Prev: IDLE<18>,  Up: Python 3 3 0 Alpha 1

1.14.26.5 Tools/Demos
.....................

   - Issue #14053(1): patchcheck.py ("make patchcheck") now works with
     MQ patches.  Patch by Francisco Martín Brugué.

   - Issue #13930(2): 2to3 is now able to write its converted output
     files to another directory tree as well as copying unchanged files
     and altering the file suffix.  See its new -o, -W and –add-suffix
     options.  This makes it more useful in many automated code
     translation workflows.

   - Issue #13628(3): python-gdb.py is now able to retrieve more frames
     in the Python traceback if Python is optimized.

   - Issue #11996(4): libpython (gdb), replace "py-bt" command by
     "py-bt-full" and add a smarter "py-bt" command printing a classic
     Python traceback.

   - Issue #11179(5): Make ccbench work under Python 3.1 and 2.7 again.

   - Issue #10639(6): reindent.py no longer converts newlines and will
     raise an error if attempting to convert a file with mixed newlines.
     "–newline" option added to specify new line character.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14053

   (2) https://bugs.python.org/13930

   (3) https://bugs.python.org/13628

   (4) https://bugs.python.org/11996

   (5) https://bugs.python.org/11179

   (6) https://bugs.python.org/10639


File: python.info,  Node: Extension Modules<8>,  Next: Tests<18>,  Prev: Tools/Demos<13>,  Up: Python 3 3 0 Alpha 1

1.14.26.6 Extension Modules
...........................

   - Issue #16847(1): Fixed improper use of
     _PyUnicode_CheckConsistency() in non-pydebug builds.  Several
     extension modules now compile cleanly when assert()s are enabled in
     standard builds (-DDEBUG flag).

   - Issue #13840(2): The error message produced by
     ctypes.create_string_buffer when given a Unicode string has been
     fixed.

   - Issue #9975(3): socket: Fix incorrect use of flowinfo and scope_id.
     Patch by Vilmos Nebehaj.

   - Issue #7777(4): socket: Add Reliable Datagram Sockets (PF_RDS)
     support.

   - Issue #13159(5): FileIO and BZ2Compressor/BZ2Decompressor now use a
     linear-time buffer growth strategy instead of a quadratic-time one.

   - Issue #10141(6): socket: Add SocketCAN (PF_CAN) support.  Initial
     patch by Matthias Fuchs, updated by Tiago Gonçalves.

   - Issue #13070(7): Fix a crash when a TextIOWrapper caught in a
     reference cycle would be finalized after the reference to its
     underlying BufferedRWPair’s writer got cleared by the GC.

   - Issue #12881(8): ctypes: Fix segfault with large structure field
     names.

   - Issue #13058(9): ossaudiodev: fix a file descriptor leak on error.
     Patch by Thomas Jarosch.

   - Issue #13013(10): ctypes: Fix a reference leak in
     PyCArrayType_from_ctype.  Thanks to Suman Saha for finding the bug
     and providing a patch.

   - Issue #13022(11): Fix: _multiprocessing.recvfd() doesn’t check that
     file descriptor was actually received.

   - Issue #1172711(12): Add ’long long’ support to the array module.
     Initial patch by Oren Tirosh and Hirokazu Yamamoto.

   - Issue #12483(13): ctypes: Fix a crash when the destruction of a
     callback object triggers the garbage collector.

   - Issue #12950(14): Fix passing file descriptors in multiprocessing,
     under OpenIndiana/Illumos.

   - Issue #12764(15): Fix a crash in ctypes when the name of a
     Structure field is not a string.

   - Issue #11241(16): subclasses of ctypes.Array can now be subclassed.

   - Issue #9651(17): Fix a crash when ctypes.create_string_buffer(0)
     was passed to some functions like file.write().

   - Issue #10309(18): Define _GNU_SOURCE so that mremap() gets the
     proper signature.  Without this, architectures where sizeof void*
     != sizeof int are broken.  Patch given by Hallvard B Furuseth.

   - Issue #12051(19): Fix segfault in json.dumps() while encoding
     highly-nested objects using the C accelerations.

   - Issue #12017(20): Fix segfault in json.loads() while decoding
     highly-nested objects using the C accelerations.

   - Issue #1838(21): Prevent segfault in ctypes, when _as_parameter_ on
     a class is set to an instance of the class.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/16847

   (2) https://bugs.python.org/13840

   (3) https://bugs.python.org/9975

   (4) https://bugs.python.org/7777

   (5) https://bugs.python.org/13159

   (6) https://bugs.python.org/10141

   (7) https://bugs.python.org/13070

   (8) https://bugs.python.org/12881

   (9) https://bugs.python.org/13058

   (10) https://bugs.python.org/13013

   (11) https://bugs.python.org/13022

   (12) https://bugs.python.org/1172711

   (13) https://bugs.python.org/12483

   (14) https://bugs.python.org/12950

   (15) https://bugs.python.org/12764

   (16) https://bugs.python.org/11241

   (17) https://bugs.python.org/9651

   (18) https://bugs.python.org/10309

   (19) https://bugs.python.org/12051

   (20) https://bugs.python.org/12017

   (21) https://bugs.python.org/1838


File: python.info,  Node: Tests<18>,  Next: C-API<6>,  Prev: Extension Modules<8>,  Up: Python 3 3 0 Alpha 1

1.14.26.7 Tests
...............

   - Issue #13125(1): Silence spurious test_lib2to3 output when in
     non-verbose mode.  Patch by Mikhail Novikov.

   - Issue #13447(2): Add a test file to host regression tests for bugs
     in the scripts found in the Tools directory.

   - Issue #10881(3): Fix test_site failure with OS X framework builds.

   - Issue #13901(4): Prevent test_distutils failures on OS X with
     –enable-shared.

   - Issue #13862(5): Fix spurious failure in test_zlib due to
     runtime/compile time minor versions not matching.

   - Issue #12804(6): Fix test_socket and test_urllib2net failures when
     running tests on a system without internet access.

   - Issue #13726(7): Fix the ambiguous -S flag in regrtest.  It is
     -o/–slow for slow tests.

   - Issue #11659(8): Fix ResourceWarning in test_subprocess introduced
     by #11459.  Patch by Ben Hayden.

   - Issue #11577(9): fix ResourceWarning triggered by improved binhex
     test coverage

   - Issue #11509(10): Significantly increase test coverage of
     fileinput.  Patch by Denver Coneybeare at PyCon 2011 Sprints.

   - Issue #11689(11): Fix a variable scoping error in an sqlite3 test

   - Issue #13786(12): Remove unimplemented ’trace’ long option from
     regrtest.py.

   - Issue #13725(13): Fix regrtest to recognize the documented -d flag.
     Patch by Erno Tukia.

   - Issue #13304(14): Skip test case if user site-packages disabled (-s
     or PYTHONNOUSERSITE). (Patch by Carl Meyer)

   - Issue #5661(15): Add a test for ECONNRESET/EPIPE handling to
     test_asyncore.  Patch by Xavier de Gaye.

   - Issue #13218(16): Fix test_ssl failures on Debian/Ubuntu.

   - Re-enable lib2to3’s test_parser.py tests, though with an expected
     failure (see issue 13125).

   - Issue #12656(17): Add tests for IPv6 and Unix sockets to
     test_asyncore.

   - Issue #6484(18): Add unit tests for mailcap module (patch by
     Gregory Nofi)

   - Issue #11651(19): Improve the Makefile test targets to run more of
     the test suite more quickly.  The –multiprocess option is now
     enabled by default, reducing the amount of time needed to run the
     tests.  "make test" and "make quicktest" now include some
     resource-intensive tests, but no longer run the test suite twice to
     check for bugs in .pyc generation.  Tools/scripts/run_test.py
     provides an easy platform-independent way to run test suite with
     sensible defaults.

   - Issue #12331(20): The test suite for the packaging module can now
     run from an installed Python.

   - Issue #12331(21): The test suite for lib2to3 can now run from an
     installed Python.

   - Issue #12626(22): In regrtest, allow to filter tests using a glob
     filter with the ‘-m’ (or ‘--match’) option.  This works with all
     test cases using the unittest module.  This is useful with long
     test suites such as test_io or test_subprocess.

   - Issue #12624(23): It is now possible to fail after the first
     failure when running in verbose mode (‘-v’ or ‘-W’), by using the
     ‘--failfast’ (or ‘-G’) option to regrtest.  This is useful with
     long test suites such as test_io or test_subprocess.

   - Issue #12587(24): Correct faulty test file and reference in
     test_tokenize.  (Patch by Robert Xiao)

   - Issue #12573(25): Add resource checks for dangling Thread and
     Process objects.

   - Issue #12549(26): Correct test_platform to not fail when OS X
     returns ’x86_64’ as the processor type on some Mac systems.

   - Skip network tests when getaddrinfo() returns EAI_AGAIN, meaning a
     temporary failure in name resolution.

   - Issue #11812(27): Solve transient socket failure to connect to
     ’localhost’ in test_telnetlib.py.

   - Solved a potential deadlock in test_telnetlib.py.  Related to issue
     #11812(28).

   - Avoid failing in test_robotparser when mueblesmoraleda.com is flaky
     and an overzealous DNS service (e.g.  OpenDNS) redirects to a
     placeholder Web site.

   - Avoid failing in test_urllibnet.test_bad_address when some
     overzealous DNS service (e.g.  OpenDNS) resolves a non-existent
     domain name.  The test is now skipped instead.

   - Issue #12440(29): When testing whether some bits in
     SSLContext.options can be reset, check the version of the OpenSSL
     headers Python was compiled against, rather than the runtime
     version of the OpenSSL library.

   - Issue #11512(30): Add a test suite for the cgitb module.  Patch by
     Robbie Clemons.

   - Issue #12497(31): Install test/data to prevent failures of the
     various codecmaps tests.

   - Issue #12496(32): Install test/capath directory to prevent
     test_connect_capath testcase failure in test_ssl.

   - Issue #12469(33): Run wakeup and pending signal tests in a
     subprocess to run the test in a fresh process with only one thread
     and to not change signal handling of the parent process.

   - Issue #8716(34): Avoid crashes caused by Aqua Tk on OSX when
     attempting to run test_tk or test_ttk_guionly under a username that
     is not currently logged in to the console windowserver (as may be
     the case under buildbot or ssh).

   - Issue #12407(35): Explicitly skip test_capi.EmbeddingTest under
     Windows.

   - Issue #12400(36): regrtest -W doesn’t rerun the tests twice
     anymore, but captures the output and displays it on failure
     instead.  regrtest -v doesn’t print the error twice anymore if
     there is only one error.

   - Issue #12141(37): Install copies of template C module file so that
     test_build_ext of test_distutils and test_command_build_ext of
     test_packaging are no longer silently skipped when run outside of a
     build directory.

   - Issue #8746(38): Add additional tests for os.chflags() and
     os.lchflags().  Patch by Garrett Cooper.

   - Issue #10736(39): Fix test_ttk test_widgets failures with Cocoa Tk
     8.5.9 2.8 + on Mac OS X. (Patch by Ronald Oussoren)

   - Issue #12057(40): Add tests for ISO 2022 codecs (iso2022_jp,
     iso2022_jp_2, iso2022_kr).

   - Issue #12096(41): Fix a race condition in
     test_threading.test_waitfor().  Patch written by Charles-François
     Natali.

   - Issue #11614(42): import __hello__ prints "Hello World!".  Patch
     written by Andreas Stührk.

   - Issue #5723(43): Improve json tests to be executed with and without
     accelerations.

   - Issue #12041(44): Make test_wait3 more robust.

   - Issue #11873(45): Change regex in test_compileall to fix occasional
     failures when when the randomly generated temporary path happened
     to match the regex.

   - Issue #11958(46): Fix FTP tests for IPv6, bind to "::1" instead of
     "localhost".  Patch written by Charles-Francois Natali.

   - Issue #8407(47), #11859: Fix tests of test_io using threads and an
     alarm: use pthread_sigmask() to ensure that the SIGALRM signal is
     received by the main thread.

   - Issue #11811(48): Factor out detection of IPv6 support on the
     current host and make it available as ‘test.support.IPV6_ENABLED’.
     Patch by Charles-François Natali.

   - Issue #10914(49): Add a minimal embedding test to test_capi.

   - Issue #11223(50): Skip test_lock_acquire_interruption() and
     test_rlock_acquire_interruption() of test_threadsignals if a thread
     lock is implemented using a POSIX mutex and a POSIX condition
     variable.  A POSIX condition variable cannot be interrupted by a
     signal (e.g.  on Linux, the futex system call is restarted).

   - Issue #11790(51): Fix sporadic failures in
     test_multiprocessing.WithProcessesTestCondition.

   - Fix possible "file already exists" error when running the tests in
     parallel.

   - Issue #11719(52): Fix message about unexpected test_msilib skip on
     non-Windows platforms.  Patch by Nadeem Vawda.

   - Issue #11727(53): Add a –timeout option to regrtest: if a test
     takes more than TIMEOUT seconds, dumps the traceback of all threads
     and exits.

   - Issue #11653(54): fix -W with -j in regrtest.

   - The email test suite now lives in the Lib/test/test_email package.
     The test harness code has also been modernized to allow use of new
     unittest features.

   - regrtest now discovers test packages as well as test modules.

   - Issue #11577(55): improve test coverage of binhex.py.  Patch by
     Arkady Koplyarov.

   - New test_crashers added to exercise the scripts in the
     Lib/test/crashers directory and confirm they fail as expected

   - Issue #11578(56): added test for the timeit module.  Patch by
     Michael Henry.

   - Issue #11503(57): improve test coverage of posixpath.py.  Patch by
     Evan Dandrea.

   - Issue #11505(58): improves test coverage of string.py, increases
     granularity of string.Formatter tests.  Initial patch by Alicia
     Arlen.

   - Issue #11548(59): Improve test coverage of the shutil module.
     Patch by Evan Dandrea.

   - Issue #11554(60): Reactivated test_email_codecs.

   - Issue #11505(61): improves test coverage of string.py.  Patch by
     Alicia Arlen

   - Issue #11490(62): test_subprocess.test_leaking_fds_on_error no
     longer gives a false positive if the last directory in the path is
     inaccessible.

   - Issue #11223(63): Fix test_threadsignals to fail, not hang, when
     the non-semaphore implementation of locks is used under POSIX.

   - Issue #10911(64): Add tests on CGI with non-ASCII characters.
     Patch written by Pierre Quentel.

   - Issue #9931(65): Fix hangs in GUI tests under Windows in certain
     conditions.  Patch by Hirokazu Yamamoto.

   - Issue #10512(66): Properly close sockets under test.test_cgi.

   - Issue #10992(67): Make tests pass under coverage.

   - Issue #10826(68): Prevent sporadic failure in test_subprocess on
     Solaris due to open door files.

   - Issue #10990(69): Prevent tests from clobbering a set trace
     function.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/13125

   (2) https://bugs.python.org/13447

   (3) https://bugs.python.org/10881

   (4) https://bugs.python.org/13901

   (5) https://bugs.python.org/13862

   (6) https://bugs.python.org/12804

   (7) https://bugs.python.org/13726

   (8) https://bugs.python.org/11659

   (9) https://bugs.python.org/11577

   (10) https://bugs.python.org/11509

   (11) https://bugs.python.org/11689

   (12) https://bugs.python.org/13786

   (13) https://bugs.python.org/13725

   (14) https://bugs.python.org/13304

   (15) https://bugs.python.org/5661

   (16) https://bugs.python.org/13218

   (17) https://bugs.python.org/12656

   (18) https://bugs.python.org/6484

   (19) https://bugs.python.org/11651

   (20) https://bugs.python.org/12331

   (21) https://bugs.python.org/12331

   (22) https://bugs.python.org/12626

   (23) https://bugs.python.org/12624

   (24) https://bugs.python.org/12587

   (25) https://bugs.python.org/12573

   (26) https://bugs.python.org/12549

   (27) https://bugs.python.org/11812

   (28) https://bugs.python.org/11812

   (29) https://bugs.python.org/12440

   (30) https://bugs.python.org/11512

   (31) https://bugs.python.org/12497

   (32) https://bugs.python.org/12496

   (33) https://bugs.python.org/12469

   (34) https://bugs.python.org/8716

   (35) https://bugs.python.org/12407

   (36) https://bugs.python.org/12400

   (37) https://bugs.python.org/12141

   (38) https://bugs.python.org/8746

   (39) https://bugs.python.org/10736

   (40) https://bugs.python.org/12057

   (41) https://bugs.python.org/12096

   (42) https://bugs.python.org/11614

   (43) https://bugs.python.org/5723

   (44) https://bugs.python.org/12041

   (45) https://bugs.python.org/11873

   (46) https://bugs.python.org/11958

   (47) https://bugs.python.org/8407

   (48) https://bugs.python.org/11811

   (49) https://bugs.python.org/10914

   (50) https://bugs.python.org/11223

   (51) https://bugs.python.org/11790

   (52) https://bugs.python.org/11719

   (53) https://bugs.python.org/11727

   (54) https://bugs.python.org/11653

   (55) https://bugs.python.org/11577

   (56) https://bugs.python.org/11578

   (57) https://bugs.python.org/11503

   (58) https://bugs.python.org/11505

   (59) https://bugs.python.org/11548

   (60) https://bugs.python.org/11554

   (61) https://bugs.python.org/11505

   (62) https://bugs.python.org/11490

   (63) https://bugs.python.org/11223

   (64) https://bugs.python.org/10911

   (65) https://bugs.python.org/9931

   (66) https://bugs.python.org/10512

   (67) https://bugs.python.org/10992

   (68) https://bugs.python.org/10826

   (69) https://bugs.python.org/10990


File: python.info,  Node: C-API<6>,  Next: Documentation<19>,  Prev: Tests<18>,  Up: Python 3 3 0 Alpha 1

1.14.26.8 C-API
...............

   - Issue #13452(1): PyUnicode_EncodeDecimal() doesn’t support error
     handlers different than "strict" anymore.  The caller was unable to
     compute the size of the output buffer: it depends on the error
     handler.

   - Issue #13560(2): Add PyUnicode_DecodeLocale(),
     PyUnicode_DecodeLocaleAndSize() and PyUnicode_EncodeLocale()
     functions to the C API to decode/encode from/to the current locale
     encoding.

   - Issue #10831(3): PyUnicode_FromFormat() supports %li, %lli and %zi
     formats.

   - Issue #11246(4): Fix PyUnicode_FromFormat("%V") to decode the byte
     string from UTF-8 (with replace error handler) instead of
     ISO-8859-1 (in strict mode).  Patch written by Ray Allen.

   - Issue #10830(5): Fix PyUnicode_FromFormatV("%c") for non-BMP
     characters on narrow build.

   - Add PyObject_GenericGetDict and PyObject_GeneriSetDict.  They are
     generic implementations for the getter and setter of a ‘__dict__’
     descriptor of C types.

   - Issue #13727(6): Add 3 macros to access PyDateTime_Delta members:
     PyDateTime_DELTA_GET_DAYS, PyDateTime_DELTA_GET_SECONDS,
     PyDateTime_DELTA_GET_MICROSECONDS.

   - Issue #10542(7): Add 4 macros to work with surrogates:
     Py_UNICODE_IS_SURROGATE, Py_UNICODE_IS_HIGH_SURROGATE,
     Py_UNICODE_IS_LOW_SURROGATE, Py_UNICODE_JOIN_SURROGATES.

   - Issue #12724(8): Add Py_RETURN_NOTIMPLEMENTED macro for returning
     NotImplemented.

   - PY_PATCHLEVEL_REVISION has been removed, since it’s meaningless
     with Mercurial.

   - Issue #12173(9): The first argument of PyImport_ImportModuleLevel
     is now ‘const char *’ instead of ‘char *’.

   - Issue #12380(10): PyArg_ParseTuple now accepts a bytearray for the
     ’c’ format.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/13452

   (2) https://bugs.python.org/13560

   (3) https://bugs.python.org/10831

   (4) https://bugs.python.org/11246

   (5) https://bugs.python.org/10830

   (6) https://bugs.python.org/13727

   (7) https://bugs.python.org/10542

   (8) https://bugs.python.org/12724

   (9) https://bugs.python.org/12173

   (10) https://bugs.python.org/12380


File: python.info,  Node: Documentation<19>,  Prev: C-API<6>,  Up: Python 3 3 0 Alpha 1

1.14.26.9 Documentation
.......................

   - Issue #23006(1): Improve the documentation and indexing of
     dict.__missing__.  Add an entry in the language datamodel special
     methods section.  Revise and index its discussion in the stdtypes
     mapping/dict section.

   - Issue #13989(2): Document that GzipFile does not support text mode,
     and give a more helpful error message when opened with an invalid
     mode string.

   - Issue #13921(3): Undocument and clean up sqlite3.OptimizedUnicode,
     which is obsolete in Python 3.x.  It’s now aliased to str for
     backwards compatibility.

   - Issue #12102(4): Document that buffered files must be flushed
     before being used with mmap.  Patch by Steffen Daode Nurpmeso.

   - Issue #8982(5): Improve the documentation for the argparse
     Namespace object.

   - Issue #9343(6): Document that argparse parent parsers must be
     configured before their children.

   - Issue #13498(7): Clarify docs of os.makedirs()’s exist_ok argument.
     Done with great native-speaker help from R. David Murray.

   - Issues #13491 and #13995: Fix many errors in sqlite3 documentation.
     Initial patch for #13491 by Johannes Vogel.

   - Issue #13402(8): Document absoluteness of sys.executable.

   - Issue #13883(9): PYTHONCASEOK also works on OS X.

   - Issue #9021(10): Add an introduction to the copy module
     documentation.

   - Issue #6005(11): Examples in the socket library documentation use
     sendall, where relevant, instead send method.

   - Issue #12798(12): Updated the mimetypes documentation.

   - Issue #12949(13): Document the kwonlyargcount argument for the
     PyCode_New C API function.

   - Issue #13513(14): Fix io.IOBase documentation to correctly link to
     the io.IOBase.readline method instead of the readline module.

   - Issue #13237(15): Reorganise subprocess documentation to emphasise
     convenience functions and the most commonly needed arguments to
     Popen.

   - Issue #13141(16): Demonstrate recommended style for socketserver
     examples.

   - Issue #11818(17): Fix tempfile examples for Python 3.

`(For information about older versions, consult the HISTORY file.)'

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23006

   (2) https://bugs.python.org/13989

   (3) https://bugs.python.org/13921

   (4) https://bugs.python.org/12102

   (5) https://bugs.python.org/8982

   (6) https://bugs.python.org/9343

   (7) https://bugs.python.org/13498

   (8) https://bugs.python.org/13402

   (9) https://bugs.python.org/13883

   (10) https://bugs.python.org/9021

   (11) https://bugs.python.org/6005

   (12) https://bugs.python.org/12798

   (13) https://bugs.python.org/12949

   (14) https://bugs.python.org/13513

   (15) https://bugs.python.org/13237

   (16) https://bugs.python.org/13141

   (17) https://bugs.python.org/11818


File: python.info,  Node: The Python Tutorial,  Next: Python Setup and Usage,  Prev: What's New in Python,  Up: Top

2 The Python Tutorial
*********************

Python is an easy to learn, powerful programming language.  It has
efficient high-level data structures and a simple but effective approach
to object-oriented programming.  Python’s elegant syntax and dynamic
typing, together with its interpreted nature, make it an ideal language
for scripting and rapid application development in many areas on most
platforms.

The Python interpreter and the extensive standard library are freely
available in source or binary form for all major platforms from the
Python Web site, ‘https://www.python.org/’, and may be freely
distributed.  The same site also contains distributions of and pointers
to many free third party Python modules, programs and tools, and
additional documentation.

The Python interpreter is easily extended with new functions and data
types implemented in C or C++ (or other languages callable from C).
Python is also suitable as an extension language for customizable
applications.

This tutorial introduces the reader informally to the basic concepts and
features of the Python language and system.  It helps to have a Python
interpreter handy for hands-on experience, but all examples are
self-contained, so the tutorial can be read off-line as well.

For a description of standard objects and modules, see *note The Python
Standard Library: 9f1.  *note The Python Language Reference: 9f2. gives
a more formal definition of the language.  To write extensions in C or
C++, read *note Extending and Embedding the Python Interpreter: 9f3. and
*note Python/C API Reference Manual: 9f4.  There are also several books
covering Python in depth.

This tutorial does not attempt to be comprehensive and cover every
single feature, or even every commonly used feature.  Instead, it
introduces many of Python’s most noteworthy features, and will give you
a good idea of the language’s flavor and style.  After reading it, you
will be able to read and write Python modules and programs, and you will
be ready to learn more about the various Python library modules
described in *note The Python Standard Library: 9f1.

The *note Glossary: 9f5. is also worth going through.

* Menu:

* Whetting Your Appetite:: 
* Using the Python Interpreter:: 
* An Informal Introduction to Python:: 
* More Control Flow Tools:: 
* Data Structures:: 
* Modules:: 
* Input and Output:: 
* Errors and Exceptions:: 
* Classes:: 
* Brief Tour of the Standard Library:: 
* Brief Tour of the Standard Library: Brief Tour of the Standard Library -- Part II. Part II
* What Now?:: 
* Interactive Input Editing and History Substitution:: 
* Floating Point Arithmetic; Issues and Limitations: Floating Point Arithmetic Issues and Limitations. 
* Appendix:: 


File: python.info,  Node: Whetting Your Appetite,  Next: Using the Python Interpreter,  Up: The Python Tutorial

2.1 Whetting Your Appetite
==========================

If you do much work on computers, eventually you find that there’s some
task you’d like to automate.  For example, you may wish to perform a
search-and-replace over a large number of text files, or rename and
rearrange a bunch of photo files in a complicated way.  Perhaps you’d
like to write a small custom database, or a specialized GUI application,
or a simple game.

If you’re a professional software developer, you may have to work with
several C/C++/Java libraries but find the usual
write/compile/test/re-compile cycle is too slow.  Perhaps you’re writing
a test suite for such a library and find writing the testing code a
tedious task.  Or maybe you’ve written a program that could use an
extension language, and you don’t want to design and implement a whole
new language for your application.

Python is just the language for you.

You could write a Unix shell script or Windows batch files for some of
these tasks, but shell scripts are best at moving around files and
changing text data, not well-suited for GUI applications or games.  You
could write a C/C++/Java program, but it can take a lot of development
time to get even a first-draft program.  Python is simpler to use,
available on Windows, Mac OS X, and Unix operating systems, and will
help you get the job done more quickly.

Python is simple to use, but it is a real programming language, offering
much more structure and support for large programs than shell scripts or
batch files can offer.  On the other hand, Python also offers much more
error checking than C, and, being a `very-high-level language', it has
high-level data types built in, such as flexible arrays and
dictionaries.  Because of its more general data types Python is
applicable to a much larger problem domain than Awk or even Perl, yet
many things are at least as easy in Python as in those languages.

Python allows you to split your program into modules that can be reused
in other Python programs.  It comes with a large collection of standard
modules that you can use as the basis of your programs — or as examples
to start learning to program in Python.  Some of these modules provide
things like file I/O, system calls, sockets, and even interfaces to
graphical user interface toolkits like Tk.

Python is an interpreted language, which can save you considerable time
during program development because no compilation and linking is
necessary.  The interpreter can be used interactively, which makes it
easy to experiment with features of the language, to write throw-away
programs, or to test functions during bottom-up program development.  It
is also a handy desk calculator.

Python enables programs to be written compactly and readably.  Programs
written in Python are typically much shorter than equivalent C, C++, or
Java programs, for several reasons:

   * the high-level data types allow you to express complex operations
     in a single statement;

   * statement grouping is done by indentation instead of beginning and
     ending brackets;

   * no variable or argument declarations are necessary.

Python is `extensible': if you know how to program in C it is easy to
add a new built-in function or module to the interpreter, either to
perform critical operations at maximum speed, or to link Python programs
to libraries that may only be available in binary form (such as a
vendor-specific graphics library).  Once you are really hooked, you can
link the Python interpreter into an application written in C and use it
as an extension or command language for that application.

By the way, the language is named after the BBC show "Monty Python’s
Flying Circus" and has nothing to do with reptiles.  Making references
to Monty Python skits in documentation is not only allowed, it is
encouraged!

Now that you are all excited about Python, you’ll want to examine it in
some more detail.  Since the best way to learn a language is to use it,
the tutorial invites you to play with the Python interpreter as you
read.

In the next chapter, the mechanics of using the interpreter are
explained.  This is rather mundane information, but essential for trying
out the examples shown later.

The rest of the tutorial introduces various features of the Python
language and system through examples, beginning with simple expressions,
statements and data types, through functions and modules, and finally
touching upon advanced concepts like exceptions and user-defined
classes.


File: python.info,  Node: Using the Python Interpreter,  Next: An Informal Introduction to Python,  Prev: Whetting Your Appetite,  Up: The Python Tutorial

2.2 Using the Python Interpreter
================================

* Menu:

* Invoking the Interpreter:: 
* The Interpreter and Its Environment:: 


File: python.info,  Node: Invoking the Interpreter,  Next: The Interpreter and Its Environment,  Up: Using the Python Interpreter

2.2.1 Invoking the Interpreter
------------------------------

The Python interpreter is usually installed as
‘/usr/local/bin/python3.4’ on those machines where it is available;
putting ‘/usr/local/bin’ in your Unix shell’s search path makes it
possible to start it by typing the command:

     python3.4

to the shell.  (1) Since the choice of the directory where the
interpreter lives is an installation option, other places are possible;
check with your local Python guru or system administrator.  (E.g.,
‘/usr/local/python’ is a popular alternative location.)

On Windows machines, the Python installation is usually placed in
‘C:\Python34’, though you can change this when you’re running the
installer.  To add this directory to your path, you can type the
following command into the command prompt in a DOS box:

     set path=%path%;C:\python34

Typing an end-of-file character (‘Control-D’ on Unix, ‘Control-Z’ on
Windows) at the primary prompt causes the interpreter to exit with a
zero exit status.  If that doesn’t work, you can exit the interpreter by
typing the following command: ‘quit()’.

The interpreter’s line-editing features include interactive editing,
history substitution and code completion on systems that support
readline.  Perhaps the quickest check to see whether command line
editing is supported is typing Control-P to the first Python prompt you
get.  If it beeps, you have command line editing; see Appendix *note
Interactive Input Editing and History Substitution: 9fe. for an
introduction to the keys.  If nothing appears to happen, or if ‘^P’ is
echoed, command line editing isn’t available; you’ll only be able to use
backspace to remove characters from the current line.

The interpreter operates somewhat like the Unix shell: when called with
standard input connected to a tty device, it reads and executes commands
interactively; when called with a file name argument or with a file as
standard input, it reads and executes a `script' from that file.

A second way of starting the interpreter is ‘python -c command [arg]
...’, which executes the statement(s) in `command', analogous to the
shell’s *note -c: 738. option.  Since Python statements often contain
spaces or other characters that are special to the shell, it is usually
advised to quote `command' in its entirety with single quotes.

Some Python modules are also useful as scripts.  These can be invoked
using ‘python -m module [arg] ...’, which executes the source file for
`module' as if you had spelled out its full name on the command line.

When a script file is used, it is sometimes useful to be able to run the
script and enter interactive mode afterwards.  This can be done by
passing *note -i: 8ab. before the script.

All command line options are described in *note Command line and
environment: 9ff.

* Menu:

* Argument Passing:: 
* Interactive Mode:: 

   ---------- Footnotes ----------

   (1) On Unix, the Python 3.x interpreter is by default not installed
with the executable named ‘python’, so that it does not conflict with a
simultaneously installed Python 2.x executable.


File: python.info,  Node: Argument Passing,  Next: Interactive Mode,  Up: Invoking the Interpreter

2.2.1.1 Argument Passing
........................

When known to the interpreter, the script name and additional arguments
thereafter are turned into a list of strings and assigned to the ‘argv’
variable in the ‘sys’ module.  You can access this list by executing
‘import sys’.  The length of the list is at least one; when no script
and no arguments are given, ‘sys.argv[0]’ is an empty string.  When the
script name is given as ‘'-'’ (meaning standard input), ‘sys.argv[0]’ is
set to ‘'-'’.  When *note -c: 738. `command' is used, ‘sys.argv[0]’ is
set to ‘'-c'’.  When *note -m: 6a8. `module' is used, ‘sys.argv[0]’ is
set to the full name of the located module.  Options found after *note
-c: 738. `command' or *note -m: 6a8. `module' are not consumed by the
Python interpreter’s option processing but left in ‘sys.argv’ for the
command or module to handle.


File: python.info,  Node: Interactive Mode,  Prev: Argument Passing,  Up: Invoking the Interpreter

2.2.1.2 Interactive Mode
........................

When commands are read from a tty, the interpreter is said to be in
`interactive mode'.  In this mode it prompts for the next command with
the `primary prompt', usually three greater-than signs (‘>>>’); for
continuation lines it prompts with the `secondary prompt', by default
three dots (‘...’).  The interpreter prints a welcome message stating
its version number and a copyright notice before printing the first
prompt:

     $ python3.4
     Python 3.4 (default, Mar 16 2014, 09:25:04)
     [GCC 4.8.2] on linux
     Type "help", "copyright", "credits" or "license" for more information.
     >>>

Continuation lines are needed when entering a multi-line construct.  As
an example, take a look at this *note if: 86d. statement:

     >>> the_world_is_flat = True
     >>> if the_world_is_flat:
     ...     print("Be careful not to fall off!")
     ...
     Be careful not to fall off!

For more on interactive mode, see *note Interactive Mode: a03.


File: python.info,  Node: The Interpreter and Its Environment,  Prev: Invoking the Interpreter,  Up: Using the Python Interpreter

2.2.2 The Interpreter and Its Environment
-----------------------------------------

* Menu:

* Source Code Encoding:: 


File: python.info,  Node: Source Code Encoding,  Up: The Interpreter and Its Environment

2.2.2.1 Source Code Encoding
............................

By default, Python source files are treated as encoded in UTF-8.  In
that encoding, characters of most languages in the world can be used
simultaneously in string literals, identifiers and comments — although
the standard library only uses ASCII characters for identifiers, a
convention that any portable code should follow.  To display all these
characters properly, your editor must recognize that the file is UTF-8,
and it must use a font that supports all the characters in the file.

It is also possible to specify a different encoding for source files.
In order to do this, put one more special comment line right after the
‘#!’ line to define the source file encoding:

     # -*- coding: encoding -*-

With that declaration, everything in the source file will be treated as
having the encoding `encoding' instead of UTF-8.  The list of possible
encodings can be found in the Python Library Reference, in the section
on *note codecs: 1c.

For example, if your editor of choice does not support UTF-8 encoded
files and insists on using some other encoding, say Windows-1252, you
can write:

     # -*- coding: cp-1252 -*-

and still use all characters in the Windows-1252 character set in the
source files.  The special encoding comment must be in the `first or
second' line within the file.


File: python.info,  Node: An Informal Introduction to Python,  Next: More Control Flow Tools,  Prev: Using the Python Interpreter,  Up: The Python Tutorial

2.3 An Informal Introduction to Python
======================================

In the following examples, input and output are distinguished by the
presence or absence of prompts (*note >>>: a0b. and *note ...: a0c.): to
repeat the example, you must type everything after the prompt, when the
prompt appears; lines that do not begin with a prompt are output from
the interpreter.  Note that a secondary prompt on a line by itself in an
example means you must type a blank line; this is used to end a
multi-line command.

Many of the examples in this manual, even those entered at the
interactive prompt, include comments.  Comments in Python start with the
hash character, ‘#’, and extend to the end of the physical line.  A
comment may appear at the start of a line or following whitespace or
code, but not within a string literal.  A hash character within a string
literal is just a hash character.  Since comments are to clarify code
and are not interpreted by Python, they may be omitted when typing in
examples.

Some examples:

     # this is the first comment
     spam = 1  # and this is the second comment
               # ... and now a third!
     text = "# This is not a comment because it's inside quotes."

* Menu:

* Using Python as a Calculator:: 
* First Steps Towards Programming:: 


File: python.info,  Node: Using Python as a Calculator,  Next: First Steps Towards Programming,  Up: An Informal Introduction to Python

2.3.1 Using Python as a Calculator
----------------------------------

Let’s try some simple Python commands.  Start the interpreter and wait
for the primary prompt, ‘>>>’.  (It shouldn’t take long.)

* Menu:

* Numbers:: 
* Strings:: 
* Lists:: 


File: python.info,  Node: Numbers,  Next: Strings,  Up: Using Python as a Calculator

2.3.1.1 Numbers
...............

The interpreter acts as a simple calculator: you can type an expression
at it and it will write the value.  Expression syntax is
straightforward: the operators ‘+’, ‘-’, ‘*’ and ‘/’ work just like in
most other languages (for example, Pascal or C); parentheses (‘()’) can
be used for grouping.  For example:

     >>> 2 + 2
     4
     >>> 50 - 5*6
     20
     >>> (50 - 5*6) / 4
     5.0
     >>> 8 / 5  # division always returns a floating point number
     1.6

The integer numbers (e.g.  ‘2’, ‘4’, ‘20’) have type *note int: 185, the
ones with a fractional part (e.g.  ‘5.0’, ‘1.6’) have type *note float:
327.  We will see more about numeric types later in the tutorial.

Division (‘/’) always returns a float.  To do *note floor division: a11.
and get an integer result (discarding any fractional result) you can use
the ‘//’ operator; to calculate the remainder you can use ‘%’:

     >>> 17 / 3  # classic division returns a float
     5.666666666666667
     >>>
     >>> 17 // 3  # floor division discards the fractional part
     5
     >>> 17 % 3  # the % operator returns the remainder of the division
     2
     >>> 5 * 3 + 2  # result * divisor + remainder
     17

With Python, it is possible to use the ‘**’ operator to calculate powers
(1):

     >>> 5 ** 2  # 5 squared
     25
     >>> 2 ** 7  # 2 to the power of 7
     128

The equal sign (‘=’) is used to assign a value to a variable.
Afterwards, no result is displayed before the next interactive prompt:

     >>> width = 20
     >>> height = 5 * 9
     >>> width * height
     900

If a variable is not "defined" (assigned a value), trying to use it will
give you an error:

     >>> n  # try to access an undefined variable
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     NameError: name 'n' is not defined

There is full support for floating point; operators with mixed type
operands convert the integer operand to floating point:

     >>> 3 * 3.75 / 1.5
     7.5
     >>> 7.0 / 2
     3.5

In interactive mode, the last printed expression is assigned to the
variable ‘_’.  This means that when you are using Python as a desk
calculator, it is somewhat easier to continue calculations, for example:

     >>> tax = 12.5 / 100
     >>> price = 100.50
     >>> price * tax
     12.5625
     >>> price + _
     113.0625
     >>> round(_, 2)
     113.06

This variable should be treated as read-only by the user.  Don’t
explicitly assign a value to it — you would create an independent local
variable with the same name masking the built-in variable with its magic
behavior.

In addition to *note int: 185. and *note float: 327, Python supports
other types of numbers, such as *note Decimal: 3d4. and *note Fraction:
5b8.  Python also has built-in support for *note complex numbers: a12,
and uses the ‘j’ or ‘J’ suffix to indicate the imaginary part (e.g.
‘3+5j’).

   ---------- Footnotes ----------

   (1) Since ‘**’ has higher precedence than ‘-’, ‘-3**2’ will be
interpreted as ‘-(3**2)’ and thus result in ‘-9’.  To avoid this and get
‘9’, you can use ‘(-3)**2’.


File: python.info,  Node: Strings,  Next: Lists,  Prev: Numbers,  Up: Using Python as a Calculator

2.3.1.2 Strings
...............

Besides numbers, Python can also manipulate strings, which can be
expressed in several ways.  They can be enclosed in single quotes
(‘'...'’) or double quotes (‘"..."’) with the same result (1).  ‘\’ can
be used to escape quotes:

     >>> 'spam eggs'  # single quotes
     'spam eggs'
     >>> 'doesn\'t'  # use \' to escape the single quote...
     "doesn't"
     >>> "doesn't"  # ...or use double quotes instead
     "doesn't"
     >>> '"Yes," he said.'
     '"Yes," he said.'
     >>> "\"Yes,\" he said."
     '"Yes," he said.'
     >>> '"Isn\'t," she said.'
     '"Isn\'t," she said.'

In the interactive interpreter, the output string is enclosed in quotes
and special characters are escaped with backslashes.  While this might
sometimes look different from the input (the enclosing quotes could
change), the two strings are equivalent.  The string is enclosed in
double quotes if the string contains a single quote and no double
quotes, otherwise it is enclosed in single quotes.  The *note print():
21c. function produces a more readable output, by omitting the enclosing
quotes and by printing escaped and special characters:

     >>> '"Isn\'t," she said.'
     '"Isn\'t," she said.'
     >>> print('"Isn\'t," she said.')
     "Isn't," she said.
     >>> s = 'First line.\nSecond line.'  # \n means newline
     >>> s  # without print(), \n is included in the output
     'First line.\nSecond line.'
     >>> print(s)  # with print(), \n produces a new line
     First line.
     Second line.

If you don’t want characters prefaced by ‘\’ to be interpreted as
special characters, you can use `raw strings' by adding an ‘r’ before
the first quote:

     >>> print('C:\some\name')  # here \n means newline!
     C:\some
     ame
     >>> print(r'C:\some\name')  # note the r before the quote
     C:\some\name

String literals can span multiple lines.  One way is using
triple-quotes: ‘"""..."""’ or ‘'''...'''’.  End of lines are
automatically included in the string, but it’s possible to prevent this
by adding a ‘\’ at the end of the line.  The following example:

     print("""\
     Usage: thingy [OPTIONS]
          -h                        Display this usage message
          -H hostname               Hostname to connect to
     """)

produces the following output (note that the initial newline is not
included):

     Usage: thingy [OPTIONS]
          -h                        Display this usage message
          -H hostname               Hostname to connect to

Strings can be concatenated (glued together) with the ‘+’ operator, and
repeated with ‘*’:

     >>> # 3 times 'un', followed by 'ium'
     >>> 3 * 'un' + 'ium'
     'unununium'

Two or more `string literals' (i.e.  the ones enclosed between quotes)
next to each other are automatically concatenated.

     >>> 'Py' 'thon'
     'Python'

This only works with two literals though, not with variables or
expressions:

     >>> prefix = 'Py'
     >>> prefix 'thon'  # can't concatenate a variable and a string literal
       ...
     SyntaxError: invalid syntax
     >>> ('un' * 3) 'ium'
       ...
     SyntaxError: invalid syntax

If you want to concatenate variables or a variable and a literal, use
‘+’:

     >>> prefix + 'thon'
     'Python'

This feature is particularly useful when you want to break long strings:

     >>> text = ('Put several strings within parentheses '
                 'to have them joined together.')
     >>> text
     'Put several strings within parentheses to have them joined together.'

Strings can be `indexed' (subscripted), with the first character having
index 0.  There is no separate character type; a character is simply a
string of size one:

     >>> word = 'Python'
     >>> word[0]  # character in position 0
     'P'
     >>> word[5]  # character in position 5
     'n'

Indices may also be negative numbers, to start counting from the right:

     >>> word[-1]  # last character
     'n'
     >>> word[-2]  # second-last character
     'o'
     >>> word[-6]
     'P'

Note that since -0 is the same as 0, negative indices start from -1.

In addition to indexing, `slicing' is also supported.  While indexing is
used to obtain individual characters, `slicing' allows you to obtain
substring:

     >>> word[0:2]  # characters from position 0 (included) to 2 (excluded)
     'Py'
     >>> word[2:5]  # characters from position 2 (included) to 5 (excluded)
     'tho'

Note how the start is always included, and the end always excluded.
This makes sure that ‘s[:i] + s[i:]’ is always equal to ‘s’:

     >>> word[:2] + word[2:]
     'Python'
     >>> word[:4] + word[4:]
     'Python'

Slice indices have useful defaults; an omitted first index defaults to
zero, an omitted second index defaults to the size of the string being
sliced.

     >>> word[:2]  # character from the beginning to position 2 (excluded)
     'Py'
     >>> word[4:]  # characters from position 4 (included) to the end
     'on'
     >>> word[-2:] # characters from the second-last (included) to the end
     'on'

One way to remember how slices work is to think of the indices as
pointing `between' characters, with the left edge of the first character
numbered 0.  Then the right edge of the last character of a string of
`n' characters has index `n', for example:

      +---+---+---+---+---+---+
      | P | y | t | h | o | n |
      +---+---+---+---+---+---+
      0   1   2   3   4   5   6
     -6  -5  -4  -3  -2  -1

The first row of numbers gives the position of the indices 0...6 in the
string; the second row gives the corresponding negative indices.  The
slice from `i' to `j' consists of all characters between the edges
labeled `i' and `j', respectively.

For non-negative indices, the length of a slice is the difference of the
indices, if both are within bounds.  For example, the length of
‘word[1:3]’ is 2.

Attempting to use a index that is too large will result in an error:

     >>> word[42]  # the word only has 6 characters
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     IndexError: string index out of range

However, out of range slice indexes are handled gracefully when used for
slicing:

     >>> word[4:42]
     'on'
     >>> word[42:]
     ''

Python strings cannot be changed — they are *note immutable: a15.
Therefore, assigning to an indexed position in the string results in an
error:

     >>> word[0] = 'J'
       ...
     TypeError: 'str' object does not support item assignment
     >>> word[2:] = 'py'
       ...
     TypeError: 'str' object does not support item assignment

If you need a different string, you should create a new one:

     >>> 'J' + word[1:]
     'Jython'
     >>> word[:2] + 'py'
     'Pypy'

The built-in function *note len(): 358. returns the length of a string:

     >>> s = 'supercalifragilisticexpialidocious'
     >>> len(s)
     34

See also
........

*note Text Sequence Type — str: a16.

     Strings are examples of `sequence types', and support the common
     operations supported by such types.

*note String Methods: a17.

     Strings support a large number of methods for basic transformations
     and searching.

*note String Formatting: a18.

     Information about string formatting with *note str.format(): 557.
     is described here.

*note printf-style String Formatting: a19.

     The old formatting operations invoked when strings and Unicode
     strings are the left operand of the ‘%’ operator are described in
     more detail here.

   ---------- Footnotes ----------

   (1) Unlike other languages, special characters such as ‘\n’ have the
same meaning with both single (‘'...'’) and double (‘"..."’) quotes.
The only difference between the two is that within single quotes you
don’t need to escape ‘"’ (but you have to escape ‘\'’) and vice versa.


File: python.info,  Node: Lists,  Prev: Strings,  Up: Using Python as a Calculator

2.3.1.3 Lists
.............

Python knows a number of `compound' data types, used to group together
other values.  The most versatile is the `list', which can be written as
a list of comma-separated values (items) between square brackets.  Lists
might contain items of different types, but usually the items all have
the same type.

     >>> squares = [1, 4, 9, 16, 25]
     >>> squares
     [1, 4, 9, 16, 25]

Like strings (and all other built-in *note sequence: a1c. type), lists
can be indexed and sliced:

     >>> squares[0]  # indexing returns the item
     1
     >>> squares[-1]
     25
     >>> squares[-3:]  # slicing returns a new list
     [9, 16, 25]

All slice operations return a new list containing the requested
elements.  This means that the following slice returns a new (shallow)
copy of the list:

     >>> squares[:]
     [1, 4, 9, 16, 25]

Lists also support operations like concatenation:

     >>> squares + [36, 49, 64, 81, 100]
     [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

Unlike strings, which are *note immutable: a15, lists are a *note
mutable: a1d. type, i.e.  it is possible to change their content:

     >>> cubes = [1, 8, 27, 65, 125]  # something's wrong here
     >>> 4 ** 3  # the cube of 4 is 64, not 65!
     64
     >>> cubes[3] = 64  # replace the wrong value
     >>> cubes
     [1, 8, 27, 64, 125]

You can also add new items at the end of the list, by using the
‘append()’ `method' (we will see more about methods later):

     >>> cubes.append(216)  # add the cube of 6
     >>> cubes.append(7 ** 3)  # and the cube of 7
     >>> cubes
     [1, 8, 27, 64, 125, 216, 343]

Assignment to slices is also possible, and this can even change the size
of the list or clear it entirely:

     >>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
     >>> letters
     ['a', 'b', 'c', 'd', 'e', 'f', 'g']
     >>> # replace some values
     >>> letters[2:5] = ['C', 'D', 'E']
     >>> letters
     ['a', 'b', 'C', 'D', 'E', 'f', 'g']
     >>> # now remove them
     >>> letters[2:5] = []
     >>> letters
     ['a', 'b', 'f', 'g']
     >>> # clear the list by replacing all the elements with an empty list
     >>> letters[:] = []
     >>> letters
     []

The built-in function *note len(): 358. also applies to lists:

     >>> letters = ['a', 'b', 'c', 'd']
     >>> len(letters)
     4

It is possible to nest lists (create lists containing other lists), for
example:

     >>> a = ['a', 'b', 'c']
     >>> n = [1, 2, 3]
     >>> x = [a, n]
     >>> x
     [['a', 'b', 'c'], [1, 2, 3]]
     >>> x[0]
     ['a', 'b', 'c']
     >>> x[0][1]
     'b'


File: python.info,  Node: First Steps Towards Programming,  Prev: Using Python as a Calculator,  Up: An Informal Introduction to Python

2.3.2 First Steps Towards Programming
-------------------------------------

Of course, we can use Python for more complicated tasks than adding two
and two together.  For instance, we can write an initial sub-sequence of
the `Fibonacci' series as follows:

     >>> # Fibonacci series:
     ... # the sum of two elements defines the next
     ... a, b = 0, 1
     >>> while b < 10:
     ...     print(b)
     ...     a, b = b, a+b
     ...
     1
     1
     2
     3
     5
     8

This example introduces several new features.

   * The first line contains a `multiple assignment': the variables ‘a’
     and ‘b’ simultaneously get the new values 0 and 1.  On the last
     line this is used again, demonstrating that the expressions on the
     right-hand side are all evaluated first before any of the
     assignments take place.  The right-hand side expressions are
     evaluated from the left to the right.

   * The *note while: a20. loop executes as long as the condition (here:
     ‘b < 10’) remains true.  In Python, like in C, any non-zero integer
     value is true; zero is false.  The condition may also be a string
     or list value, in fact any sequence; anything with a non-zero
     length is true, empty sequences are false.  The test used in the
     example is a simple comparison.  The standard comparison operators
     are written the same as in C: ‘<’ (less than), ‘>’ (greater than),
     ‘==’ (equal to), ‘<=’ (less than or equal to), ‘>=’ (greater than
     or equal to) and ‘!=’ (not equal to).

   * The `body' of the loop is `indented': indentation is Python’s way
     of grouping statements.  At the interactive prompt, you have to
     type a tab or space(s) for each indented line.  In practice you
     will prepare more complicated input for Python with a text editor;
     all decent text editors have an auto-indent facility.  When a
     compound statement is entered interactively, it must be followed by
     a blank line to indicate completion (since the parser cannot guess
     when you have typed the last line).  Note that each line within a
     basic block must be indented by the same amount.

   * The *note print(): 21c. function writes the value of the
     argument(s) it is given.  It differs from just writing the
     expression you want to write (as we did earlier in the calculator
     examples) in the way it handles multiple arguments, floating point
     quantities, and strings.  Strings are printed without quotes, and a
     space is inserted between items, so you can format things nicely,
     like this:

          >>> i = 256*256
          >>> print('The value of i is', i)
          The value of i is 65536

     The keyword argument `end' can be used to avoid the newline after
     the output, or end the output with a different string:

          >>> a, b = 0, 1
          >>> while b < 1000:
          ...     print(b, end=',')
          ...     a, b = b, a+b
          ...
          1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,


File: python.info,  Node: More Control Flow Tools,  Next: Data Structures,  Prev: An Informal Introduction to Python,  Up: The Python Tutorial

2.4 More Control Flow Tools
===========================

Besides the *note while: a20. statement just introduced, Python knows
the usual control flow statements known from other languages, with some
twists.

* Menu:

* if Statements:: 
* for Statements:: 
* The range() Function: The range Function. 
* break and continue Statements, and else Clauses on Loops: break and continue Statements and else Clauses on Loops. 
* pass Statements:: 
* Defining Functions:: 
* More on Defining Functions:: 
* Intermezzo; Coding Style: Intermezzo Coding Style. 


File: python.info,  Node: if Statements,  Next: for Statements,  Up: More Control Flow Tools

2.4.1 ‘if’ Statements
---------------------

Perhaps the most well-known statement type is the *note if: 86d.
statement.  For example:

     >>> x = int(input("Please enter an integer: "))
     Please enter an integer: 42
     >>> if x < 0:
     ...     x = 0
     ...     print('Negative changed to zero')
     ... elif x == 0:
     ...     print('Zero')
     ... elif x == 1:
     ...     print('Single')
     ... else:
     ...     print('More')
     ...
     More

There can be zero or more *note elif: a26. parts, and the *note else:
a27. part is optional.  The keyword ’*note elif: a26.’ is short for
’else if’, and is useful to avoid excessive indentation.  An *note if:
86d. ...  *note elif: a26. ...  *note elif: a26. ...  sequence is a
substitute for the ‘switch’ or ‘case’ statements found in other
languages.


File: python.info,  Node: for Statements,  Next: The range Function,  Prev: if Statements,  Up: More Control Flow Tools

2.4.2 ‘for’ Statements
----------------------

The *note for: 688. statement in Python differs a bit from what you may
be used to in C or Pascal.  Rather than always iterating over an
arithmetic progression of numbers (like in Pascal), or giving the user
the ability to define both the iteration step and halting condition (as
C), Python’s *note for: 688. statement iterates over the items of any
sequence (a list or a string), in the order that they appear in the
sequence.  For example (no pun intended):

     >>> # Measure some strings:
     ... words = ['cat', 'window', 'defenestrate']
     >>> for w in words:
     ...     print(w, len(w))
     ...
     cat 3
     window 6
     defenestrate 12

If you need to modify the sequence you are iterating over while inside
the loop (for example to duplicate selected items), it is recommended
that you first make a copy.  Iterating over a sequence does not
implicitly make a copy.  The slice notation makes this especially
convenient:

     >>> for w in words[:]:  # Loop over a slice copy of the entire list.
     ...     if len(w) > 6:
     ...         words.insert(0, w)
     ...
     >>> words
     ['defenestrate', 'cat', 'window', 'defenestrate']


File: python.info,  Node: The range Function,  Next: break and continue Statements and else Clauses on Loops,  Prev: for Statements,  Up: More Control Flow Tools

2.4.3 The ‘range()’ Function
----------------------------

If you do need to iterate over a sequence of numbers, the built-in
function *note range(): 396. comes in handy.  It generates arithmetic
progressions:

     >>> for i in range(5):
     ...     print(i)
     ...
     0
     1
     2
     3
     4

The given end point is never part of the generated sequence; ‘range(10)’
generates 10 values, the legal indices for items of a sequence of length
10.  It is possible to let the range start at another number, or to
specify a different increment (even negative; sometimes this is called
the ’step’):

     range(5, 10)
        5 through 9

     range(0, 10, 3)
        0, 3, 6, 9

     range(-10, -100, -30)
       -10, -40, -70

To iterate over the indices of a sequence, you can combine *note
range(): 396. and *note len(): 358. as follows:

     >>> a = ['Mary', 'had', 'a', 'little', 'lamb']
     >>> for i in range(len(a)):
     ...     print(i, a[i])
     ...
     0 Mary
     1 had
     2 a
     3 little
     4 lamb

In most such cases, however, it is convenient to use the *note
enumerate(): 869. function, see *note Looping Techniques: a2c.

A strange thing happens if you just print a range:

     >>> print(range(10))
     range(0, 10)

In many ways the object returned by *note range(): 396. behaves as if it
is a list, but in fact it isn’t.  It is an object which returns the
successive items of the desired sequence when you iterate over it, but
it doesn’t really make the list, thus saving space.

We say such an object is `iterable', that is, suitable as a target for
functions and constructs that expect something from which they can
obtain successive items until the supply is exhausted.  We have seen
that the *note for: 688. statement is such an `iterator'.  The function
*note list(): 397. is another; it creates lists from iterables:

     >>> list(range(5))
     [0, 1, 2, 3, 4]

Later we will see more functions that return iterables and take
iterables as argument.


File: python.info,  Node: break and continue Statements and else Clauses on Loops,  Next: pass Statements,  Prev: The range Function,  Up: More Control Flow Tools

2.4.4 ‘break’ and ‘continue’ Statements, and ‘else’ Clauses on Loops
--------------------------------------------------------------------

The *note break: a2f. statement, like in C, breaks out of the smallest
enclosing *note for: 688. or *note while: a20. loop.

Loop statements may have an ‘else’ clause; it is executed when the loop
terminates through exhaustion of the list (with *note for: 688.) or when
the condition becomes false (with *note while: a20.), but not when the
loop is terminated by a *note break: a2f. statement.  This is
exemplified by the following loop, which searches for prime numbers:

     >>> for n in range(2, 10):
     ...     for x in range(2, n):
     ...         if n % x == 0:
     ...             print(n, 'equals', x, '*', n//x)
     ...             break
     ...     else:
     ...         # loop fell through without finding a factor
     ...         print(n, 'is a prime number')
     ...
     2 is a prime number
     3 is a prime number
     4 equals 2 * 2
     5 is a prime number
     6 equals 2 * 3
     7 is a prime number
     8 equals 2 * 4
     9 equals 3 * 3

(Yes, this is the correct code.  Look closely: the ‘else’ clause belongs
to the *note for: 688. loop, `not' the *note if: 86d. statement.)

When used with a loop, the ‘else’ clause has more in common with the
‘else’ clause of a *note try: 7ee. statement than it does that of *note
if: 86d. statements: a *note try: 7ee. statement’s ‘else’ clause runs
when no exception occurs, and a loop’s ‘else’ clause runs when no
‘break’ occurs.  For more on the *note try: 7ee. statement and
exceptions, see *note Handling Exceptions: a30.

The *note continue: a31. statement, also borrowed from C, continues with
the next iteration of the loop:

     >>> for num in range(2, 10):
     ...     if num % 2 == 0:
     ...         print("Found an even number", num)
     ...         continue
     ...     print("Found a number", num)
     Found an even number 2
     Found a number 3
     Found an even number 4
     Found a number 5
     Found an even number 6
     Found a number 7
     Found an even number 8
     Found a number 9


File: python.info,  Node: pass Statements,  Next: Defining Functions,  Prev: break and continue Statements and else Clauses on Loops,  Up: More Control Flow Tools

2.4.5 ‘pass’ Statements
-----------------------

The *note pass: a34. statement does nothing.  It can be used when a
statement is required syntactically but the program requires no action.
For example:

     >>> while True:
     ...     pass  # Busy-wait for keyboard interrupt (Ctrl+C)
     ...

This is commonly used for creating minimal classes:

     >>> class MyEmptyClass:
     ...     pass
     ...

Another place *note pass: a34. can be used is as a place-holder for a
function or conditional body when you are working on new code, allowing
you to keep thinking at a more abstract level.  The *note pass: a34. is
silently ignored:

     >>> def initlog(*args):
     ...     pass   # Remember to implement this!
     ...


File: python.info,  Node: Defining Functions,  Next: More on Defining Functions,  Prev: pass Statements,  Up: More Control Flow Tools

2.4.6 Defining Functions
------------------------

We can create a function that writes the Fibonacci series to an
arbitrary boundary:

     >>> def fib(n):    # write Fibonacci series up to n
     ...     """Print a Fibonacci series up to n."""
     ...     a, b = 0, 1
     ...     while a < n:
     ...         print(a, end=' ')
     ...         a, b = b, a+b
     ...     print()
     ...
     >>> # Now call the function we just defined:
     ... fib(2000)
     0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597

The keyword *note def: 841. introduces a function `definition'.  It must
be followed by the function name and the parenthesized list of formal
parameters.  The statements that form the body of the function start at
the next line, and must be indented.

The first statement of the function body can optionally be a string
literal; this string literal is the function’s documentation string, or
`docstring'.  (More about docstrings can be found in the section *note
Documentation Strings: a37.)  There are tools which use docstrings to
automatically produce online or printed documentation, or to let the
user interactively browse through code; it’s good practice to include
docstrings in code that you write, so make a habit of it.

The `execution' of a function introduces a new symbol table used for the
local variables of the function.  More precisely, all variable
assignments in a function store the value in the local symbol table;
whereas variable references first look in the local symbol table, then
in the local symbol tables of enclosing functions, then in the global
symbol table, and finally in the table of built-in names.  Thus, global
variables cannot be directly assigned a value within a function (unless
named in a *note global: a38. statement), although they may be
referenced.

The actual parameters (arguments) to a function call are introduced in
the local symbol table of the called function when it is called; thus,
arguments are passed using `call by value' (where the `value' is always
an object `reference', not the value of the object).  (1) When a
function calls another function, a new local symbol table is created for
that call.

A function definition introduces the function name in the current symbol
table.  The value of the function name has a type that is recognized by
the interpreter as a user-defined function.  This value can be assigned
to another name which can then also be used as a function.  This serves
as a general renaming mechanism:

     >>> fib
     <function fib at 10042ed0>
     >>> f = fib
     >>> f(100)
     0 1 1 2 3 5 8 13 21 34 55 89

Coming from other languages, you might object that ‘fib’ is not a
function but a procedure since it doesn’t return a value.  In fact, even
functions without a *note return: 781. statement do return a value,
albeit a rather boring one.  This value is called ‘None’ (it’s a
built-in name).  Writing the value ‘None’ is normally suppressed by the
interpreter if it would be the only value written.  You can see it if
you really want to using *note print(): 21c.:

     >>> fib(0)
     >>> print(fib(0))
     None

It is simple to write a function that returns a list of the numbers of
the Fibonacci series, instead of printing it:

     >>> def fib2(n): # return Fibonacci series up to n
     ...     """Return a list containing the Fibonacci series up to n."""
     ...     result = []
     ...     a, b = 0, 1
     ...     while a < n:
     ...         result.append(a)    # see below
     ...         a, b = b, a+b
     ...     return result
     ...
     >>> f100 = fib2(100)    # call it
     >>> f100                # write the result
     [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

This example, as usual, demonstrates some new Python features:

   * The *note return: 781. statement returns with a value from a
     function.  *note return: 781. without an expression argument
     returns ‘None’.  Falling off the end of a function also returns
     ‘None’.

   * The statement ‘result.append(a)’ calls a `method' of the list
     object ‘result’.  A method is a function that ’belongs’ to an
     object and is named ‘obj.methodname’, where ‘obj’ is some object
     (this may be an expression), and ‘methodname’ is the name of a
     method that is defined by the object’s type.  Different types
     define different methods.  Methods of different types may have the
     same name without causing ambiguity.  (It is possible to define
     your own object types and methods, using `classes', see *note
     Classes: a39.) The method ‘append()’ shown in the example is
     defined for list objects; it adds a new element at the end of the
     list.  In this example it is equivalent to ‘result = result + [a]’,
     but more efficient.

   ---------- Footnotes ----------

   (1) Actually, `call by object reference' would be a better
description, since if a mutable object is passed, the caller will see
any changes the callee makes to it (items inserted into a list).


File: python.info,  Node: More on Defining Functions,  Next: Intermezzo Coding Style,  Prev: Defining Functions,  Up: More Control Flow Tools

2.4.7 More on Defining Functions
--------------------------------

It is also possible to define functions with a variable number of
arguments.  There are three forms, which can be combined.

* Menu:

* Default Argument Values:: 
* Keyword Arguments:: 
* Arbitrary Argument Lists:: 
* Unpacking Argument Lists:: 
* Lambda Expressions:: 
* Documentation Strings:: 
* Function Annotations:: 


File: python.info,  Node: Default Argument Values,  Next: Keyword Arguments,  Up: More on Defining Functions

2.4.7.1 Default Argument Values
...............................

The most useful form is to specify a default value for one or more
arguments.  This creates a function that can be called with fewer
arguments than it is defined to allow.  For example:

     def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):
         while True:
             ok = input(prompt)
             if ok in ('y', 'ye', 'yes'):
                 return True
             if ok in ('n', 'no', 'nop', 'nope'):
                 return False
             retries = retries - 1
             if retries < 0:
                 raise OSError('uncooperative user')
             print(complaint)

This function can be called in several ways:

   * giving only the mandatory argument: ‘ask_ok('Do you really want to
     quit?')’

   * giving one of the optional arguments: ‘ask_ok('OK to overwrite the
     file?', 2)’

   * or even giving all arguments: ‘ask_ok('OK to overwrite the file?',
     2, 'Come on, only yes or no!')’

This example also introduces the *note in: 6d5. keyword.  This tests
whether or not a sequence contains a certain value.

The default values are evaluated at the point of function definition in
the `defining' scope, so that

     i = 5

     def f(arg=i):
         print(arg)

     i = 6
     f()

will print ‘5’.

`Important warning:' The default value is evaluated only once.  This
makes a difference when the default is a mutable object such as a list,
dictionary, or instances of most classes.  For example, the following
function accumulates the arguments passed to it on subsequent calls:

     def f(a, L=[]):
         L.append(a)
         return L

     print(f(1))
     print(f(2))
     print(f(3))

This will print

     [1]
     [1, 2]
     [1, 2, 3]

If you don’t want the default to be shared between subsequent calls, you
can write the function like this instead:

     def f(a, L=None):
         if L is None:
             L = []
         L.append(a)
         return L


File: python.info,  Node: Keyword Arguments,  Next: Arbitrary Argument Lists,  Prev: Default Argument Values,  Up: More on Defining Functions

2.4.7.2 Keyword Arguments
.........................

Functions can also be called using *note keyword arguments: 5cd. of the
form ‘kwarg=value’.  For instance, the following function:

     def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
         print("-- This parrot wouldn't", action, end=' ')
         print("if you put", voltage, "volts through it.")
         print("-- Lovely plumage, the", type)
         print("-- It's", state, "!")

accepts one required argument (‘voltage’) and three optional arguments
(‘state’, ‘action’, and ‘type’).  This function can be called in any of
the following ways:

     parrot(1000)                                          # 1 positional argument
     parrot(voltage=1000)                                  # 1 keyword argument
     parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
     parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments
     parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
     parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword

but all the following calls would be invalid:

     parrot()                     # required argument missing
     parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword argument
     parrot(110, voltage=220)     # duplicate value for the same argument
     parrot(actor='John Cleese')  # unknown keyword argument

In a function call, keyword arguments must follow positional arguments.
All the keyword arguments passed must match one of the arguments
accepted by the function (e.g.  ‘actor’ is not a valid argument for the
‘parrot’ function), and their order is not important.  This also
includes non-optional arguments (e.g.  ‘parrot(voltage=1000)’ is valid
too).  No argument may receive a value more than once.  Here’s an
example that fails due to this restriction:

     >>> def function(a):
     ...     pass
     ...
     >>> function(0, a=0)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     TypeError: function() got multiple values for keyword argument 'a'

When a final formal parameter of the form ‘**name’ is present, it
receives a dictionary (see *note Mapping Types — dict: a40.) containing
all keyword arguments except for those corresponding to a formal
parameter.  This may be combined with a formal parameter of the form
‘*name’ (described in the next subsection) which receives a tuple
containing the positional arguments beyond the formal parameter list.
(‘*name’ must occur before ‘**name’.)  For example, if we define a
function like this:

     def cheeseshop(kind, *arguments, **keywords):
         print("-- Do you have any", kind, "?")
         print("-- I'm sorry, we're all out of", kind)
         for arg in arguments:
             print(arg)
         print("-" * 40)
         keys = sorted(keywords.keys())
         for kw in keys:
             print(kw, ":", keywords[kw])

It could be called like this:

     cheeseshop("Limburger", "It's very runny, sir.",
                "It's really very, VERY runny, sir.",
                shopkeeper="Michael Palin",
                client="John Cleese",
                sketch="Cheese Shop Sketch")

and of course it would print:

     -- Do you have any Limburger ?
     -- I'm sorry, we're all out of Limburger
     It's very runny, sir.
     It's really very, VERY runny, sir.
     ----------------------------------------
     client : John Cleese
     shopkeeper : Michael Palin
     sketch : Cheese Shop Sketch

Note that the list of keyword argument names is created by sorting the
result of the keywords dictionary’s ‘keys()’ method before printing its
contents; if this is not done, the order in which the arguments are
printed is undefined.


File: python.info,  Node: Arbitrary Argument Lists,  Next: Unpacking Argument Lists,  Prev: Keyword Arguments,  Up: More on Defining Functions

2.4.7.3 Arbitrary Argument Lists
................................

Finally, the least frequently used option is to specify that a function
can be called with an arbitrary number of arguments.  These arguments
will be wrapped up in a tuple (see *note Tuples and Sequences: a43.).
Before the variable number of arguments, zero or more normal arguments
may occur.

     def write_multiple_items(file, separator, *args):
         file.write(separator.join(args))

Normally, these ‘variadic’ arguments will be last in the list of formal
parameters, because they scoop up all remaining input arguments that are
passed to the function.  Any formal parameters which occur after the
‘*args’ parameter are ’keyword-only’ arguments, meaning that they can
only be used as keywords rather than positional arguments.

     >>> def concat(*args, sep="/"):
     ...    return sep.join(args)
     ...
     >>> concat("earth", "mars", "venus")
     'earth/mars/venus'
     >>> concat("earth", "mars", "venus", sep=".")
     'earth.mars.venus'


File: python.info,  Node: Unpacking Argument Lists,  Next: Lambda Expressions,  Prev: Arbitrary Argument Lists,  Up: More on Defining Functions

2.4.7.4 Unpacking Argument Lists
................................

The reverse situation occurs when the arguments are already in a list or
tuple but need to be unpacked for a function call requiring separate
positional arguments.  For instance, the built-in *note range(): 396.
function expects separate `start' and `stop' arguments.  If they are not
available separately, write the function call with the ‘*’-operator to
unpack the arguments out of a list or tuple:

     >>> list(range(3, 6))            # normal call with separate arguments
     [3, 4, 5]
     >>> args = [3, 6]
     >>> list(range(*args))            # call with arguments unpacked from a list
     [3, 4, 5]

In the same fashion, dictionaries can deliver keyword arguments with the
‘**’-operator:

     >>> def parrot(voltage, state='a stiff', action='voom'):
     ...     print("-- This parrot wouldn't", action, end=' ')
     ...     print("if you put", voltage, "volts through it.", end=' ')
     ...     print("E's", state, "!")
     ...
     >>> d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
     >>> parrot(**d)
     -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !


File: python.info,  Node: Lambda Expressions,  Next: Documentation Strings,  Prev: Unpacking Argument Lists,  Up: More on Defining Functions

2.4.7.5 Lambda Expressions
..........................

Small anonymous functions can be created with the *note lambda: 687.
keyword.  This function returns the sum of its two arguments: ‘lambda a,
b: a+b’.  Lambda functions can be used wherever function objects are
required.  They are syntactically restricted to a single expression.
Semantically, they are just syntactic sugar for a normal function
definition.  Like nested function definitions, lambda functions can
reference variables from the containing scope:

     >>> def make_incrementor(n):
     ...     return lambda x: x + n
     ...
     >>> f = make_incrementor(42)
     >>> f(0)
     42
     >>> f(1)
     43

The above example uses a lambda expression to return a function.
Another use is to pass a small function as an argument:

     >>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
     >>> pairs.sort(key=lambda pair: pair[1])
     >>> pairs
     [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]


File: python.info,  Node: Documentation Strings,  Next: Function Annotations,  Prev: Lambda Expressions,  Up: More on Defining Functions

2.4.7.6 Documentation Strings
.............................

Here are some conventions about the content and formatting of
documentation strings.

The first line should always be a short, concise summary of the object’s
purpose.  For brevity, it should not explicitly state the object’s name
or type, since these are available by other means (except if the name
happens to be a verb describing a function’s operation).  This line
should begin with a capital letter and end with a period.

If there are more lines in the documentation string, the second line
should be blank, visually separating the summary from the rest of the
description.  The following lines should be one or more paragraphs
describing the object’s calling conventions, its side effects, etc.

The Python parser does not strip indentation from multi-line string
literals in Python, so tools that process documentation have to strip
indentation if desired.  This is done using the following convention.
The first non-blank line `after' the first line of the string determines
the amount of indentation for the entire documentation string.  (We
can’t use the first line since it is generally adjacent to the string’s
opening quotes so its indentation is not apparent in the string
literal.)  Whitespace "equivalent" to this indentation is then stripped
from the start of all lines of the string.  Lines that are indented less
should not occur, but if they occur all their leading whitespace should
be stripped.  Equivalence of whitespace should be tested after expansion
of tabs (to 8 spaces, normally).

Here is an example of a multi-line docstring:

     >>> def my_function():
     ...     """Do nothing, but document it.
     ...
     ...     No, really, it doesn't do anything.
     ...     """
     ...     pass
     ...
     >>> print(my_function.__doc__)
     Do nothing, but document it.

         No, really, it doesn't do anything.


File: python.info,  Node: Function Annotations,  Prev: Documentation Strings,  Up: More on Defining Functions

2.4.7.7 Function Annotations
............................

*note Function annotations: a4b. are completely optional, arbitrary
metadata information about user-defined functions.  Neither Python
itself nor the standard library use function annotations in any way;
this section just shows the syntax.  Third-party projects are free to
use function annotations for documentation, type checking, and other
uses.

Annotations are stored in the ‘__annotations__’ attribute of the
function as a dictionary and have no effect on any other part of the
function.  Parameter annotations are defined by a colon after the
parameter name, followed by an expression evaluating to the value of the
annotation.  Return annotations are defined by a literal ‘->’, followed
by an expression, between the parameter list and the colon denoting the
end of the *note def: 841. statement.  The following example has a
positional argument, a keyword argument, and the return value annotated
with nonsense:

     >>> def f(ham: 42, eggs: int = 'spam') -> "Nothing to see here":
     ...     print("Annotations:", f.__annotations__)
     ...     print("Arguments:", ham, eggs)
     ...
     >>> f('wonderful')
     Annotations: {'eggs': <class 'int'>, 'return': 'Nothing to see here', 'ham': 42}
     Arguments: wonderful spam


File: python.info,  Node: Intermezzo Coding Style,  Prev: More on Defining Functions,  Up: More Control Flow Tools

2.4.8 Intermezzo: Coding Style
------------------------------

Now that you are about to write longer, more complex pieces of Python,
it is a good time to talk about `coding style'.  Most languages can be
written (or more concise, `formatted') in different styles; some are
more readable than others.  Making it easy for others to read your code
is always a good idea, and adopting a nice coding style helps
tremendously for that.

For Python, PEP 8(1) has emerged as the style guide that most projects
adhere to; it promotes a very readable and eye-pleasing coding style.
Every Python developer should read it at some point; here are the most
important points extracted for you:

   * Use 4-space indentation, and no tabs.

     4 spaces are a good compromise between small indentation (allows
     greater nesting depth) and large indentation (easier to read).
     Tabs introduce confusion, and are best left out.

   * Wrap lines so that they don’t exceed 79 characters.

     This helps users with small displays and makes it possible to have
     several code files side-by-side on larger displays.

   * Use blank lines to separate functions and classes, and larger
     blocks of code inside functions.

   * When possible, put comments on a line of their own.

   * Use docstrings.

   * Use spaces around operators and after commas, but not directly
     inside bracketing constructs: ‘a = f(1, 2) + g(3, 4)’.

   * Name your classes and functions consistently; the convention is to
     use ‘CamelCase’ for classes and ‘lower_case_with_underscores’ for
     functions and methods.  Always use ‘self’ as the name for the first
     method argument (see *note A First Look at Classes: a4e. for more
     on classes and methods).

   * Don’t use fancy encodings if your code is meant to be used in
     international environments.  Python’s default, UTF-8, or even plain
     ASCII work best in any case.

   * Likewise, don’t use non-ASCII characters in identifiers if there is
     only the slightest chance people speaking a different language will
     read or maintain the code.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0008


File: python.info,  Node: Data Structures,  Next: Modules,  Prev: More Control Flow Tools,  Up: The Python Tutorial

2.5 Data Structures
===================

This chapter describes some things you’ve learned about already in more
detail, and adds some new things as well.

* Menu:

* More on Lists:: 
* The del statement:: 
* Tuples and Sequences:: 
* Sets:: 
* Dictionaries:: 
* Looping Techniques:: 
* More on Conditions:: 
* Comparing Sequences and Other Types:: 


File: python.info,  Node: More on Lists,  Next: The del statement,  Up: Data Structures

2.5.1 More on Lists
-------------------

The list data type has some more methods.  Here are all of the methods
of list objects:

 -- Method: list.append (x)

     Add an item to the end of the list.  Equivalent to ‘a[len(a):] =
     [x]’.

 -- Method: list.extend (L)

     Extend the list by appending all the items in the given list.
     Equivalent to ‘a[len(a):] = L’.

 -- Method: list.insert (i, x)

     Insert an item at a given position.  The first argument is the
     index of the element before which to insert, so ‘a.insert(0, x)’
     inserts at the front of the list, and ‘a.insert(len(a), x)’ is
     equivalent to ‘a.append(x)’.

 -- Method: list.remove (x)

     Remove the first item from the list whose value is `x'.  It is an
     error if there is no such item.

 -- Method: list.pop ([i])

     Remove the item at the given position in the list, and return it.
     If no index is specified, ‘a.pop()’ removes and returns the last
     item in the list.  (The square brackets around the `i' in the
     method signature denote that the parameter is optional, not that
     you should type square brackets at that position.  You will see
     this notation frequently in the Python Library Reference.)

 -- Method: list.clear ()

     Remove all items from the list.  Equivalent to ‘del a[:]’.

 -- Method: list.index (x)

     Return the index in the list of the first item whose value is `x'.
     It is an error if there is no such item.

 -- Method: list.count (x)

     Return the number of times `x' appears in the list.

 -- Method: list.sort ()

     Sort the items of the list in place.

 -- Method: list.reverse ()

     Reverse the elements of the list in place.

 -- Method: list.copy ()

     Return a shallow copy of the list.  Equivalent to ‘a[:]’.

An example that uses most of the list methods:

     >>> a = [66.25, 333, 333, 1, 1234.5]
     >>> print(a.count(333), a.count(66.25), a.count('x'))
     2 1 0
     >>> a.insert(2, -1)
     >>> a.append(333)
     >>> a
     [66.25, 333, -1, 333, 1, 1234.5, 333]
     >>> a.index(333)
     1
     >>> a.remove(333)
     >>> a
     [66.25, -1, 333, 1, 1234.5, 333]
     >>> a.reverse()
     >>> a
     [333, 1234.5, 1, 333, -1, 66.25]
     >>> a.sort()
     >>> a
     [-1, 1, 66.25, 333, 333, 1234.5]
     >>> a.pop()
     1234.5
     >>> a
     [-1, 1, 66.25, 333, 333]

You might have noticed that methods like ‘insert’, ‘remove’ or ‘sort’
that only modify the list have no return value printed – they return the
default ‘None’.  (1) This is a design principle for all mutable data
structures in Python.

* Menu:

* Using Lists as Stacks:: 
* Using Lists as Queues:: 
* List Comprehensions: List Comprehensions<2>. 
* Nested List Comprehensions:: 

   ---------- Footnotes ----------

   (1) Other languages may return the mutated object, which allows
method chaining, such as ‘d->insert("a")->remove("b")->sort();’.


File: python.info,  Node: Using Lists as Stacks,  Next: Using Lists as Queues,  Up: More on Lists

2.5.1.1 Using Lists as Stacks
.............................

The list methods make it very easy to use a list as a stack, where the
last element added is the first element retrieved ("last-in,
first-out").  To add an item to the top of the stack, use ‘append()’.
To retrieve an item from the top of the stack, use ‘pop()’ without an
explicit index.  For example:

     >>> stack = [3, 4, 5]
     >>> stack.append(6)
     >>> stack.append(7)
     >>> stack
     [3, 4, 5, 6, 7]
     >>> stack.pop()
     7
     >>> stack
     [3, 4, 5, 6]
     >>> stack.pop()
     6
     >>> stack.pop()
     5
     >>> stack
     [3, 4]


File: python.info,  Node: Using Lists as Queues,  Next: List Comprehensions<2>,  Prev: Using Lists as Stacks,  Up: More on Lists

2.5.1.2 Using Lists as Queues
.............................

It is also possible to use a list as a queue, where the first element
added is the first element retrieved ("first-in, first-out"); however,
lists are not efficient for this purpose.  While appends and pops from
the end of list are fast, doing inserts or pops from the beginning of a
list is slow (because all of the other elements have to be shifted by
one).

To implement a queue, use *note collections.deque: 589. which was
designed to have fast appends and pops from both ends.  For example:

     >>> from collections import deque
     >>> queue = deque(["Eric", "John", "Michael"])
     >>> queue.append("Terry")           # Terry arrives
     >>> queue.append("Graham")          # Graham arrives
     >>> queue.popleft()                 # The first to arrive now leaves
     'Eric'
     >>> queue.popleft()                 # The second to arrive now leaves
     'John'
     >>> queue                           # Remaining queue in order of arrival
     deque(['Michael', 'Terry', 'Graham'])


File: python.info,  Node: List Comprehensions<2>,  Next: Nested List Comprehensions,  Prev: Using Lists as Queues,  Up: More on Lists

2.5.1.3 List Comprehensions
...........................

List comprehensions provide a concise way to create lists.  Common
applications are to make new lists where each element is the result of
some operations applied to each member of another sequence or iterable,
or to create a subsequence of those elements that satisfy a certain
condition.

For example, assume we want to create a list of squares, like:

     >>> squares = []
     >>> for x in range(10):
     ...     squares.append(x**2)
     ...
     >>> squares
     [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

Note that this creates (or overwrites) a variable named ‘x’ that still
exists after the loop completes.  We can calculate the list of squares
without any side effects using:

     squares = list(map(lambda x: x**2, range(10)))

or, equivalently:

     squares = [x**2 for x in range(10)]

which is more concise and readable.

A list comprehension consists of brackets containing an expression
followed by a *note for: 688. clause, then zero or more *note for: 688.
or *note if: 86d. clauses.  The result will be a new list resulting from
evaluating the expression in the context of the *note for: 688. and
*note if: 86d. clauses which follow it.  For example, this listcomp
combines the elements of two lists if they are not equal:

     >>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
     [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

and it’s equivalent to:

     >>> combs = []
     >>> for x in [1,2,3]:
     ...     for y in [3,1,4]:
     ...         if x != y:
     ...             combs.append((x, y))
     ...
     >>> combs
     [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

Note how the order of the *note for: 688. and *note if: 86d. statements
is the same in both these snippets.

If the expression is a tuple (e.g.  the ‘(x, y)’ in the previous
example), it must be parenthesized.

     >>> vec = [-4, -2, 0, 2, 4]
     >>> # create a new list with the values doubled
     >>> [x*2 for x in vec]
     [-8, -4, 0, 4, 8]
     >>> # filter the list to exclude negative numbers
     >>> [x for x in vec if x >= 0]
     [0, 2, 4]
     >>> # apply a function to all the elements
     >>> [abs(x) for x in vec]
     [4, 2, 0, 2, 4]
     >>> # call a method on each element
     >>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
     >>> [weapon.strip() for weapon in freshfruit]
     ['banana', 'loganberry', 'passion fruit']
     >>> # create a list of 2-tuples like (number, square)
     >>> [(x, x**2) for x in range(6)]
     [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
     >>> # the tuple must be parenthesized, otherwise an error is raised
     >>> [x, x**2 for x in range(6)]
       File "<stdin>", line 1, in ?
         [x, x**2 for x in range(6)]
                    ^
     SyntaxError: invalid syntax
     >>> # flatten a list using a listcomp with two 'for'
     >>> vec = [[1,2,3], [4,5,6], [7,8,9]]
     >>> [num for elem in vec for num in elem]
     [1, 2, 3, 4, 5, 6, 7, 8, 9]

List comprehensions can contain complex expressions and nested
functions:

     >>> from math import pi
     >>> [str(round(pi, i)) for i in range(1, 6)]
     ['3.1', '3.14', '3.142', '3.1416', '3.14159']


File: python.info,  Node: Nested List Comprehensions,  Prev: List Comprehensions<2>,  Up: More on Lists

2.5.1.4 Nested List Comprehensions
..................................

The initial expression in a list comprehension can be any arbitrary
expression, including another list comprehension.

Consider the following example of a 3x4 matrix implemented as a list of
3 lists of length 4:

     >>> matrix = [
     ...     [1, 2, 3, 4],
     ...     [5, 6, 7, 8],
     ...     [9, 10, 11, 12],
     ... ]

The following list comprehension will transpose rows and columns:

     >>> [[row[i] for row in matrix] for i in range(4)]
     [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

As we saw in the previous section, the nested listcomp is evaluated in
the context of the *note for: 688. that follows it, so this example is
equivalent to:

     >>> transposed = []
     >>> for i in range(4):
     ...     transposed.append([row[i] for row in matrix])
     ...
     >>> transposed
     [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

which, in turn, is the same as:

     >>> transposed = []
     >>> for i in range(4):
     ...     # the following 3 lines implement the nested listcomp
     ...     transposed_row = []
     ...     for row in matrix:
     ...         transposed_row.append(row[i])
     ...     transposed.append(transposed_row)
     ...
     >>> transposed
     [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

In the real world, you should prefer built-in functions to complex flow
statements.  The *note zip(): 68a. function would do a great job for
this use case:

     >>> list(zip(*matrix))
     [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]

See *note Unpacking Argument Lists: a45. for details on the asterisk in
this line.


File: python.info,  Node: The del statement,  Next: Tuples and Sequences,  Prev: More on Lists,  Up: Data Structures

2.5.2 The ‘del’ statement
-------------------------

There is a way to remove an item from a list given its index instead of
its value: the *note del: a5d. statement.  This differs from the ‘pop()’
method which returns a value.  The *note del: a5d. statement can also be
used to remove slices from a list or clear the entire list (which we did
earlier by assignment of an empty list to the slice).  For example:

     >>> a = [-1, 1, 66.25, 333, 333, 1234.5]
     >>> del a[0]
     >>> a
     [1, 66.25, 333, 333, 1234.5]
     >>> del a[2:4]
     >>> a
     [1, 66.25, 1234.5]
     >>> del a[:]
     >>> a
     []

*note del: a5d. can also be used to delete entire variables:

     >>> del a

Referencing the name ‘a’ hereafter is an error (at least until another
value is assigned to it).  We’ll find other uses for *note del: a5d.
later.


File: python.info,  Node: Tuples and Sequences,  Next: Sets,  Prev: The del statement,  Up: Data Structures

2.5.3 Tuples and Sequences
--------------------------

We saw that lists and strings have many common properties, such as
indexing and slicing operations.  They are two examples of `sequence'
data types (see *note Sequence Types — list, tuple, range: a5f.).  Since
Python is an evolving language, other sequence data types may be added.
There is also another standard sequence data type: the `tuple'.

A tuple consists of a number of values separated by commas, for
instance:

     >>> t = 12345, 54321, 'hello!'
     >>> t[0]
     12345
     >>> t
     (12345, 54321, 'hello!')
     >>> # Tuples may be nested:
     ... u = t, (1, 2, 3, 4, 5)
     >>> u
     ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
     >>> # Tuples are immutable:
     ... t[0] = 88888
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     TypeError: 'tuple' object does not support item assignment
     >>> # but they can contain mutable objects:
     ... v = ([1, 2, 3], [3, 2, 1])
     >>> v
     ([1, 2, 3], [3, 2, 1])

As you see, on output tuples are always enclosed in parentheses, so that
nested tuples are interpreted correctly; they may be input with or
without surrounding parentheses, although often parentheses are
necessary anyway (if the tuple is part of a larger expression).  It is
not possible to assign to the individual items of a tuple, however it is
possible to create tuples which contain mutable objects, such as lists.

Though tuples may seem similar to lists, they are often used in
different situations and for different purposes.  Tuples are *note
immutable: a15, and usually contain an heterogeneous sequence of
elements that are accessed via unpacking (see later in this section) or
indexing (or even by attribute in the case of *note namedtuples: 66b.).
Lists are *note mutable: a1d, and their elements are usually homogeneous
and are accessed by iterating over the list.

A special problem is the construction of tuples containing 0 or 1 items:
the syntax has some extra quirks to accommodate these.  Empty tuples are
constructed by an empty pair of parentheses; a tuple with one item is
constructed by following a value with a comma (it is not sufficient to
enclose a single value in parentheses).  Ugly, but effective.  For
example:

     >>> empty = ()
     >>> singleton = 'hello',    # <-- note trailing comma
     >>> len(empty)
     0
     >>> len(singleton)
     1
     >>> singleton
     ('hello',)

The statement ‘t = 12345, 54321, 'hello!'’ is an example of `tuple
packing': the values ‘12345’, ‘54321’ and ‘'hello!'’ are packed together
in a tuple.  The reverse operation is also possible:

     >>> x, y, z = t

This is called, appropriately enough, `sequence unpacking' and works for
any sequence on the right-hand side.  Sequence unpacking requires that
there are as many variables on the left side of the equals sign as there
are elements in the sequence.  Note that multiple assignment is really
just a combination of tuple packing and sequence unpacking.


File: python.info,  Node: Sets,  Next: Dictionaries,  Prev: Tuples and Sequences,  Up: Data Structures

2.5.4 Sets
----------

Python also includes a data type for `sets'.  A set is an unordered
collection with no duplicate elements.  Basic uses include membership
testing and eliminating duplicate entries.  Set objects also support
mathematical operations like union, intersection, difference, and
symmetric difference.

Curly braces or the *note set(): 5a4. function can be used to create
sets.  Note: to create an empty set you have to use ‘set()’, not ‘{}’;
the latter creates an empty dictionary, a data structure that we discuss
in the next section.

Here is a brief demonstration:

     >>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
     >>> print(basket)                      # show that duplicates have been removed
     {'orange', 'banana', 'pear', 'apple'}
     >>> 'orange' in basket                 # fast membership testing
     True
     >>> 'crabgrass' in basket
     False

     >>> # Demonstrate set operations on unique letters from two words
     ...
     >>> a = set('abracadabra')
     >>> b = set('alacazam')
     >>> a                                  # unique letters in a
     {'a', 'r', 'b', 'c', 'd'}
     >>> a - b                              # letters in a but not in b
     {'r', 'd', 'b'}
     >>> a | b                              # letters in either a or b
     {'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}
     >>> a & b                              # letters in both a and b
     {'a', 'c'}
     >>> a ^ b                              # letters in a or b but not both
     {'r', 'd', 'b', 'm', 'z', 'l'}

Similarly to *note list comprehensions: a58, set comprehensions are also
supported:

     >>> a = {x for x in 'abracadabra' if x not in 'abc'}
     >>> a
     {'r', 'd'}


File: python.info,  Node: Dictionaries,  Next: Looping Techniques,  Prev: Sets,  Up: Data Structures

2.5.5 Dictionaries
------------------

Another useful data type built into Python is the `dictionary' (see
*note Mapping Types — dict: a40.).  Dictionaries are sometimes found in
other languages as "associative memories" or "associative arrays".
Unlike sequences, which are indexed by a range of numbers, dictionaries
are indexed by `keys', which can be any immutable type; strings and
numbers can always be keys.  Tuples can be used as keys if they contain
only strings, numbers, or tuples; if a tuple contains any mutable object
either directly or indirectly, it cannot be used as a key.  You can’t
use lists as keys, since lists can be modified in place using index
assignments, slice assignments, or methods like ‘append()’ and
‘extend()’.

It is best to think of a dictionary as an unordered set of `key: value'
pairs, with the requirement that the keys are unique (within one
dictionary).  A pair of braces creates an empty dictionary: ‘{}’.
Placing a comma-separated list of key:value pairs within the braces adds
initial key:value pairs to the dictionary; this is also the way
dictionaries are written on output.

The main operations on a dictionary are storing a value with some key
and extracting the value given the key.  It is also possible to delete a
key:value pair with ‘del’.  If you store using a key that is already in
use, the old value associated with that key is forgotten.  It is an
error to extract a value using a non-existent key.

Performing ‘list(d.keys())’ on a dictionary returns a list of all the
keys used in the dictionary, in arbitrary order (if you want it sorted,
just use ‘sorted(d.keys())’ instead).  (1) To check whether a single key
is in the dictionary, use the *note in: 6d5. keyword.

Here is a small example using a dictionary:

     >>> tel = {'jack': 4098, 'sape': 4139}
     >>> tel['guido'] = 4127
     >>> tel
     {'sape': 4139, 'guido': 4127, 'jack': 4098}
     >>> tel['jack']
     4098
     >>> del tel['sape']
     >>> tel['irv'] = 4127
     >>> tel
     {'guido': 4127, 'irv': 4127, 'jack': 4098}
     >>> list(tel.keys())
     ['irv', 'guido', 'jack']
     >>> sorted(tel.keys())
     ['guido', 'irv', 'jack']
     >>> 'guido' in tel
     True
     >>> 'jack' not in tel
     False

The *note dict(): 380. constructor builds dictionaries directly from
sequences of key-value pairs:

     >>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
     {'sape': 4139, 'jack': 4098, 'guido': 4127}

In addition, dict comprehensions can be used to create dictionaries from
arbitrary key and value expressions:

     >>> {x: x**2 for x in (2, 4, 6)}
     {2: 4, 4: 16, 6: 36}

When the keys are simple strings, it is sometimes easier to specify
pairs using keyword arguments:

     >>> dict(sape=4139, guido=4127, jack=4098)
     {'sape': 4139, 'jack': 4098, 'guido': 4127}

   ---------- Footnotes ----------

   (1) Calling ‘d.keys()’ will return a `dictionary view' object.  It
supports operations like membership test and iteration, but its contents
are not independent of the original dictionary – it is only a `view'.


File: python.info,  Node: Looping Techniques,  Next: More on Conditions,  Prev: Dictionaries,  Up: Data Structures

2.5.6 Looping Techniques
------------------------

When looping through dictionaries, the key and corresponding value can
be retrieved at the same time using the ‘items()’ method.

     >>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}
     >>> for k, v in knights.items():
     ...     print(k, v)
     ...
     gallahad the pure
     robin the brave

When looping through a sequence, the position index and corresponding
value can be retrieved at the same time using the *note enumerate():
869. function.

     >>> for i, v in enumerate(['tic', 'tac', 'toe']):
     ...     print(i, v)
     ...
     0 tic
     1 tac
     2 toe

To loop over two or more sequences at the same time, the entries can be
paired with the *note zip(): 68a. function.

     >>> questions = ['name', 'quest', 'favorite color']
     >>> answers = ['lancelot', 'the holy grail', 'blue']
     >>> for q, a in zip(questions, answers):
     ...     print('What is your {0}?  It is {1}.'.format(q, a))
     ...
     What is your name?  It is lancelot.
     What is your quest?  It is the holy grail.
     What is your favorite color?  It is blue.

To loop over a sequence in reverse, first specify the sequence in a
forward direction and then call the *note reversed(): 188. function.

     >>> for i in reversed(range(1, 10, 2)):
     ...     print(i)
     ...
     9
     7
     5
     3
     1

To loop over a sequence in sorted order, use the *note sorted(): 63e.
function which returns a new sorted list while leaving the source
unaltered.

     >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
     >>> for f in sorted(set(basket)):
     ...     print(f)
     ...
     apple
     banana
     orange
     pear

To change a sequence you are iterating over while inside the loop (for
example to duplicate certain items), it is recommended that you first
make a copy.  Looping over a sequence does not implicitly make a copy.
The slice notation makes this especially convenient:

     >>> words = ['cat', 'window', 'defenestrate']
     >>> for w in words[:]:  # Loop over a slice copy of the entire list.
     ...     if len(w) > 6:
     ...         words.insert(0, w)
     ...
     >>> words
     ['defenestrate', 'cat', 'window', 'defenestrate']


File: python.info,  Node: More on Conditions,  Next: Comparing Sequences and Other Types,  Prev: Looping Techniques,  Up: Data Structures

2.5.7 More on Conditions
------------------------

The conditions used in ‘while’ and ‘if’ statements can contain any
operators, not just comparisons.

The comparison operators ‘in’ and ‘not in’ check whether a value occurs
(does not occur) in a sequence.  The operators ‘is’ and ‘is not’ compare
whether two objects are really the same object; this only matters for
mutable objects like lists.  All comparison operators have the same
priority, which is lower than that of all numerical operators.

Comparisons can be chained.  For example, ‘a < b == c’ tests whether ‘a’
is less than ‘b’ and moreover ‘b’ equals ‘c’.

Comparisons may be combined using the Boolean operators ‘and’ and ‘or’,
and the outcome of a comparison (or of any other Boolean expression) may
be negated with ‘not’.  These have lower priorities than comparison
operators; between them, ‘not’ has the highest priority and ‘or’ the
lowest, so that ‘A and not B or C’ is equivalent to ‘(A and (not B)) or
C’.  As always, parentheses can be used to express the desired
composition.

The Boolean operators ‘and’ and ‘or’ are so-called `short-circuit'
operators: their arguments are evaluated from left to right, and
evaluation stops as soon as the outcome is determined.  For example, if
‘A’ and ‘C’ are true but ‘B’ is false, ‘A and B and C’ does not evaluate
the expression ‘C’.  When used as a general value and not as a Boolean,
the return value of a short-circuit operator is the last evaluated
argument.

It is possible to assign the result of a comparison or other Boolean
expression to a variable.  For example,

     >>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
     >>> non_null = string1 or string2 or string3
     >>> non_null
     'Trondheim'

Note that in Python, unlike C, assignment cannot occur inside
expressions.  C programmers may grumble about this, but it avoids a
common class of problems encountered in C programs: typing ‘=’ in an
expression when ‘==’ was intended.


File: python.info,  Node: Comparing Sequences and Other Types,  Prev: More on Conditions,  Up: Data Structures

2.5.8 Comparing Sequences and Other Types
-----------------------------------------

Sequence objects may be compared to other objects with the same sequence
type.  The comparison uses `lexicographical' ordering: first the first
two items are compared, and if they differ this determines the outcome
of the comparison; if they are equal, the next two items are compared,
and so on, until either sequence is exhausted.  If two items to be
compared are themselves sequences of the same type, the lexicographical
comparison is carried out recursively.  If all items of two sequences
compare equal, the sequences are considered equal.  If one sequence is
an initial sub-sequence of the other, the shorter sequence is the
smaller (lesser) one.  Lexicographical ordering for strings uses the
Unicode code point number to order individual characters.  Some examples
of comparisons between sequences of the same type:

     (1, 2, 3)              < (1, 2, 4)
     [1, 2, 3]              < [1, 2, 4]
     'ABC' < 'C' < 'Pascal' < 'Python'
     (1, 2, 3, 4)           < (1, 2, 4)
     (1, 2)                 < (1, 2, -1)
     (1, 2, 3)             == (1.0, 2.0, 3.0)
     (1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)

Note that comparing objects of different types with ‘<’ or ‘>’ is legal
provided that the objects have appropriate comparison methods.  For
example, mixed numeric types are compared according to their numeric
value, so 0 equals 0.0, etc.  Otherwise, rather than providing an
arbitrary ordering, the interpreter will raise a *note TypeError: 309.
exception.


File: python.info,  Node: Modules,  Next: Input and Output,  Prev: Data Structures,  Up: The Python Tutorial

2.6 Modules
===========

If you quit from the Python interpreter and enter it again, the
definitions you have made (functions and variables) are lost.
Therefore, if you want to write a somewhat longer program, you are
better off using a text editor to prepare the input for the interpreter
and running it with that file as input instead.  This is known as
creating a `script'.  As your program gets longer, you may want to split
it into several files for easier maintenance.  You may also want to use
a handy function that you’ve written in several programs without copying
its definition into each program.

To support this, Python has a way to put definitions in a file and use
them in a script or in an interactive instance of the interpreter.  Such
a file is called a `module'; definitions from a module can be `imported'
into other modules or into the `main' module (the collection of
variables that you have access to in a script executed at the top level
and in calculator mode).

A module is a file containing Python definitions and statements.  The
file name is the module name with the suffix ‘.py’ appended.  Within a
module, the module’s name (as a string) is available as the value of the
global variable ‘__name__’.  For instance, use your favorite text editor
to create a file called ‘fibo.py’ in the current directory with the
following contents:

     # Fibonacci numbers module

     def fib(n):    # write Fibonacci series up to n
         a, b = 0, 1
         while b < n:
             print(b, end=' ')
             a, b = b, a+b
         print()

     def fib2(n): # return Fibonacci series up to n
         result = []
         a, b = 0, 1
         while b < n:
             result.append(b)
             a, b = b, a+b
         return result

Now enter the Python interpreter and import this module with the
following command:

     >>> import fibo

This does not enter the names of the functions defined in ‘fibo’
directly in the current symbol table; it only enters the module name
‘fibo’ there.  Using the module name you can access the functions:

     >>> fibo.fib(1000)
     1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
     >>> fibo.fib2(100)
     [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
     >>> fibo.__name__
     'fibo'

If you intend to use a function often you can assign it to a local name:

     >>> fib = fibo.fib
     >>> fib(500)
     1 1 2 3 5 8 13 21 34 55 89 144 233 377

* Menu:

* More on Modules:: 
* Standard Modules:: 
* The dir() Function: The dir Function. 
* Packages:: 


File: python.info,  Node: More on Modules,  Next: Standard Modules,  Up: Modules

2.6.1 More on Modules
---------------------

A module can contain executable statements as well as function
definitions.  These statements are intended to initialize the module.
They are executed only the `first' time the module name is encountered
in an import statement.  (1) (They are also run if the file is executed
as a script.)

Each module has its own private symbol table, which is used as the
global symbol table by all functions defined in the module.  Thus, the
author of a module can use global variables in the module without
worrying about accidental clashes with a user’s global variables.  On
the other hand, if you know what you are doing you can touch a module’s
global variables with the same notation used to refer to its functions,
‘modname.itemname’.

Modules can import other modules.  It is customary but not required to
place all *note import: 674. statements at the beginning of a module (or
script, for that matter).  The imported module names are placed in the
importing module’s global symbol table.

There is a variant of the *note import: 674. statement that imports
names from a module directly into the importing module’s symbol table.
For example:

     >>> from fibo import fib, fib2
     >>> fib(500)
     1 1 2 3 5 8 13 21 34 55 89 144 233 377

This does not introduce the module name from which the imports are taken
in the local symbol table (so in the example, ‘fibo’ is not defined).

There is even a variant to import all names that a module defines:

     >>> from fibo import *
     >>> fib(500)
     1 1 2 3 5 8 13 21 34 55 89 144 233 377

This imports all names except those beginning with an underscore (‘_’).
In most cases Python programmers do not use this facility since it
introduces an unknown set of names into the interpreter, possibly hiding
some things you have already defined.

Note that in general the practice of importing ‘*’ from a module or
package is frowned upon, since it often causes poorly readable code.
However, it is okay to use it to save typing in interactive sessions.

     Note: For efficiency reasons, each module is only imported once per
     interpreter session.  Therefore, if you change your modules, you
     must restart the interpreter – or, if it’s just one module you want
     to test interactively, use *note imp.reload(): 6d4, e.g.  ‘import
     imp; imp.reload(modulename)’.

* Menu:

* Executing modules as scripts:: 
* The Module Search Path:: 
* "Compiled" Python files:: 

   ---------- Footnotes ----------

   (1) In fact function definitions are also ’statements’ that are
’executed’; the execution of a module-level function definition enters
the function name in the module’s global symbol table.


File: python.info,  Node: Executing modules as scripts,  Next: The Module Search Path,  Up: More on Modules

2.6.1.1 Executing modules as scripts
....................................

When you run a Python module with

     python fibo.py <arguments>

the code in the module will be executed, just as if you imported it, but
with the ‘__name__’ set to ‘"__main__"’.  That means that by adding this
code at the end of your module:

     if __name__ == "__main__":
         import sys
         fib(int(sys.argv[1]))

you can make the file usable as a script as well as an importable
module, because the code that parses the command line only runs if the
module is executed as the "main" file:

     $ python fibo.py 50
     1 1 2 3 5 8 13 21 34

If the module is imported, the code is not run:

     >>> import fibo
     >>>

This is often used either to provide a convenient user interface to a
module, or for testing purposes (running the module as a script executes
a test suite).


File: python.info,  Node: The Module Search Path,  Next: "Compiled" Python files,  Prev: Executing modules as scripts,  Up: More on Modules

2.6.1.2 The Module Search Path
..............................

When a module named ‘spam’ is imported, the interpreter first searches
for a built-in module with that name.  If not found, it then searches
for a file named ‘spam.py’ in a list of directories given by the
variable *note sys.path: 2d5.  *note sys.path: 2d5. is initialized from
these locations:

   * The directory containing the input script (or the current directory
     when no file is specified).

   * *note PYTHONPATH: 30e. (a list of directory names, with the same
     syntax as the shell variable ‘PATH’).

   * The installation-dependent default.

     Note: On file systems which support symlinks, the directory
     containing the input script is calculated after the symlink is
     followed.  In other words the directory containing the symlink is
     `not' added to the module search path.

After initialization, Python programs can modify *note sys.path: 2d5.
The directory containing the script being run is placed at the beginning
of the search path, ahead of the standard library path.  This means that
scripts in that directory will be loaded instead of modules of the same
name in the library directory.  This is an error unless the replacement
is intended.  See section *note Standard Modules: a72. for more
information.


File: python.info,  Node: "Compiled" Python files,  Prev: The Module Search Path,  Up: More on Modules

2.6.1.3 "Compiled" Python files
...............................

To speed up loading modules, Python caches the compiled version of each
module in the ‘__pycache__’ directory under the name
‘module.`version'.pyc’, where the version encodes the format of the
compiled file; it generally contains the Python version number.  For
example, in CPython release 3.3 the compiled version of spam.py would be
cached as ‘__pycache__/spam.cpython-33.pyc’.  This naming convention
allows compiled modules from different releases and different versions
of Python to coexist.

Python checks the modification date of the source against the compiled
version to see if it’s out of date and needs to be recompiled.  This is
a completely automatic process.  Also, the compiled modules are
platform-independent, so the same library can be shared among systems
with different architectures.

Python does not check the cache in two circumstances.  First, it always
recompiles and does not store the result for the module that’s loaded
directly from the command line.  Second, it does not check the cache if
there is no source module.  To support a non-source (compiled only)
distribution, the compiled module must be in the source directory, and
there must not be a source module.

Some tips for experts:

   * You can use the *note -O: 891. or *note -OO: a74. switches on the
     Python command to reduce the size of a compiled module.  The ‘-O’
     switch removes assert statements, the ‘-OO’ switch removes both
     assert statements and __doc__ strings.  Since some programs may
     rely on having these available, you should only use this option if
     you know what you’re doing.  "Optimized" modules have a .pyo rather
     than a .pyc suffix and are usually smaller.  Future releases may
     change the effects of optimization.

   * A program doesn’t run any faster when it is read from a ‘.pyc’ or
     ‘.pyo’ file than when it is read from a ‘.py’ file; the only thing
     that’s faster about ‘.pyc’ or ‘.pyo’ files is the speed with which
     they are loaded.

   * The module *note compileall: 21. can create .pyc files (or .pyo
     files when *note -O: 891. is used) for all modules in a directory.

   * There is more detail on this process, including a flow chart of the
     decisions, in PEP 3147.


File: python.info,  Node: Standard Modules,  Next: The dir Function,  Prev: More on Modules,  Up: Modules

2.6.2 Standard Modules
----------------------

Python comes with a library of standard modules, described in a separate
document, the Python Library Reference ("Library Reference" hereafter).
Some modules are built into the interpreter; these provide access to
operations that are not part of the core of the language but are
nevertheless built in, either for efficiency or to provide access to
operating system primitives such as system calls.  The set of such
modules is a configuration option which also depends on the underlying
platform.  For example, the *note winreg: 123. module is only provided
on Windows systems.  One particular module deserves some attention:
*note sys: f8, which is built into every Python interpreter.  The
variables ‘sys.ps1’ and ‘sys.ps2’ define the strings used as primary and
secondary prompts:

     >>> import sys
     >>> sys.ps1
     '>>> '
     >>> sys.ps2
     '... '
     >>> sys.ps1 = 'C> '
     C> print('Yuck!')
     Yuck!
     C>

These two variables are only defined if the interpreter is in
interactive mode.

The variable ‘sys.path’ is a list of strings that determines the
interpreter’s search path for modules.  It is initialized to a default
path taken from the environment variable *note PYTHONPATH: 30e, or from
a built-in default if *note PYTHONPATH: 30e. is not set.  You can modify
it using standard list operations:

     >>> import sys
     >>> sys.path.append('/ufs/guido/lib/python')


File: python.info,  Node: The dir Function,  Next: Packages,  Prev: Standard Modules,  Up: Modules

2.6.3 The ‘dir()’ Function
--------------------------

The built-in function *note dir(): 7a8. is used to find out which names
a module defines.  It returns a sorted list of strings:

     >>> import fibo, sys
     >>> dir(fibo)
     ['__name__', 'fib', 'fib2']
     >>> dir(sys)  # doctest: +NORMALIZE_WHITESPACE
     ['__displayhook__', '__doc__', '__excepthook__', '__loader__', '__name__',
      '__package__', '__stderr__', '__stdin__', '__stdout__',
      '_clear_type_cache', '_current_frames', '_debugmallocstats', '_getframe',
      '_home', '_mercurial', '_xoptions', 'abiflags', 'api_version', 'argv',
      'base_exec_prefix', 'base_prefix', 'builtin_module_names', 'byteorder',
      'call_tracing', 'callstats', 'copyright', 'displayhook',
      'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix',
      'executable', 'exit', 'flags', 'float_info', 'float_repr_style',
      'getcheckinterval', 'getdefaultencoding', 'getdlopenflags',
      'getfilesystemencoding', 'getobjects', 'getprofile', 'getrecursionlimit',
      'getrefcount', 'getsizeof', 'getswitchinterval', 'gettotalrefcount',
      'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',
      'intern', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path',
      'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',
      'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit',
      'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout',
      'thread_info', 'version', 'version_info', 'warnoptions']

Without arguments, *note dir(): 7a8. lists the names you have defined
currently:

     >>> a = [1, 2, 3, 4, 5]
     >>> import fibo
     >>> fib = fibo.fib
     >>> dir()
     ['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']

Note that it lists all types of names: variables, modules, functions,
etc.

*note dir(): 7a8. does not list the names of built-in functions and
variables.  If you want a list of those, they are defined in the
standard module *note builtins: 13.:

     >>> import builtins
     >>> dir(builtins)  # doctest: +NORMALIZE_WHITESPACE
     ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',
      'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',
      'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',
      'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning',
      'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False',
      'FileExistsError', 'FileNotFoundError', 'FloatingPointError',
      'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',
      'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError',
      'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',
      'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',
      'NotImplementedError', 'OSError', 'OverflowError',
      'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError',
      'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',
      'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError',
      'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError',
      'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError',
      'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning',
      'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__',
      '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs',
      'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable',
      'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',
      'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',
      'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',
      'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',
      'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview',
      'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property',
      'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',
      'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars',
      'zip']


File: python.info,  Node: Packages,  Prev: The dir Function,  Up: Modules

2.6.4 Packages
--------------

Packages are a way of structuring Python’s module namespace by using
"dotted module names".  For example, the module name ‘A.B’ designates a
submodule named ‘B’ in a package named ‘A’.  Just like the use of
modules saves the authors of different modules from having to worry
about each other’s global variable names, the use of dotted module names
saves the authors of multi-module packages like NumPy or the Python
Imaging Library from having to worry about each other’s module names.

Suppose you want to design a collection of modules (a "package") for the
uniform handling of sound files and sound data.  There are many
different sound file formats (usually recognized by their extension, for
example: ‘.wav’, ‘.aiff’, ‘.au’), so you may need to create and maintain
a growing collection of modules for the conversion between the various
file formats.  There are also many different operations you might want
to perform on sound data (such as mixing, adding echo, applying an
equalizer function, creating an artificial stereo effect), so in
addition you will be writing a never-ending stream of modules to perform
these operations.  Here’s a possible structure for your package
(expressed in terms of a hierarchical filesystem):

     sound/                          Top-level package
           __init__.py               Initialize the sound package
           formats/                  Subpackage for file format conversions
                   __init__.py
                   wavread.py
                   wavwrite.py
                   aiffread.py
                   aiffwrite.py
                   auread.py
                   auwrite.py
                   ...
           effects/                  Subpackage for sound effects
                   __init__.py
                   echo.py
                   surround.py
                   reverse.py
                   ...
           filters/                  Subpackage for filters
                   __init__.py
                   equalizer.py
                   vocoder.py
                   karaoke.py
                   ...

When importing the package, Python searches through the directories on
‘sys.path’ looking for the package subdirectory.

The ‘__init__.py’ files are required to make Python treat the
directories as containing packages; this is done to prevent directories
with a common name, such as ‘string’, from unintentionally hiding valid
modules that occur later on the module search path.  In the simplest
case, ‘__init__.py’ can just be an empty file, but it can also execute
initialization code for the package or set the ‘__all__’ variable,
described later.

Users of the package can import individual modules from the package, for
example:

     import sound.effects.echo

This loads the submodule ‘sound.effects.echo’.  It must be referenced
with its full name.

     sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)

An alternative way of importing the submodule is:

     from sound.effects import echo

This also loads the submodule ‘echo’, and makes it available without its
package prefix, so it can be used as follows:

     echo.echofilter(input, output, delay=0.7, atten=4)

Yet another variation is to import the desired function or variable
directly:

     from sound.effects.echo import echofilter

Again, this loads the submodule ‘echo’, but this makes its function
‘echofilter()’ directly available:

     echofilter(input, output, delay=0.7, atten=4)

Note that when using ‘from package import item’, the item can be either
a submodule (or subpackage) of the package, or some other name defined
in the package, like a function, class or variable.  The ‘import’
statement first tests whether the item is defined in the package; if
not, it assumes it is a module and attempts to load it.  If it fails to
find it, an *note ImportError: 318. exception is raised.

Contrarily, when using syntax like ‘import item.subitem.subsubitem’,
each item except for the last must be a package; the last item can be a
module or a package but can’t be a class or function or variable defined
in the previous item.

* Menu:

* Importing * From a Package:: 
* Intra-package References:: 
* Packages in Multiple Directories:: 


File: python.info,  Node: Importing * From a Package,  Next: Intra-package References,  Up: Packages

2.6.4.1 Importing * From a Package
..................................

Now what happens when the user writes ‘from sound.effects import *’?
Ideally, one would hope that this somehow goes out to the filesystem,
finds which submodules are present in the package, and imports them all.
This could take a long time and importing sub-modules might have
unwanted side-effects that should only happen when the sub-module is
explicitly imported.

The only solution is for the package author to provide an explicit index
of the package.  The *note import: 674. statement uses the following
convention: if a package’s ‘__init__.py’ code defines a list named
‘__all__’, it is taken to be the list of module names that should be
imported when ‘from package import *’ is encountered.  It is up to the
package author to keep this list up-to-date when a new version of the
package is released.  Package authors may also decide not to support it,
if they don’t see a use for importing * from their package.  For
example, the file ‘sound/effects/__init__.py’ could contain the
following code:

     __all__ = ["echo", "surround", "reverse"]

This would mean that ‘from sound.effects import *’ would import the
three named submodules of the ‘sound’ package.

If ‘__all__’ is not defined, the statement ‘from sound.effects import *’
does `not' import all submodules from the package ‘sound.effects’ into
the current namespace; it only ensures that the package ‘sound.effects’
has been imported (possibly running any initialization code in
‘__init__.py’) and then imports whatever names are defined in the
package.  This includes any names defined (and submodules explicitly
loaded) by ‘__init__.py’.  It also includes any submodules of the
package that were explicitly loaded by previous *note import: 674.
statements.  Consider this code:

     import sound.effects.echo
     import sound.effects.surround
     from sound.effects import *

In this example, the ‘echo’ and ‘surround’ modules are imported in the
current namespace because they are defined in the ‘sound.effects’
package when the ‘from...import’ statement is executed.  (This also
works when ‘__all__’ is defined.)

Although certain modules are designed to export only names that follow
certain patterns when you use ‘import *’, it is still considered bad
practise in production code.

Remember, there is nothing wrong with using ‘from Package import
specific_submodule’!  In fact, this is the recommended notation unless
the importing module needs to use submodules with the same name from
different packages.


File: python.info,  Node: Intra-package References,  Next: Packages in Multiple Directories,  Prev: Importing * From a Package,  Up: Packages

2.6.4.2 Intra-package References
................................

When packages are structured into subpackages (as with the ‘sound’
package in the example), you can use absolute imports to refer to
submodules of siblings packages.  For example, if the module
‘sound.filters.vocoder’ needs to use the ‘echo’ module in the
‘sound.effects’ package, it can use ‘from sound.effects import echo’.

You can also write relative imports, with the ‘from module import name’
form of import statement.  These imports use leading dots to indicate
the current and parent packages involved in the relative import.  From
the ‘surround’ module for example, you might use:

     from . import echo
     from .. import formats
     from ..filters import equalizer

Note that relative imports are based on the name of the current module.
Since the name of the main module is always ‘"__main__"’, modules
intended for use as the main module of a Python application must always
use absolute imports.


File: python.info,  Node: Packages in Multiple Directories,  Prev: Intra-package References,  Up: Packages

2.6.4.3 Packages in Multiple Directories
........................................

Packages support one more special attribute, *note __path__: a7e.  This
is initialized to be a list containing the name of the directory holding
the package’s ‘__init__.py’ before the code in that file is executed.
This variable can be modified; doing so affects future searches for
modules and subpackages contained in the package.

While this feature is not often needed, it can be used to extend the set
of modules found in a package.


File: python.info,  Node: Input and Output,  Next: Errors and Exceptions,  Prev: Modules,  Up: The Python Tutorial

2.7 Input and Output
====================

There are several ways to present the output of a program; data can be
printed in a human-readable form, or written to a file for future use.
This chapter will discuss some of the possibilities.

* Menu:

* Fancier Output Formatting:: 
* Reading and Writing Files:: 


File: python.info,  Node: Fancier Output Formatting,  Next: Reading and Writing Files,  Up: Input and Output

2.7.1 Fancier Output Formatting
-------------------------------

So far we’ve encountered two ways of writing values: `expression
statements' and the *note print(): 21c. function.  (A third way is using
the ‘write()’ method of file objects; the standard output file can be
referenced as ‘sys.stdout’.  See the Library Reference for more
information on this.)

Often you’ll want more control over the formatting of your output than
simply printing space-separated values.  There are two ways to format
your output; the first way is to do all the string handling yourself;
using string slicing and concatenation operations you can create any
layout you can imagine.  The string type has some methods that perform
useful operations for padding strings to a given column width; these
will be discussed shortly.  The second way is to use the *note
str.format(): 557. method.

The *note string: f1. module contains a *note Template: 5aa. class which
offers yet another way to substitute values into strings.

One question remains, of course: how do you convert values to strings?
Luckily, Python has ways to convert any value to a string: pass it to
the *note repr(): 3db. or *note str(): 178. functions.

The *note str(): 178. function is meant to return representations of
values which are fairly human-readable, while *note repr(): 3db. is
meant to generate representations which can be read by the interpreter
(or will force a *note SyntaxError: 319. if there is no equivalent
syntax).  For objects which don’t have a particular representation for
human consumption, *note str(): 178. will return the same value as *note
repr(): 3db.  Many values, such as numbers or structures like lists and
dictionaries, have the same representation using either function.
Strings, in particular, have two distinct representations.

Some examples:

     >>> s = 'Hello, world.'
     >>> str(s)
     'Hello, world.'
     >>> repr(s)
     "'Hello, world.'"
     >>> str(1/7)
     '0.14285714285714285'
     >>> x = 10 * 3.25
     >>> y = 200 * 200
     >>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'
     >>> print(s)
     The value of x is 32.5, and y is 40000...
     >>> # The repr() of a string adds string quotes and backslashes:
     ... hello = 'hello, world\n'
     >>> hellos = repr(hello)
     >>> print(hellos)
     'hello, world\n'
     >>> # The argument to repr() may be any Python object:
     ... repr((x, y, ('spam', 'eggs')))
     "(32.5, 40000, ('spam', 'eggs'))"

Here are two ways to write a table of squares and cubes:

     >>> for x in range(1, 11):
     ...     print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')
     ...     # Note use of 'end' on previous line
     ...     print(repr(x*x*x).rjust(4))
     ...
      1   1    1
      2   4    8
      3   9   27
      4  16   64
      5  25  125
      6  36  216
      7  49  343
      8  64  512
      9  81  729
     10 100 1000

     >>> for x in range(1, 11):
     ...     print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))
     ...
      1   1    1
      2   4    8
      3   9   27
      4  16   64
      5  25  125
      6  36  216
      7  49  343
      8  64  512
      9  81  729
     10 100 1000

(Note that in the first example, one space between each column was added
by the way *note print(): 21c. works: it always adds spaces between its
arguments.)

This example demonstrates the *note str.rjust(): a84. method of string
objects, which right-justifies a string in a field of a given width by
padding it with spaces on the left.  There are similar methods *note
str.ljust(): a85. and *note str.center(): a86.  These methods do not
write anything, they just return a new string.  If the input string is
too long, they don’t truncate it, but return it unchanged; this will
mess up your column lay-out but that’s usually better than the
alternative, which would be lying about a value.  (If you really want
truncation you can always add a slice operation, as in
‘x.ljust(n)[:n]’.)

There is another method, *note str.zfill(): a87, which pads a numeric
string on the left with zeros.  It understands about plus and minus
signs:

     >>> '12'.zfill(5)
     '00012'
     >>> '-3.14'.zfill(7)
     '-003.14'
     >>> '3.14159265359'.zfill(5)
     '3.14159265359'

Basic usage of the *note str.format(): 557. method looks like this:

     >>> print('We are the {} who say "{}!"'.format('knights', 'Ni'))
     We are the knights who say "Ni!"

The brackets and characters within them (called format fields) are
replaced with the objects passed into the *note str.format(): 557.
method.  A number in the brackets can be used to refer to the position
of the object passed into the *note str.format(): 557. method.

     >>> print('{0} and {1}'.format('spam', 'eggs'))
     spam and eggs
     >>> print('{1} and {0}'.format('spam', 'eggs'))
     eggs and spam

If keyword arguments are used in the *note str.format(): 557. method,
their values are referred to by using the name of the argument.

     >>> print('This {food} is {adjective}.'.format(
     ...       food='spam', adjective='absolutely horrible'))
     This spam is absolutely horrible.

Positional and keyword arguments can be arbitrarily combined:

     >>> print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',
                                                            other='Georg'))
     The story of Bill, Manfred, and Georg.

‘'!a'’ (apply *note ascii(): 7c8.), ‘'!s'’ (apply *note str(): 178.) and
‘'!r'’ (apply *note repr(): 3db.) can be used to convert the value
before it is formatted:

     >>> import math
     >>> print('The value of PI is approximately {}.'.format(math.pi))
     The value of PI is approximately 3.14159265359.
     >>> print('The value of PI is approximately {!r}.'.format(math.pi))
     The value of PI is approximately 3.141592653589793.

An optional ‘':'’ and format specifier can follow the field name.  This
allows greater control over how the value is formatted.  The following
example rounds Pi to three places after the decimal.

     >>> import math
     >>> print('The value of PI is approximately {0:.3f}.'.format(math.pi))
     The value of PI is approximately 3.142.

Passing an integer after the ‘':'’ will cause that field to be a minimum
number of characters wide.  This is useful for making tables pretty.

     >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
     >>> for name, phone in table.items():
     ...     print('{0:10} ==> {1:10d}'.format(name, phone))
     ...
     Jack       ==>       4098
     Dcab       ==>       7678
     Sjoerd     ==>       4127

If you have a really long format string that you don’t want to split up,
it would be nice if you could reference the variables to be formatted by
name instead of by position.  This can be done by simply passing the
dict and using square brackets ‘'[]'’ to access the keys

     >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
     >>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '
     ...       'Dcab: {0[Dcab]:d}'.format(table))
     Jack: 4098; Sjoerd: 4127; Dcab: 8637678

This could also be done by passing the table as keyword arguments with
the ’**’ notation.

     >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
     >>> print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table))
     Jack: 4098; Sjoerd: 4127; Dcab: 8637678

This is particularly useful in combination with the built-in function
*note vars(): a88, which returns a dictionary containing all local
variables.

For a complete overview of string formatting with *note str.format():
557, see *note Format String Syntax: 78a.

* Menu:

* Old string formatting:: 


File: python.info,  Node: Old string formatting,  Up: Fancier Output Formatting

2.7.1.1 Old string formatting
.............................

The ‘%’ operator can also be used for string formatting.  It interprets
the left argument much like a ‘sprintf()’-style format string to be
applied to the right argument, and returns the string resulting from
this formatting operation.  For example:

     >>> import math
     >>> print('The value of PI is approximately %5.3f.' % math.pi)
     The value of PI is approximately 3.142.

More information can be found in the *note printf-style String
Formatting: a19. section.


File: python.info,  Node: Reading and Writing Files,  Prev: Fancier Output Formatting,  Up: Input and Output

2.7.2 Reading and Writing Files
-------------------------------

*note open(): 1a2. returns a *note file object: 56a, and is most
commonly used with two arguments: ‘open(filename, mode)’.

     >>> f = open('workfile', 'w')

The first argument is a string containing the filename.  The second
argument is another string containing a few characters describing the
way in which the file will be used.  `mode' can be ‘'r'’ when the file
will only be read, ‘'w'’ for only writing (an existing file with the
same name will be erased), and ‘'a'’ opens the file for appending; any
data written to the file is automatically added to the end.  ‘'r+'’
opens the file for both reading and writing.  The `mode' argument is
optional; ‘'r'’ will be assumed if it’s omitted.

Normally, files are opened in `text mode', that means, you read and
write strings from and to the file, which are encoded in a specific
encoding (the default being UTF-8).  ‘'b'’ appended to the mode opens
the file in `binary mode': now the data is read and written in the form
of bytes objects.  This mode should be used for all files that don’t
contain text.

In text mode, the default when reading is to convert platform-specific
line endings (‘\n’ on Unix, ‘\r\n’ on Windows) to just ‘\n’.  When
writing in text mode, the default is to convert occurrences of ‘\n’ back
to platform-specific line endings.  This behind-the-scenes modification
to file data is fine for text files, but will corrupt binary data like
that in ‘JPEG’ or ‘EXE’ files.  Be very careful to use binary mode when
reading and writing such files.

* Menu:

* Methods of File Objects:: 
* Saving structured data with json:: 


File: python.info,  Node: Methods of File Objects,  Next: Saving structured data with json,  Up: Reading and Writing Files

2.7.2.1 Methods of File Objects
...............................

The rest of the examples in this section will assume that a file object
called ‘f’ has already been created.

To read a file’s contents, call ‘f.read(size)’, which reads some
quantity of data and returns it as a string or bytes object.  `size' is
an optional numeric argument.  When `size' is omitted or negative, the
entire contents of the file will be read and returned; it’s your problem
if the file is twice as large as your machine’s memory.  Otherwise, at
most `size' bytes are read and returned.  If the end of the file has
been reached, ‘f.read()’ will return an empty string (‘''’).

     >>> f.read()
     'This is the entire file.\n'
     >>> f.read()
     ''

‘f.readline()’ reads a single line from the file; a newline character
(‘\n’) is left at the end of the string, and is only omitted on the last
line of the file if the file doesn’t end in a newline.  This makes the
return value unambiguous; if ‘f.readline()’ returns an empty string, the
end of the file has been reached, while a blank line is represented by
‘'\n'’, a string containing only a single newline.

     >>> f.readline()
     'This is the first line of the file.\n'
     >>> f.readline()
     'Second line of the file\n'
     >>> f.readline()
     ''

For reading lines from a file, you can loop over the file object.  This
is memory efficient, fast, and leads to simple code:

     >>> for line in f:
     ...     print(line, end='')
     ...
     This is the first line of the file.
     Second line of the file

If you want to read all the lines of a file in a list you can also use
‘list(f)’ or ‘f.readlines()’.

‘f.write(string)’ writes the contents of `string' to the file, returning
the number of characters written.

     >>> f.write('This is a test\n')
     15

To write something other than a string, it needs to be converted to a
string first:

     >>> value = ('the answer', 42)
     >>> s = str(value)
     >>> f.write(s)
     18

‘f.tell()’ returns an integer giving the file object’s current position
in the file represented as number of bytes from the beginning of the
file when in binary mode and an opaque number when in text mode.

To change the file object’s position, use ‘f.seek(offset, from_what)’.
The position is computed from adding `offset' to a reference point; the
reference point is selected by the `from_what' argument.  A `from_what'
value of 0 measures from the beginning of the file, 1 uses the current
file position, and 2 uses the end of the file as the reference point.
`from_what' can be omitted and defaults to 0, using the beginning of the
file as the reference point.

     >>> f = open('workfile', 'rb+')
     >>> f.write(b'0123456789abcdef')
     16
     >>> f.seek(5)     # Go to the 6th byte in the file
     5
     >>> f.read(1)
     b'5'
     >>> f.seek(-3, 2) # Go to the 3rd byte before the end
     13
     >>> f.read(1)
     b'd'

In text files (those opened without a ‘b’ in the mode string), only
seeks relative to the beginning of the file are allowed (the exception
being seeking to the very file end with ‘seek(0, 2)’) and the only valid
`offset' values are those returned from the ‘f.tell()’, or zero.  Any
other `offset' value produces undefined behaviour.

When you’re done with a file, call ‘f.close()’ to close it and free up
any system resources taken up by the open file.  After calling
‘f.close()’, attempts to use the file object will automatically fail.

     >>> f.close()
     >>> f.read()
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: I/O operation on closed file

It is good practice to use the *note with: 19b. keyword when dealing
with file objects.  This has the advantage that the file is properly
closed after its suite finishes, even if an exception is raised on the
way.  It is also much shorter than writing equivalent *note try:
7ee.-*note finally: 2c5. blocks:

     >>> with open('workfile', 'r') as f:
     ...     read_data = f.read()
     >>> f.closed
     True

File objects have some additional methods, such as ‘isatty()’ and
‘truncate()’ which are less frequently used; consult the Library
Reference for a complete guide to file objects.


File: python.info,  Node: Saving structured data with json,  Prev: Methods of File Objects,  Up: Reading and Writing Files

2.7.2.2 Saving structured data with ‘json’
..........................................

Strings can easily be written to and read from a file.  Numbers take a
bit more effort, since the ‘read()’ method only returns strings, which
will have to be passed to a function like *note int(): 185, which takes
a string like ‘'123'’ and returns its numeric value 123.  When you want
to save more complex data types like nested lists and dictionaries,
parsing and serializing by hand becomes complicated.

Rather than having users constantly writing and debugging code to save
complicated data types to files, Python allows you to use the popular
data interchange format called JSON (JavaScript Object Notation)(1).
The standard module called *note json: a1. can take Python data
hierarchies, and convert them to string representations; this process is
called `serializing'.  Reconstructing the data from the string
representation is called `deserializing'.  Between serializing and
deserializing, the string representing the object may have been stored
in a file or data, or sent over a network connection to some distant
machine.

     Note: The JSON format is commonly used by modern applications to
     allow for data exchange.  Many programmers are already familiar
     with it, which makes it a good choice for interoperability.

If you have an object ‘x’, you can view its JSON string representation
with a simple line of code:

     >>> json.dumps([1, 'simple', 'list'])
     '[1, "simple", "list"]'

Another variant of the *note dumps(): 332. function, called *note
dump(): 331, simply serializes the object to a *note text file: a90.  So
if ‘f’ is a *note text file: a90. object opened for writing, we can do
this:

     json.dump(x, f)

To decode the object again, if ‘f’ is a *note text file: a90. object
which has been opened for reading:

     x = json.load(f)

This simple serialization technique can handle lists and dictionaries,
but serializing arbitrary class instances in JSON requires a bit of
extra effort.  The reference for the *note json: a1. module contains an
explanation of this.

See also
........

*note pickle: c6. - the pickle module

Contrary to *note JSON: a8f, `pickle' is a protocol which allows the
serialization of arbitrarily complex Python objects.  As such, it is
specific to Python and cannot be used to communicate with applications
written in other languages.  It is also insecure by default:
deserializing pickle data coming from an untrusted source can execute
arbitrary code, if the data was crafted by a skilled attacker.

   ---------- Footnotes ----------

   (1) http://json.org


File: python.info,  Node: Errors and Exceptions,  Next: Classes,  Prev: Input and Output,  Up: The Python Tutorial

2.8 Errors and Exceptions
=========================

Until now error messages haven’t been more than mentioned, but if you
have tried out the examples you have probably seen some.  There are (at
least) two distinguishable kinds of errors: `syntax errors' and
`exceptions'.

* Menu:

* Syntax Errors:: 
* Exceptions:: 
* Handling Exceptions:: 
* Raising Exceptions:: 
* User-defined Exceptions:: 
* Defining Clean-up Actions:: 
* Predefined Clean-up Actions:: 


File: python.info,  Node: Syntax Errors,  Next: Exceptions,  Up: Errors and Exceptions

2.8.1 Syntax Errors
-------------------

Syntax errors, also known as parsing errors, are perhaps the most common
kind of complaint you get while you are still learning Python:

     >>> while True print('Hello world')
       File "<stdin>", line 1, in ?
         while True print('Hello world')
                        ^
     SyntaxError: invalid syntax

The parser repeats the offending line and displays a little ’arrow’
pointing at the earliest point in the line where the error was detected.
The error is caused by (or at least detected at) the token `preceding'
the arrow: in the example, the error is detected at the function *note
print(): 21c, since a colon (‘':'’) is missing before it.  File name and
line number are printed so you know where to look in case the input came
from a script.


File: python.info,  Node: Exceptions,  Next: Handling Exceptions,  Prev: Syntax Errors,  Up: Errors and Exceptions

2.8.2 Exceptions
----------------

Even if a statement or expression is syntactically correct, it may cause
an error when an attempt is made to execute it.  Errors detected during
execution are called `exceptions' and are not unconditionally fatal: you
will soon learn how to handle them in Python programs.  Most exceptions
are not handled by programs, however, and result in error messages as
shown here:

     >>> 10 * (1/0)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ZeroDivisionError: division by zero
     >>> 4 + spam*3
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     NameError: name 'spam' is not defined
     >>> '2' + 2
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     TypeError: Can't convert 'int' object to str implicitly

The last line of the error message indicates what happened.  Exceptions
come in different types, and the type is printed as part of the message:
the types in the example are *note ZeroDivisionError: a98, *note
NameError: 7f8. and *note TypeError: 309.  The string printed as the
exception type is the name of the built-in exception that occurred.
This is true for all built-in exceptions, but need not be true for
user-defined exceptions (although it is a useful convention).  Standard
exception names are built-in identifiers (not reserved keywords).

The rest of the line provides detail based on the type of exception and
what caused it.

The preceding part of the error message shows the context where the
exception happened, in the form of a stack traceback.  In general it
contains a stack traceback listing source lines; however, it will not
display lines read from standard input.

*note Built-in Exceptions: a99. lists the built-in exceptions and their
meanings.


File: python.info,  Node: Handling Exceptions,  Next: Raising Exceptions,  Prev: Exceptions,  Up: Errors and Exceptions

2.8.3 Handling Exceptions
-------------------------

It is possible to write programs that handle selected exceptions.  Look
at the following example, which asks the user for input until a valid
integer has been entered, but allows the user to interrupt the program
(using ‘Control-C’ or whatever the operating system supports); note that
a user-generated interruption is signalled by raising the *note
KeyboardInterrupt: 6c0. exception.

     >>> while True:
     ...     try:
     ...         x = int(input("Please enter a number: "))
     ...         break
     ...     except ValueError:
     ...         print("Oops!  That was no valid number.  Try again...")
     ...

The *note try: 7ee. statement works as follows.

   * First, the `try clause' (the statement(s) between the *note try:
     7ee. and *note except: 563. keywords) is executed.

   * If no exception occurs, the `except clause' is skipped and
     execution of the *note try: 7ee. statement is finished.

   * If an exception occurs during execution of the try clause, the rest
     of the clause is skipped.  Then if its type matches the exception
     named after the *note except: 563. keyword, the except clause is
     executed, and then execution continues after the *note try: 7ee.
     statement.

   * If an exception occurs which does not match the exception named in
     the except clause, it is passed on to outer *note try: 7ee.
     statements; if no handler is found, it is an `unhandled exception'
     and execution stops with a message as shown above.

A *note try: 7ee. statement may have more than one except clause, to
specify handlers for different exceptions.  At most one handler will be
executed.  Handlers only handle exceptions that occur in the
corresponding try clause, not in other handlers of the same *note try:
7ee. statement.  An except clause may name multiple exceptions as a
parenthesized tuple, for example:

     ... except (RuntimeError, TypeError, NameError):
     ...     pass

The last except clause may omit the exception name(s), to serve as a
wildcard.  Use this with extreme caution, since it is easy to mask a
real programming error in this way!  It can also be used to print an
error message and then re-raise the exception (allowing a caller to
handle the exception as well):

     import sys

     try:
         f = open('myfile.txt')
         s = f.readline()
         i = int(s.strip())
     except OSError as err:
         print("OS error: {0}".format(err))
     except ValueError:
         print("Could not convert data to an integer.")
     except:
         print("Unexpected error:", sys.exc_info()[0])
         raise

The *note try: 7ee. ...  *note except: 563. statement has an optional
`else clause', which, when present, must follow all except clauses.  It
is useful for code that must be executed if the try clause does not
raise an exception.  For example:

     for arg in sys.argv[1:]:
         try:
             f = open(arg, 'r')
         except IOError:
             print('cannot open', arg)
         else:
             print(arg, 'has', len(f.readlines()), 'lines')
             f.close()

The use of the *note else: a27. clause is better than adding additional
code to the *note try: 7ee. clause because it avoids accidentally
catching an exception that wasn’t raised by the code being protected by
the *note try: 7ee. ...  *note except: 563. statement.

When an exception occurs, it may have an associated value, also known as
the exception’s `argument'.  The presence and type of the argument
depend on the exception type.

The except clause may specify a variable after the exception name.  The
variable is bound to an exception instance with the arguments stored in
‘instance.args’.  For convenience, the exception instance defines *note
__str__(): 8c6. so the arguments can be printed directly without having
to reference ‘.args’.  One may also instantiate an exception first
before raising it and add any attributes to it as desired.

     >>> try:
     ...    raise Exception('spam', 'eggs')
     ... except Exception as inst:
     ...    print(type(inst))    # the exception instance
     ...    print(inst.args)     # arguments stored in .args
     ...    print(inst)          # __str__ allows args to be printed directly,
     ...                         # but may be overridden in exception subclasses
     ...    x, y = inst.args     # unpack args
     ...    print('x =', x)
     ...    print('y =', y)
     ...
     <class 'Exception'>
     ('spam', 'eggs')
     ('spam', 'eggs')
     x = spam
     y = eggs

If an exception has arguments, they are printed as the last part
(’detail’) of the message for unhandled exceptions.

Exception handlers don’t just handle exceptions if they occur
immediately in the try clause, but also if they occur inside functions
that are called (even indirectly) in the try clause.  For example:

     >>> def this_fails():
     ...     x = 1/0
     ...
     >>> try:
     ...     this_fails()
     ... except ZeroDivisionError as err:
     ...     print('Handling run-time error:', err)
     ...
     Handling run-time error: int division or modulo by zero


File: python.info,  Node: Raising Exceptions,  Next: User-defined Exceptions,  Prev: Handling Exceptions,  Up: Errors and Exceptions

2.8.4 Raising Exceptions
------------------------

The *note raise: 69d. statement allows the programmer to force a
specified exception to occur.  For example:

     >>> raise NameError('HiThere')
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     NameError: HiThere

The sole argument to *note raise: 69d. indicates the exception to be
raised.  This must be either an exception instance or an exception class
(a class that derives from *note Exception: 6be.).

If you need to determine whether an exception was raised but don’t
intend to handle it, a simpler form of the *note raise: 69d. statement
allows you to re-raise the exception:

     >>> try:
     ...     raise NameError('HiThere')
     ... except NameError:
     ...     print('An exception flew by!')
     ...     raise
     ...
     An exception flew by!
     Traceback (most recent call last):
       File "<stdin>", line 2, in ?
     NameError: HiThere


File: python.info,  Node: User-defined Exceptions,  Next: Defining Clean-up Actions,  Prev: Raising Exceptions,  Up: Errors and Exceptions

2.8.5 User-defined Exceptions
-----------------------------

Programs may name their own exceptions by creating a new exception class
(see *note Classes: a39. for more about Python classes).  Exceptions
should typically be derived from the *note Exception: 6be. class, either
directly or indirectly.  For example:

     >>> class MyError(Exception):
     ...     def __init__(self, value):
     ...         self.value = value
     ...     def __str__(self):
     ...         return repr(self.value)
     ...
     >>> try:
     ...     raise MyError(2*2)
     ... except MyError as e:
     ...     print('My exception occurred, value:', e.value)
     ...
     My exception occurred, value: 4
     >>> raise MyError('oops!')
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     __main__.MyError: 'oops!'

In this example, the default *note __init__(): 7da. of *note Exception:
6be. has been overridden.  The new behavior simply creates the `value'
attribute.  This replaces the default behavior of creating the `args'
attribute.

Exception classes can be defined which do anything any other class can
do, but are usually kept simple, often only offering a number of
attributes that allow information about the error to be extracted by
handlers for the exception.  When creating a module that can raise
several distinct errors, a common practice is to create a base class for
exceptions defined by that module, and subclass that to create specific
exception classes for different error conditions:

     class Error(Exception):
         """Base class for exceptions in this module."""
         pass

     class InputError(Error):
         """Exception raised for errors in the input.

         Attributes:
             expression -- input expression in which the error occurred
             message -- explanation of the error
         """

         def __init__(self, expression, message):
             self.expression = expression
             self.message = message

     class TransitionError(Error):
         """Raised when an operation attempts a state transition that's not
         allowed.

         Attributes:
             previous -- state at beginning of transition
             next -- attempted new state
             message -- explanation of why the specific transition is not allowed
         """

         def __init__(self, previous, next, message):
             self.previous = previous
             self.next = next
             self.message = message

Most exceptions are defined with names that end in "Error," similar to
the naming of the standard exceptions.

Many standard modules define their own exceptions to report errors that
may occur in functions they define.  More information on classes is
presented in chapter *note Classes: a39.


File: python.info,  Node: Defining Clean-up Actions,  Next: Predefined Clean-up Actions,  Prev: User-defined Exceptions,  Up: Errors and Exceptions

2.8.6 Defining Clean-up Actions
-------------------------------

The *note try: 7ee. statement has another optional clause which is
intended to define clean-up actions that must be executed under all
circumstances.  For example:

     >>> try:
     ...     raise KeyboardInterrupt
     ... finally:
     ...     print('Goodbye, world!')
     ...
     Goodbye, world!
     Traceback (most recent call last):
       File "<stdin>", line 2, in ?
     KeyboardInterrupt

A `finally clause' is always executed before leaving the *note try: 7ee.
statement, whether an exception has occurred or not.  When an exception
has occurred in the *note try: 7ee. clause and has not been handled by
an *note except: 563. clause (or it has occurred in a *note except: 563.
or *note else: a27. clause), it is re-raised after the *note finally:
2c5. clause has been executed.  The *note finally: 2c5. clause is also
executed "on the way out" when any other clause of the *note try: 7ee.
statement is left via a *note break: a2f, *note continue: a31. or *note
return: 781. statement.  A more complicated example:

     >>> def divide(x, y):
     ...     try:
     ...         result = x / y
     ...     except ZeroDivisionError:
     ...         print("division by zero!")
     ...     else:
     ...         print("result is", result)
     ...     finally:
     ...         print("executing finally clause")
     ...
     >>> divide(2, 1)
     result is 2.0
     executing finally clause
     >>> divide(2, 0)
     division by zero!
     executing finally clause
     >>> divide("2", "1")
     executing finally clause
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
       File "<stdin>", line 3, in divide
     TypeError: unsupported operand type(s) for /: 'str' and 'str'

As you can see, the *note finally: 2c5. clause is executed in any event.
The *note TypeError: 309. raised by dividing two strings is not handled
by the *note except: 563. clause and therefore re-raised after the *note
finally: 2c5. clause has been executed.

In real world applications, the *note finally: 2c5. clause is useful for
releasing external resources (such as files or network connections),
regardless of whether the use of the resource was successful.


File: python.info,  Node: Predefined Clean-up Actions,  Prev: Defining Clean-up Actions,  Up: Errors and Exceptions

2.8.7 Predefined Clean-up Actions
---------------------------------

Some objects define standard clean-up actions to be undertaken when the
object is no longer needed, regardless of whether or not the operation
using the object succeeded or failed.  Look at the following example,
which tries to open a file and print its contents to the screen.

     for line in open("myfile.txt"):
         print(line, end="")

The problem with this code is that it leaves the file open for an
indeterminate amount of time after this part of the code has finished
executing.  This is not an issue in simple scripts, but can be a problem
for larger applications.  The *note with: 19b. statement allows objects
like files to be used in a way that ensures they are always cleaned up
promptly and correctly.

     with open("myfile.txt") as f:
         for line in f:
             print(line, end="")

After the statement is executed, the file `f' is always closed, even if
a problem was encountered while processing the lines.  Objects which,
like files, provide predefined clean-up actions will indicate this in
their documentation.


File: python.info,  Node: Classes,  Next: Brief Tour of the Standard Library,  Prev: Errors and Exceptions,  Up: The Python Tutorial

2.9 Classes
===========

Compared with other programming languages, Python’s class mechanism adds
classes with a minimum of new syntax and semantics.  It is a mixture of
the class mechanisms found in C++ and Modula-3.  Python classes provide
all the standard features of Object Oriented Programming: the class
inheritance mechanism allows multiple base classes, a derived class can
override any methods of its base class or classes, and a method can call
the method of a base class with the same name.  Objects can contain
arbitrary amounts and kinds of data.  As is true for modules, classes
partake of the dynamic nature of Python: they are created at runtime,
and can be modified further after creation.

In C++ terminology, normally class members (including the data members)
are `public' (except see below *note Private Variables: aa5.), and all
member functions are `virtual'.  As in Modula-3, there are no shorthands
for referencing the object’s members from its methods: the method
function is declared with an explicit first argument representing the
object, which is provided implicitly by the call.  As in Smalltalk,
classes themselves are objects.  This provides semantics for importing
and renaming.  Unlike C++ and Modula-3, built-in types can be used as
base classes for extension by the user.  Also, like in C++, most
built-in operators with special syntax (arithmetic operators,
subscripting etc.)  can be redefined for class instances.

(Lacking universally accepted terminology to talk about classes, I will
make occasional use of Smalltalk and C++ terms.  I would use Modula-3
terms, since its object-oriented semantics are closer to those of Python
than C++, but I expect that few readers have heard of it.)

* Menu:

* A Word About Names and Objects:: 
* Python Scopes and Namespaces:: 
* A First Look at Classes:: 
* Random Remarks:: 
* Inheritance:: 
* Private Variables:: 
* Odds and Ends:: 
* Exceptions Are Classes Too:: 
* Iterators:: 
* Generators:: 
* Generator Expressions:: 


File: python.info,  Node: A Word About Names and Objects,  Next: Python Scopes and Namespaces,  Up: Classes

2.9.1 A Word About Names and Objects
------------------------------------

Objects have individuality, and multiple names (in multiple scopes) can
be bound to the same object.  This is known as aliasing in other
languages.  This is usually not appreciated on a first glance at Python,
and can be safely ignored when dealing with immutable basic types
(numbers, strings, tuples).  However, aliasing has a possibly surprising
effect on the semantics of Python code involving mutable objects such as
lists, dictionaries, and most other types.  This is usually used to the
benefit of the program, since aliases behave like pointers in some
respects.  For example, passing an object is cheap since only a pointer
is passed by the implementation; and if a function modifies an object
passed as an argument, the caller will see the change — this eliminates
the need for two different argument passing mechanisms as in Pascal.


File: python.info,  Node: Python Scopes and Namespaces,  Next: A First Look at Classes,  Prev: A Word About Names and Objects,  Up: Classes

2.9.2 Python Scopes and Namespaces
----------------------------------

Before introducing classes, I first have to tell you something about
Python’s scope rules.  Class definitions play some neat tricks with
namespaces, and you need to know how scopes and namespaces work to fully
understand what’s going on.  Incidentally, knowledge about this subject
is useful for any advanced Python programmer.

Let’s begin with some definitions.

A `namespace' is a mapping from names to objects.  Most namespaces are
currently implemented as Python dictionaries, but that’s normally not
noticeable in any way (except for performance), and it may change in the
future.  Examples of namespaces are: the set of built-in names
(containing functions such as *note abs(): aaa, and built-in exception
names); the global names in a module; and the local names in a function
invocation.  In a sense the set of attributes of an object also form a
namespace.  The important thing to know about namespaces is that there
is absolutely no relation between names in different namespaces; for
instance, two different modules may both define a function ‘maximize’
without confusion — users of the modules must prefix it with the module
name.

By the way, I use the word `attribute' for any name following a dot —
for example, in the expression ‘z.real’, ‘real’ is an attribute of the
object ‘z’.  Strictly speaking, references to names in modules are
attribute references: in the expression ‘modname.funcname’, ‘modname’ is
a module object and ‘funcname’ is an attribute of it.  In this case
there happens to be a straightforward mapping between the module’s
attributes and the global names defined in the module: they share the
same namespace!  (1)

Attributes may be read-only or writable.  In the latter case, assignment
to attributes is possible.  Module attributes are writable: you can
write ‘modname.the_answer = 42’.  Writable attributes may also be
deleted with the *note del: a5d. statement.  For example, ‘del
modname.the_answer’ will remove the attribute ‘the_answer’ from the
object named by ‘modname’.

Namespaces are created at different moments and have different
lifetimes.  The namespace containing the built-in names is created when
the Python interpreter starts up, and is never deleted.  The global
namespace for a module is created when the module definition is read in;
normally, module namespaces also last until the interpreter quits.  The
statements executed by the top-level invocation of the interpreter,
either read from a script file or interactively, are considered part of
a module called *note __main__: 1, so they have their own global
namespace.  (The built-in names actually also live in a module; this is
called *note builtins: 13.)

The local namespace for a function is created when the function is
called, and deleted when the function returns or raises an exception
that is not handled within the function.  (Actually, forgetting would be
a better way to describe what actually happens.)  Of course, recursive
invocations each have their own local namespace.

A `scope' is a textual region of a Python program where a namespace is
directly accessible.  "Directly accessible" here means that an
unqualified reference to a name attempts to find the name in the
namespace.

Although scopes are determined statically, they are used dynamically.
At any time during execution, there are at least three nested scopes
whose namespaces are directly accessible:

   * the innermost scope, which is searched first, contains the local
     names

   * the scopes of any enclosing functions, which are searched starting
     with the nearest enclosing scope, contains non-local, but also
     non-global names

   * the next-to-last scope contains the current module’s global names

   * the outermost scope (searched last) is the namespace containing
     built-in names

If a name is declared global, then all references and assignments go
directly to the middle scope containing the module’s global names.  To
rebind variables found outside of the innermost scope, the *note
nonlocal: 69a. statement can be used; if not declared nonlocal, those
variable are read-only (an attempt to write to such a variable will
simply create a `new' local variable in the innermost scope, leaving the
identically named outer variable unchanged).

Usually, the local scope references the local names of the (textually)
current function.  Outside functions, the local scope references the
same namespace as the global scope: the module’s namespace.  Class
definitions place yet another namespace in the local scope.

It is important to realize that scopes are determined textually: the
global scope of a function defined in a module is that module’s
namespace, no matter from where or by what alias the function is called.
On the other hand, the actual search for names is done dynamically, at
run time — however, the language definition is evolving towards static
name resolution, at "compile" time, so don’t rely on dynamic name
resolution!  (In fact, local variables are already determined
statically.)

A special quirk of Python is that – if no *note global: a38. statement
is in effect – assignments to names always go into the innermost scope.
Assignments do not copy data — they just bind names to objects.  The
same is true for deletions: the statement ‘del x’ removes the binding of
‘x’ from the namespace referenced by the local scope.  In fact, all
operations that introduce new names use the local scope: in particular,
*note import: 674. statements and function definitions bind the module
or function name in the local scope.

The *note global: a38. statement can be used to indicate that particular
variables live in the global scope and should be rebound there; the
*note nonlocal: 69a. statement indicates that particular variables live
in an enclosing scope and should be rebound there.

* Menu:

* Scopes and Namespaces Example:: 

   ---------- Footnotes ----------

   (1) Except for one thing.  Module objects have a secret read-only
attribute called ‘__dict__’ which returns the dictionary used to
implement the module’s namespace; the name ‘__dict__’ is an attribute
but not a global name.  Obviously, using this violates the abstraction
of namespace implementation, and should be restricted to things like
post-mortem debuggers.


File: python.info,  Node: Scopes and Namespaces Example,  Up: Python Scopes and Namespaces

2.9.2.1 Scopes and Namespaces Example
.....................................

This is an example demonstrating how to reference the different scopes
and namespaces, and how *note global: a38. and *note nonlocal: 69a.
affect variable binding:

     def scope_test():
         def do_local():
             spam = "local spam"
         def do_nonlocal():
             nonlocal spam
             spam = "nonlocal spam"
         def do_global():
             global spam
             spam = "global spam"
         spam = "test spam"
         do_local()
         print("After local assignment:", spam)
         do_nonlocal()
         print("After nonlocal assignment:", spam)
         do_global()
         print("After global assignment:", spam)

     scope_test()
     print("In global scope:", spam)

The output of the example code is:

     After local assignment: test spam
     After nonlocal assignment: nonlocal spam
     After global assignment: nonlocal spam
     In global scope: global spam

Note how the `local' assignment (which is default) didn’t change
`scope_test'’s binding of `spam'.  The *note nonlocal: 69a. assignment
changed `scope_test'’s binding of `spam', and the *note global: a38.
assignment changed the module-level binding.

You can also see that there was no previous binding for `spam' before
the *note global: a38. assignment.


File: python.info,  Node: A First Look at Classes,  Next: Random Remarks,  Prev: Python Scopes and Namespaces,  Up: Classes

2.9.3 A First Look at Classes
-----------------------------

Classes introduce a little bit of new syntax, three new object types,
and some new semantics.

* Menu:

* Class Definition Syntax:: 
* Class Objects:: 
* Instance Objects:: 
* Method Objects:: 
* Class and Instance Variables:: 


File: python.info,  Node: Class Definition Syntax,  Next: Class Objects,  Up: A First Look at Classes

2.9.3.1 Class Definition Syntax
...............................

The simplest form of class definition looks like this:

     class ClassName:
         <statement-1>
         .
         .
         .
         <statement-N>

Class definitions, like function definitions (*note def: 841.
statements) must be executed before they have any effect.  (You could
conceivably place a class definition in a branch of an *note if: 86d.
statement, or inside a function.)

In practice, the statements inside a class definition will usually be
function definitions, but other statements are allowed, and sometimes
useful — we’ll come back to this later.  The function definitions inside
a class normally have a peculiar form of argument list, dictated by the
calling conventions for methods — again, this is explained later.

When a class definition is entered, a new namespace is created, and used
as the local scope — thus, all assignments to local variables go into
this new namespace.  In particular, function definitions bind the name
of the new function here.

When a class definition is left normally (via the end), a `class object'
is created.  This is basically a wrapper around the contents of the
namespace created by the class definition; we’ll learn more about class
objects in the next section.  The original local scope (the one in
effect just before the class definition was entered) is reinstated, and
the class object is bound here to the class name given in the class
definition header (‘ClassName’ in the example).


File: python.info,  Node: Class Objects,  Next: Instance Objects,  Prev: Class Definition Syntax,  Up: A First Look at Classes

2.9.3.2 Class Objects
.....................

Class objects support two kinds of operations: attribute references and
instantiation.

`Attribute references' use the standard syntax used for all attribute
references in Python: ‘obj.name’.  Valid attribute names are all the
names that were in the class’s namespace when the class object was
created.  So, if the class definition looked like this:

     class MyClass:
         """A simple example class"""
         i = 12345
         def f(self):
             return 'hello world'

then ‘MyClass.i’ and ‘MyClass.f’ are valid attribute references,
returning an integer and a function object, respectively.  Class
attributes can also be assigned to, so you can change the value of
‘MyClass.i’ by assignment.  ‘__doc__’ is also a valid attribute,
returning the docstring belonging to the class: ‘"A simple example
class"’.

Class `instantiation' uses function notation.  Just pretend that the
class object is a parameterless function that returns a new instance of
the class.  For example (assuming the above class):

     x = MyClass()

creates a new `instance' of the class and assigns this object to the
local variable ‘x’.

The instantiation operation ("calling" a class object) creates an empty
object.  Many classes like to create objects with instances customized
to a specific initial state.  Therefore a class may define a special
method named *note __init__(): 7da, like this:

     def __init__(self):
         self.data = []

When a class defines an *note __init__(): 7da. method, class
instantiation automatically invokes *note __init__(): 7da. for the
newly-created class instance.  So in this example, a new, initialized
instance can be obtained by:

     x = MyClass()

Of course, the *note __init__(): 7da. method may have arguments for
greater flexibility.  In that case, arguments given to the class
instantiation operator are passed on to *note __init__(): 7da.  For
example,

     >>> class Complex:
     ...     def __init__(self, realpart, imagpart):
     ...         self.r = realpart
     ...         self.i = imagpart
     ...
     >>> x = Complex(3.0, -4.5)
     >>> x.r, x.i
     (3.0, -4.5)


File: python.info,  Node: Instance Objects,  Next: Method Objects,  Prev: Class Objects,  Up: A First Look at Classes

2.9.3.3 Instance Objects
........................

Now what can we do with instance objects?  The only operations
understood by instance objects are attribute references.  There are two
kinds of valid attribute names, data attributes and methods.

`data attributes' correspond to "instance variables" in Smalltalk, and
to "data members" in C++.  Data attributes need not be declared; like
local variables, they spring into existence when they are first assigned
to.  For example, if ‘x’ is the instance of ‘MyClass’ created above, the
following piece of code will print the value ‘16’, without leaving a
trace:

     x.counter = 1
     while x.counter < 10:
         x.counter = x.counter * 2
     print(x.counter)
     del x.counter

The other kind of instance attribute reference is a `method'.  A method
is a function that "belongs to" an object.  (In Python, the term method
is not unique to class instances: other object types can have methods as
well.  For example, list objects have methods called append, insert,
remove, sort, and so on.  However, in the following discussion, we’ll
use the term method exclusively to mean methods of class instance
objects, unless explicitly stated otherwise.)

Valid method names of an instance object depend on its class.  By
definition, all attributes of a class that are function objects define
corresponding methods of its instances.  So in our example, ‘x.f’ is a
valid method reference, since ‘MyClass.f’ is a function, but ‘x.i’ is
not, since ‘MyClass.i’ is not.  But ‘x.f’ is not the same thing as
‘MyClass.f’ — it is a `method object', not a function object.


File: python.info,  Node: Method Objects,  Next: Class and Instance Variables,  Prev: Instance Objects,  Up: A First Look at Classes

2.9.3.4 Method Objects
......................

Usually, a method is called right after it is bound:

     x.f()

In the ‘MyClass’ example, this will return the string ‘'hello world'’.
However, it is not necessary to call a method right away: ‘x.f’ is a
method object, and can be stored away and called at a later time.  For
example:

     xf = x.f
     while True:
         print(xf())

will continue to print ‘hello world’ until the end of time.

What exactly happens when a method is called?  You may have noticed that
‘x.f()’ was called without an argument above, even though the function
definition for ‘f()’ specified an argument.  What happened to the
argument?  Surely Python raises an exception when a function that
requires an argument is called without any — even if the argument isn’t
actually used...

Actually, you may have guessed the answer: the special thing about
methods is that the object is passed as the first argument of the
function.  In our example, the call ‘x.f()’ is exactly equivalent to
‘MyClass.f(x)’.  In general, calling a method with a list of `n'
arguments is equivalent to calling the corresponding function with an
argument list that is created by inserting the method’s object before
the first argument.

If you still don’t understand how methods work, a look at the
implementation can perhaps clarify matters.  When an instance attribute
is referenced that isn’t a data attribute, its class is searched.  If
the name denotes a valid class attribute that is a function object, a
method object is created by packing (pointers to) the instance object
and the function object just found together in an abstract object: this
is the method object.  When the method object is called with an argument
list, a new argument list is constructed from the instance object and
the argument list, and the function object is called with this new
argument list.


File: python.info,  Node: Class and Instance Variables,  Prev: Method Objects,  Up: A First Look at Classes

2.9.3.5 Class and Instance Variables
....................................

Generally speaking, instance variables are for data unique to each
instance and class variables are for attributes and methods shared by
all instances of the class:

     class Dog:

         kind = 'canine'         # class variable shared by all instances

         def __init__(self, name):
             self.name = name    # instance variable unique to each instance

     >>> d = Dog('Fido')
     >>> e = Dog('Buddy')
     >>> d.kind                  # shared by all dogs
     'canine'
     >>> e.kind                  # shared by all dogs
     'canine'
     >>> d.name                  # unique to d
     'Fido'
     >>> e.name                  # unique to e
     'Buddy'

As discussed in *note A Word About Names and Objects: aa7, shared data
can have possibly surprising effects with involving *note mutable: a1d.
objects such as lists and dictionaries.  For example, the `tricks' list
in the following code should not be used as a class variable because
just a single list would be shared by all `Dog' instances:

     class Dog:

         tricks = []             # mistaken use of a class variable

         def __init__(self, name):
             self.name = name

         def add_trick(self, trick):
             self.tricks.append(trick)

     >>> d = Dog('Fido')
     >>> e = Dog('Buddy')
     >>> d.add_trick('roll over')
     >>> e.add_trick('play dead')
     >>> d.tricks                # unexpectedly shared by all dogs
     ['roll over', 'play dead']

Correct design of the class should use an instance variable instead:

     class Dog:

         def __init__(self, name):
             self.name = name
             self.tricks = []    # creates a new empty list for each dog

         def add_trick(self, trick):
             self.tricks.append(trick)

     >>> d = Dog('Fido')
     >>> e = Dog('Buddy')
     >>> d.add_trick('roll over')
     >>> e.add_trick('play dead')
     >>> d.tricks
     ['roll over']
     >>> e.tricks
     ['play dead']


File: python.info,  Node: Random Remarks,  Next: Inheritance,  Prev: A First Look at Classes,  Up: Classes

2.9.4 Random Remarks
--------------------

Data attributes override method attributes with the same name; to avoid
accidental name conflicts, which may cause hard-to-find bugs in large
programs, it is wise to use some kind of convention that minimizes the
chance of conflicts.  Possible conventions include capitalizing method
names, prefixing data attribute names with a small unique string
(perhaps just an underscore), or using verbs for methods and nouns for
data attributes.

Data attributes may be referenced by methods as well as by ordinary
users ("clients") of an object.  In other words, classes are not usable
to implement pure abstract data types.  In fact, nothing in Python makes
it possible to enforce data hiding — it is all based upon convention.
(On the other hand, the Python implementation, written in C, can
completely hide implementation details and control access to an object
if necessary; this can be used by extensions to Python written in C.)

Clients should use data attributes with care — clients may mess up
invariants maintained by the methods by stamping on their data
attributes.  Note that clients may add data attributes of their own to
an instance object without affecting the validity of the methods, as
long as name conflicts are avoided — again, a naming convention can save
a lot of headaches here.

There is no shorthand for referencing data attributes (or other
methods!)  from within methods.  I find that this actually increases the
readability of methods: there is no chance of confusing local variables
and instance variables when glancing through a method.

Often, the first argument of a method is called ‘self’.  This is nothing
more than a convention: the name ‘self’ has absolutely no special
meaning to Python.  Note, however, that by not following the convention
your code may be less readable to other Python programmers, and it is
also conceivable that a `class browser' program might be written that
relies upon such a convention.

Any function object that is a class attribute defines a method for
instances of that class.  It is not necessary that the function
definition is textually enclosed in the class definition: assigning a
function object to a local variable in the class is also ok.  For
example:

     # Function defined outside the class
     def f1(self, x, y):
         return min(x, x+y)

     class C:
         f = f1
         def g(self):
             return 'hello world'
         h = g

Now ‘f’, ‘g’ and ‘h’ are all attributes of class ‘C’ that refer to
function objects, and consequently they are all methods of instances of
‘C’ — ‘h’ being exactly equivalent to ‘g’.  Note that this practice
usually only serves to confuse the reader of a program.

Methods may call other methods by using method attributes of the ‘self’
argument:

     class Bag:
         def __init__(self):
             self.data = []
         def add(self, x):
             self.data.append(x)
         def addtwice(self, x):
             self.add(x)
             self.add(x)

Methods may reference global names in the same way as ordinary
functions.  The global scope associated with a method is the module
containing its definition.  (A class is never used as a global scope.)
While one rarely encounters a good reason for using global data in a
method, there are many legitimate uses of the global scope: for one
thing, functions and modules imported into the global scope can be used
by methods, as well as functions and classes defined in it.  Usually,
the class containing the method is itself defined in this global scope,
and in the next section we’ll find some good reasons why a method would
want to reference its own class.

Each value is an object, and therefore has a `class' (also called its
`type').  It is stored as ‘object.__class__’.


File: python.info,  Node: Inheritance,  Next: Private Variables,  Prev: Random Remarks,  Up: Classes

2.9.5 Inheritance
-----------------

Of course, a language feature would not be worthy of the name "class"
without supporting inheritance.  The syntax for a derived class
definition looks like this:

     class DerivedClassName(BaseClassName):
         <statement-1>
         .
         .
         .
         <statement-N>

The name ‘BaseClassName’ must be defined in a scope containing the
derived class definition.  In place of a base class name, other
arbitrary expressions are also allowed.  This can be useful, for
example, when the base class is defined in another module:

     class DerivedClassName(modname.BaseClassName):

Execution of a derived class definition proceeds the same as for a base
class.  When the class object is constructed, the base class is
remembered.  This is used for resolving attribute references: if a
requested attribute is not found in the class, the search proceeds to
look in the base class.  This rule is applied recursively if the base
class itself is derived from some other class.

There’s nothing special about instantiation of derived classes:
‘DerivedClassName()’ creates a new instance of the class.  Method
references are resolved as follows: the corresponding class attribute is
searched, descending down the chain of base classes if necessary, and
the method reference is valid if this yields a function object.

Derived classes may override methods of their base classes.  Because
methods have no special privileges when calling other methods of the
same object, a method of a base class that calls another method defined
in the same base class may end up calling a method of a derived class
that overrides it.  (For C++ programmers: all methods in Python are
effectively ‘virtual’.)

An overriding method in a derived class may in fact want to extend
rather than simply replace the base class method of the same name.
There is a simple way to call the base class method directly: just call
‘BaseClassName.methodname(self, arguments)’.  This is occasionally
useful to clients as well.  (Note that this only works if the base class
is accessible as ‘BaseClassName’ in the global scope.)

Python has two built-in functions that work with inheritance:

   * Use *note isinstance(): 798. to check an instance’s type:
     ‘isinstance(obj, int)’ will be ‘True’ only if ‘obj.__class__’ is
     *note int: 185. or some class derived from *note int: 185.

   * Use *note issubclass(): 799. to check class inheritance:
     ‘issubclass(bool, int)’ is ‘True’ since *note bool: 87a. is a
     subclass of *note int: 185.  However, ‘issubclass(float, int)’ is
     ‘False’ since *note float: 327. is not a subclass of *note int:
     185.

* Menu:

* Multiple Inheritance:: 

