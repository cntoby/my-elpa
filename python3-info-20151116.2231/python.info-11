This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 3.4.3, September 02, 2015

     Copyright © 1990-2015, Python Software Foundation

INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.3.1.


File: python.info,  Node: readline --- GNU readline interface,  Next: rlcompleter --- Completion function for GNU readline,  Prev: stringprep --- Internet String Preparation,  Up: Text Processing Services

5.6.7 ‘readline’ — GNU readline interface
-----------------------------------------

The *note readline: da. module defines a number of functions to
facilitate completion and reading/writing of history files from the
Python interpreter.  This module can be used directly or via the *note
rlcompleter: dd. module.  Settings made using this module affect the
behaviour of both the interpreter’s interactive prompt and the prompts
offered by the built-in *note input(): 6cf. function.

     Note: On MacOS X the *note readline: da. module can be implemented
     using the ‘libedit’ library instead of GNU readline.

     The configuration file for ‘libedit’ is different from that of GNU
     readline.  If you programmatically load configuration strings you
     can check for the text "libedit" in ‘readline.__doc__’ to
     differentiate between GNU readline and libedit.

The *note readline: da. module defines the following functions:

 -- Function: readline.parse_and_bind (string)

     Parse and execute single line of a readline init file.

 -- Function: readline.get_line_buffer ()

     Return the current contents of the line buffer.

 -- Function: readline.insert_text (string)

     Insert text into the command line.

 -- Function: readline.read_init_file ([filename])

     Parse a readline initialization file.  The default filename is the
     last filename used.

 -- Function: readline.read_history_file ([filename])

     Load a readline history file.  The default filename is
     ‘~/.history’.

 -- Function: readline.write_history_file ([filename])

     Save a readline history file.  The default filename is
     ‘~/.history’.

 -- Function: readline.clear_history ()

     Clear the current history.  (Note: this function is not available
     if the installed version of GNU readline doesn’t support it.)

 -- Function: readline.get_history_length ()

     Return the desired length of the history file.  Negative values
     imply unlimited history file size.

 -- Function: readline.set_history_length (length)

     Set the number of lines to save in the history file.  *note
     write_history_file(): f85. uses this value to truncate the history
     file when saving.  Negative values imply unlimited history file
     size.

 -- Function: readline.get_current_history_length ()

     Return the number of lines currently in the history.  (This is
     different from *note get_history_length(): f87, which returns the
     maximum number of lines that will be written to a history file.)

 -- Function: readline.get_history_item (index)

     Return the current contents of history item at `index'.

 -- Function: readline.remove_history_item (pos)

     Remove history item specified by its position from the history.

 -- Function: readline.replace_history_item (pos, line)

     Replace history item specified by its position with the given line.

 -- Function: readline.redisplay ()

     Change what’s displayed on the screen to reflect the current
     contents of the line buffer.

 -- Function: readline.set_startup_hook ([function])

     Set or remove the startup_hook function.  If `function' is
     specified, it will be used as the new startup_hook function; if
     omitted or ‘None’, any hook function already installed is removed.
     The startup_hook function is called with no arguments just before
     readline prints the first prompt.

 -- Function: readline.set_pre_input_hook ([function])

     Set or remove the pre_input_hook function.  If `function' is
     specified, it will be used as the new pre_input_hook function; if
     omitted or ‘None’, any hook function already installed is removed.
     The pre_input_hook function is called with no arguments after the
     first prompt has been printed and just before readline starts
     reading input characters.

 -- Function: readline.set_completer ([function])

     Set or remove the completer function.  If `function' is specified,
     it will be used as the new completer function; if omitted or
     ‘None’, any completer function already installed is removed.  The
     completer function is called as ‘function(text, state)’, for
     `state' in ‘0’, ‘1’, ‘2’, ..., until it returns a non-string value.
     It should return the next possible completion starting with `text'.

 -- Function: readline.get_completer ()

     Get the completer function, or ‘None’ if no completer function has
     been set.

 -- Function: readline.get_completion_type ()

     Get the type of completion being attempted.

 -- Function: readline.get_begidx ()

     Get the beginning index of the readline tab-completion scope.

 -- Function: readline.get_endidx ()

     Get the ending index of the readline tab-completion scope.

 -- Function: readline.set_completer_delims (string)

     Set the readline word delimiters for tab-completion.

 -- Function: readline.get_completer_delims ()

     Get the readline word delimiters for tab-completion.

 -- Function: readline.set_completion_display_matches_hook ([function])

     Set or remove the completion display function.  If `function' is
     specified, it will be used as the new completion display function;
     if omitted or ‘None’, any completion display function already
     installed is removed.  The completion display function is called as
     ‘function(substitution, [matches], longest_match_length)’ once each
     time matches need to be displayed.

 -- Function: readline.add_history (line)

     Append a line to the history buffer, as if it was the last line
     typed.

See also
........

Module *note rlcompleter: dd.

     Completion of Python identifiers at the interactive prompt.

* Menu:

* Example:: 


File: python.info,  Node: Example,  Up: readline --- GNU readline interface

5.6.7.1 Example
...............

The following example demonstrates how to use the *note readline: da.
module’s history reading and writing functions to automatically load and
save a history file named ‘.python_history’ from the user’s home
directory.  The code below would normally be executed automatically
during interactive sessions from the user’s *note PYTHONSTARTUP: 284.
file.

     import atexit
     import os
     import readline

     histfile = os.path.join(os.path.expanduser("~"), ".python_history")
     try:
         readline.read_history_file(histfile)
     except FileNotFoundError:
         pass

     atexit.register(readline.write_history_file, histfile)

This code is actually automatically run when Python is run in *note
interactive mode: 282. (see *note Readline configuration: 285.).

The following example extends the *note code.InteractiveConsole: 9a8.
class to support history save/restore.

     import atexit
     import code
     import os
     import readline

     class HistoryConsole(code.InteractiveConsole):
         def __init__(self, locals=None, filename="<console>",
                      histfile=os.path.expanduser("~/.console-history")):
             code.InteractiveConsole.__init__(self, locals, filename)
             self.init_history(histfile)

         def init_history(self, histfile):
             readline.parse_and_bind("tab: complete")
             if hasattr(readline, "read_history_file"):
                 try:
                     readline.read_history_file(histfile)
                 except FileNotFoundError:
                     pass
                 atexit.register(self.save_history, histfile)

         def save_history(self, histfile):
             readline.write_history_file(histfile)


File: python.info,  Node: rlcompleter --- Completion function for GNU readline,  Prev: readline --- GNU readline interface,  Up: Text Processing Services

5.6.8 ‘rlcompleter’ — Completion function for GNU readline
----------------------------------------------------------

`Source code:' Lib/rlcompleter.py(1)

__________________________________________________________________

The *note rlcompleter: dd. module defines a completion function suitable
for the *note readline: da. module by completing valid Python
identifiers and keywords.

When this module is imported on a Unix platform with the *note readline:
da. module available, an instance of the ‘Completer’ class is
automatically created and its ‘complete()’ method is set as the *note
readline: da. completer.

Example:

     >>> import rlcompleter
     >>> import readline
     >>> readline.parse_and_bind("tab: complete")
     >>> readline. <TAB PRESSED>
     readline.__doc__          readline.get_line_buffer(  readline.read_init_file(
     readline.__file__         readline.insert_text(      readline.set_completer(
     readline.__name__         readline.parse_and_bind(
     >>> readline.

The *note rlcompleter: dd. module is designed for use with Python’s
*note interactive mode: 282.  Unless Python is run with the *note -S:
53c. option, the module is automatically imported and configured (see
*note Readline configuration: 285.).

On platforms without *note readline: da, the ‘Completer’ class defined
by this module can still be used for custom purposes.

* Menu:

* Completer Objects:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/3.4/Lib/rlcompleter.py


File: python.info,  Node: Completer Objects,  Up: rlcompleter --- Completion function for GNU readline

5.6.8.1 Completer Objects
.........................

Completer objects have the following method:

 -- Method: Completer.complete (text, state)

     Return the `state'th completion for `text'.

     If called for `text' that doesn’t include a period character
     (‘'.'’), it will complete from names currently defined in *note
     __main__: 1, *note builtins: 13. and keywords (as defined by the
     *note keyword: a2. module).

     If called for a dotted name, it will try to evaluate anything
     without obvious side-effects (functions will not be evaluated, but
     it can generate calls to *note __getattr__(): 560.) up to the last
     part, and find matches for the rest via the *note dir(): 7a8.
     function.  Any exception raised during the evaluation of the
     expression is caught, silenced and *note None: 2c6. is returned.


File: python.info,  Node: Binary Data Services,  Next: Data Types,  Prev: Text Processing Services,  Up: The Python Standard Library

5.7 Binary Data Services
========================

The modules described in this chapter provide some basic services
operations for manipulation of binary data.  Other operations on binary
data, specifically in relation to file formats and network protocols,
are described in the relevant sections.

Some libraries described under *note Text Processing Services: de2. also
work with either ASCII-compatible binary formats (for example, *note re:
d9.) or all binary data (for example, *note difflib: 35.).

In addition, see the documentation for Python’s built-in binary data
types in *note Binary Sequence Types — bytes, bytearray, memoryview:
d8d.

* Menu:

* struct: struct --- Interpret bytes as packed binary data. Interpret bytes as packed binary data
* codecs: codecs --- Codec registry and base classes. Codec registry and base classes


File: python.info,  Node: struct --- Interpret bytes as packed binary data,  Next: codecs --- Codec registry and base classes,  Up: Binary Data Services

5.7.1 ‘struct’ — Interpret bytes as packed binary data
------------------------------------------------------

This module performs conversions between Python values and C structs
represented as Python *note bytes: 179. objects.  This can be used in
handling binary data stored in files or from network connections, among
other sources.  It uses *note Format Strings: fa4. as compact
descriptions of the layout of the C structs and the intended conversion
to/from Python values.

     Note: By default, the result of packing a given C struct includes
     pad bytes in order to maintain proper alignment for the C types
     involved; similarly, alignment is taken into account when
     unpacking.  This behavior is chosen so that the bytes of a packed
     struct correspond exactly to the layout in memory of the
     corresponding C struct.  To handle platform-independent data
     formats or omit implicit pad bytes, use ‘standard’ size and
     alignment instead of ‘native’ size and alignment: see *note Byte
     Order, Size, and Alignment: fa5. for details.

Several *note struct: f3. functions (and methods of *note Struct: fa6.)
take a `buffer' argument.  This refers to objects that implement the
*note Buffer Protocol: ddf. and provide either a readable or
read-writable buffer.  The most common types used for that purpose are
*note bytes: 179. and *note bytearray: 17a, but many other types that
can be viewed as an array of bytes implement the buffer protocol, so
that they can be read/filled without additional copying from a *note
bytes: 179. object.

* Menu:

* Functions and Exceptions:: 
* Format Strings:: 
* Classes: Classes<2>. 


File: python.info,  Node: Functions and Exceptions,  Next: Format Strings,  Up: struct --- Interpret bytes as packed binary data

5.7.1.1 Functions and Exceptions
................................

The module defines the following exception and functions:

 -- Exception: struct.error

     Exception raised on various occasions; argument is a string
     describing what is wrong.

 -- Function: struct.pack (fmt, v1, v2, ...)

     Return a bytes object containing the values `v1', `v2', ...  packed
     according to the format string `fmt'.  The arguments must match the
     values required by the format exactly.

 -- Function: struct.pack_into (fmt, buffer, offset, v1, v2, ...)

     Pack the values `v1', `v2', ...  according to the format string
     `fmt' and write the packed bytes into the writable buffer `buffer'
     starting at position `offset'.  Note that `offset' is a required
     argument.

 -- Function: struct.unpack (fmt, buffer)

     Unpack from the buffer `buffer' (presumably packed by ‘pack(fmt,
     ...)’) according to the format string `fmt'.  The result is a tuple
     even if it contains exactly one item.  The buffer must contain
     exactly the amount of data required by the format (‘len(bytes)’
     must equal ‘calcsize(fmt)’).

 -- Function: struct.unpack_from (fmt, buffer, offset=0)

     Unpack from `buffer' starting at position `offset', according to
     the format string `fmt'.  The result is a tuple even if it contains
     exactly one item.  `buffer' must contain at least the amount of
     data required by the format (‘len(buffer[offset:])’ must be at
     least ‘calcsize(fmt)’).

 -- Function: struct.iter_unpack (fmt, buffer)

     Iteratively unpack from the buffer `buffer' according to the format
     string `fmt'.  This function returns an iterator which will read
     equally-sized chunks from the buffer until all its contents have
     been consumed.  The buffer’s size in bytes must be a multiple of
     the amount of data required by the format, as reflected by *note
     calcsize(): faa.

     Each iteration yields a tuple as specified by the format string.

     New in version 3.4.

 -- Function: struct.calcsize (fmt)

     Return the size of the struct (and hence of the bytes object
     produced by ‘pack(fmt, ...)’) corresponding to the format string
     `fmt'.


File: python.info,  Node: Format Strings,  Next: Classes<2>,  Prev: Functions and Exceptions,  Up: struct --- Interpret bytes as packed binary data

5.7.1.2 Format Strings
......................

Format strings are the mechanism used to specify the expected layout
when packing and unpacking data.  They are built up from *note Format
Characters: fac, which specify the type of data being packed/unpacked.
In addition, there are special characters for controlling the *note Byte
Order, Size, and Alignment: fa5.

* Menu:

* Byte Order, Size, and Alignment: Byte Order Size and Alignment. 
* Format Characters:: 
* Examples: Examples<2>. 


File: python.info,  Node: Byte Order Size and Alignment,  Next: Format Characters,  Up: Format Strings

5.7.1.3 Byte Order, Size, and Alignment
.......................................

By default, C types are represented in the machine’s native format and
byte order, and properly aligned by skipping pad bytes if necessary
(according to the rules used by the C compiler).

Alternatively, the first character of the format string can be used to
indicate the byte order, size and alignment of the packed data,
according to the following table:

Character       Byte order                   Size           Alignment
                                                            
----------------------------------------------------------------------------
                                                            
‘@’             native                       native         native
                                                            
                                                            
‘=’             native                       standard       none
                                                            
                                                            
‘<’             little-endian                standard       none
                                                            
                                                            
‘>’             big-endian                   standard       none
                                                            
                                                            
‘!’             network (= big-endian)       standard       none
                                                            

If the first character is not one of these, ‘'@'’ is assumed.

Native byte order is big-endian or little-endian, depending on the host
system.  For example, Intel x86 and AMD64 (x86-64) are little-endian;
Motorola 68000 and PowerPC G5 are big-endian; ARM and Intel Itanium
feature switchable endianness (bi-endian).  Use ‘sys.byteorder’ to check
the endianness of your system.

Native size and alignment are determined using the C compiler’s ‘sizeof’
expression.  This is always combined with native byte order.

Standard size depends only on the format character; see the table in the
*note Format Characters: fac. section.

Note the difference between ‘'@'’ and ‘'='’: both use native byte order,
but the size and alignment of the latter is standardized.

The form ‘'!'’ is available for those poor souls who claim they can’t
remember whether network byte order is big-endian or little-endian.

There is no way to indicate non-native byte order (force byte-swapping);
use the appropriate choice of ‘'<'’ or ‘'>'’.

Notes:

  1. Padding is only automatically added between successive structure
     members.  No padding is added at the beginning or the end of the
     encoded struct.

  2. No padding is added when using non-native size and alignment, e.g.
     with ’<’, ’>’, ’=’, and ’!’.

  3. To align the end of a structure to the alignment requirement of a
     particular type, end the format with the code for that type with a
     repeat count of zero.  See *note Examples: fae.


File: python.info,  Node: Format Characters,  Next: Examples<2>,  Prev: Byte Order Size and Alignment,  Up: Format Strings

5.7.1.4 Format Characters
.........................

Format characters have the following meaning; the conversion between C
and Python values should be obvious given their types.  The ’Standard
size’ column refers to the size of the packed value in bytes when using
standard size; that is, when the format string starts with one of ‘'<'’,
‘'>'’, ‘'!'’ or ‘'='’.  When using native size, the size of the packed
value is platform-dependent.

Format       C Type                         Python type              Standard size        Notes
                                                                                          
-----------------------------------------------------------------------------------------------------------
                                                                                          
‘x’          pad byte                       no value
                                            
                                                                                          
‘c’          ‘char’                         bytes of length 1        1
                                                                     
                                                                                          
‘b’          ‘signed char’                  integer                  1                    (1),(3)
                                                                                          
                                                                                          
‘B’          ‘unsigned char’                integer                  1                    (3)
                                                                                          
                                                                                          
‘?’          ‘_Bool’                        bool                     1                    (1)
                                                                                          
                                                                                          
‘h’          ‘short’                        integer                  2                    (3)
                                                                                          
                                                                                          
‘H’          ‘unsigned short’               integer                  2                    (3)
                                                                                          
                                                                                          
‘i’          ‘int’                          integer                  4                    (3)
                                                                                          
                                                                                          
‘I’          ‘unsigned int’                 integer                  4                    (3)
                                                                                          
                                                                                          
‘l’          ‘long’                         integer                  4                    (3)
                                                                                          
                                                                                          
‘L’          ‘unsigned long’                integer                  4                    (3)
                                                                                          
                                                                                          
‘q’          ‘long long’                    integer                  8                    (2), (3)
                                                                                          
                                                                                          
‘Q’          ‘unsigned long long’           integer                  8                    (2), (3)
                                                                                          
                                                                                          
‘n’          ‘ssize_t’                      integer                                       (4)
                                                                                          
                                                                                          
‘N’          ‘size_t’                       integer                                       (4)
                                                                                          
                                                                                          
‘f’          ‘float’                        float                    4                    (5)
                                                                                          
                                                                                          
‘d’          ‘double’                       float                    8                    (5)
                                                                                          
                                                                                          
‘s’          ‘char[]’                       bytes
                                            
                                                                                          
‘p’          ‘char[]’                       bytes
                                            
                                                                                          
‘P’          ‘void *’                       integer                                       (6)
                                                                                          

Changed in version 3.3: Added support for the ‘'n'’ and ‘'N'’ formats.

Notes:

  1. The ‘'?'’ conversion code corresponds to the ‘_Bool’ type defined
     by C99.  If this type is not available, it is simulated using a
     ‘char’.  In standard mode, it is always represented by one byte.

  2. The ‘'q'’ and ‘'Q'’ conversion codes are available in native mode
     only if the platform C compiler supports C ‘long long’, or, on
     Windows, ‘__int64’.  They are always available in standard modes.

  3. When attempting to pack a non-integer using any of the integer
     conversion codes, if the non-integer has a *note __index__(): 6ca.
     method then that method is called to convert the argument to an
     integer before packing.

     Changed in version 3.2: Use of the *note __index__(): 6ca. method
     for non-integers is new in 3.2.

  4. The ‘'n'’ and ‘'N'’ conversion codes are only available for the
     native size (selected as the default or with the ‘'@'’ byte order
     character).  For the standard size, you can use whichever of the
     other integer formats fits your application.

  5. For the ‘'f'’ and ‘'d'’ conversion codes, the packed representation
     uses the IEEE 754 binary32 (for ‘'f'’) or binary64 (for ‘'d'’)
     format, regardless of the floating-point format used by the
     platform.

  6. The ‘'P'’ format character is only available for the native byte
     ordering (selected as the default or with the ‘'@'’ byte order
     character).  The byte order character ‘'='’ chooses to use little-
     or big-endian ordering based on the host system.  The struct module
     does not interpret this as native ordering, so the ‘'P'’ format is
     not available.

A format character may be preceded by an integral repeat count.  For
example, the format string ‘'4h'’ means exactly the same as ‘'hhhh'’.

Whitespace characters between formats are ignored; a count and its
format must not contain whitespace though.

For the ‘'s'’ format character, the count is interpreted as the length
of the bytes, not a repeat count like for the other format characters;
for example, ‘'10s'’ means a single 10-byte string, while ‘'10c'’ means
10 characters.  If a count is not given, it defaults to 1.  For packing,
the string is truncated or padded with null bytes as appropriate to make
it fit.  For unpacking, the resulting bytes object always has exactly
the specified number of bytes.  As a special case, ‘'0s'’ means a
single, empty string (while ‘'0c'’ means 0 characters).

When packing a value ‘x’ using one of the integer formats (‘'b'’, ‘'B'’,
‘'h'’, ‘'H'’, ‘'i'’, ‘'I'’, ‘'l'’, ‘'L'’, ‘'q'’, ‘'Q'’), if ‘x’ is
outside the valid range for that format then *note struct.error: 726. is
raised.

Changed in version 3.1: In 3.0, some of the integer formats wrapped
out-of-range values and raised *note DeprecationWarning: 2e1. instead of
*note struct.error: 726.

The ‘'p'’ format character encodes a "Pascal string", meaning a short
variable-length string stored in a `fixed number of bytes', given by the
count.  The first byte stored is the length of the string, or 255,
whichever is smaller.  The bytes of the string follow.  If the string
passed in to *note pack(): 65d. is too long (longer than the count minus
1), only the leading ‘count-1’ bytes of the string are stored.  If the
string is shorter than ‘count-1’, it is padded with null bytes so that
exactly count bytes in all are used.  Note that for *note unpack(): af0,
the ‘'p'’ format character consumes ‘count’ bytes, but that the string
returned can never contain more than 255 bytes.

For the ‘'?'’ format character, the return value is either *note True:
805. or *note False: 3c8.  When packing, the truth value of the argument
object is used.  Either 0 or 1 in the native or standard bool
representation will be packed, and any non-zero value will be ‘True’
when unpacking.


File: python.info,  Node: Examples<2>,  Prev: Format Characters,  Up: Format Strings

5.7.1.5 Examples
................

     Note: All examples assume a native byte order, size, and alignment
     with a big-endian machine.

A basic example of packing/unpacking three integers:

     >>> from struct import *
     >>> pack('hhl', 1, 2, 3)
     b'\x00\x01\x00\x02\x00\x00\x00\x03'
     >>> unpack('hhl', b'\x00\x01\x00\x02\x00\x00\x00\x03')
     (1, 2, 3)
     >>> calcsize('hhl')
     8

Unpacked fields can be named by assigning them to variables or by
wrapping the result in a named tuple:

     >>> record = b'raymond   \x32\x12\x08\x01\x08'
     >>> name, serialnum, school, gradelevel = unpack('<10sHHb', record)

     >>> from collections import namedtuple
     >>> Student = namedtuple('Student', 'name serialnum school gradelevel')
     >>> Student._make(unpack('<10sHHb', record))
     Student(name=b'raymond   ', serialnum=4658, school=264, gradelevel=8)

The ordering of format characters may have an impact on size since the
padding needed to satisfy alignment requirements is different:

     >>> pack('ci', b'*', 0x12131415)
     b'*\x00\x00\x00\x12\x13\x14\x15'
     >>> pack('ic', 0x12131415, b'*')
     b'\x12\x13\x14\x15*'
     >>> calcsize('ci')
     8
     >>> calcsize('ic')
     5

The following format ‘'llh0l'’ specifies two pad bytes at the end,
assuming longs are aligned on 4-byte boundaries:

     >>> pack('llh0l', 1, 2, 3)
     b'\x00\x00\x00\x01\x00\x00\x00\x02\x00\x03\x00\x00'

This only works when native size and alignment are in effect; standard
size and alignment does not enforce any alignment.

See also
........

Module *note array: 7.

     Packed binary storage of homogeneous data.

Module *note xdrlib: 12b.

     Packing and unpacking of XDR data.


File: python.info,  Node: Classes<2>,  Prev: Format Strings,  Up: struct --- Interpret bytes as packed binary data

5.7.1.6 Classes
...............

The *note struct: f3. module also defines the following type:

 -- Class: struct.Struct (format)

     Return a new Struct object which writes and reads binary data
     according to the format string `format'.  Creating a Struct object
     once and calling its methods is more efficient than calling the
     *note struct: f3. functions with the same format since the format
     string only needs to be compiled once.

     Compiled Struct objects support the following methods and
     attributes:

      -- Method: pack (v1, v2, ...)

          Identical to the *note pack(): 65d. function, using the
          compiled format.  (‘len(result)’ will equal ‘self.size’.)

      -- Method: pack_into (buffer, offset, v1, v2, ...)

          Identical to the *note pack_into(): fa8. function, using the
          compiled format.

      -- Method: unpack (buffer)

          Identical to the *note unpack(): af0. function, using the
          compiled format.  (‘len(buffer)’ must equal ‘self.size’).

      -- Method: unpack_from (buffer, offset=0)

          Identical to the *note unpack_from(): fa9. function, using the
          compiled format.  (‘len(buffer[offset:])’ must be at least
          ‘self.size’).

      -- Method: iter_unpack (buffer)

          Identical to the *note iter_unpack(): 276. function, using the
          compiled format.  (‘len(buffer)’ must be a multiple of
          ‘self.size’).

          New in version 3.4.

      -- Attribute: format

          The format string used to construct this Struct object.

      -- Attribute: size

          The calculated size of the struct (and hence of the bytes
          object produced by the *note pack(): 65d. method)
          corresponding to *note format: 556.


File: python.info,  Node: codecs --- Codec registry and base classes,  Prev: struct --- Interpret bytes as packed binary data,  Up: Binary Data Services

5.7.2 ‘codecs’ — Codec registry and base classes
------------------------------------------------

This module defines base classes for standard Python codecs (encoders
and decoders) and provides access to the internal Python codec registry,
which manages the codec and error handling lookup process.  Most
standard codecs are *note text encodings: da0, which encode text to
bytes, but there are also codecs provided that encode text to text, and
bytes to bytes.  Custom codecs may encode and decode between arbitrary
types, but some module features are restricted to use specifically with
*note text encodings: da0, or with codecs that encode to *note bytes:
179.

The module defines the following functions for encoding and decoding
with any codec:

 -- Function: codecs.encode (obj[, encoding[, errors]])

     Encodes `obj' using the codec registered for `encoding'.  The
     default encoding is ‘utf-8’.

     `Errors' may be given to set the desired error handling scheme.
     The default error handler is ‘'strict'’ meaning that encoding
     errors raise *note ValueError: 321. (or a more codec specific
     subclass, such as *note UnicodeEncodeError: 643.).  Refer to *note
     Codec Base Classes: fbb. for more information on codec error
     handling.

 -- Function: codecs.decode (obj[, encoding[, errors]])

     Decodes `obj' using the codec registered for `encoding'.  The
     default encoding is ‘utf-8’.

     `Errors' may be given to set the desired error handling scheme.
     The default error handler is ‘'strict'’ meaning that decoding
     errors raise *note ValueError: 321. (or a more codec specific
     subclass, such as *note UnicodeDecodeError: 31a.).  Refer to *note
     Codec Base Classes: fbb. for more information on codec error
     handling.

The full details for each codec can also be looked up directly:

 -- Function: codecs.lookup (encoding)

     Looks up the codec info in the Python codec registry and returns a
     *note CodecInfo: fbc. object as defined below.

     Encodings are first looked up in the registry’s cache.  If not
     found, the list of registered search functions is scanned.  If no
     *note CodecInfo: fbc. object is found, a *note LookupError: ea6. is
     raised.  Otherwise, the *note CodecInfo: fbc. object is stored in
     the cache and returned to the caller.

 -- Class: codecs.CodecInfo (encode, decode, streamreader=None,
          streamwriter=None, incrementalencoder=None,
          incrementaldecoder=None, name=None)

     Codec details when looking up the codec registry.  The constructor
     arguments are stored in attributes of the same name:

      -- Attribute: name

          The name of the encoding.

      -- Attribute: encode
      -- Attribute: decode

          The stateless encoding and decoding functions.  These must be
          functions or methods which have the same interface as the
          *note encode(): fc0. and *note decode(): fc1. methods of Codec
          instances (see *note Codec Interface: fc2.).  The functions or
          methods are expected to work in a stateless mode.

      -- Attribute: incrementalencoder
      -- Attribute: incrementaldecoder

          Incremental encoder and decoder classes or factory functions.
          These have to provide the interface defined by the base
          classes *note IncrementalEncoder: fc5. and *note
          IncrementalDecoder: fc6, respectively.  Incremental codecs can
          maintain state.

      -- Attribute: streamwriter
      -- Attribute: streamreader

          Stream writer and reader classes or factory functions.  These
          have to provide the interface defined by the base classes
          *note StreamWriter: fc9. and *note StreamReader: fca,
          respectively.  Stream codecs can maintain state.

To simplify access to the various codec components, the module provides
these additional functions which use *note lookup(): ea7. for the codec
lookup:

 -- Function: codecs.getencoder (encoding)

     Look up the codec for the given encoding and return its encoder
     function.

     Raises a *note LookupError: ea6. in case the encoding cannot be
     found.

 -- Function: codecs.getdecoder (encoding)

     Look up the codec for the given encoding and return its decoder
     function.

     Raises a *note LookupError: ea6. in case the encoding cannot be
     found.

 -- Function: codecs.getincrementalencoder (encoding)

     Look up the codec for the given encoding and return its incremental
     encoder class or factory function.

     Raises a *note LookupError: ea6. in case the encoding cannot be
     found or the codec doesn’t support an incremental encoder.

 -- Function: codecs.getincrementaldecoder (encoding)

     Look up the codec for the given encoding and return its incremental
     decoder class or factory function.

     Raises a *note LookupError: ea6. in case the encoding cannot be
     found or the codec doesn’t support an incremental decoder.

 -- Function: codecs.getreader (encoding)

     Look up the codec for the given encoding and return its
     StreamReader class or factory function.

     Raises a *note LookupError: ea6. in case the encoding cannot be
     found.

 -- Function: codecs.getwriter (encoding)

     Look up the codec for the given encoding and return its
     StreamWriter class or factory function.

     Raises a *note LookupError: ea6. in case the encoding cannot be
     found.

Custom codecs are made available by registering a suitable codec search
function:

 -- Function: codecs.register (search_function)

     Register a codec search function.  Search functions are expected to
     take one argument, being the encoding name in all lower case
     letters, and return a *note CodecInfo: fbc. object.  In case a
     search function cannot find a given encoding, it should return
     ‘None’.

          Note: Search function registration is not currently
          reversible, which may cause problems in some cases, such as
          unit testing or module reloading.

While the builtin *note open(): 1a2. and the associated *note io: 9e.
module are the recommended approach for working with encoded text files,
this module provides additional utility functions and classes that allow
the use of a wider range of codecs when working with binary files:

 -- Function: codecs.open (filename, mode='r', encoding=None,
          errors='strict', buffering=1)

     Open an encoded file using the given `mode' and return an instance
     of *note StreamReaderWriter: fd3, providing transparent
     encoding/decoding.  The default file mode is ‘'r'’, meaning to open
     the file in read mode.

          Note: Underlying encoded files are always opened in binary
          mode.  No automatic conversion of ‘'\n'’ is done on reading
          and writing.  The `mode' argument may be any binary mode
          acceptable to the built-in *note open(): 1a2. function; the
          ‘'b'’ is automatically added.

     `encoding' specifies the encoding which is to be used for the file.
     Any encoding that encodes to and decodes from bytes is allowed, and
     the data types supported by the file methods depend on the codec
     used.

     `errors' may be given to define the error handling.  It defaults to
     ‘'strict'’ which causes a *note ValueError: 321. to be raised in
     case an encoding error occurs.

     `buffering' has the same meaning as for the built-in *note open():
     1a2. function.  It defaults to line buffered.

 -- Function: codecs.EncodedFile (file, data_encoding,
          file_encoding=None, errors='strict')

     Return a *note StreamRecoder: fd5. instance, a wrapped version of
     `file' which provides transparent transcoding.  The original file
     is closed when the wrapped version is closed.

     Data written to the wrapped file is decoded according to the given
     `data_encoding' and then written to the original file as bytes
     using `file_encoding'.  Bytes read from the original file are
     decoded according to `file_encoding', and the result is encoded
     using `data_encoding'.

     If `file_encoding' is not given, it defaults to `data_encoding'.

     `errors' may be given to define the error handling.  It defaults to
     ‘'strict'’, which causes *note ValueError: 321. to be raised in
     case an encoding error occurs.

 -- Function: codecs.iterencode (iterator, encoding, errors='strict',
          **kwargs)

     Uses an incremental encoder to iteratively encode the input
     provided by `iterator'.  This function is a *note generator: 374.
     The `errors' argument (as well as any other keyword argument) is
     passed through to the incremental encoder.

 -- Function: codecs.iterdecode (iterator, encoding, errors='strict',
          **kwargs)

     Uses an incremental decoder to iteratively decode the input
     provided by `iterator'.  This function is a *note generator: 374.
     The `errors' argument (as well as any other keyword argument) is
     passed through to the incremental decoder.

The module also provides the following constants which are useful for
reading and writing to platform dependent files:

 -- Data: codecs.BOM
 -- Data: codecs.BOM_BE
 -- Data: codecs.BOM_LE
 -- Data: codecs.BOM_UTF8
 -- Data: codecs.BOM_UTF16
 -- Data: codecs.BOM_UTF16_BE
 -- Data: codecs.BOM_UTF16_LE
 -- Data: codecs.BOM_UTF32
 -- Data: codecs.BOM_UTF32_BE
 -- Data: codecs.BOM_UTF32_LE

     These constants define various byte sequences, being Unicode byte
     order marks (BOMs) for several encodings.  They are used in UTF-16
     and UTF-32 data streams to indicate the byte order used, and in
     UTF-8 as a Unicode signature.  *note BOM_UTF16: fdc. is either
     *note BOM_UTF16_BE: fdd. or *note BOM_UTF16_LE: fde. depending on
     the platform’s native byte order, *note BOM: fd8. is an alias for
     *note BOM_UTF16: fdc, *note BOM_LE: fda. for *note BOM_UTF16_LE:
     fde. and *note BOM_BE: fd9. for *note BOM_UTF16_BE: fdd.  The
     others represent the BOM in UTF-8 and UTF-32 encodings.

* Menu:

* Codec Base Classes:: 
* Encodings and Unicode:: 
* Standard Encodings:: 
* Python Specific Encodings:: 
* encodings.idna: encodings idna --- Internationalized Domain Names in Applications. Internationalized Domain Names in Applications
* encodings.mbcs: encodings mbcs --- Windows ANSI codepage. Windows ANSI codepage
* encodings.utf_8_sig: encodings utf_8_sig --- UTF-8 codec with BOM signature. UTF-8 codec with BOM signature


File: python.info,  Node: Codec Base Classes,  Next: Encodings and Unicode,  Up: codecs --- Codec registry and base classes

5.7.2.1 Codec Base Classes
..........................

The *note codecs: 1c. module defines a set of base classes which define
the interfaces for working with codec objects, and can also be used as
the basis for custom codec implementations.

Each codec has to define four interfaces to make it usable as codec in
Python: stateless encoder, stateless decoder, stream reader and stream
writer.  The stream reader and writers typically reuse the stateless
encoder/decoder to implement the file protocols.  Codec authors also
need to define how the codec will handle encoding and decoding errors.

* Menu:

* Error Handlers:: 
* Stateless Encoding and Decoding:: 
* Incremental Encoding and Decoding:: 
* Stream Encoding and Decoding:: 


File: python.info,  Node: Error Handlers,  Next: Stateless Encoding and Decoding,  Up: Codec Base Classes

5.7.2.2 Error Handlers
......................

To simplify and standardize error handling, codecs may implement
different error handling schemes by accepting the `errors' string
argument.  The following string values are defined and implemented by
all standard Python codecs:

Value                         Meaning
                              
----------------------------------------------------------------------------------
                              
‘'strict'’                    Raise *note UnicodeError: 696. (or a subclass);
                              this is the default.  Implemented in *note
                              strict_errors(): fe4.
                              
                              
‘'ignore'’                    Ignore the malformed data and continue without
                              further notice.  Implemented in *note
                              ignore_errors(): fe5.
                              

The following error handlers are only applicable to *note text
encodings: da0.:

Value                         Meaning
                              
----------------------------------------------------------------------------------
                              
‘'replace'’                   Replace with a suitable replacement marker;
                              Python will use the official ‘U+FFFD’ REPLACEMENT
                              CHARACTER for the built-in codecs on decoding,
                              and ’?’ on encoding.  Implemented in *note
                              replace_errors(): fe6.
                              
                              
‘'xmlcharrefreplace'’         Replace with the appropriate XML character
                              reference (only for encoding).  Implemented in
                              *note xmlcharrefreplace_errors(): fe7.
                              
                              
‘'backslashreplace'’          Replace with backslashed escape sequences (only
                              for encoding).  Implemented in *note
                              backslashreplace_errors(): fe8.
                              
                              
‘'surrogateescape'’           On decoding, replace byte with individual
                              surrogate code ranging from ‘U+DC80’ to ‘U+DCFF’.
                              This code will then be turned back into the same
                              byte when the ‘'surrogateescape'’ error handler
                              is used when encoding the data.  (See PEP 383(1)
                              for more.)
                              

In addition, the following error handler is specific to the given
codecs:

Value                   Codecs                       Meaning
                                                     
-----------------------------------------------------------------------------------------------------
                                                     
‘'surrogatepass'’       utf-8, utf-16, utf-32,       Allow encoding and decoding of surrogate
                        utf-16-be, utf-16-le,        codes.  These codecs normally treat the
                        utf-32-be, utf-32-le         presence of surrogates as an error.
                                                     

New in version 3.1: The ‘'surrogateescape'’ and ‘'surrogatepass'’ error
handlers.

Changed in version 3.4: The ‘'surrogatepass'’ error handlers now works
with utf-16* and utf-32* codecs.

The set of allowed values can be extended by registering a new named
error handler:

 -- Function: codecs.register_error (name, error_handler)

     Register the error handling function `error_handler' under the name
     `name'.  The `error_handler' argument will be called during
     encoding and decoding in case of an error, when `name' is specified
     as the errors parameter.

     For encoding, `error_handler' will be called with a *note
     UnicodeEncodeError: 643. instance, which contains information about
     the location of the error.  The error handler must either raise
     this or a different exception, or return a tuple with a replacement
     for the unencodable part of the input and a position where encoding
     should continue.  The replacement may be either *note str: 178. or
     *note bytes: 179.  If the replacement is bytes, the encoder will
     simply copy them into the output buffer.  If the replacement is a
     string, the encoder will encode the replacement.  Encoding
     continues on original input at the specified position.  Negative
     position values will be treated as being relative to the end of the
     input string.  If the resulting position is out of bound an *note
     IndexError: 908. will be raised.

     Decoding and translating works similarly, except *note
     UnicodeDecodeError: 31a. or *note UnicodeTranslateError: eb4. will
     be passed to the handler and that the replacement from the error
     handler will be put into the output directly.

Previously registered error handlers (including the standard error
handlers) can be looked up by name:

 -- Function: codecs.lookup_error (name)

     Return the error handler previously registered under the name
     `name'.

     Raises a *note LookupError: ea6. in case the handler cannot be
     found.

The following standard error handlers are also made available as module
level functions:

 -- Function: codecs.strict_errors (exception)

     Implements the ‘'strict'’ error handling: each encoding or decoding
     error raises a *note UnicodeError: 696.

 -- Function: codecs.replace_errors (exception)

     Implements the ‘'replace'’ error handling (for *note text
     encodings: da0. only): substitutes ‘'?'’ for encoding errors (to be
     encoded by the codec), and ‘'\ufffd'’ (the Unicode replacement
     character, ‘'�'’) for decoding errors.

 -- Function: codecs.ignore_errors (exception)

     Implements the ‘'ignore'’ error handling: malformed data is ignored
     and encoding or decoding is continued without further notice.

 -- Function: codecs.xmlcharrefreplace_errors (exception)

     Implements the ‘'xmlcharrefreplace'’ error handling (for encoding
     with *note text encodings: da0. only): the unencodable character is
     replaced by an appropriate XML character reference.

 -- Function: codecs.backslashreplace_errors (exception)

     Implements the ‘'backslashreplace'’ error handling (for encoding
     with *note text encodings: da0. only): the unencodable character is
     replaced by a backslashed escape sequence.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0383


File: python.info,  Node: Stateless Encoding and Decoding,  Next: Incremental Encoding and Decoding,  Prev: Error Handlers,  Up: Codec Base Classes

5.7.2.3 Stateless Encoding and Decoding
.......................................

The base ‘Codec’ class defines these methods which also define the
function interfaces of the stateless encoder and decoder:

 -- Method: Codec.encode (input[, errors])

     Encodes the object `input' and returns a tuple (output object,
     length consumed).  For instance, *note text encoding: da0. converts
     a string object to a bytes object using a particular character set
     encoding (e.g., ‘cp1252’ or ‘iso-8859-1’).

     The `errors' argument defines the error handling to apply.  It
     defaults to ‘'strict'’ handling.

     The method may not store state in the ‘Codec’ instance.  Use
     ‘StreamCodec’ for codecs which have to keep state in order to make
     encoding/decoding efficient.

     The encoder must be able to handle zero length input and return an
     empty object of the output object type in this situation.

 -- Method: Codec.decode (input[, errors])

     Decodes the object `input' and returns a tuple (output object,
     length consumed).  For instance, for a *note text encoding: da0,
     decoding converts a bytes object encoded using a particular
     character set encoding to a string object.

     For text encodings and bytes-to-bytes codecs, `input' must be a
     bytes object or one which provides the read-only buffer interface –
     for example, buffer objects and memory mapped files.

     The `errors' argument defines the error handling to apply.  It
     defaults to ‘'strict'’ handling.

     The method may not store state in the ‘Codec’ instance.  Use
     ‘StreamCodec’ for codecs which have to keep state in order to make
     encoding/decoding efficient.

     The decoder must be able to handle zero length input and return an
     empty object of the output object type in this situation.


File: python.info,  Node: Incremental Encoding and Decoding,  Next: Stream Encoding and Decoding,  Prev: Stateless Encoding and Decoding,  Up: Codec Base Classes

5.7.2.4 Incremental Encoding and Decoding
.........................................

The *note IncrementalEncoder: fc5. and *note IncrementalDecoder: fc6.
classes provide the basic interface for incremental encoding and
decoding.  Encoding/decoding the input isn’t done with one call to the
stateless encoder/decoder function, but with multiple calls to the *note
encode(): feb./*note decode(): fec. method of the incremental
encoder/decoder.  The incremental encoder/decoder keeps track of the
encoding/decoding process during method calls.

The joined output of calls to the *note encode(): feb./*note decode():
fec. method is the same as if all the single inputs were joined into
one, and this input was encoded/decoded with the stateless
encoder/decoder.

* Menu:

* IncrementalEncoder Objects:: 
* IncrementalDecoder Objects:: 


File: python.info,  Node: IncrementalEncoder Objects,  Next: IncrementalDecoder Objects,  Up: Incremental Encoding and Decoding

5.7.2.5 IncrementalEncoder Objects
..................................

The *note IncrementalEncoder: fc5. class is used for encoding an input
in multiple steps.  It defines the following methods which every
incremental encoder must define in order to be compatible with the
Python codec registry.

 -- Class: codecs.IncrementalEncoder (errors='strict')

     Constructor for an *note IncrementalEncoder: fc5. instance.

     All incremental encoders must provide this constructor interface.
     They are free to add additional keyword arguments, but only the
     ones defined here are used by the Python codec registry.

     The *note IncrementalEncoder: fc5. may implement different error
     handling schemes by providing the `errors' keyword argument.  See
     *note Error Handlers: da1. for possible values.

     The `errors' argument will be assigned to an attribute of the same
     name.  Assigning to this attribute makes it possible to switch
     between different error handling strategies during the lifetime of
     the *note IncrementalEncoder: fc5. object.

      -- Method: encode (object[, final])

          Encodes `object' (taking the current state of the encoder into
          account) and returns the resulting encoded object.  If this is
          the last call to *note encode(): 17b. `final' must be true
          (the default is false).

      -- Method: reset ()

          Reset the encoder to the initial state.  The output is
          discarded: call ‘.encode(object, final=True)’, passing an
          empty byte or text string if necessary, to reset the encoder
          and to get the output.

 -- Method: IncrementalEncoder.getstate ()

     Return the current state of the encoder which must be an integer.
     The implementation should make sure that ‘0’ is the most common
     state.  (States that are more complicated than integers can be
     converted into an integer by marshaling/pickling the state and
     encoding the bytes of the resulting string into an integer).

 -- Method: IncrementalEncoder.setstate (state)

     Set the state of the encoder to `state'.  `state' must be an
     encoder state returned by *note getstate(): ff0.


File: python.info,  Node: IncrementalDecoder Objects,  Prev: IncrementalEncoder Objects,  Up: Incremental Encoding and Decoding

5.7.2.6 IncrementalDecoder Objects
..................................

The *note IncrementalDecoder: fc6. class is used for decoding an input
in multiple steps.  It defines the following methods which every
incremental decoder must define in order to be compatible with the
Python codec registry.

 -- Class: codecs.IncrementalDecoder (errors='strict')

     Constructor for an *note IncrementalDecoder: fc6. instance.

     All incremental decoders must provide this constructor interface.
     They are free to add additional keyword arguments, but only the
     ones defined here are used by the Python codec registry.

     The *note IncrementalDecoder: fc6. may implement different error
     handling schemes by providing the `errors' keyword argument.  See
     *note Error Handlers: da1. for possible values.

     The `errors' argument will be assigned to an attribute of the same
     name.  Assigning to this attribute makes it possible to switch
     between different error handling strategies during the lifetime of
     the *note IncrementalDecoder: fc6. object.

      -- Method: decode (object[, final])

          Decodes `object' (taking the current state of the decoder into
          account) and returns the resulting decoded object.  If this is
          the last call to *note decode(): 17c. `final' must be true
          (the default is false).  If `final' is true the decoder must
          decode the input completely and must flush all buffers.  If
          this isn’t possible (e.g.  because of incomplete byte
          sequences at the end of the input) it must initiate error
          handling just like in the stateless case (which might raise an
          exception).

      -- Method: reset ()

          Reset the decoder to the initial state.

      -- Method: getstate ()

          Return the current state of the decoder.  This must be a tuple
          with two items, the first must be the buffer containing the
          still undecoded input.  The second must be an integer and can
          be additional state info.  (The implementation should make
          sure that ‘0’ is the most common additional state info.)  If
          this additional state info is ‘0’ it must be possible to set
          the decoder to the state which has no input buffered and ‘0’
          as the additional state info, so that feeding the previously
          buffered input to the decoder returns it to the previous state
          without producing any output.  (Additional state info that is
          more complicated than integers can be converted into an
          integer by marshaling/pickling the info and encoding the bytes
          of the resulting string into an integer.)

      -- Method: setstate (state)

          Set the state of the encoder to `state'.  `state' must be a
          decoder state returned by *note getstate(): ff5.


File: python.info,  Node: Stream Encoding and Decoding,  Prev: Incremental Encoding and Decoding,  Up: Codec Base Classes

5.7.2.7 Stream Encoding and Decoding
....................................

The *note StreamWriter: fc9. and *note StreamReader: fca. classes
provide generic working interfaces which can be used to implement new
encoding submodules very easily.  See ‘encodings.utf_8’ for an example
of how this is done.

* Menu:

* StreamWriter Objects:: 
* StreamReader Objects:: 
* StreamReaderWriter Objects:: 
* StreamRecoder Objects:: 


File: python.info,  Node: StreamWriter Objects,  Next: StreamReader Objects,  Up: Stream Encoding and Decoding

5.7.2.8 StreamWriter Objects
............................

The *note StreamWriter: fc9. class is a subclass of ‘Codec’ and defines
the following methods which every stream writer must define in order to
be compatible with the Python codec registry.

 -- Class: codecs.StreamWriter (stream, errors='strict')

     Constructor for a *note StreamWriter: fc9. instance.

     All stream writers must provide this constructor interface.  They
     are free to add additional keyword arguments, but only the ones
     defined here are used by the Python codec registry.

     The `stream' argument must be a file-like object open for writing
     text or binary data, as appropriate for the specific codec.

     The *note StreamWriter: fc9. may implement different error handling
     schemes by providing the `errors' keyword argument.  See *note
     Error Handlers: da1. for the standard error handlers the underlying
     stream codec may support.

     The `errors' argument will be assigned to an attribute of the same
     name.  Assigning to this attribute makes it possible to switch
     between different error handling strategies during the lifetime of
     the *note StreamWriter: fc9. object.

      -- Method: write (object)

          Writes the object’s contents encoded to the stream.

      -- Method: writelines (list)

          Writes the concatenated list of strings to the stream
          (possibly by reusing the *note write(): ffa. method).  The
          standard bytes-to-bytes codecs do not support this method.

      -- Method: reset ()

          Flushes and resets the codec buffers used for keeping state.

          Calling this method should ensure that the data on the output
          is put into a clean state that allows appending of new fresh
          data without having to rescan the whole stream to recover
          state.

In addition to the above methods, the *note StreamWriter: fc9. must also
inherit all other methods and attributes from the underlying stream.


File: python.info,  Node: StreamReader Objects,  Next: StreamReaderWriter Objects,  Prev: StreamWriter Objects,  Up: Stream Encoding and Decoding

5.7.2.9 StreamReader Objects
............................

The *note StreamReader: fca. class is a subclass of ‘Codec’ and defines
the following methods which every stream reader must define in order to
be compatible with the Python codec registry.

 -- Class: codecs.StreamReader (stream, errors='strict')

     Constructor for a *note StreamReader: fca. instance.

     All stream readers must provide this constructor interface.  They
     are free to add additional keyword arguments, but only the ones
     defined here are used by the Python codec registry.

     The `stream' argument must be a file-like object open for reading
     text or binary data, as appropriate for the specific codec.

     The *note StreamReader: fca. may implement different error handling
     schemes by providing the `errors' keyword argument.  See *note
     Error Handlers: da1. for the standard error handlers the underlying
     stream codec may support.

     The `errors' argument will be assigned to an attribute of the same
     name.  Assigning to this attribute makes it possible to switch
     between different error handling strategies during the lifetime of
     the *note StreamReader: fca. object.

     The set of allowed values for the `errors' argument can be extended
     with *note register_error(): 87c.

      -- Method: read ([size[, chars[, firstline]]])

          Decodes data from the stream and returns the resulting object.

          The `chars' argument indicates the number of decoded code
          points or bytes to return.  The *note read(): fff. method will
          never return more data than requested, but it might return
          less, if there is not enough available.

          The `size' argument indicates the approximate maximum number
          of encoded bytes or code points to read for decoding.  The
          decoder can modify this setting as appropriate.  The default
          value -1 indicates to read and decode as much as possible.
          This parameter is intended to prevent having to decode huge
          files in one step.

          The `firstline' flag indicates that it would be sufficient to
          only return the first line, if there are decoding errors on
          later lines.

          The method should use a greedy read strategy meaning that it
          should read as much data as is allowed within the definition
          of the encoding and the given size, e.g.  if optional encoding
          endings or state markers are available on the stream, these
          should be read too.

      -- Method: readline ([size[, keepends]])

          Read one line from the input stream and return the decoded
          data.

          `size', if given, is passed as size argument to the stream’s
          *note read(): fff. method.

          If `keepends' is false line-endings will be stripped from the
          lines returned.

      -- Method: readlines ([sizehint[, keepends]])

          Read all lines available on the input stream and return them
          as a list of lines.

          Line-endings are implemented using the codec’s decoder method
          and are included in the list entries if `keepends' is true.

          `sizehint', if given, is passed as the `size' argument to the
          stream’s *note read(): fff. method.

      -- Method: reset ()

          Resets the codec buffers used for keeping state.

          Note that no stream repositioning should take place.  This
          method is primarily intended to be able to recover from
          decoding errors.

In addition to the above methods, the *note StreamReader: fca. must also
inherit all other methods and attributes from the underlying stream.


File: python.info,  Node: StreamReaderWriter Objects,  Next: StreamRecoder Objects,  Prev: StreamReader Objects,  Up: Stream Encoding and Decoding

5.7.2.10 StreamReaderWriter Objects
...................................

The *note StreamReaderWriter: fd3. is a convenience class that allows
wrapping streams which work in both read and write modes.

The design is such that one can use the factory functions returned by
the *note lookup(): ea7. function to construct the instance.

 -- Class: codecs.StreamReaderWriter (stream, Reader, Writer, errors)

     Creates a *note StreamReaderWriter: fd3. instance.  `stream' must
     be a file-like object.  `Reader' and `Writer' must be factory
     functions or classes providing the *note StreamReader: fca. and
     *note StreamWriter: fc9. interface resp.  Error handling is done in
     the same way as defined for the stream readers and writers.

*note StreamReaderWriter: fd3. instances define the combined interfaces
of *note StreamReader: fca. and *note StreamWriter: fc9. classes.  They
inherit all other methods and attributes from the underlying stream.


File: python.info,  Node: StreamRecoder Objects,  Prev: StreamReaderWriter Objects,  Up: Stream Encoding and Decoding

5.7.2.11 StreamRecoder Objects
..............................

The *note StreamRecoder: fd5. translates data from one encoding to
another, which is sometimes useful when dealing with different encoding
environments.

The design is such that one can use the factory functions returned by
the *note lookup(): ea7. function to construct the instance.

 -- Class: codecs.StreamRecoder (stream, encode, decode, Reader, Writer,
          errors)

     Creates a *note StreamRecoder: fd5. instance which implements a
     two-way conversion: `encode' and `decode' work on the frontend —
     the data visible to code calling ‘read()’ and ‘write()’, while
     `Reader' and `Writer' work on the backend — the data in `stream'.

     You can use these objects to do transparent transcodings from e.g.
     Latin-1 to UTF-8 and back.

     The `stream' argument must be a file-like object.

     The `encode' and `decode' arguments must adhere to the ‘Codec’
     interface.  `Reader' and `Writer' must be factory functions or
     classes providing objects of the *note StreamReader: fca. and *note
     StreamWriter: fc9. interface respectively.

     Error handling is done in the same way as defined for the stream
     readers and writers.

*note StreamRecoder: fd5. instances define the combined interfaces of
*note StreamReader: fca. and *note StreamWriter: fc9. classes.  They
inherit all other methods and attributes from the underlying stream.


File: python.info,  Node: Encodings and Unicode,  Next: Standard Encodings,  Prev: Codec Base Classes,  Up: codecs --- Codec registry and base classes

5.7.2.12 Encodings and Unicode
..............................

Strings are stored internally as sequences of code points in range
‘0x0’-‘0x10FFFF’.  (See PEP 393(1) for more details about the
implementation.)  Once a string object is used outside of CPU and
memory, endianness and how these arrays are stored as bytes become an
issue.  As with other codecs, serialising a string into a sequence of
bytes is known as `encoding', and recreating the string from the
sequence of bytes is known as `decoding'.  There are a variety of
different text serialisation codecs, which are collectivity referred to
as *note text encodings: da0.

The simplest text encoding (called ‘'latin-1'’ or ‘'iso-8859-1'’) maps
the code points 0-255 to the bytes ‘0x0’-‘0xff’, which means that a
string object that contains code points above ‘U+00FF’ can’t be encoded
with this codec.  Doing so will raise a *note UnicodeEncodeError: 643.
that looks like the following (although the details of the error message
may differ): ‘UnicodeEncodeError: 'latin-1' codec can't encode character
'\u1234' in position 3: ordinal not in range(256)’.

There’s another group of encodings (the so called charmap encodings)
that choose a different subset of all Unicode code points and how these
code points are mapped to the bytes ‘0x0’-‘0xff’.  To see how this is
done simply open e.g.  ‘encodings/cp1252.py’ (which is an encoding that
is used primarily on Windows).  There’s a string constant with 256
characters that shows you which character is mapped to which byte value.

All of these encodings can only encode 256 of the 1114112 code points
defined in Unicode.  A simple and straightforward way that can store
each Unicode code point, is to store each code point as four consecutive
bytes.  There are two possibilities: store the bytes in big endian or in
little endian order.  These two encodings are called ‘UTF-32-BE’ and
‘UTF-32-LE’ respectively.  Their disadvantage is that if e.g.  you use
‘UTF-32-BE’ on a little endian machine you will always have to swap
bytes on encoding and decoding.  ‘UTF-32’ avoids this problem: bytes
will always be in natural endianness.  When these bytes are read by a
CPU with a different endianness, then bytes have to be swapped though.
To be able to detect the endianness of a ‘UTF-16’ or ‘UTF-32’ byte
sequence, there’s the so called BOM ("Byte Order Mark").  This is the
Unicode character ‘U+FEFF’.  This character can be prepended to every
‘UTF-16’ or ‘UTF-32’ byte sequence.  The byte swapped version of this
character (‘0xFFFE’) is an illegal character that may not appear in a
Unicode text.  So when the first character in an ‘UTF-16’ or ‘UTF-32’
byte sequence appears to be a ‘U+FFFE’ the bytes have to be swapped on
decoding.  Unfortunately the character ‘U+FEFF’ had a second purpose as
a ‘ZERO WIDTH NO-BREAK SPACE’: a character that has no width and doesn’t
allow a word to be split.  It can e.g.  be used to give hints to a
ligature algorithm.  With Unicode 4.0 using ‘U+FEFF’ as a ‘ZERO WIDTH
NO-BREAK SPACE’ has been deprecated (with ‘U+2060’ (‘WORD JOINER’)
assuming this role).  Nevertheless Unicode software still must be able
to handle ‘U+FEFF’ in both roles: as a BOM it’s a device to determine
the storage layout of the encoded bytes, and vanishes once the byte
sequence has been decoded into a string; as a ‘ZERO WIDTH NO-BREAK
SPACE’ it’s a normal character that will be decoded like any other.

There’s another encoding that is able to encoding the full range of
Unicode characters: UTF-8.  UTF-8 is an 8-bit encoding, which means
there are no issues with byte order in UTF-8.  Each byte in a UTF-8 byte
sequence consists of two parts: marker bits (the most significant bits)
and payload bits.  The marker bits are a sequence of zero to four ‘1’
bits followed by a ‘0’ bit.  Unicode characters are encoded like this
(with x being payload bits, which when concatenated give the Unicode
character):

Range                                   Encoding
                                        
-------------------------------------------------------------------------------------------
                                        
‘U-00000000’ ...  ‘U-0000007F’          0xxxxxxx
                                        
                                        
‘U-00000080’ ...  ‘U-000007FF’          110xxxxx 10xxxxxx
                                        
                                        
‘U-00000800’ ...  ‘U-0000FFFF’          1110xxxx 10xxxxxx 10xxxxxx
                                        
                                        
‘U-00010000’ ...  ‘U-0010FFFF’          11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
                                        

The least significant bit of the Unicode character is the rightmost x
bit.

As UTF-8 is an 8-bit encoding no BOM is required and any ‘U+FEFF’
character in the decoded string (even if it’s the first character) is
treated as a ‘ZERO WIDTH NO-BREAK SPACE’.

Without external information it’s impossible to reliably determine which
encoding was used for encoding a string.  Each charmap encoding can
decode any random byte sequence.  However that’s not possible with
UTF-8, as UTF-8 byte sequences have a structure that doesn’t allow
arbitrary byte sequences.  To increase the reliability with which a
UTF-8 encoding can be detected, Microsoft invented a variant of UTF-8
(that Python 2.5 calls ‘"utf-8-sig"’) for its Notepad program: Before
any of the Unicode characters is written to the file, a UTF-8 encoded
BOM (which looks like this as a byte sequence: ‘0xef’, ‘0xbb’, ‘0xbf’)
is written.  As it’s rather improbable that any charmap encoded file
starts with these byte values (which would e.g.  map to

          LATIN SMALL LETTER I WITH DIAERESIS 
          RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK 
          INVERTED QUESTION MARK 

in iso-8859-1), this increases the probability that a ‘utf-8-sig’
encoding can be correctly guessed from the byte sequence.  So here the
BOM is not used to be able to determine the byte order used for
generating the byte sequence, but as a signature that helps in guessing
the encoding.  On encoding the utf-8-sig codec will write ‘0xef’,
‘0xbb’, ‘0xbf’ as the first three bytes to the file.  On decoding
‘utf-8-sig’ will skip those three bytes if they appear as the first
three bytes in the file.  In UTF-8, the use of the BOM is discouraged
and should generally be avoided.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0393


File: python.info,  Node: Standard Encodings,  Next: Python Specific Encodings,  Prev: Encodings and Unicode,  Up: codecs --- Codec registry and base classes

5.7.2.13 Standard Encodings
...........................

Python comes with a number of codecs built-in, either implemented as C
functions or with dictionaries as mapping tables.  The following table
lists the codecs by name, together with a few common aliases, and the
languages for which the encoding is likely used.  Neither the list of
aliases nor the list of languages is meant to be exhaustive.  Notice
that spelling alternatives that only differ in case or use a hyphen
instead of an underscore are also valid aliases; therefore, e.g.
‘'utf-8'’ is a valid alias for the ‘'utf_8'’ codec.

`CPython implementation detail:' Some common encodings can bypass the
codecs lookup machinery to improve performance.  These optimization
opportunities are only recognized by CPython for a limited set of
aliases: utf-8, utf8, latin-1, latin1, iso-8859-1, mbcs (Windows only),
ascii, utf-16, and utf-32.  Using alternative spellings for these
encodings may result in slower execution.

Many of the character sets support the same languages.  They vary in
individual characters (e.g.  whether the EURO SIGN is supported or not),
and in the assignment of characters to code positions.  For the European
languages in particular, the following variants typically exist:

   * an ISO 8859 codeset

   * a Microsoft Windows code page, which is typically derived from a
     8859 codeset, but replaces control characters with additional
     graphic characters

   * an IBM EBCDIC code page

   * an IBM PC code page, which is ASCII compatible

Codec                 Aliases                              Languages
                                                           
------------------------------------------------------------------------------------------------
                                                           
ascii                 646, us-ascii                        English
                                                           
                                                           
big5                  big5-tw, csbig5                      Traditional Chinese
                                                           
                                                           
big5hkscs             big5-hkscs, hkscs                    Traditional Chinese
                                                           
                                                           
cp037                 IBM037, IBM039                       English
                                                           
                                                           
cp273                 273, IBM273, csIBM273                German
                                                           
                                                           New in version 3.4.
                                                           
                                                           
cp424                 EBCDIC-CP-HE, IBM424                 Hebrew
                                                           
                                                           
cp437                 437, IBM437                          English
                                                           
                                                           
cp500                 EBCDIC-CP-BE, EBCDIC-CP-CH, IBM500   Western Europe
                                                           
                                                           
cp720                                                      Arabic
                                                           
                                                           
cp737                                                      Greek
                                                           
                                                           
cp775                 IBM775                               Baltic languages
                                                           
                                                           
cp850                 850, IBM850                          Western Europe
                                                           
                                                           
cp852                 852, IBM852                          Central and Eastern Europe
                                                           
                                                           
cp855                 855, IBM855                          Bulgarian, Byelorussian,
                                                           Macedonian, Russian, Serbian
                                                           
                                                           
cp856                                                      Hebrew
                                                           
                                                           
cp857                 857, IBM857                          Turkish
                                                           
                                                           
cp858                 858, IBM858                          Western Europe
                                                           
                                                           
cp860                 860, IBM860                          Portuguese
                                                           
                                                           
cp861                 861, CP-IS, IBM861                   Icelandic
                                                           
                                                           
cp862                 862, IBM862                          Hebrew
                                                           
                                                           
cp863                 863, IBM863                          Canadian
                                                           
                                                           
cp864                 IBM864                               Arabic
                                                           
                                                           
cp865                 865, IBM865                          Danish, Norwegian
                                                           
                                                           
cp866                 866, IBM866                          Russian
                                                           
                                                           
cp869                 869, CP-GR, IBM869                   Greek
                                                           
                                                           
cp874                                                      Thai
                                                           
                                                           
cp875                                                      Greek
                                                           
                                                           
cp932                 932, ms932, mskanji, ms-kanji        Japanese
                                                           
                                                           
cp949                 949, ms949, uhc                      Korean
                                                           
                                                           
cp950                 950, ms950                           Traditional Chinese
                                                           
                                                           
cp1006                                                     Urdu
                                                           
                                                           
cp1026                ibm1026                              Turkish
                                                           
                                                           
cp1125                1125, ibm1125, cp866u, ruscii        Ukrainian
                                                           
                                                           New in version 3.4.
                                                           
                                                           
cp1140                ibm1140                              Western Europe
                                                           
                                                           
cp1250                windows-1250                         Central and Eastern Europe
                                                           
                                                           
cp1251                windows-1251                         Bulgarian, Byelorussian,
                                                           Macedonian, Russian, Serbian
                                                           
                                                           
cp1252                windows-1252                         Western Europe
                                                           
                                                           
cp1253                windows-1253                         Greek
                                                           
                                                           
cp1254                windows-1254                         Turkish
                                                           
                                                           
cp1255                windows-1255                         Hebrew
                                                           
                                                           
cp1256                windows-1256                         Arabic
                                                           
                                                           
cp1257                windows-1257                         Baltic languages
                                                           
                                                           
cp1258                windows-1258                         Vietnamese
                                                           
                                                           
cp65001                                                    Windows only: Windows UTF-8
                                                           (‘CP_UTF8’)
                                                           
                                                           New in version 3.3.
                                                           
                                                           
euc_jp                eucjp, ujis, u-jis                   Japanese
                                                           
                                                           
euc_jis_2004          jisx0213, eucjis2004                 Japanese
                                                           
                                                           
euc_jisx0213          eucjisx0213                          Japanese
                                                           
                                                           
euc_kr                euckr, korean, ksc5601, ks_c-5601,   Korean
                      ks_c-5601-1987, ksx1001, ks_x-1001   
                      
                                                           
gb2312                chinese, csiso58gb231280, euc- cn,   Simplified Chinese
                      euccn, eucgb2312-cn, gb2312-1980,    
                      gb2312-80, iso- ir-58
                      
                                                           
gbk                   936, cp936, ms936                    Unified Chinese
                                                           
                                                           
gb18030               gb18030-2000                         Unified Chinese
                                                           
                                                           
hz                    hzgb, hz-gb, hz-gb-2312              Simplified Chinese
                                                           
                                                           
iso2022_jp            csiso2022jp, iso2022jp,              Japanese
                      iso-2022-jp                          
                      
                                                           
iso2022_jp_1          iso2022jp-1, iso-2022-jp-1           Japanese
                                                           
                                                           
iso2022_jp_2          iso2022jp-2, iso-2022-jp-2           Japanese, Korean, Simplified
                                                           Chinese, Western Europe, Greek
                                                           
                                                           
iso2022_jp_2004       iso2022jp-2004, iso-2022-jp-2004     Japanese
                                                           
                                                           
iso2022_jp_3          iso2022jp-3, iso-2022-jp-3           Japanese
                                                           
                                                           
iso2022_jp_ext        iso2022jp-ext, iso-2022-jp-ext       Japanese
                                                           
                                                           
iso2022_kr            csiso2022kr, iso2022kr,              Korean
                      iso-2022-kr                          
                      
                                                           
latin_1               iso-8859-1, iso8859-1, 8859,         West Europe
                      cp819, latin, latin1, L1             
                      
                                                           
iso8859_2             iso-8859-2, latin2, L2               Central and Eastern Europe
                                                           
                                                           
iso8859_3             iso-8859-3, latin3, L3               Esperanto, Maltese
                                                           
                                                           
iso8859_4             iso-8859-4, latin4, L4               Baltic languages
                                                           
                                                           
iso8859_5             iso-8859-5, cyrillic                 Bulgarian, Byelorussian,
                                                           Macedonian, Russian, Serbian
                                                           
                                                           
iso8859_6             iso-8859-6, arabic                   Arabic
                                                           
                                                           
iso8859_7             iso-8859-7, greek, greek8            Greek
                                                           
                                                           
iso8859_8             iso-8859-8, hebrew                   Hebrew
                                                           
                                                           
iso8859_9             iso-8859-9, latin5, L5               Turkish
                                                           
                                                           
iso8859_10            iso-8859-10, latin6, L6              Nordic languages
                                                           
                                                           
iso8859_13            iso-8859-13, latin7, L7              Baltic languages
                                                           
                                                           
iso8859_14            iso-8859-14, latin8, L8              Celtic languages
                                                           
                                                           
iso8859_15            iso-8859-15, latin9, L9              Western Europe
                                                           
                                                           
iso8859_16            iso-8859-16, latin10, L10            South-Eastern Europe
                                                           
                                                           
johab                 cp1361, ms1361                       Korean
                                                           
                                                           
koi8_r                                                     Russian
                                                           
                                                           
koi8_u                                                     Ukrainian
                                                           
                                                           
mac_cyrillic          maccyrillic                          Bulgarian, Byelorussian,
                                                           Macedonian, Russian, Serbian
                                                           
                                                           
mac_greek             macgreek                             Greek
                                                           
                                                           
mac_iceland           maciceland                           Icelandic
                                                           
                                                           
mac_latin2            maclatin2, maccentraleurope          Central and Eastern Europe
                                                           
                                                           
mac_roman             macroman, macintosh                  Western Europe
                                                           
                                                           
mac_turkish           macturkish                           Turkish
                                                           
                                                           
ptcp154               csptcp154, pt154, cp154,             Kazakh
                      cyrillic-asian                       
                      
                                                           
shift_jis             csshiftjis, shiftjis, sjis, s_jis    Japanese
                                                           
                                                           
shift_jis_2004        shiftjis2004, sjis_2004, sjis2004    Japanese
                                                           
                                                           
shift_jisx0213        shiftjisx0213, sjisx0213,            Japanese
                      s_jisx0213                           
                      
                                                           
utf_32                U32, utf32                           all languages
                                                           
                                                           
utf_32_be             UTF-32BE                             all languages
                                                           
                                                           
utf_32_le             UTF-32LE                             all languages
                                                           
                                                           
utf_16                U16, utf16                           all languages
                                                           
                                                           
utf_16_be             UTF-16BE                             all languages
                                                           
                                                           
utf_16_le             UTF-16LE                             all languages
                                                           
                                                           
utf_7                 U7, unicode-1-1-utf-7                all languages
                                                           
                                                           
utf_8                 U8, UTF, utf8                        all languages
                                                           
                                                           
utf_8_sig                                                  all languages
                                                           

Changed in version 3.4: The utf-16* and utf-32* encoders no longer allow
surrogate code points (‘U+D800’–‘U+DFFF’) to be encoded.  The utf-32*
decoders no longer decode byte sequences that correspond to surrogate
code points.


File: python.info,  Node: Python Specific Encodings,  Next: encodings idna --- Internationalized Domain Names in Applications,  Prev: Standard Encodings,  Up: codecs --- Codec registry and base classes

5.7.2.14 Python Specific Encodings
..................................

A number of predefined codecs are specific to Python, so their codec
names have no meaning outside Python.  These are listed in the tables
below based on the expected input and output types (note that while text
encodings are the most common use case for codecs, the underlying codec
infrastructure supports arbitrary data transforms rather than just text
encodings).  For asymmetric codecs, the stated purpose describes the
encoding direction.

* Menu:

* Text Encodings:: 
* Binary Transforms:: 
* Text Transforms:: 


File: python.info,  Node: Text Encodings,  Next: Binary Transforms,  Up: Python Specific Encodings

5.7.2.15 Text Encodings
.......................

The following codecs provide *note str: 178. to *note bytes: 179.
encoding and *note bytes-like object: 19f. to *note str: 178. decoding,
similar to the Unicode text encodings.

Codec                    Aliases       Purpose
                                       
-----------------------------------------------------------------------
                                       
idna                                   Implements RFC 3490(1), see
                                       also *note encodings.idna:
                                       75.  Only ‘errors='strict'’
                                       is supported.
                                       
                                       
mbcs                     dbcs          Windows only: Encode operand
                                       according to the ANSI
                                       codepage (CP_ACP)
                                       
                                       
palmos                                 Encoding of PalmOS 3.5
                                       
                                       
punycode                               Implements RFC 3492(2).
                                       Stateful codecs are not
                                       supported.
                                       
                                       
raw_unicode_escape                     Latin-1 encoding with
                                       ‘\uXXXX’ and ‘\UXXXXXXXX’ for
                                       other code points.  Existing
                                       backslashes are not escaped
                                       in any way.  It is used in
                                       the Python pickle protocol.
                                       
                                       
undefined                              Raise an exception for all
                                       conversions, even empty
                                       strings.  The error handler
                                       is ignored.
                                       
                                       
unicode_escape                         Encoding suitable as the
                                       contents of a Unicode literal
                                       in ASCII-encoded Python
                                       source code, except that
                                       quotes are not escaped.
                                       Decodes from Latin-1 source
                                       code.  Beware that Python
                                       source code actually uses
                                       UTF-8 by default.
                                       
                                       
unicode_internal                       Return the internal
                                       representation of the
                                       operand.  Stateful codecs are
                                       not supported.
                                       
                                       Deprecated since version 3.3:
                                       This representation is
                                       obsoleted by PEP 393(3).
                                       

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc3490.html

   (2) https://tools.ietf.org/html/rfc3492.html

   (3) https://www.python.org/dev/peps/pep-0393


File: python.info,  Node: Binary Transforms,  Next: Text Transforms,  Prev: Text Encodings,  Up: Python Specific Encodings

5.7.2.16 Binary Transforms
..........................

The following codecs provide binary transforms: *note bytes-like object:
19f. to *note bytes: 179. mappings.  They are not supported by *note
bytes.decode(): 691. (which only produces *note str: 178. output).

Codec                      Aliases                Purpose                            Encoder / decoder
                                                                                     
------------------------------------------------------------------------------------------------------------------------
                                                                                     
base64_codec (1)           base64, base_64        Convert operand to MIME base64     *note base64.b64encode(): 100d.
                                                  (the result always includes a      / *note base64.b64decode():
                                                  trailing ‘'\n'’)                   100e.
                                                                                     
                                                  Changed in version 3.4: accepts
                                                  any *note bytes-like object:
                                                  19f. as input for encoding and
                                                  decoding
                                                  
                                                                                     
bz2_codec                  bz2                    Compress the operand using bz2     *note bz2.compress(): 100f. /
                                                                                     *note bz2.decompress(): 3b8.
                                                                                     
                                                                                     
hex_codec                  hex                    Convert operand to hexadecimal     *note base64.b16encode(): 1010.
                                                  representation, with two digits    / *note base64.b16decode():
                                                  per byte                           1011.
                                                                                     
                                                                                     
quopri_codec               quopri,                Convert operand to MIME quoted     *note quopri.encodestring():
                           quotedprintable,       printable                          1012. / *note
                           quoted_printable                                          quopri.decodestring(): 1013.
                                                                                     
                                                                                     
uu_codec                   uu                     Convert the operand using          *note uu.encode(): 1014. / *note
                                                  uuencode                           uu.decode(): 1015.
                                                                                     
                                                                                     
zlib_codec                 zip, zlib              Compress the operand using gzip    *note zlib.compress(): 1016. /
                                                                                     *note zlib.decompress(): 1017.
                                                                                     

New in version 3.2: Restoration of the binary transforms.

Changed in version 3.4: Restoration of the aliases for the binary
transforms.

   ---------- Footnotes ----------

   (1) In addition to *note bytes-like objects: 19f, ‘'base64_codec'’
also accepts ASCII-only instances of *note str: 178. for decoding


File: python.info,  Node: Text Transforms,  Prev: Binary Transforms,  Up: Python Specific Encodings

5.7.2.17 Text Transforms
........................

The following codec provides a text transform: a *note str: 178. to
*note str: 178. mapping.  It is not supported by *note str.encode():
690. (which only produces *note bytes: 179. output).

Codec                    Aliases       Purpose
                                       
-----------------------------------------------------------------------
                                       
rot_13                   rot13         Returns the Caesar-cypher
                                       encryption of the operand
                                       

New in version 3.2: Restoration of the ‘rot_13’ text transform.

Changed in version 3.4: Restoration of the ‘rot13’ alias.


File: python.info,  Node: encodings idna --- Internationalized Domain Names in Applications,  Next: encodings mbcs --- Windows ANSI codepage,  Prev: Python Specific Encodings,  Up: codecs --- Codec registry and base classes

5.7.2.18 ‘encodings.idna’ — Internationalized Domain Names in Applications
..........................................................................

This module implements RFC 3490(1) (Internationalized Domain Names in
Applications) and RFC 3492(2) (Nameprep: A Stringprep Profile for
Internationalized Domain Names (IDN)). It builds upon the ‘punycode’
encoding and *note stringprep: f2.

These RFCs together define a protocol to support non-ASCII characters in
domain names.  A domain name containing non-ASCII characters (such as
‘www.Alliancefrançaise.nu’) is converted into an ASCII-compatible
encoding (ACE, such as ‘www.xn--alliancefranaise-npb.nu’).  The ACE form
of the domain name is then used in all places where arbitrary characters
are not allowed by the protocol, such as DNS queries, HTTP ‘Host’
fields, and so on.  This conversion is carried out in the application;
if possible invisible to the user: The application should transparently
convert Unicode domain labels to IDNA on the wire, and convert back ACE
labels to Unicode before presenting them to the user.

Python supports this conversion in several ways: the ‘idna’ codec
performs conversion between Unicode and ACE, separating an input string
into labels based on the separator characters defined in section 3.1(3)
(1) of RFC 3490(4) and converting each label to ACE as required, and
conversely separating an input byte string into labels based on the ‘.’
separator and converting any ACE labels found into unicode.
Furthermore, the *note socket: ea. module transparently converts Unicode
host names to ACE, so that applications need not be concerned about
converting host names themselves when they pass them to the socket
module.  On top of that, modules that have host names as function
parameters, such as *note http.client: 92. and *note ftplib: 83, accept
Unicode host names (*note http.client: 92. then also transparently sends
an IDNA hostname in the ‘Host’ field if it sends that field at all).

When receiving host names from the wire (such as in reverse name
lookup), no automatic conversion to Unicode is performed: Applications
wishing to present such host names to the user should decode them to
Unicode.

The module *note encodings.idna: 75. also implements the nameprep
procedure, which performs certain normalizations on host names, to
achieve case-insensitivity of international domain names, and to unify
similar characters.  The nameprep functions can be used directly if
desired.

 -- Function: encodings.idna.nameprep (label)

     Return the nameprepped version of `label'.  The implementation
     currently assumes query strings, so ‘AllowUnassigned’ is true.

 -- Function: encodings.idna.ToASCII (label)

     Convert a label to ASCII, as specified in RFC 3490(5).
     ‘UseSTD3ASCIIRules’ is assumed to be false.

 -- Function: encodings.idna.ToUnicode (label)

     Convert a label to Unicode, as specified in RFC 3490(6).

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc3490.html

   (2) https://tools.ietf.org/html/rfc3492.html

   (3) http://tools.ietf.org/html/rfc3490#section-3.1

   (4) https://tools.ietf.org/html/rfc3490.html

   (5) https://tools.ietf.org/html/rfc3490.html

   (6) https://tools.ietf.org/html/rfc3490.html


File: python.info,  Node: encodings mbcs --- Windows ANSI codepage,  Next: encodings utf_8_sig --- UTF-8 codec with BOM signature,  Prev: encodings idna --- Internationalized Domain Names in Applications,  Up: codecs --- Codec registry and base classes

5.7.2.19 ‘encodings.mbcs’ — Windows ANSI codepage
.................................................

Encode operand according to the ANSI codepage (CP_ACP).

Availability: Windows only.

Changed in version 3.3: Support any error handler.

Changed in version 3.2: Before 3.2, the `errors' argument was ignored;
‘'replace'’ was always used to encode, and ‘'ignore'’ to decode.


File: python.info,  Node: encodings utf_8_sig --- UTF-8 codec with BOM signature,  Prev: encodings mbcs --- Windows ANSI codepage,  Up: codecs --- Codec registry and base classes

5.7.2.20 ‘encodings.utf_8_sig’ — UTF-8 codec with BOM signature
...............................................................

This module implements a variant of the UTF-8 codec: On encoding a UTF-8
encoded BOM will be prepended to the UTF-8 encoded bytes.  For the
stateful encoder this is only done once (on the first write to the byte
stream).  For decoding an optional UTF-8 encoded BOM at the start of the
data will be skipped.


File: python.info,  Node: Data Types,  Next: Numeric and Mathematical Modules,  Prev: Binary Data Services,  Up: The Python Standard Library

5.8 Data Types
==============

The modules described in this chapter provide a variety of specialized
data types such as dates and times, fixed-type arrays, heap queues,
synchronized queues, and sets.

Python also provides some built-in data types, in particular, *note
dict: 380, *note list: 397, *note set: 5a4. and *note frozenset: 63c,
and *note tuple: 84e.  The *note str: 178. class is used to hold Unicode
strings, and the *note bytes: 179. class is used to hold binary data.

The following modules are documented in this chapter:

* Menu:

* datetime: datetime --- Basic date and time types. Basic date and time types
* calendar: calendar --- General calendar-related functions. General calendar-related functions
* collections: collections --- Container datatypes. Container datatypes
* collections.abc: collections abc --- Abstract Base Classes for Containers. Abstract Base Classes for Containers
* heapq: heapq --- Heap queue algorithm. Heap queue algorithm
* bisect: bisect --- Array bisection algorithm. Array bisection algorithm
* array: array --- Efficient arrays of numeric values. Efficient arrays of numeric values
* weakref: weakref --- Weak references. Weak references
* types: types --- Dynamic type creation and names for built-in types. Dynamic type creation and names for built-in types
* copy: copy --- Shallow and deep copy operations. Shallow and deep copy operations
* pprint: pprint --- Data pretty printer. Data pretty printer
* reprlib: reprlib --- Alternate repr implementation. Alternate repr() implementation
* enum: enum --- Support for enumerations. Support for enumerations


File: python.info,  Node: datetime --- Basic date and time types,  Next: calendar --- General calendar-related functions,  Up: Data Types

5.8.1 ‘datetime’ — Basic date and time types
--------------------------------------------

The *note datetime: 2f. module supplies classes for manipulating dates
and times in both simple and complex ways.  While date and time
arithmetic is supported, the focus of the implementation is on efficient
attribute extraction for output formatting and manipulation.  For
related functionality, see also the *note time: 104. and *note calendar:
15. modules.

There are two kinds of date and time objects: "naive" and "aware".

An aware object has sufficient knowledge of applicable algorithmic and
political time adjustments, such as time zone and daylight saving time
information, to locate itself relative to other aware objects.  An aware
object is used to represent a specific moment in time that is not open
to interpretation (1).

A naive object does not contain enough information to unambiguously
locate itself relative to other date/time objects.  Whether a naive
object represents Coordinated Universal Time (UTC), local time, or time
in some other timezone is purely up to the program, just like it is up
to the program whether a particular number represents metres, miles, or
mass.  Naive objects are easy to understand and to work with, at the
cost of ignoring some aspects of reality.

For applications requiring aware objects, *note datetime: 3c7. and *note
time: 7c5. objects have an optional time zone information attribute,
*note tzinfo: 591, that can be set to an instance of a subclass of the
abstract *note tzinfo: 591. class.  These *note tzinfo: 591. objects
capture information about the offset from UTC time, the time zone name,
and whether Daylight Saving Time is in effect.  Note that only one
concrete *note tzinfo: 591. class, the *note timezone: 3ea. class, is
supplied by the *note datetime: 2f. module.  The *note timezone: 3ea.
class can represent simple timezones with fixed offset from UTC, such as
UTC itself or North American EST and EDT timezones.  Supporting
timezones at deeper levels of detail is up to the application.  The
rules for time adjustment across the world are more political than
rational, change frequently, and there is no standard suitable for every
application aside from UTC.

The *note datetime: 2f. module exports the following constants:

 -- Data: datetime.MINYEAR

     The smallest year number allowed in a *note date: 7c4. or *note
     datetime: 3c7. object.  *note MINYEAR: 1024. is ‘1’.

 -- Data: datetime.MAXYEAR

     The largest year number allowed in a *note date: 7c4. or *note
     datetime: 3c7. object.  *note MAXYEAR: 98e. is ‘9999’.

See also
........

Module *note calendar: 15.

     General calendar related functions.

Module *note time: 104.

     Time access and conversions.

* Menu:

* Available Types:: 
* timedelta Objects:: 
* date Objects:: 
* datetime Objects:: 
* time Objects:: 
* tzinfo Objects:: 
* timezone Objects:: 
* strftime() and strptime() Behavior: strftime and strptime Behavior. 

   ---------- Footnotes ----------

   (1) If, that is, we ignore the effects of Relativity


File: python.info,  Node: Available Types,  Next: timedelta Objects,  Up: datetime --- Basic date and time types

5.8.1.1 Available Types
.......................

 -- Class: datetime.date

     An idealized naive date, assuming the current Gregorian calendar
     always was, and always will be, in effect.  Attributes: *note year:
     1026, *note month: 1027, and *note day: 1028.

 -- Class: datetime.time

     An idealized time, independent of any particular day, assuming that
     every day has exactly 24*60*60 seconds (there is no notion of "leap
     seconds" here).  Attributes: *note hour: 1029, *note minute: 102a,
     *note second: 102b, *note microsecond: 102c, and *note tzinfo: 591.

 -- Class: datetime.datetime

     A combination of a date and a time.  Attributes: *note year: 102d,
     *note month: 102e, *note day: 102f, *note hour: 1030, *note minute:
     1031, *note second: 1032, *note microsecond: 1033, and *note
     tzinfo: 591.

 -- Class: datetime.timedelta

     A duration expressing the difference between two *note date: 7c4,
     *note time: 7c5, or *note datetime: 3c7. instances to microsecond
     resolution.

 -- Class: datetime.tzinfo

     An abstract base class for time zone information objects.  These
     are used by the *note datetime: 3c7. and *note time: 7c5. classes
     to provide a customizable notion of time adjustment (for example,
     to account for time zone and/or daylight saving time).

 -- Class: datetime.timezone

     A class that implements the *note tzinfo: 591. abstract base class
     as a fixed offset from the UTC.

     New in version 3.2.

Objects of these types are immutable.

Objects of the *note date: 7c4. type are always naive.

An object of type *note time: 7c5. or *note datetime: 3c7. may be naive
or aware.  A *note datetime: 3c7. object `d' is aware if ‘d.tzinfo’ is
not ‘None’ and ‘d.tzinfo.utcoffset(d)’ does not return ‘None’.  If
‘d.tzinfo’ is ‘None’, or if ‘d.tzinfo’ is not ‘None’ but
‘d.tzinfo.utcoffset(d)’ returns ‘None’, `d' is naive.  A *note time:
7c5. object `t' is aware if ‘t.tzinfo’ is not ‘None’ and
‘t.tzinfo.utcoffset(None)’ does not return ‘None’.  Otherwise, `t' is
naive.

The distinction between naive and aware doesn’t apply to *note
timedelta: 592. objects.

Subclass relationships:

     object
         timedelta
         tzinfo
             timezone
         time
         date
             datetime


File: python.info,  Node: timedelta Objects,  Next: date Objects,  Prev: Available Types,  Up: datetime --- Basic date and time types

5.8.1.2 ‘timedelta’ Objects
...........................

A *note timedelta: 592. object represents a duration, the difference
between two dates or times.

 -- Class: datetime.timedelta (days=0, seconds=0, microseconds=0,
          milliseconds=0, minutes=0, hours=0, weeks=0)

     All arguments are optional and default to ‘0’.  Arguments may be
     integers or floats, and may be positive or negative.

     Only `days', `seconds' and `microseconds' are stored internally.
     Arguments are converted to those units:

        * A millisecond is converted to 1000 microseconds.

        * A minute is converted to 60 seconds.

        * An hour is converted to 3600 seconds.

        * A week is converted to 7 days.

     and days, seconds and microseconds are then normalized so that the
     representation is unique, with

        * ‘0 <= microseconds < 1000000’

        * ‘0 <= seconds < 3600*24’ (the number of seconds in one day)

        * ‘-999999999 <= days <= 999999999’

     If any argument is a float and there are fractional microseconds,
     the fractional microseconds left over from all arguments are
     combined and their sum is rounded to the nearest microsecond using
     round-half-to-even tiebreaker.  If no argument is a float, the
     conversion and normalization processes are exact (no information is
     lost).

     If the normalized value of days lies outside the indicated range,
     *note OverflowError: 325. is raised.

     Note that normalization of negative values may be surprising at
     first.  For example,

          >>> from datetime import timedelta
          >>> d = timedelta(microseconds=-1)
          >>> (d.days, d.seconds, d.microseconds)
          (-1, 86399, 999999)

Class attributes are:

 -- Attribute: timedelta.min

     The most negative *note timedelta: 592. object,
     ‘timedelta(-999999999)’.

 -- Attribute: timedelta.max

     The most positive *note timedelta: 592. object,
     ‘timedelta(days=999999999, hours=23, minutes=59, seconds=59,
     microseconds=999999)’.

 -- Attribute: timedelta.resolution

     The smallest possible difference between non-equal *note timedelta:
     592. objects, ‘timedelta(microseconds=1)’.

Note that, because of normalization, ‘timedelta.max’ > ‘-timedelta.min’.
‘-timedelta.max’ is not representable as a *note timedelta: 592. object.

Instance attributes (read-only):

Attribute              Value
                       
------------------------------------------------------------------------
                       
‘days’                 Between -999999999 and 999999999 inclusive
                       
                       
‘seconds’              Between 0 and 86399 inclusive
                       
                       
‘microseconds’         Between 0 and 999999 inclusive
                       

Supported operations:

Operation                            Result
                                     
-----------------------------------------------------------------------------------------
                                     
‘t1 = t2 + t3’                       Sum of `t2' and `t3'.  Afterwards `t1'-`t2' ==
                                     `t3' and `t1'-`t3' == `t2' are true.  (1)
                                     
                                     
‘t1 = t2 - t3’                       Difference of `t2' and `t3'.  Afterwards `t1' ==
                                     `t2' - `t3' and `t2' == `t1' + `t3' are true.
                                     (1)
                                     
                                     
‘t1 = t2 * i or t1 = i * t2’         Delta multiplied by an integer.  Afterwards `t1'
                                     // i == `t2' is true, provided ‘i != 0’.
                                     
                                     
                                     In general, `t1' * i == `t1' * (i-1) + `t1' is
                                     true.  (1)
                                     
                                     
‘t1 = t2 * f or t1 = f * t2’         Delta multiplied by a float.  The result is
                                     rounded to the nearest multiple of
                                     timedelta.resolution using round-half-to-even.
                                     
                                     
‘f = t2 / t3’                        Division (3) of `t2' by `t3'.  Returns a *note
                                     float: 327. object.
                                     
                                     
‘t1 = t2 / f or t1 = t2 / i’         Delta divided by a float or an int.  The result
                                     is rounded to the nearest multiple of
                                     timedelta.resolution using round-half-to-even.
                                     
                                     
‘t1 = t2 // i’ or ‘t1 = t2 // t3’    The floor is computed and the remainder (if any)
                                     is thrown away.  In the second case, an integer
                                     is returned.  (3)
                                     
                                     
‘t1 = t2 % t3’                       The remainder is computed as a *note timedelta:
                                     592. object.  (3)
                                     
                                     
‘q, r = divmod(t1, t2)’              Computes the quotient and the remainder: ‘q = t1
                                     // t2’ (3) and ‘r = t1 % t2’.  q is an integer
                                     and r is a *note timedelta: 592. object.
                                     
                                     
‘+t1’                                Returns a *note timedelta: 592. object with the
                                     same value.  (2)
                                     
                                     
‘-t1’                                equivalent to *note timedelta: 592.(-`t1.days',
                                     -`t1.seconds', -`t1.microseconds'), and to `t1'*
                                     -1.  (1)(4)
                                     
                                     
‘abs(t)’                             equivalent to +`t' when ‘t.days >= 0’, and to
                                     -`t' when ‘t.days < 0’.  (2)
                                     
                                     
‘str(t)’                             Returns a string in the form ‘[D day[s],
                                     ][H]H:MM:SS[.UUUUUU]’, where D is negative for
                                     negative ‘t’.  (5)
                                     
                                     
‘repr(t)’                            Returns a string in the form
                                     ‘datetime.timedelta(D[, S[, U]])’, where D is
                                     negative for negative ‘t’.  (5)
                                     

Notes:

  1. This is exact, but may overflow.

  2. This is exact, and cannot overflow.

  3. Division by 0 raises *note ZeroDivisionError: a98.

  4. -`timedelta.max' is not representable as a *note timedelta: 592.
     object.

  5. String representations of *note timedelta: 592. objects are
     normalized similarly to their internal representation.  This leads
     to somewhat unusual results for negative timedeltas.  For example:

          >>> timedelta(hours=-5)
          datetime.timedelta(-1, 68400)
          >>> print(_)
          -1 day, 19:00:00

In addition to the operations listed above *note timedelta: 592. objects
support certain additions and subtractions with *note date: 7c4. and
*note datetime: 3c7. objects (see below).

Changed in version 3.2: Floor division and true division of a *note
timedelta: 592. object by another *note timedelta: 592. object are now
supported, as are remainder operations and the *note divmod(): c40.
function.  True division and multiplication of a *note timedelta: 592.
object by a *note float: 327. object are now supported.

Comparisons of *note timedelta: 592. objects are supported with the
*note timedelta: 592. object representing the smaller duration
considered to be the smaller timedelta.  In order to stop mixed-type
comparisons from falling back to the default comparison by object
address, when a *note timedelta: 592. object is compared to an object of
a different type, *note TypeError: 309. is raised unless the comparison
is ‘==’ or ‘!=’.  The latter cases return *note False: 3c8. or *note
True: 805, respectively.

*note timedelta: 592. objects are *note hashable: bfd. (usable as
dictionary keys), support efficient pickling, and in Boolean contexts, a
*note timedelta: 592. object is considered to be true if and only if it
isn’t equal to ‘timedelta(0)’.

Instance methods:

 -- Method: timedelta.total_seconds ()

     Return the total number of seconds contained in the duration.
     Equivalent to ‘td / timedelta(seconds=1)’.

     Note that for very large time intervals (greater than 270 years on
     most platforms) this method will lose microsecond accuracy.

     New in version 3.2.

Example usage:

     >>> from datetime import timedelta
     >>> year = timedelta(days=365)
     >>> another_year = timedelta(weeks=40, days=84, hours=23,
     ...                          minutes=50, seconds=600)  # adds up to 365 days
     >>> year.total_seconds()
     31536000.0
     >>> year == another_year
     True
     >>> ten_years = 10 * year
     >>> ten_years, ten_years.days // 365
     (datetime.timedelta(3650), 10)
     >>> nine_years = ten_years - year
     >>> nine_years, nine_years.days // 365
     (datetime.timedelta(3285), 9)
     >>> three_years = nine_years // 3;
     >>> three_years, three_years.days // 365
     (datetime.timedelta(1095), 3)
     >>> abs(three_years - ten_years) == 2 * three_years + year
     True


File: python.info,  Node: date Objects,  Next: datetime Objects,  Prev: timedelta Objects,  Up: datetime --- Basic date and time types

5.8.1.3 ‘date’ Objects
......................

A *note date: 7c4. object represents a date (year, month and day) in an
idealized calendar, the current Gregorian calendar indefinitely extended
in both directions.  January 1 of year 1 is called day number 1, January
2 of year 1 is called day number 2, and so on.  This matches the
definition of the "proleptic Gregorian" calendar in Dershowitz and
Reingold’s book Calendrical Calculations, where it’s the base calendar
for all computations.  See the book for algorithms for converting
between proleptic Gregorian ordinals and many other calendar systems.

 -- Class: datetime.date (year, month, day)

     All arguments are required.  Arguments may be integers, in the
     following ranges:

        * ‘MINYEAR <= year <= MAXYEAR’

        * ‘1 <= month <= 12’

        * ‘1 <= day <= number of days in the given month and year’

     If an argument outside those ranges is given, *note ValueError:
     321. is raised.

Other constructors, all class methods:

 -- Class Method: date.today ()

     Return the current local date.  This is equivalent to
     ‘date.fromtimestamp(time.time())’.

 -- Class Method: date.fromtimestamp (timestamp)

     Return the local date corresponding to the POSIX timestamp, such as
     is returned by *note time.time(): 473.  This may raise *note
     OverflowError: 325, if the timestamp is out of the range of values
     supported by the platform C ‘localtime()’ function, and *note
     OSError: 254. on ‘localtime()’ failure.  It’s common for this to be
     restricted to years from 1970 through 2038.  Note that on non-POSIX
     systems that include leap seconds in their notion of a timestamp,
     leap seconds are ignored by *note fromtimestamp(): 103c.

     Changed in version 3.3: Raise *note OverflowError: 325. instead of
     *note ValueError: 321. if the timestamp is out of the range of
     values supported by the platform C ‘localtime()’ function.  Raise
     *note OSError: 254. instead of *note ValueError: 321. on
     ‘localtime()’ failure.

 -- Class Method: date.fromordinal (ordinal)

     Return the date corresponding to the proleptic Gregorian ordinal,
     where January 1 of year 1 has ordinal 1.  *note ValueError: 321. is
     raised unless ‘1 <= ordinal <= date.max.toordinal()’.  For any date
     `d', ‘date.fromordinal(d.toordinal()) == d’.

Class attributes:

 -- Attribute: date.min

     The earliest representable date, ‘date(MINYEAR, 1, 1)’.

 -- Attribute: date.max

     The latest representable date, ‘date(MAXYEAR, 12, 31)’.

 -- Attribute: date.resolution

     The smallest possible difference between non-equal date objects,
     ‘timedelta(days=1)’.

Instance attributes (read-only):

 -- Attribute: date.year

     Between *note MINYEAR: 1024. and *note MAXYEAR: 98e. inclusive.

 -- Attribute: date.month

     Between 1 and 12 inclusive.

 -- Attribute: date.day

     Between 1 and the number of days in the given month of the given
     year.

Supported operations:

Operation                           Result
                                    
---------------------------------------------------------------------------------------
                                    
‘date2 = date1 + timedelta’         `date2' is ‘timedelta.days’ days removed from
                                    `date1'.  (1)
                                    
                                    
‘date2 = date1 - timedelta’         Computes `date2' such that ‘date2 + timedelta ==
                                    date1’.  (2)
                                    
                                    
‘timedelta = date1 - date2’         (3)
                                    
                                    
‘date1 < date2’                     `date1' is considered less than `date2' when
                                    `date1' precedes `date2' in time.  (4)
                                    

Notes:

  1. `date2' is moved forward in time if ‘timedelta.days > 0’, or
     backward if ‘timedelta.days < 0’.  Afterward ‘date2 - date1 ==
     timedelta.days’.  ‘timedelta.seconds’ and ‘timedelta.microseconds’
     are ignored.  *note OverflowError: 325. is raised if ‘date2.year’
     would be smaller than *note MINYEAR: 1024. or larger than *note
     MAXYEAR: 98e.

  2. This isn’t quite equivalent to date1 + (-timedelta), because
     -timedelta in isolation can overflow in cases where date1 -
     timedelta does not.  ‘timedelta.seconds’ and
     ‘timedelta.microseconds’ are ignored.

  3. This is exact, and cannot overflow.  timedelta.seconds and
     timedelta.microseconds are 0, and date2 + timedelta == date1 after.

  4. In other words, ‘date1 < date2’ if and only if ‘date1.toordinal() <
     date2.toordinal()’.  In order to stop comparison from falling back
     to the default scheme of comparing object addresses, date
     comparison normally raises *note TypeError: 309. if the other
     comparand isn’t also a *note date: 7c4. object.  However,
     ‘NotImplemented’ is returned instead if the other comparand has a
     ‘timetuple()’ attribute.  This hook gives other kinds of date
     objects a chance at implementing mixed-type comparison.  If not,
     when a *note date: 7c4. object is compared to an object of a
     different type, *note TypeError: 309. is raised unless the
     comparison is ‘==’ or ‘!=’.  The latter cases return *note False:
     3c8. or *note True: 805, respectively.

Dates can be used as dictionary keys.  In Boolean contexts, all *note
date: 7c4. objects are considered to be true.

Instance methods:

 -- Method: date.replace (year, month, day)

     Return a date with the same value, except for those parameters
     given new values by whichever keyword arguments are specified.  For
     example, if ‘d == date(2002, 12, 31)’, then ‘d.replace(day=26) ==
     date(2002, 12, 26)’.

 -- Method: date.timetuple ()

     Return a *note time.struct_time: 1043. such as returned by *note
     time.localtime(): 1044.  The hours, minutes and seconds are 0, and
     the DST flag is -1.  ‘d.timetuple()’ is equivalent to
     ‘time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(),
     yday, -1))’, where ‘yday = d.toordinal() - date(d.year, 1,
     1).toordinal() + 1’ is the day number within the current year
     starting with ‘1’ for January 1st.

 -- Method: date.toordinal ()

     Return the proleptic Gregorian ordinal of the date, where January 1
     of year 1 has ordinal 1.  For any *note date: 7c4. object `d',
     ‘date.fromordinal(d.toordinal()) == d’.

 -- Method: date.weekday ()

     Return the day of the week as an integer, where Monday is 0 and
     Sunday is 6.  For example, ‘date(2002, 12, 4).weekday() == 2’, a
     Wednesday.  See also *note isoweekday(): 1047.

 -- Method: date.isoweekday ()

     Return the day of the week as an integer, where Monday is 1 and
     Sunday is 7.  For example, ‘date(2002, 12, 4).isoweekday() == 3’, a
     Wednesday.  See also *note weekday(): 1046, *note isocalendar():
     1048.

 -- Method: date.isocalendar ()

     Return a 3-tuple, (ISO year, ISO week number, ISO weekday).

     The ISO calendar is a widely used variant of the Gregorian
     calendar.  See
     ‘http://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm’
     for a good explanation.

     The ISO year consists of 52 or 53 full weeks, and where a week
     starts on a Monday and ends on a Sunday.  The first week of an ISO
     year is the first (Gregorian) calendar week of a year containing a
     Thursday.  This is called week number 1, and the ISO year of that
     Thursday is the same as its Gregorian year.

     For example, 2004 begins on a Thursday, so the first week of ISO
     year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan
     2004, so that ‘date(2003, 12, 29).isocalendar() == (2004, 1, 1)’
     and ‘date(2004, 1, 4).isocalendar() == (2004, 1, 7)’.

 -- Method: date.isoformat ()

     Return a string representing the date in ISO 8601 format,
     ’YYYY-MM-DD’.  For example, ‘date(2002, 12, 4).isoformat() ==
     '2002-12-04'’.

 -- Method: date.__str__ ()

     For a date `d', ‘str(d)’ is equivalent to ‘d.isoformat()’.

 -- Method: date.ctime ()

     Return a string representing the date, for example ‘date(2002, 12,
     4).ctime() == 'Wed Dec 4 00:00:00 2002'’.  ‘d.ctime()’ is
     equivalent to ‘time.ctime(time.mktime(d.timetuple()))’ on platforms
     where the native C ‘ctime()’ function (which *note time.ctime():
     104c. invokes, but which *note date.ctime(): 104b. does not invoke)
     conforms to the C standard.

 -- Method: date.strftime (format)

     Return a string representing the date, controlled by an explicit
     format string.  Format codes referring to hours, minutes or seconds
     will see 0 values.  For a complete list of formatting directives,
     see *note strftime() and strptime() Behavior: 104d.

 -- Method: date.__format__ (format)

     Same as *note date.strftime(): 593.  This makes it possible to
     specify format string for a *note date: 7c4. object when using
     *note str.format(): 557.  For a complete list of formatting
     directives, see *note strftime() and strptime() Behavior: 104d.

Example of counting days to an event:

     >>> import time
     >>> from datetime import date
     >>> today = date.today()
     >>> today
     datetime.date(2007, 12, 5)
     >>> today == date.fromtimestamp(time.time())
     True
     >>> my_birthday = date(today.year, 6, 24)
     >>> if my_birthday < today:
     ...     my_birthday = my_birthday.replace(year=today.year + 1)
     >>> my_birthday
     datetime.date(2008, 6, 24)
     >>> time_to_birthday = abs(my_birthday - today)
     >>> time_to_birthday.days
     202

Example of working with *note date: 7c4.:

     >>> from datetime import date
     >>> d = date.fromordinal(730920) # 730920th day after 1. 1. 0001
     >>> d
     datetime.date(2002, 3, 11)
     >>> t = d.timetuple()
     >>> for i in t:
     ...     print(i)
     2002                # year
     3                   # month
     11                  # day
     0
     0
     0
     0                   # weekday (0 = Monday)
     70                  # 70th day in the year
     -1
     >>> ic = d.isocalendar()
     >>> for i in ic:
     ...     print(i)
     2002                # ISO year
     11                  # ISO week number
     1                   # ISO day number ( 1 = Monday )
     >>> d.isoformat()
     '2002-03-11'
     >>> d.strftime("%d/%m/%y")
     '11/03/02'
     >>> d.strftime("%A %d. %B %Y")
     'Monday 11. March 2002'
     >>> 'The {1} is {0:%d}, the {2} is {0:%B}.'.format(d, "day", "month")
     'The day is 11, the month is March.'


File: python.info,  Node: datetime Objects,  Next: time Objects,  Prev: date Objects,  Up: datetime --- Basic date and time types

5.8.1.4 ‘datetime’ Objects
..........................

A *note datetime: 3c7. object is a single object containing all the
information from a *note date: 7c4. object and a *note time: 7c5.
object.  Like a *note date: 7c4. object, *note datetime: 3c7. assumes
the current Gregorian calendar extended in both directions; like a time
object, *note datetime: 3c7. assumes there are exactly 3600*24 seconds
in every day.

Constructor:

 -- Class: datetime.datetime (year, month, day, hour=0, minute=0,
          second=0, microsecond=0, tzinfo=None)

     The year, month and day arguments are required.  `tzinfo' may be
     ‘None’, or an instance of a *note tzinfo: 591. subclass.  The
     remaining arguments may be integers, in the following ranges:

        * ‘MINYEAR <= year <= MAXYEAR’

        * ‘1 <= month <= 12’

        * ‘1 <= day <= number of days in the given month and year’

        * ‘0 <= hour < 24’

        * ‘0 <= minute < 60’

        * ‘0 <= second < 60’

        * ‘0 <= microsecond < 1000000’

     If an argument outside those ranges is given, *note ValueError:
     321. is raised.

Other constructors, all class methods:

 -- Class Method: datetime.today ()

     Return the current local datetime, with *note tzinfo: 591. ‘None’.
     This is equivalent to ‘datetime.fromtimestamp(time.time())’.  See
     also *note now(): 1052, *note fromtimestamp(): 1053.

 -- Class Method: datetime.now (tz=None)

     Return the current local date and time.  If optional argument `tz'
     is ‘None’ or not specified, this is like *note today(): 1051, but,
     if possible, supplies more precision than can be gotten from going
     through a *note time.time(): 473. timestamp (for example, this may
     be possible on platforms supplying the C ‘gettimeofday()’
     function).

     Else `tz' must be an instance of a class *note tzinfo: 591.
     subclass, and the current date and time are converted to `tz'’s
     time zone.  In this case the result is equivalent to
     ‘tz.fromutc(datetime.utcnow().replace(tzinfo=tz))’.  See also *note
     today(): 1051, *note utcnow(): 1054.

 -- Class Method: datetime.utcnow ()

     Return the current UTC date and time, with *note tzinfo: 591.
     ‘None’.  This is like *note now(): 1052, but returns the current
     UTC date and time, as a naive *note datetime: 3c7. object.  An
     aware current UTC datetime can be obtained by calling
     ‘datetime.now(timezone.utc)’.  See also *note now(): 1052.

 -- Class Method: datetime.fromtimestamp (timestamp, tz=None)

     Return the local date and time corresponding to the POSIX
     timestamp, such as is returned by *note time.time(): 473.  If
     optional argument `tz' is ‘None’ or not specified, the timestamp is
     converted to the platform’s local date and time, and the returned
     *note datetime: 3c7. object is naive.

     Else `tz' must be an instance of a class *note tzinfo: 591.
     subclass, and the timestamp is converted to `tz'’s time zone.  In
     this case the result is equivalent to
     ‘tz.fromutc(datetime.utcfromtimestamp(timestamp).replace(tzinfo=tz))’.

     *note fromtimestamp(): 1053. may raise *note OverflowError: 325, if
     the timestamp is out of the range of values supported by the
     platform C ‘localtime()’ or ‘gmtime()’ functions, and *note
     OSError: 254. on ‘localtime()’ or ‘gmtime()’ failure.  It’s common
     for this to be restricted to years in 1970 through 2038.  Note that
     on non-POSIX systems that include leap seconds in their notion of a
     timestamp, leap seconds are ignored by *note fromtimestamp(): 1053,
     and then it’s possible to have two timestamps differing by a second
     that yield identical *note datetime: 3c7. objects.  See also *note
     utcfromtimestamp(): 1055.

     Changed in version 3.3: Raise *note OverflowError: 325. instead of
     *note ValueError: 321. if the timestamp is out of the range of
     values supported by the platform C ‘localtime()’ or ‘gmtime()’
     functions.  Raise *note OSError: 254. instead of *note ValueError:
     321. on ‘localtime()’ or ‘gmtime()’ failure.

 -- Class Method: datetime.utcfromtimestamp (timestamp)

     Return the UTC *note datetime: 3c7. corresponding to the POSIX
     timestamp, with *note tzinfo: 591. ‘None’.  This may raise *note
     OverflowError: 325, if the timestamp is out of the range of values
     supported by the platform C ‘gmtime()’ function, and *note OSError:
     254. on ‘gmtime()’ failure.  It’s common for this to be restricted
     to years in 1970 through 2038.  See also *note fromtimestamp():
     1053.

     On the POSIX compliant platforms, ‘utcfromtimestamp(timestamp)’ is
     equivalent to the following expression:

          datetime(1970, 1, 1) + timedelta(seconds=timestamp)

     Changed in version 3.3: Raise *note OverflowError: 325. instead of
     *note ValueError: 321. if the timestamp is out of the range of
     values supported by the platform C ‘gmtime()’ function.  Raise
     *note OSError: 254. instead of *note ValueError: 321. on ‘gmtime()’
     failure.

 -- Class Method: datetime.fromordinal (ordinal)

     Return the *note datetime: 3c7. corresponding to the proleptic
     Gregorian ordinal, where January 1 of year 1 has ordinal 1.  *note
     ValueError: 321. is raised unless ‘1 <= ordinal <=
     datetime.max.toordinal()’.  The hour, minute, second and
     microsecond of the result are all 0, and *note tzinfo: 591. is
     ‘None’.

 -- Class Method: datetime.combine (date, time)

     Return a new *note datetime: 3c7. object whose date components are
     equal to the given *note date: 7c4. object’s, and whose time
     components and *note tzinfo: 591. attributes are equal to the given
     *note time: 7c5. object’s.  For any *note datetime: 3c7. object
     `d', ‘d == datetime.combine(d.date(), d.timetz())’.  If date is a
     *note datetime: 3c7. object, its time components and *note tzinfo:
     591. attributes are ignored.

 -- Class Method: datetime.strptime (date_string, format)

     Return a *note datetime: 3c7. corresponding to `date_string',
     parsed according to `format'.  This is equivalent to
     ‘datetime(*(time.strptime(date_string, format)[0:6]))’.  *note
     ValueError: 321. is raised if the date_string and format can’t be
     parsed by *note time.strptime(): 811. or if it returns a value
     which isn’t a time tuple.  For a complete list of formatting
     directives, see *note strftime() and strptime() Behavior: 104d.

Class attributes:

 -- Attribute: datetime.min

     The earliest representable *note datetime: 3c7, ‘datetime(MINYEAR,
     1, 1, tzinfo=None)’.

 -- Attribute: datetime.max

     The latest representable *note datetime: 3c7, ‘datetime(MAXYEAR,
     12, 31, 23, 59, 59, 999999, tzinfo=None)’.

 -- Attribute: datetime.resolution

     The smallest possible difference between non-equal *note datetime:
     3c7. objects, ‘timedelta(microseconds=1)’.

Instance attributes (read-only):

 -- Attribute: datetime.year

     Between *note MINYEAR: 1024. and *note MAXYEAR: 98e. inclusive.

 -- Attribute: datetime.month

     Between 1 and 12 inclusive.

 -- Attribute: datetime.day

     Between 1 and the number of days in the given month of the given
     year.

 -- Attribute: datetime.hour

     In ‘range(24)’.

 -- Attribute: datetime.minute

     In ‘range(60)’.

 -- Attribute: datetime.second

     In ‘range(60)’.

 -- Attribute: datetime.microsecond

     In ‘range(1000000)’.

 -- Attribute: datetime.tzinfo

     The object passed as the `tzinfo' argument to the *note datetime:
     3c7. constructor, or ‘None’ if none was passed.

Supported operations:

Operation                                   Result
                                            
---------------------------------------------------------------------------------
                                            
‘datetime2 = datetime1 + timedelta’         (1)
                                            
                                            
‘datetime2 = datetime1 - timedelta’         (2)
                                            
                                            
‘timedelta = datetime1 - datetime2’         (3)
                                            
                                            
‘datetime1 < datetime2’                     Compares *note datetime: 3c7. to
                                            *note datetime: 3c7.  (4)
                                            

  1. datetime2 is a duration of timedelta removed from datetime1, moving
     forward in time if ‘timedelta.days’ > 0, or backward if
     ‘timedelta.days’ < 0.  The result has the same *note tzinfo: 591.
     attribute as the input datetime, and datetime2 - datetime1 ==
     timedelta after.  *note OverflowError: 325. is raised if
     datetime2.year would be smaller than *note MINYEAR: 1024. or larger
     than *note MAXYEAR: 98e.  Note that no time zone adjustments are
     done even if the input is an aware object.

  2. Computes the datetime2 such that datetime2 + timedelta ==
     datetime1.  As for addition, the result has the same *note tzinfo:
     591. attribute as the input datetime, and no time zone adjustments
     are done even if the input is aware.  This isn’t quite equivalent
     to datetime1 + (-timedelta), because -timedelta in isolation can
     overflow in cases where datetime1 - timedelta does not.

  3. Subtraction of a *note datetime: 3c7. from a *note datetime: 3c7.
     is defined only if both operands are naive, or if both are aware.
     If one is aware and the other is naive, *note TypeError: 309. is
     raised.

     If both are naive, or both are aware and have the same *note
     tzinfo: 591. attribute, the *note tzinfo: 591. attributes are
     ignored, and the result is a *note timedelta: 592. object `t' such
     that ‘datetime2 + t == datetime1’.  No time zone adjustments are
     done in this case.

     If both are aware and have different *note tzinfo: 591. attributes,
     ‘a-b’ acts as if `a' and `b' were first converted to naive UTC
     datetimes first.  The result is ‘(a.replace(tzinfo=None) -
     a.utcoffset()) - (b.replace(tzinfo=None) - b.utcoffset())’ except
     that the implementation never overflows.

  4. `datetime1' is considered less than `datetime2' when `datetime1'
     precedes `datetime2' in time.

     If one comparand is naive and the other is aware, *note TypeError:
     309. is raised if an order comparison is attempted.  For equality
     comparisons, naive instances are never equal to aware instances.

     If both comparands are aware, and have the same *note tzinfo: 591.
     attribute, the common *note tzinfo: 591. attribute is ignored and
     the base datetimes are compared.  If both comparands are aware and
     have different *note tzinfo: 591. attributes, the comparands are
     first adjusted by subtracting their UTC offsets (obtained from
     ‘self.utcoffset()’).

     Changed in version 3.3: Equality comparisons between naive and
     aware *note datetime: 2f. instances don’t raise *note TypeError:
     309.

          Note: In order to stop comparison from falling back to the
          default scheme of comparing object addresses, datetime
          comparison normally raises *note TypeError: 309. if the other
          comparand isn’t also a *note datetime: 3c7. object.  However,
          ‘NotImplemented’ is returned instead if the other comparand
          has a ‘timetuple()’ attribute.  This hook gives other kinds of
          date objects a chance at implementing mixed-type comparison.
          If not, when a *note datetime: 3c7. object is compared to an
          object of a different type, *note TypeError: 309. is raised
          unless the comparison is ‘==’ or ‘!=’.  The latter cases
          return *note False: 3c8. or *note True: 805, respectively.

*note datetime: 3c7. objects can be used as dictionary keys.  In Boolean
contexts, all *note datetime: 3c7. objects are considered to be true.

Instance methods:

 -- Method: datetime.date ()

     Return *note date: 7c4. object with same year, month and day.

 -- Method: datetime.time ()

     Return *note time: 7c5. object with same hour, minute, second and
     microsecond.  *note tzinfo: 591. is ‘None’.  See also method *note
     timetz(): 105f.

 -- Method: datetime.timetz ()

     Return *note time: 7c5. object with same hour, minute, second,
     microsecond, and tzinfo attributes.  See also method *note time():
     104.

 -- Method: datetime.replace ([year[, month[, day[, hour[, minute[,
          second[, microsecond[, tzinfo]]]]]]]])

     Return a datetime with the same attributes, except for those
     attributes given new values by whichever keyword arguments are
     specified.  Note that ‘tzinfo=None’ can be specified to create a
     naive datetime from an aware datetime with no conversion of date
     and time data.

 -- Method: datetime.astimezone (tz=None)

     Return a *note datetime: 2f. object with new *note tzinfo: 591.
     attribute `tz', adjusting the date and time data so the result is
     the same UTC time as `self', but in `tz'’s local time.

     If provided, `tz' must be an instance of a *note tzinfo: 591.
     subclass, and its *note utcoffset(): 1061. and *note dst(): 1062.
     methods must not return ‘None’.  `self' must be aware
     (‘self.tzinfo’ must not be ‘None’, and ‘self.utcoffset()’ must not
     return ‘None’).

     If called without arguments (or with ‘tz=None’) the system local
     timezone is assumed.  The ‘tzinfo’ attribute of the converted
     datetime instance will be set to an instance of *note timezone:
     3ea. with the zone name and offset obtained from the OS.

     If ‘self.tzinfo’ is `tz', ‘self.astimezone(tz)’ is equal to `self':
     no adjustment of date or time data is performed.  Else the result
     is local time in time zone `tz', representing the same UTC time as
     `self': after ‘astz = dt.astimezone(tz)’, ‘astz - astz.utcoffset()’
     will usually have the same date and time data as ‘dt -
     dt.utcoffset()’.  The discussion of class *note tzinfo: 591.
     explains the cases at Daylight Saving Time transition boundaries
     where this cannot be achieved (an issue only if `tz' models both
     standard and daylight time).

     If you merely want to attach a time zone object `tz' to a datetime
     `dt' without adjustment of date and time data, use
     ‘dt.replace(tzinfo=tz)’.  If you merely want to remove the time
     zone object from an aware datetime `dt' without conversion of date
     and time data, use ‘dt.replace(tzinfo=None)’.

     Note that the default *note tzinfo.fromutc(): 1063. method can be
     overridden in a *note tzinfo: 591. subclass to affect the result
     returned by *note astimezone(): 3cb.  Ignoring error cases, *note
     astimezone(): 3cb. acts like:

          def astimezone(self, tz):
              if self.tzinfo is tz:
                  return self
              # Convert self to UTC, and attach the new time zone object.
              utc = (self - self.utcoffset()).replace(tzinfo=tz)
              # Convert from UTC to tz's local time.
              return tz.fromutc(utc)

     Changed in version 3.3: `tz' now can be omitted.

 -- Method: datetime.utcoffset ()

     If *note tzinfo: 591. is ‘None’, returns ‘None’, else returns
     ‘self.tzinfo.utcoffset(self)’, and raises an exception if the
     latter doesn’t return ‘None’, or a *note timedelta: 592. object
     representing a whole number of minutes with magnitude less than one
     day.

 -- Method: datetime.dst ()

     If *note tzinfo: 591. is ‘None’, returns ‘None’, else returns
     ‘self.tzinfo.dst(self)’, and raises an exception if the latter
     doesn’t return ‘None’, or a *note timedelta: 592. object
     representing a whole number of minutes with magnitude less than one
     day.

 -- Method: datetime.tzname ()

     If *note tzinfo: 591. is ‘None’, returns ‘None’, else returns
     ‘self.tzinfo.tzname(self)’, raises an exception if the latter
     doesn’t return ‘None’ or a string object,

 -- Method: datetime.timetuple ()

     Return a *note time.struct_time: 1043. such as returned by *note
     time.localtime(): 1044.  ‘d.timetuple()’ is equivalent to
     ‘time.struct_time((d.year, d.month, d.day, d.hour, d.minute,
     d.second, d.weekday(), yday, dst))’, where ‘yday = d.toordinal() -
     date(d.year, 1, 1).toordinal() + 1’ is the day number within the
     current year starting with ‘1’ for January 1st.  The ‘tm_isdst’
     flag of the result is set according to the *note dst(): 1062.
     method: *note tzinfo: 591. is ‘None’ or *note dst(): 1062. returns
     ‘None’, ‘tm_isdst’ is set to ‘-1’; else if *note dst(): 1062.
     returns a non-zero value, ‘tm_isdst’ is set to ‘1’; else ‘tm_isdst’
     is set to ‘0’.

 -- Method: datetime.utctimetuple ()

     If *note datetime: 3c7. instance `d' is naive, this is the same as
     ‘d.timetuple()’ except that ‘tm_isdst’ is forced to 0 regardless of
     what ‘d.dst()’ returns.  DST is never in effect for a UTC time.

     If `d' is aware, `d' is normalized to UTC time, by subtracting
     ‘d.utcoffset()’, and a *note time.struct_time: 1043. for the
     normalized time is returned.  ‘tm_isdst’ is forced to 0.  Note that
     an *note OverflowError: 325. may be raised if `d'.year was
     ‘MINYEAR’ or ‘MAXYEAR’ and UTC adjustment spills over a year
     boundary.

 -- Method: datetime.toordinal ()

     Return the proleptic Gregorian ordinal of the date.  The same as
     ‘self.date().toordinal()’.

 -- Method: datetime.timestamp ()

     Return POSIX timestamp corresponding to the *note datetime: 2f.
     instance.  The return value is a *note float: 327. similar to that
     returned by *note time.time(): 473.

     Naive *note datetime: 2f. instances are assumed to represent local
     time and this method relies on the platform C ‘mktime()’ function
     to perform the conversion.  Since *note datetime: 2f. supports
     wider range of values than ‘mktime()’ on many platforms, this
     method may raise *note OverflowError: 325. for times far in the
     past or far in the future.

     For aware *note datetime: 2f. instances, the return value is
     computed as:

          (dt - datetime(1970, 1, 1, tzinfo=timezone.utc)).total_seconds()

     New in version 3.3.

          Note: There is no method to obtain the POSIX timestamp
          directly from a naive *note datetime: 2f. instance
          representing UTC time.  If your application uses this
          convention and your system timezone is not set to UTC, you can
          obtain the POSIX timestamp by supplying ‘tzinfo=timezone.utc’:

               timestamp = dt.replace(tzinfo=timezone.utc).timestamp()

          or by calculating the timestamp directly:

               timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)

 -- Method: datetime.weekday ()

     Return the day of the week as an integer, where Monday is 0 and
     Sunday is 6.  The same as ‘self.date().weekday()’.  See also *note
     isoweekday(): 1069.

 -- Method: datetime.isoweekday ()

     Return the day of the week as an integer, where Monday is 1 and
     Sunday is 7.  The same as ‘self.date().isoweekday()’.  See also
     *note weekday(): 1068, *note isocalendar(): 106a.

 -- Method: datetime.isocalendar ()

     Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The
     same as ‘self.date().isocalendar()’.

 -- Method: datetime.isoformat (sep='T')

     Return a string representing the date and time in ISO 8601 format,
     YYYY-MM-DDTHH:MM:SS.mmmmmm or, if *note microsecond: 1033. is 0,
     YYYY-MM-DDTHH:MM:SS

     If *note utcoffset(): 1061. does not return ‘None’, a 6-character
     string is appended, giving the UTC offset in (signed) hours and
     minutes: YYYY-MM-DDTHH:MM:SS.mmmmmm+HH:MM or, if *note microsecond:
     1033. is 0 YYYY-MM-DDTHH:MM:SS+HH:MM

     The optional argument `sep' (default ‘'T'’) is a one-character
     separator, placed between the date and time portions of the result.
     For example,

          >>> from datetime import tzinfo, timedelta, datetime
          >>> class TZ(tzinfo):
          ...     def utcoffset(self, dt): return timedelta(minutes=-399)
          ...
          >>> datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')
          '2002-12-25 00:00:00-06:39'

 -- Method: datetime.__str__ ()

     For a *note datetime: 3c7. instance `d', ‘str(d)’ is equivalent to
     ‘d.isoformat(' ')’.

 -- Method: datetime.ctime ()

     Return a string representing the date and time, for example
     ‘datetime(2002, 12, 4, 20, 30, 40).ctime() == 'Wed Dec 4 20:30:40
     2002'’.  ‘d.ctime()’ is equivalent to
     ‘time.ctime(time.mktime(d.timetuple()))’ on platforms where the
     native C ‘ctime()’ function (which *note time.ctime(): 104c.
     invokes, but which *note datetime.ctime(): 106d. does not invoke)
     conforms to the C standard.

 -- Method: datetime.strftime (format)

     Return a string representing the date and time, controlled by an
     explicit format string.  For a complete list of formatting
     directives, see *note strftime() and strptime() Behavior: 104d.

 -- Method: datetime.__format__ (format)

     Same as *note datetime.strftime(): 3ca.  This makes it possible to
     specify format string for a *note datetime: 3c7. object when using
     *note str.format(): 557.  For a complete list of formatting
     directives, see *note strftime() and strptime() Behavior: 104d.

Examples of working with datetime objects:

     >>> from datetime import datetime, date, time
     >>> # Using datetime.combine()
     >>> d = date(2005, 7, 14)
     >>> t = time(12, 30)
     >>> datetime.combine(d, t)
     datetime.datetime(2005, 7, 14, 12, 30)
     >>> # Using datetime.now() or datetime.utcnow()
     >>> datetime.now()
     datetime.datetime(2007, 12, 6, 16, 29, 43, 79043)   # GMT +1
     >>> datetime.utcnow()
     datetime.datetime(2007, 12, 6, 15, 29, 43, 79060)
     >>> # Using datetime.strptime()
     >>> dt = datetime.strptime("21/11/06 16:30", "%d/%m/%y %H:%M")
     >>> dt
     datetime.datetime(2006, 11, 21, 16, 30)
     >>> # Using datetime.timetuple() to get tuple of all attributes
     >>> tt = dt.timetuple()
     >>> for it in tt:
     ...     print(it)
     ...
     2006    # year
     11      # month
     21      # day
     16      # hour
     30      # minute
     0       # second
     1       # weekday (0 = Monday)
     325     # number of days since 1st January
     -1      # dst - method tzinfo.dst() returned None
     >>> # Date in ISO format
     >>> ic = dt.isocalendar()
     >>> for it in ic:
     ...     print(it)
     ...
     2006    # ISO year
     47      # ISO week
     2       # ISO weekday
     >>> # Formatting datetime
     >>> dt.strftime("%A, %d. %B %Y %I:%M%p")
     'Tuesday, 21. November 2006 04:30PM'
     >>> 'The {1} is {0:%d}, the {2} is {0:%B}, the {3} is {0:%I:%M%p}.'.format(dt, "day", "month", "time")
     'The day is 21, the month is November, the time is 04:30PM.'

Using datetime with tzinfo:

     >>> from datetime import timedelta, datetime, tzinfo
     >>> class GMT1(tzinfo):
     ...     def utcoffset(self, dt):
     ...         return timedelta(hours=1) + self.dst(dt)
     ...     def dst(self, dt):
     ...         # DST starts last Sunday in March
     ...         d = datetime(dt.year, 4, 1)   # ends last Sunday in October
     ...         self.dston = d - timedelta(days=d.weekday() + 1)
     ...         d = datetime(dt.year, 11, 1)
     ...         self.dstoff = d - timedelta(days=d.weekday() + 1)
     ...         if self.dston <=  dt.replace(tzinfo=None) < self.dstoff:
     ...             return timedelta(hours=1)
     ...         else:
     ...             return timedelta(0)
     ...     def tzname(self,dt):
     ...          return "GMT +1"
     ...
     >>> class GMT2(tzinfo):
     ...     def utcoffset(self, dt):
     ...         return timedelta(hours=2) + self.dst(dt)
     ...     def dst(self, dt):
     ...         d = datetime(dt.year, 4, 1)
     ...         self.dston = d - timedelta(days=d.weekday() + 1)
     ...         d = datetime(dt.year, 11, 1)
     ...         self.dstoff = d - timedelta(days=d.weekday() + 1)
     ...         if self.dston <=  dt.replace(tzinfo=None) < self.dstoff:
     ...             return timedelta(hours=1)
     ...         else:
     ...             return timedelta(0)
     ...     def tzname(self,dt):
     ...         return "GMT +2"
     ...
     >>> gmt1 = GMT1()
     >>> # Daylight Saving Time
     >>> dt1 = datetime(2006, 11, 21, 16, 30, tzinfo=gmt1)
     >>> dt1.dst()
     datetime.timedelta(0)
     >>> dt1.utcoffset()
     datetime.timedelta(0, 3600)
     >>> dt2 = datetime(2006, 6, 14, 13, 0, tzinfo=gmt1)
     >>> dt2.dst()
     datetime.timedelta(0, 3600)
     >>> dt2.utcoffset()
     datetime.timedelta(0, 7200)
     >>> # Convert datetime to another time zone
     >>> dt3 = dt2.astimezone(GMT2())
     >>> dt3     # doctest: +ELLIPSIS
     datetime.datetime(2006, 6, 14, 14, 0, tzinfo=<GMT2 object at 0x...>)
     >>> dt2     # doctest: +ELLIPSIS
     datetime.datetime(2006, 6, 14, 13, 0, tzinfo=<GMT1 object at 0x...>)
     >>> dt2.utctimetuple() == dt3.utctimetuple()
     True


File: python.info,  Node: time Objects,  Next: tzinfo Objects,  Prev: datetime Objects,  Up: datetime --- Basic date and time types

5.8.1.5 ‘time’ Objects
......................

A time object represents a (local) time of day, independent of any
particular day, and subject to adjustment via a *note tzinfo: 591.
object.

 -- Class: datetime.time (hour=0, minute=0, second=0, microsecond=0,
          tzinfo=None)

     All arguments are optional.  `tzinfo' may be ‘None’, or an instance
     of a *note tzinfo: 591. subclass.  The remaining arguments may be
     integers, in the following ranges:

        * ‘0 <= hour < 24’

        * ‘0 <= minute < 60’

        * ‘0 <= second < 60’

        * ‘0 <= microsecond < 1000000’.

     If an argument outside those ranges is given, *note ValueError:
     321. is raised.  All default to ‘0’ except `tzinfo', which defaults
     to *note None: 2c6.

Class attributes:

 -- Attribute: time.min

     The earliest representable *note time: 7c5, ‘time(0, 0, 0, 0)’.

 -- Attribute: time.max

     The latest representable *note time: 7c5, ‘time(23, 59, 59,
     999999)’.

 -- Attribute: time.resolution

     The smallest possible difference between non-equal *note time: 7c5.
     objects, ‘timedelta(microseconds=1)’, although note that arithmetic
     on *note time: 7c5. objects is not supported.

Instance attributes (read-only):

 -- Attribute: time.hour

     In ‘range(24)’.

 -- Attribute: time.minute

     In ‘range(60)’.

 -- Attribute: time.second

     In ‘range(60)’.

 -- Attribute: time.microsecond

     In ‘range(1000000)’.

 -- Attribute: time.tzinfo

     The object passed as the tzinfo argument to the *note time: 7c5.
     constructor, or ‘None’ if none was passed.

Supported operations:

   * comparison of *note time: 7c5. to *note time: 7c5, where `a' is
     considered less than `b' when `a' precedes `b' in time.  If one
     comparand is naive and the other is aware, *note TypeError: 309. is
     raised if an order comparison is attempted.  For equality
     comparisons, naive instances are never equal to aware instances.

     If both comparands are aware, and have the same *note tzinfo: 591.
     attribute, the common *note tzinfo: 591. attribute is ignored and
     the base times are compared.  If both comparands are aware and have
     different *note tzinfo: 591. attributes, the comparands are first
     adjusted by subtracting their UTC offsets (obtained from
     ‘self.utcoffset()’).  In order to stop mixed-type comparisons from
     falling back to the default comparison by object address, when a
     *note time: 7c5. object is compared to an object of a different
     type, *note TypeError: 309. is raised unless the comparison is ‘==’
     or ‘!=’.  The latter cases return *note False: 3c8. or *note True:
     805, respectively.

     Changed in version 3.3: Equality comparisons between naive and
     aware *note time: 104. instances don’t raise *note TypeError: 309.

   * hash, use as dict key

   * efficient pickling

   * in Boolean contexts, a *note time: 7c5. object is considered to be
     true if and only if, after converting it to minutes and subtracting
     ‘utcoffset()’ (or ‘0’ if that’s ‘None’), the result is non-zero.

Instance methods:

 -- Method: time.replace ([hour[, minute[, second[, microsecond[,
          tzinfo]]]]])

     Return a *note time: 7c5. with the same value, except for those
     attributes given new values by whichever keyword arguments are
     specified.  Note that ‘tzinfo=None’ can be specified to create a
     naive *note time: 7c5. from an aware *note time: 7c5, without
     conversion of the time data.

 -- Method: time.isoformat ()

     Return a string representing the time in ISO 8601 format,
     HH:MM:SS.mmmmmm or, if self.microsecond is 0, HH:MM:SS If *note
     utcoffset(): 1077. does not return ‘None’, a 6-character string is
     appended, giving the UTC offset in (signed) hours and minutes:
     HH:MM:SS.mmmmmm+HH:MM or, if self.microsecond is 0, HH:MM:SS+HH:MM

 -- Method: time.__str__ ()

     For a time `t', ‘str(t)’ is equivalent to ‘t.isoformat()’.

 -- Method: time.strftime (format)

     Return a string representing the time, controlled by an explicit
     format string.  For a complete list of formatting directives, see
     *note strftime() and strptime() Behavior: 104d.

 -- Method: time.__format__ (format)

     Same as *note time.strftime(): 1079.  This makes it possible to
     specify format string for a *note time: 7c5. object when using
     *note str.format(): 557.  For a complete list of formatting
     directives, see *note strftime() and strptime() Behavior: 104d.

 -- Method: time.utcoffset ()

     If *note tzinfo: 591. is ‘None’, returns ‘None’, else returns
     ‘self.tzinfo.utcoffset(None)’, and raises an exception if the
     latter doesn’t return ‘None’ or a *note timedelta: 592. object
     representing a whole number of minutes with magnitude less than one
     day.

 -- Method: time.dst ()

     If *note tzinfo: 591. is ‘None’, returns ‘None’, else returns
     ‘self.tzinfo.dst(None)’, and raises an exception if the latter
     doesn’t return ‘None’, or a *note timedelta: 592. object
     representing a whole number of minutes with magnitude less than one
     day.

 -- Method: time.tzname ()

     If *note tzinfo: 591. is ‘None’, returns ‘None’, else returns
     ‘self.tzinfo.tzname(None)’, or raises an exception if the latter
     doesn’t return ‘None’ or a string object.

Example:

     >>> from datetime import time, tzinfo
     >>> class GMT1(tzinfo):
     ...     def utcoffset(self, dt):
     ...         return timedelta(hours=1)
     ...     def dst(self, dt):
     ...         return timedelta(0)
     ...     def tzname(self,dt):
     ...         return "Europe/Prague"
     ...
     >>> t = time(12, 10, 30, tzinfo=GMT1())
     >>> t                               # doctest: +ELLIPSIS
     datetime.time(12, 10, 30, tzinfo=<GMT1 object at 0x...>)
     >>> gmt = GMT1()
     >>> t.isoformat()
     '12:10:30+01:00'
     >>> t.dst()
     datetime.timedelta(0)
     >>> t.tzname()
     'Europe/Prague'
     >>> t.strftime("%H:%M:%S %Z")
     '12:10:30 Europe/Prague'
     >>> 'The {} is {:%H:%M}.'.format("time", t)
     'The time is 12:10.'


File: python.info,  Node: tzinfo Objects,  Next: timezone Objects,  Prev: time Objects,  Up: datetime --- Basic date and time types

5.8.1.6 ‘tzinfo’ Objects
........................

*note tzinfo: 591. is an abstract base class, meaning that this class
should not be instantiated directly.  You need to derive a concrete
subclass, and (at least) supply implementations of the standard *note
tzinfo: 591. methods needed by the *note datetime: 3c7. methods you use.
The *note datetime: 2f. module supplies a simple concrete subclass of
*note tzinfo: 591. *note timezone: 3ea. which can represent timezones
with fixed offset from UTC such as UTC itself or North American EST and
EDT.

An instance of (a concrete subclass of) *note tzinfo: 591. can be passed
to the constructors for *note datetime: 3c7. and *note time: 7c5.
objects.  The latter objects view their attributes as being in local
time, and the *note tzinfo: 591. object supports methods revealing
offset of local time from UTC, the name of the time zone, and DST
offset, all relative to a date or time object passed to them.

Special requirement for pickling: A *note tzinfo: 591. subclass must
have an *note __init__(): 7da. method that can be called with no
arguments, else it can be pickled but possibly not unpickled again.
This is a technical requirement that may be relaxed in the future.

A concrete subclass of *note tzinfo: 591. may need to implement the
following methods.  Exactly which methods are needed depends on the uses
made of aware *note datetime: 2f. objects.  If in doubt, simply
implement all of them.

 -- Method: tzinfo.utcoffset (dt)

     Return offset of local time from UTC, in minutes east of UTC. If
     local time is west of UTC, this should be negative.  Note that this
     is intended to be the total offset from UTC; for example, if a
     *note tzinfo: 591. object represents both time zone and DST
     adjustments, *note utcoffset(): 107f. should return their sum.  If
     the UTC offset isn’t known, return ‘None’.  Else the value returned
     must be a *note timedelta: 592. object specifying a whole number of
     minutes in the range -1439 to 1439 inclusive (1440 = 24*60; the
     magnitude of the offset must be less than one day).  Most
     implementations of *note utcoffset(): 107f. will probably look like
     one of these two:

          return CONSTANT                 # fixed-offset class
          return CONSTANT + self.dst(dt)  # daylight-aware class

     If *note utcoffset(): 107f. does not return ‘None’, *note dst():
     1080. should not return ‘None’ either.

     The default implementation of *note utcoffset(): 107f. raises *note
     NotImplementedError: 310.

 -- Method: tzinfo.dst (dt)

     Return the daylight saving time (DST) adjustment, in minutes east
     of UTC, or ‘None’ if DST information isn’t known.  Return
     ‘timedelta(0)’ if DST is not in effect.  If DST is in effect,
     return the offset as a *note timedelta: 592. object (see *note
     utcoffset(): 107f. for details).  Note that DST offset, if
     applicable, has already been added to the UTC offset returned by
     *note utcoffset(): 107f, so there’s no need to consult *note dst():
     1080. unless you’re interested in obtaining DST info separately.
     For example, *note datetime.timetuple(): 1065. calls its *note
     tzinfo: 591. attribute’s *note dst(): 1080. method to determine how
     the ‘tm_isdst’ flag should be set, and *note tzinfo.fromutc():
     1063. calls *note dst(): 1080. to account for DST changes when
     crossing time zones.

     An instance `tz' of a *note tzinfo: 591. subclass that models both
     standard and daylight times must be consistent in this sense:

     ‘tz.utcoffset(dt) - tz.dst(dt)’

     must return the same result for every *note datetime: 3c7. `dt'
     with ‘dt.tzinfo == tz’ For sane *note tzinfo: 591. subclasses, this
     expression yields the time zone’s "standard offset", which should
     not depend on the date or the time, but only on geographic
     location.  The implementation of *note datetime.astimezone(): 3cb.
     relies on this, but cannot detect violations; it’s the programmer’s
     responsibility to ensure it.  If a *note tzinfo: 591. subclass
     cannot guarantee this, it may be able to override the default
     implementation of *note tzinfo.fromutc(): 1063. to work correctly
     with ‘astimezone()’ regardless.

     Most implementations of *note dst(): 1080. will probably look like
     one of these two:

          def dst(self, dt):
              # a fixed-offset class:  doesn't account for DST
              return timedelta(0)

     or

          def dst(self, dt):
              # Code to set dston and dstoff to the time zone's DST
              # transition times based on the input dt.year, and expressed
              # in standard local time.  Then

              if dston <= dt.replace(tzinfo=None) < dstoff:
                  return timedelta(hours=1)
              else:
                  return timedelta(0)

     The default implementation of *note dst(): 1080. raises *note
     NotImplementedError: 310.

 -- Method: tzinfo.tzname (dt)

     Return the time zone name corresponding to the *note datetime: 3c7.
     object `dt', as a string.  Nothing about string names is defined by
     the *note datetime: 2f. module, and there’s no requirement that it
     mean anything in particular.  For example, "GMT", "UTC", "-500",
     "-5:00", "EDT", "US/Eastern", "America/New York" are all valid
     replies.  Return ‘None’ if a string name isn’t known.  Note that
     this is a method rather than a fixed string primarily because some
     *note tzinfo: 591. subclasses will wish to return different names
     depending on the specific value of `dt' passed, especially if the
     *note tzinfo: 591. class is accounting for daylight time.

     The default implementation of *note tzname(): 1081. raises *note
     NotImplementedError: 310.

These methods are called by a *note datetime: 3c7. or *note time: 7c5.
object, in response to their methods of the same names.  A *note
datetime: 3c7. object passes itself as the argument, and a *note time:
7c5. object passes ‘None’ as the argument.  A *note tzinfo: 591.
subclass’s methods should therefore be prepared to accept a `dt'
argument of ‘None’, or of class *note datetime: 3c7.

When ‘None’ is passed, it’s up to the class designer to decide the best
response.  For example, returning ‘None’ is appropriate if the class
wishes to say that time objects don’t participate in the *note tzinfo:
591. protocols.  It may be more useful for ‘utcoffset(None)’ to return
the standard UTC offset, as there is no other convention for discovering
the standard offset.

When a *note datetime: 3c7. object is passed in response to a *note
datetime: 3c7. method, ‘dt.tzinfo’ is the same object as `self'.  *note
tzinfo: 591. methods can rely on this, unless user code calls *note
tzinfo: 591. methods directly.  The intent is that the *note tzinfo:
591. methods interpret `dt' as being in local time, and not need worry
about objects in other timezones.

There is one more *note tzinfo: 591. method that a subclass may wish to
override:

 -- Method: tzinfo.fromutc (dt)

     This is called from the default *note datetime.astimezone(): 3cb.
     implementation.  When called from that, ‘dt.tzinfo’ is `self', and
     `dt'’s date and time data are to be viewed as expressing a UTC
     time.  The purpose of *note fromutc(): 1063. is to adjust the date
     and time data, returning an equivalent datetime in `self'’s local
     time.

     Most *note tzinfo: 591. subclasses should be able to inherit the
     default *note fromutc(): 1063. implementation without problems.
     It’s strong enough to handle fixed-offset time zones, and time
     zones accounting for both standard and daylight time, and the
     latter even if the DST transition times differ in different years.
     An example of a time zone the default *note fromutc(): 1063.
     implementation may not handle correctly in all cases is one where
     the standard offset (from UTC) depends on the specific date and
     time passed, which can happen for political reasons.  The default
     implementations of ‘astimezone()’ and *note fromutc(): 1063. may
     not produce the result you want if the result is one of the hours
     straddling the moment the standard offset changes.

     Skipping code for error cases, the default *note fromutc(): 1063.
     implementation acts like:

          def fromutc(self, dt):
              # raise ValueError error if dt.tzinfo is not self
              dtoff = dt.utcoffset()
              dtdst = dt.dst()
              # raise ValueError if dtoff is None or dtdst is None
              delta = dtoff - dtdst  # this is self's standard offset
              if delta:
                  dt += delta   # convert to standard local time
                  dtdst = dt.dst()
                  # raise ValueError if dtdst is None
              if dtdst:
                  return dt + dtdst
              else:
                  return dt

Example *note tzinfo: 591. classes:

     from datetime import tzinfo, timedelta, datetime

     ZERO = timedelta(0)
     HOUR = timedelta(hours=1)

     # A UTC class.

     class UTC(tzinfo):
         """UTC"""

         def utcoffset(self, dt):
             return ZERO

         def tzname(self, dt):
             return "UTC"

         def dst(self, dt):
             return ZERO

     utc = UTC()

     # A class building tzinfo objects for fixed-offset time zones.
     # Note that FixedOffset(0, "UTC") is a different way to build a
     # UTC tzinfo object.

     class FixedOffset(tzinfo):
         """Fixed offset in minutes east from UTC."""

         def __init__(self, offset, name):
             self.__offset = timedelta(minutes=offset)
             self.__name = name

         def utcoffset(self, dt):
             return self.__offset

         def tzname(self, dt):
             return self.__name

         def dst(self, dt):
             return ZERO

     # A class capturing the platform's idea of local time.

     import time as _time

     STDOFFSET = timedelta(seconds = -_time.timezone)
     if _time.daylight:
         DSTOFFSET = timedelta(seconds = -_time.altzone)
     else:
         DSTOFFSET = STDOFFSET

     DSTDIFF = DSTOFFSET - STDOFFSET

     class LocalTimezone(tzinfo):

         def utcoffset(self, dt):
             if self._isdst(dt):
                 return DSTOFFSET
             else:
                 return STDOFFSET

         def dst(self, dt):
             if self._isdst(dt):
                 return DSTDIFF
             else:
                 return ZERO

         def tzname(self, dt):
             return _time.tzname[self._isdst(dt)]

         def _isdst(self, dt):
             tt = (dt.year, dt.month, dt.day,
                   dt.hour, dt.minute, dt.second,
                   dt.weekday(), 0, 0)
             stamp = _time.mktime(tt)
             tt = _time.localtime(stamp)
             return tt.tm_isdst > 0

     Local = LocalTimezone()


     # A complete implementation of current DST rules for major US time zones.

     def first_sunday_on_or_after(dt):
         days_to_go = 6 - dt.weekday()
         if days_to_go:
             dt += timedelta(days_to_go)
         return dt


     # US DST Rules
     #
     # This is a simplified (i.e., wrong for a few cases) set of rules for US
     # DST start and end times. For a complete and up-to-date set of DST rules
     # and timezone definitions, visit the Olson Database (or try pytz):
     # http://www.twinsun.com/tz/tz-link.htm
     # http://sourceforge.net/projects/pytz/ (might not be up-to-date)
     #
     # In the US, since 2007, DST starts at 2am (standard time) on the second
     # Sunday in March, which is the first Sunday on or after Mar 8.
     DSTSTART_2007 = datetime(1, 3, 8, 2)
     # and ends at 2am (DST time; 1am standard time) on the first Sunday of Nov.
     DSTEND_2007 = datetime(1, 11, 1, 1)
     # From 1987 to 2006, DST used to start at 2am (standard time) on the first
     # Sunday in April and to end at 2am (DST time; 1am standard time) on the last
     # Sunday of October, which is the first Sunday on or after Oct 25.
     DSTSTART_1987_2006 = datetime(1, 4, 1, 2)
     DSTEND_1987_2006 = datetime(1, 10, 25, 1)
     # From 1967 to 1986, DST used to start at 2am (standard time) on the last
     # Sunday in April (the one on or after April 24) and to end at 2am (DST time;
     # 1am standard time) on the last Sunday of October, which is the first Sunday
     # on or after Oct 25.
     DSTSTART_1967_1986 = datetime(1, 4, 24, 2)
     DSTEND_1967_1986 = DSTEND_1987_2006

     class USTimeZone(tzinfo):

         def __init__(self, hours, reprname, stdname, dstname):
             self.stdoffset = timedelta(hours=hours)
             self.reprname = reprname
             self.stdname = stdname
             self.dstname = dstname

         def __repr__(self):
             return self.reprname

         def tzname(self, dt):
             if self.dst(dt):
                 return self.dstname
             else:
                 return self.stdname

         def utcoffset(self, dt):
             return self.stdoffset + self.dst(dt)

         def dst(self, dt):
             if dt is None or dt.tzinfo is None:
                 # An exception may be sensible here, in one or both cases.
                 # It depends on how you want to treat them.  The default
                 # fromutc() implementation (called by the default astimezone()
                 # implementation) passes a datetime with dt.tzinfo is self.
                 return ZERO
             assert dt.tzinfo is self

             # Find start and end times for US DST. For years before 1967, return
             # ZERO for no DST.
             if 2006 < dt.year:
                 dststart, dstend = DSTSTART_2007, DSTEND_2007
             elif 1986 < dt.year < 2007:
                 dststart, dstend = DSTSTART_1987_2006, DSTEND_1987_2006
             elif 1966 < dt.year < 1987:
                 dststart, dstend = DSTSTART_1967_1986, DSTEND_1967_1986
             else:
                 return ZERO

             start = first_sunday_on_or_after(dststart.replace(year=dt.year))
             end = first_sunday_on_or_after(dstend.replace(year=dt.year))

             # Can't compare naive to aware objects, so strip the timezone from
             # dt first.
             if start <= dt.replace(tzinfo=None) < end:
                 return HOUR
             else:
                 return ZERO

     Eastern  = USTimeZone(-5, "Eastern",  "EST", "EDT")
     Central  = USTimeZone(-6, "Central",  "CST", "CDT")
     Mountain = USTimeZone(-7, "Mountain", "MST", "MDT")
     Pacific  = USTimeZone(-8, "Pacific",  "PST", "PDT")

Note that there are unavoidable subtleties twice per year in a *note
tzinfo: 591. subclass accounting for both standard and daylight time, at
the DST transition points.  For concreteness, consider US Eastern (UTC
-0500), where EDT begins the minute after 1:59 (EST) on the second
Sunday in March, and ends the minute after 1:59 (EDT) on the first
Sunday in November:

       UTC   3:MM  4:MM  5:MM  6:MM  7:MM  8:MM
       EST  22:MM 23:MM  0:MM  1:MM  2:MM  3:MM
       EDT  23:MM  0:MM  1:MM  2:MM  3:MM  4:MM

     start  22:MM 23:MM  0:MM  1:MM  3:MM  4:MM

       end  23:MM  0:MM  1:MM  1:MM  2:MM  3:MM

When DST starts (the "start" line), the local wall clock leaps from 1:59
to 3:00.  A wall time of the form 2:MM doesn’t really make sense on that
day, so ‘astimezone(Eastern)’ won’t deliver a result with ‘hour == 2’ on
the day DST begins.  In order for ‘astimezone()’ to make this guarantee,
the *note tzinfo.dst(): 1080. method must consider times in the "missing
hour" (2:MM for Eastern) to be in daylight time.

When DST ends (the "end" line), there’s a potentially worse problem:
there’s an hour that can’t be spelled unambiguously in local wall time:
the last hour of daylight time.  In Eastern, that’s times of the form
5:MM UTC on the day daylight time ends.  The local wall clock leaps from
1:59 (daylight time) back to 1:00 (standard time) again.  Local times of
the form 1:MM are ambiguous.  ‘astimezone()’ mimics the local clock’s
behavior by mapping two adjacent UTC hours into the same local hour
then.  In the Eastern example, UTC times of the form 5:MM and 6:MM both
map to 1:MM when converted to Eastern.  In order for ‘astimezone()’ to
make this guarantee, the *note tzinfo.dst(): 1080. method must consider
times in the "repeated hour" to be in standard time.  This is easily
arranged, as in the example, by expressing DST switch times in the time
zone’s standard local time.

Applications that can’t bear such ambiguities should avoid using hybrid
*note tzinfo: 591. subclasses; there are no ambiguities when using *note
timezone: 3ea, or any other fixed-offset *note tzinfo: 591. subclass
(such as a class representing only EST (fixed offset -5 hours), or only
EDT (fixed offset -4 hours)).

See also
........

pytz(1)

     The standard library has *note timezone: 3ea. class for handling
     arbitrary fixed offsets from UTC and *note timezone.utc: 1082. as
     UTC timezone instance.

     `pytz' library brings the `IANA timezone database' (also known as
     the Olson database) to Python and its usage is recommended.

IANA timezone database(2)

     The Time Zone Database (often called tz or zoneinfo) contains code
     and data that represent the history of local time for many
     representative locations around the globe.  It is updated
     periodically to reflect changes made by political bodies to time
     zone boundaries, UTC offsets, and daylight-saving rules.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/pytz/

   (2) http://www.iana.org/time-zones


File: python.info,  Node: timezone Objects,  Next: strftime and strptime Behavior,  Prev: tzinfo Objects,  Up: datetime --- Basic date and time types

5.8.1.7 ‘timezone’ Objects
..........................

The *note timezone: 3ea. class is a subclass of *note tzinfo: 591, each
instance of which represents a timezone defined by a fixed offset from
UTC. Note that objects of this class cannot be used to represent
timezone information in the locations where different offsets are used
in different days of the year or where historical changes have been made
to civil time.

 -- Class: datetime.timezone (offset[, name])

     The `offset' argument must be specified as a *note timedelta: 592.
     object representing the difference between the local time and UTC.
     It must be strictly between ‘-timedelta(hours=24)’ and
     ‘timedelta(hours=24)’ and represent a whole number of minutes,
     otherwise *note ValueError: 321. is raised.

     The `name' argument is optional.  If specified it must be a string
     that is used as the value returned by the ‘tzname(dt)’ method.
     Otherwise, ‘tzname(dt)’ returns a string ’UTCsHH:MM’, where s is
     the sign of `offset', HH and MM are two digits of ‘offset.hours’
     and ‘offset.minutes’ respectively.

     New in version 3.2.

 -- Method: timezone.utcoffset (dt)

     Return the fixed value specified when the *note timezone: 3ea.
     instance is constructed.  The `dt' argument is ignored.  The return
     value is a *note timedelta: 592. instance equal to the difference
     between the local time and UTC.

 -- Method: timezone.tzname (dt)

     Return the fixed value specified when the *note timezone: 3ea.
     instance is constructed or a string ’UTCsHH:MM’, where s is the
     sign of `offset', HH and MM are two digits of ‘offset.hours’ and
     ‘offset.minutes’ respectively.

 -- Method: timezone.dst (dt)

     Always returns ‘None’.

 -- Method: timezone.fromutc (dt)

     Return ‘dt + offset’.  The `dt' argument must be an aware *note
     datetime: 3c7. instance, with ‘tzinfo’ set to ‘self’.

Class attributes:

 -- Attribute: timezone.utc

     The UTC timezone, ‘timezone(timedelta(0))’.


File: python.info,  Node: strftime and strptime Behavior,  Prev: timezone Objects,  Up: datetime --- Basic date and time types

5.8.1.8 ‘strftime()’ and ‘strptime()’ Behavior
..............................................

*note date: 7c4, *note datetime: 3c7, and *note time: 7c5. objects all
support a ‘strftime(format)’ method, to create a string representing the
time under the control of an explicit format string.  Broadly speaking,
‘d.strftime(fmt)’ acts like the *note time: 104. module’s
‘time.strftime(fmt, d.timetuple())’ although not all objects support a
‘timetuple()’ method.

Conversely, the *note datetime.strptime(): 1058. class method creates a
*note datetime: 3c7. object from a string representing a date and time
and a corresponding format string.  ‘datetime.strptime(date_string,
format)’ is equivalent to ‘datetime(*(time.strptime(date_string,
format)[0:6]))’.

For *note time: 7c5. objects, the format codes for year, month, and day
should not be used, as time objects have no such values.  If they’re
used anyway, ‘1900’ is substituted for the year, and ‘1’ for the month
and day.

For *note date: 7c4. objects, the format codes for hours, minutes,
seconds, and microseconds should not be used, as *note date: 7c4.
objects have no such values.  If they’re used anyway, ‘0’ is substituted
for them.

The full set of format codes supported varies across platforms, because
Python calls the platform C library’s ‘strftime()’ function, and
platform variations are common.  To see the full set of format codes
supported on your platform, consult the ‘strftime(3)’ documentation.

The following is a list of all the format codes that the C standard
(1989 version) requires, and these work on all platforms with a standard
C implementation.  Note that the 1999 version of the C standard added
additional format codes.

Directive       Meaning                              Example                      Notes
                                                                                  
----------------------------------------------------------------------------------------------
                                                                                  
‘%a’            Weekday as locale’s abbreviated           Sun, Mon, ..., Sat (en_US); (1)
                name.                                     So, Mo, ..., Sa (de_DE) 
                                                     
                                                                                  
‘%A’            Weekday as locale’s full name.            Sunday, Monday, ..., Saturday (en_US); (1)
                                                          Sonntag, Montag, ..., Samstag (de_DE) 
                                                     
                                                                                  
‘%w’            Weekday as a decimal number, where   0, 1, ..., 6
                0 is Sunday and 6 is Saturday.       
                
                                                                                  
‘%d’            Day of the month as a zero-padded    01, 02, ..., 31
                decimal number.                      
                
                                                                                  
‘%b’            Month as locale’s abbreviated             Jan, Feb, ..., Dec (en_US); (1)
                name.                                     Jan, Feb, ..., Dez (de_DE) 
                                                     
                                                                                  
‘%B’            Month as locale’s full name.              January, February, ..., December (en_US); (1)
                                                          Januar, Februar, ..., Dezember (de_DE) 
                                                     
                                                                                  
‘%m’            Month as a zero-padded decimal       01, 02, ..., 12
                number.                              
                
                                                                                  
‘%y’            Year without century as a            00, 01, ..., 99
                zero-padded decimal number.          
                
                                                                                  
‘%Y’            Year with century as a decimal       0001, 0002, ..., 2013,       (2)
                number.                              2014, ..., 9998, 9999        
                                                     
                                                                                  
‘%H’            Hour (24-hour clock) as a            00, 01, ..., 23
                zero-padded decimal number.          
                
                                                                                  
‘%I’            Hour (12-hour clock) as a            01, 02, ..., 12
                zero-padded decimal number.          
                
                                                                                  
‘%p’            Locale’s equivalent of either AM          AM, PM (en_US);         (1), (3)
                or PM.                                    am, pm (de_DE)          
                                                     
                                                                                  
‘%M’            Minute as a zero-padded decimal      00, 01, ..., 59
                number.                              
                
                                                                                  
‘%S’            Second as a zero-padded decimal      00, 01, ..., 59              (4)
                number.                                                           
                
                                                                                  
‘%f’            Microsecond as a decimal number,     000000, 000001, ...,         (5)
                zero-padded on the left.             999999                       
                                                     
                                                                                  
‘%z’            UTC offset in the form +HHMM or      (empty), +0000, -0400,       (6)
                -HHMM (empty string if the the       +1030                        
                object is naive).                    
                
                                                                                  
‘%Z’            Time zone name (empty string if      (empty), UTC, EST, CST
                the object is naive).                
                
                                                                                  
‘%j’            Day of the year as a zero-padded     001, 002, ..., 366
                decimal number.                      
                
                                                                                  
‘%U’            Week number of the year (Sunday as   00, 01, ..., 53              (7)
                the first day of the week) as a                                   
                zero padded decimal number.  All
                days in a new year preceding the
                first Sunday are considered to be
                in week 0.
                
                                                                                  
‘%W’            Week number of the year (Monday as   00, 01, ..., 53              (7)
                the first day of the week) as a                                   
                decimal number.  All days in a new
                year preceding the first Monday
                are considered to be in week 0.
                
                                                                                  
‘%c’            Locale’s appropriate date and time        Tue Aug 16 21:30:00 1988 (en_US); (1)
                representation.                           Di 16 Aug 21:30:00 1988 (de_DE) 
                                                     
                                                                                  
‘%x’            Locale’s appropriate date                 08/16/88 (None);        (1)
                representation.                           08/16/1988 (en_US);     
                                                          16.08.1988 (de_DE) 
                                                     
                                                                                  
‘%X’            Locale’s appropriate time                 21:30:00 (en_US);       (1)
                representation.                           21:30:00 (de_DE)        
                                                     
                                                                                  
‘%%’            A literal ‘'%'’ character.           %
                                                     

Notes:

  1. Because the format depends on the current locale, care should be
     taken when making assumptions about the output value.  Field
     orderings will vary (for example, "month/day/year" versus
     "day/month/year"), and the output may contain Unicode characters
     encoded using the locale’s default encoding (for example, if the
     current locale is ‘ja_JP’, the default encoding could be any one of
     ‘eucJP’, ‘SJIS’, or ‘utf-8’; use *note locale.getlocale(): 108a. to
     determine the current locale’s encoding).

  2. The ‘strptime()’ method can parse years in the full [1, 9999]
     range, but years < 1000 must be zero-filled to 4-digit width.

     Changed in version 3.2: In previous versions, ‘strftime()’ method
     was restricted to years >= 1900.

     Changed in version 3.3: In version 3.2, ‘strftime()’ method was
     restricted to years >= 1000.

  3. When used with the ‘strptime()’ method, the ‘%p’ directive only
     affects the output hour field if the ‘%I’ directive is used to
     parse the hour.

  4. Unlike the *note time: 104. module, the *note datetime: 2f. module
     does not support leap seconds.

  5. When used with the ‘strptime()’ method, the ‘%f’ directive accepts
     from one to six digits and zero pads on the right.  ‘%f’ is an
     extension to the set of format characters in the C standard (but
     implemented separately in datetime objects, and therefore always
     available).

  6. For a naive object, the ‘%z’ and ‘%Z’ format codes are replaced by
     empty strings.

     For an aware object:

     ‘%z’

          ‘utcoffset()’ is transformed into a 5-character string of the
          form +HHMM or -HHMM, where HH is a 2-digit string giving the
          number of UTC offset hours, and MM is a 2-digit string giving
          the number of UTC offset minutes.  For example, if
          ‘utcoffset()’ returns ‘timedelta(hours=-3, minutes=-30)’, ‘%z’
          is replaced with the string ‘'-0330'’.

     ‘%Z’

          If ‘tzname()’ returns ‘None’, ‘%Z’ is replaced by an empty
          string.  Otherwise ‘%Z’ is replaced by the returned value,
          which must be a string.

     Changed in version 3.2: When the ‘%z’ directive is provided to the
     ‘strptime()’ method, an aware *note datetime: 3c7. object will be
     produced.  The ‘tzinfo’ of the result will be set to a *note
     timezone: 3ea. instance.

  7. When used with the ‘strptime()’ method, ‘%U’ and ‘%W’ are only used
     in calculations when the day of the week and the year are
     specified.


File: python.info,  Node: calendar --- General calendar-related functions,  Next: collections --- Container datatypes,  Prev: datetime --- Basic date and time types,  Up: Data Types

5.8.2 ‘calendar’ — General calendar-related functions
-----------------------------------------------------

`Source code:' Lib/calendar.py(1)

__________________________________________________________________

This module allows you to output calendars like the Unix ‘cal’ program,
and provides additional useful functions related to the calendar.  By
default, these calendars have Monday as the first day of the week, and
Sunday as the last (the European convention).  Use *note
setfirstweekday(): 108d. to set the first day of the week to Sunday (6)
or to any other weekday.  Parameters that specify dates are given as
integers.  For related functionality, see also the *note datetime: 2f.
and *note time: 104. modules.

Most of these functions and classes rely on the *note datetime: 2f.
module which uses an idealized calendar, the current Gregorian calendar
extended in both directions.  This matches the definition of the
"proleptic Gregorian" calendar in Dershowitz and Reingold’s book
"Calendrical Calculations", where it’s the base calendar for all
computations.

 -- Class: calendar.Calendar (firstweekday=0)

     Creates a *note Calendar: 108e. object.  `firstweekday' is an
     integer specifying the first day of the week.  ‘0’ is Monday (the
     default), ‘6’ is Sunday.

     A *note Calendar: 108e. object provides several methods that can be
     used for preparing the calendar data for formatting.  This class
     doesn’t do any formatting itself.  This is the job of subclasses.

     *note Calendar: 108e. instances have the following methods:

      -- Method: iterweekdays ()

          Return an iterator for the week day numbers that will be used
          for one week.  The first value from the iterator will be the
          same as the value of the *note firstweekday: 1090. property.

      -- Method: itermonthdates (year, month)

          Return an iterator for the month `month' (1-12) in the year
          `year'.  This iterator will return all days (as *note
          datetime.date: 7c4. objects) for the month and all days before
          the start of the month or after the end of the month that are
          required to get a complete week.

      -- Method: itermonthdays2 (year, month)

          Return an iterator for the month `month' in the year `year'
          similar to *note itermonthdates(): 1091.  Days returned will
          be tuples consisting of a day number and a week day number.

      -- Method: itermonthdays (year, month)

          Return an iterator for the month `month' in the year `year'
          similar to *note itermonthdates(): 1091.  Days returned will
          simply be day numbers.

      -- Method: monthdatescalendar (year, month)

          Return a list of the weeks in the month `month' of the `year'
          as full weeks.  Weeks are lists of seven *note datetime.date:
          7c4. objects.

      -- Method: monthdays2calendar (year, month)

          Return a list of the weeks in the month `month' of the `year'
          as full weeks.  Weeks are lists of seven tuples of day numbers
          and weekday numbers.

      -- Method: monthdayscalendar (year, month)

          Return a list of the weeks in the month `month' of the `year'
          as full weeks.  Weeks are lists of seven day numbers.

      -- Method: yeardatescalendar (year, width=3)

          Return the data for the specified year ready for formatting.
          The return value is a list of month rows.  Each month row
          contains up to `width' months (defaulting to 3).  Each month
          contains between 4 and 6 weeks and each week contains 1–7
          days.  Days are *note datetime.date: 7c4. objects.

      -- Method: yeardays2calendar (year, width=3)

          Return the data for the specified year ready for formatting
          (similar to *note yeardatescalendar(): 1097.).  Entries in the
          week lists are tuples of day numbers and weekday numbers.  Day
          numbers outside this month are zero.

      -- Method: yeardayscalendar (year, width=3)

          Return the data for the specified year ready for formatting
          (similar to *note yeardatescalendar(): 1097.).  Entries in the
          week lists are day numbers.  Day numbers outside this month
          are zero.

 -- Class: calendar.TextCalendar (firstweekday=0)

     This class can be used to generate plain text calendars.

     *note TextCalendar: 109a. instances have the following methods:

      -- Method: formatmonth (theyear, themonth, w=0, l=0)

          Return a month’s calendar in a multi-line string.  If `w' is
          provided, it specifies the width of the date columns, which
          are centered.  If `l' is given, it specifies the number of
          lines that each week will use.  Depends on the first weekday
          as specified in the constructor or set by the *note
          setfirstweekday(): 108d. method.

      -- Method: prmonth (theyear, themonth, w=0, l=0)

          Print a month’s calendar as returned by *note formatmonth():
          109b.

      -- Method: formatyear (theyear, w=2, l=1, c=6, m=3)

          Return a `m'-column calendar for an entire year as a
          multi-line string.  Optional parameters `w', `l', and `c' are
          for date column width, lines per week, and number of spaces
          between month columns, respectively.  Depends on the first
          weekday as specified in the constructor or set by the *note
          setfirstweekday(): 108d. method.  The earliest year for which
          a calendar can be generated is platform-dependent.

      -- Method: pryear (theyear, w=2, l=1, c=6, m=3)

          Print the calendar for an entire year as returned by *note
          formatyear(): 109d.

 -- Class: calendar.HTMLCalendar (firstweekday=0)

     This class can be used to generate HTML calendars.

     *note HTMLCalendar: 109f. instances have the following methods:

      -- Method: formatmonth (theyear, themonth, withyear=True)

          Return a month’s calendar as an HTML table.  If `withyear' is
          true the year will be included in the header, otherwise just
          the month name will be used.

      -- Method: formatyear (theyear, width=3)

          Return a year’s calendar as an HTML table.  `width'
          (defaulting to 3) specifies the number of months per row.

      -- Method: formatyearpage (theyear, width=3, css='calendar.css',
               encoding=None)

          Return a year’s calendar as a complete HTML page.  `width'
          (defaulting to 3) specifies the number of months per row.
          `css' is the name for the cascading style sheet to be used.
          *note None: 2c6. can be passed if no style sheet should be
          used.  `encoding' specifies the encoding to be used for the
          output (defaulting to the system default encoding).

 -- Class: calendar.LocaleTextCalendar (firstweekday=0, locale=None)

     This subclass of *note TextCalendar: 109a. can be passed a locale
     name in the constructor and will return month and weekday names in
     the specified locale.  If this locale includes an encoding all
     strings containing month and weekday names will be returned as
     unicode.

 -- Class: calendar.LocaleHTMLCalendar (firstweekday=0, locale=None)

     This subclass of *note HTMLCalendar: 109f. can be passed a locale
     name in the constructor and will return month and weekday names in
     the specified locale.  If this locale includes an encoding all
     strings containing month and weekday names will be returned as
     unicode.

     Note: The ‘formatweekday()’ and ‘formatmonthname()’ methods of
     these two classes temporarily change the current locale to the
     given `locale'.  Because the current locale is a process-wide
     setting, they are not thread-safe.

For simple text calendars this module provides the following functions.

 -- Function: calendar.setfirstweekday (weekday)

     Sets the weekday (‘0’ is Monday, ‘6’ is Sunday) to start each week.
     The values ‘MONDAY’, ‘TUESDAY’, ‘WEDNESDAY’, ‘THURSDAY’, ‘FRIDAY’,
     ‘SATURDAY’, and ‘SUNDAY’ are provided for convenience.  For
     example, to set the first weekday to Sunday:

          import calendar
          calendar.setfirstweekday(calendar.SUNDAY)

 -- Function: calendar.firstweekday ()

     Returns the current setting for the weekday to start each week.

 -- Function: calendar.isleap (year)

     Returns *note True: 805. if `year' is a leap year, otherwise *note
     False: 3c8.

 -- Function: calendar.leapdays (y1, y2)

     Returns the number of leap years in the range from `y1' to `y2'
     (exclusive), where `y1' and `y2' are years.

     This function works for ranges spanning a century change.

 -- Function: calendar.weekday (year, month, day)

     Returns the day of the week (‘0’ is Monday) for `year'
     (‘1970’–...), `month' (‘1’–‘12’), `day' (‘1’–‘31’).

 -- Function: calendar.weekheader (n)

     Return a header containing abbreviated weekday names.  `n'
     specifies the width in characters for one weekday.

 -- Function: calendar.monthrange (year, month)

     Returns weekday of first day of the month and number of days in
     month, for the specified `year' and `month'.

 -- Function: calendar.monthcalendar (year, month)

     Returns a matrix representing a month’s calendar.  Each row
     represents a week; days outside of the month a represented by
     zeros.  Each week begins with Monday unless set by *note
     setfirstweekday(): 108d.

 -- Function: calendar.prmonth (theyear, themonth, w=0, l=0)

     Prints a month’s calendar as returned by *note month(): 10ac.

 -- Function: calendar.month (theyear, themonth, w=0, l=0)

     Returns a month’s calendar in a multi-line string using the
     ‘formatmonth()’ of the *note TextCalendar: 109a. class.

 -- Function: calendar.prcal (year, w=0, l=0, c=6, m=3)

     Prints the calendar for an entire year as returned by *note
     calendar(): 15.

 -- Function: calendar.calendar (year, w=2, l=1, c=6, m=3)

     Returns a 3-column calendar for an entire year as a multi-line
     string using the ‘formatyear()’ of the *note TextCalendar: 109a.
     class.

 -- Function: calendar.timegm (tuple)

     An unrelated but handy function that takes a time tuple such as
     returned by the *note gmtime(): 564. function in the *note time:
     104. module, and returns the corresponding Unix timestamp value,
     assuming an epoch of 1970, and the POSIX encoding.  In fact, *note
     time.gmtime(): 564. and *note timegm(): 10af. are each others’
     inverse.

The *note calendar: 15. module exports the following data attributes:

 -- Data: calendar.day_name

     An array that represents the days of the week in the current
     locale.

 -- Data: calendar.day_abbr

     An array that represents the abbreviated days of the week in the
     current locale.

 -- Data: calendar.month_name

     An array that represents the months of the year in the current
     locale.  This follows normal convention of January being month
     number 1, so it has a length of 13 and ‘month_name[0]’ is the empty
     string.

 -- Data: calendar.month_abbr

     An array that represents the abbreviated months of the year in the
     current locale.  This follows normal convention of January being
     month number 1, so it has a length of 13 and ‘month_abbr[0]’ is the
     empty string.

See also
........

Module *note datetime: 2f.

     Object-oriented interface to dates and times with similar
     functionality to the *note time: 104. module.

Module *note time: 104.

     Low-level time related functions.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/3.4/Lib/calendar.py


File: python.info,  Node: collections --- Container datatypes,  Next: collections abc --- Abstract Base Classes for Containers,  Prev: calendar --- General calendar-related functions,  Up: Data Types

5.8.3 ‘collections’ — Container datatypes
-----------------------------------------

`Source code:' Lib/collections/__init__.py(1)

__________________________________________________________________

This module implements specialized container datatypes providing
alternatives to Python’s general purpose built-in containers, *note
dict: 380, *note list: 397, *note set: 5a4, and *note tuple: 84e.

*note namedtuple():       factory function for creating tuple subclasses with named fields
66b.                      

*note deque: 589.         list-like container with fast appends and pops on either end
                          
                          
*note ChainMap: 3bc.      dict-like class for creating a single view of multiple mappings
                          
                          
*note Counter: 3bd.       dict subclass for counting hashable objects
                          
                          
*note OrderedDict: 587.   dict subclass that remembers the order entries were added
                          
                          
*note defaultdict: 55a.   dict subclass that calls a factory function to supply missing values
                          
                          
*note UserDict: 10b6.     wrapper around dictionary objects for easier dict subclassing
                          
                          
*note UserList: 10b7.     wrapper around list objects for easier list subclassing
                          
                          
*note UserString: 10b8.   wrapper around string objects for easier string subclassing
                          

Changed in version 3.3: Moved *note Collections Abstract Base Classes:
10b9. to the *note collections.abc: 1f. module.  For backwards
compatibility, they continue to be visible in this module as well.

* Menu:

* ChainMap objects:: 
* Counter objects:: 
* deque objects:: 
* defaultdict objects:: 
* namedtuple() Factory Function for Tuples with Named Fields: namedtuple Factory Function for Tuples with Named Fields. 
* OrderedDict objects:: 
* UserDict objects:: 
* UserList objects:: 
* UserString objects:: 

   ---------- Footnotes ----------

   (1) 
https://hg.python.org/cpython/file/3.4/Lib/collections/__init__.py


File: python.info,  Node: ChainMap objects,  Next: Counter objects,  Up: collections --- Container datatypes

5.8.3.1 ‘ChainMap’ objects
..........................

New in version 3.3.

A *note ChainMap: 3bc. class is provided for quickly linking a number of
mappings so they can be treated as a single unit.  It is often much
faster than creating a new dictionary and running multiple *note
update(): 84c. calls.

The class can be used to simulate nested scopes and is useful in
templating.

 -- Class: collections.ChainMap (*maps)

     A *note ChainMap: 3bc. groups multiple dicts or other mappings
     together to create a single, updateable view.  If no `maps' are
     specified, a single empty dictionary is provided so that a new
     chain always has at least one mapping.

     The underlying mappings are stored in a list.  That list is public
     and can accessed or updated using the `maps' attribute.  There is
     no other state.

     Lookups search the underlying mappings successively until a key is
     found.  In contrast, writes, updates, and deletions only operate on
     the first mapping.

     A *note ChainMap: 3bc. incorporates the underlying mappings by
     reference.  So, if one of the underlying mappings gets updated,
     those changes will be reflected in *note ChainMap: 3bc.

     All of the usual dictionary methods are supported.  In addition,
     there is a `maps' attribute, a method for creating new subcontexts,
     and a property for accessing all but the first mapping:

      -- Attribute: maps

          A user updateable list of mappings.  The list is ordered from
          first-searched to last-searched.  It is the only stored state
          and can be modified to change which mappings are searched.
          The list should always contain at least one mapping.

      -- Method: new_child (m=None)

          Returns a new *note ChainMap: 3bc. containing a new map
          followed by all of the maps in the current instance.  If ‘m’
          is specified, it becomes the new map at the front of the list
          of mappings; if not specified, an empty dict is used, so that
          a call to ‘d.new_child()’ is equivalent to: ‘ChainMap({},
          *d.maps)’.  This method is used for creating subcontexts that
          can be updated without altering values in any of the parent
          mappings.

          Changed in version 3.4: The optional ‘m’ parameter was added.

      -- Attribute: parents

          Property returning a new *note ChainMap: 3bc. containing all
          of the maps in the current instance except the first one.
          This is useful for skipping the first map in the search.  Use
          cases are similar to those for the *note nonlocal: 69a.
          keyword used in *note nested scopes: 10bd.  The use cases also
          parallel those for the built-in *note super(): 311. function.
          A reference to ‘d.parents’ is equivalent to:
          ‘ChainMap(*d.maps[1:])’.

See also
........

   * The MultiContext class(1) in the Enthought CodeTools package(2) has
     options to support writing to any mapping in the chain.

   * Django’s Context class(3) for templating is a read-only chain of
     mappings.  It also features pushing and popping of contexts similar
     to the *note new_child(): 1ab. method and the *note parents():
     10bc. property.

   * The Nested Contexts recipe(4) has options to control whether writes
     and other mutations apply only to the first mapping or to any
     mapping in the chain.

   * A greatly simplified read-only version of Chainmap(5).

* Menu:

* ChainMap Examples and Recipes:: 

   ---------- Footnotes ----------

   (1) 
https://github.com/enthought/codetools/blob/4.0.0/codetools/contexts/multi_context.py

   (2) https://github.com/enthought/codetools

   (3) 
https://github.com/django/django/blob/master/django/template/context.py

   (4) http://code.activestate.com/recipes/577434/

   (5) http://code.activestate.com/recipes/305268/


File: python.info,  Node: ChainMap Examples and Recipes,  Up: ChainMap objects

5.8.3.2 ‘ChainMap’ Examples and Recipes
.......................................

This section shows various approaches to working with chained maps.

Example of simulating Python’s internal lookup chain:

     import builtins
     pylookup = ChainMap(locals(), globals(), vars(builtins))

Example of letting user specified command-line arguments take precedence
over environment variables which in turn take precedence over default
values:

     import os, argparse

     defaults = {'color': 'red', 'user': 'guest'}

     parser = argparse.ArgumentParser()
     parser.add_argument('-u', '--user')
     parser.add_argument('-c', '--color')
     namespace = parser.parse_args()
     command_line_args = {k:v for k, v in vars(namespace).items() if v}

     combined = ChainMap(command_line_args, os.environ, defaults)
     print(combined['color'])
     print(combined['user'])

Example patterns for using the *note ChainMap: 3bc. class to simulate
nested contexts:

     c = ChainMap()        # Create root context
     d = c.new_child()     # Create nested child context
     e = c.new_child()     # Child of c, independent from d
     e.maps[0]             # Current context dictionary -- like Python's locals()
     e.maps[-1]            # Root context -- like Python's globals()
     e.parents             # Enclosing context chain -- like Python's nonlocals

     d['x']                # Get first key in the chain of contexts
     d['x'] = 1            # Set value in current context
     del d['x']            # Delete from current context
     list(d)               # All nested values
     k in d                # Check all nested values
     len(d)                # Number of nested values
     d.items()             # All nested items
     dict(d)               # Flatten into a regular dictionary

The *note ChainMap: 3bc. class only makes updates (writes and deletions)
to the first mapping in the chain while lookups will search the full
chain.  However, if deep writes and deletions are desired, it is easy to
make a subclass that updates keys found deeper in the chain:

     class DeepChainMap(ChainMap):
         'Variant of ChainMap that allows direct updates to inner scopes'

         def __setitem__(self, key, value):
             for mapping in self.maps:
                 if key in mapping:
                     mapping[key] = value
                     return
             self.maps[0][key] = value

         def __delitem__(self, key):
             for mapping in self.maps:
                 if key in mapping:
                     del mapping[key]
                     return
             raise KeyError(key)

     >>> d = DeepChainMap({'zebra': 'black'}, {'elephant': 'blue'}, {'lion': 'yellow'})
     >>> d['lion'] = 'orange'         # update an existing key two levels down
     >>> d['snake'] = 'red'           # new keys get added to the topmost dict
     >>> del d['elephant']            # remove an existing key one level down
     DeepChainMap({'zebra': 'black', 'snake': 'red'}, {}, {'lion': 'orange'})


File: python.info,  Node: Counter objects,  Next: deque objects,  Prev: ChainMap objects,  Up: collections --- Container datatypes

5.8.3.3 ‘Counter’ objects
.........................

A counter tool is provided to support convenient and rapid tallies.  For
example:

     >>> # Tally occurrences of words in a list
     >>> cnt = Counter()
     >>> for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:
     ...     cnt[word] += 1
     >>> cnt
     Counter({'blue': 3, 'red': 2, 'green': 1})

     >>> # Find the ten most common words in Hamlet
     >>> import re
     >>> words = re.findall(r'\w+', open('hamlet.txt').read().lower())
     >>> Counter(words).most_common(10)
     [('the', 1143), ('and', 966), ('to', 762), ('of', 669), ('i', 631),
      ('you', 554),  ('a', 546), ('my', 514), ('hamlet', 471), ('in', 451)]

 -- Class: collections.Counter ([iterable-or-mapping])

     A *note Counter: 3bd. is a *note dict: 380. subclass for counting
     hashable objects.  It is an unordered collection where elements are
     stored as dictionary keys and their counts are stored as dictionary
     values.  Counts are allowed to be any integer value including zero
     or negative counts.  The *note Counter: 3bd. class is similar to
     bags or multisets in other languages.

     Elements are counted from an `iterable' or initialized from another
     `mapping' (or counter):

          >>> c = Counter()                           # a new, empty counter
          >>> c = Counter('gallahad')                 # a new counter from an iterable
          >>> c = Counter({'red': 4, 'blue': 2})      # a new counter from a mapping
          >>> c = Counter(cats=4, dogs=8)             # a new counter from keyword args

     Counter objects have a dictionary interface except that they return
     a zero count for missing items instead of raising a *note KeyError:
     706.:

          >>> c = Counter(['eggs', 'ham'])
          >>> c['bacon']                              # count of a missing element is zero
          0

     Setting a count to zero does not remove an element from a counter.
     Use ‘del’ to remove it entirely:

          >>> c['sausage'] = 0                        # counter entry with a zero count
          >>> del c['sausage']                        # del actually removes the entry

     New in version 3.1.

     Counter objects support three methods beyond those available for
     all dictionaries:

      -- Method: elements ()

          Return an iterator over elements repeating each as many times
          as its count.  Elements are returned in arbitrary order.  If
          an element’s count is less than one, *note elements(): 708.
          will ignore it.

               >>> c = Counter(a=4, b=2, c=0, d=-2)
               >>> list(c.elements())
               ['a', 'a', 'a', 'a', 'b', 'b']

      -- Method: most_common ([n])

          Return a list of the `n' most common elements and their counts
          from the most common to the least.  If `n' is not specified,
          *note most_common(): 707. returns `all' elements in the
          counter.  Elements with equal counts are ordered arbitrarily:

               >>> Counter('abracadabra').most_common(3)
               [('a', 5), ('r', 2), ('b', 2)]

      -- Method: subtract ([iterable-or-mapping])

          Elements are subtracted from an `iterable' or from another
          `mapping' (or counter).  Like *note dict.update(): 84c. but
          subtracts counts instead of replacing them.  Both inputs and
          outputs may be zero or negative.

               >>> c = Counter(a=4, b=2, c=0, d=-2)
               >>> d = Counter(a=1, b=2, c=3, d=4)
               >>> c.subtract(d)
               >>> c
               Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})

          New in version 3.2.

     The usual dictionary methods are available for *note Counter: 3bd.
     objects except for two which work differently for counters.

      -- Method: fromkeys (iterable)

          This class method is not implemented for *note Counter: 3bd.
          objects.

      -- Method: update ([iterable-or-mapping])

          Elements are counted from an `iterable' or added-in from
          another `mapping' (or counter).  Like *note dict.update():
          84c. but adds counts instead of replacing them.  Also, the
          `iterable' is expected to be a sequence of elements, not a
          sequence of ‘(key, value)’ pairs.

Common patterns for working with *note Counter: 3bd. objects:

     sum(c.values())                 # total of all counts
     c.clear()                       # reset all counts
     list(c)                         # list unique elements
     set(c)                          # convert to a set
     dict(c)                         # convert to a regular dictionary
     c.items()                       # convert to a list of (elem, cnt) pairs
     Counter(dict(list_of_pairs))    # convert from a list of (elem, cnt) pairs
     c.most_common()[:-n-1:-1]       # n least common elements
     +c                              # remove zero and negative counts

Several mathematical operations are provided for combining *note
Counter: 3bd. objects to produce multisets (counters that have counts
greater than zero).  Addition and subtraction combine counters by adding
or subtracting the counts of corresponding elements.  Intersection and
union return the minimum and maximum of corresponding counts.  Each
operation can accept inputs with signed counts, but the output will
exclude results with counts of zero or less.

     >>> c = Counter(a=3, b=1)
     >>> d = Counter(a=1, b=2)
     >>> c + d                       # add two counters together:  c[x] + d[x]
     Counter({'a': 4, 'b': 3})
     >>> c - d                       # subtract (keeping only positive counts)
     Counter({'a': 2})
     >>> c & d                       # intersection:  min(c[x], d[x])
     Counter({'a': 1, 'b': 1})
     >>> c | d                       # union:  max(c[x], d[x])
     Counter({'a': 3, 'b': 2})

Unary addition and substraction are shortcuts for adding an empty
counter or subtracting from an empty counter.

     >>> c = Counter(a=2, b=-4)
     >>> +c
     Counter({'a': 2})
     >>> -c
     Counter({'b': 4})

New in version 3.3: Added support for unary plus, unary minus, and
in-place multiset operations.

     Note: Counters were primarily designed to work with positive
     integers to represent running counts; however, care was taken to
     not unnecessarily preclude use cases needing other types or
     negative values.  To help with those use cases, this section
     documents the minimum range and type restrictions.

        * The *note Counter: 3bd. class itself is a dictionary subclass
          with no restrictions on its keys and values.  The values are
          intended to be numbers representing counts, but you `could'
          store anything in the value field.

        * The ‘most_common()’ method requires only that the values be
          orderable.

        * For in-place operations such as ‘c[key] += 1’, the value type
          need only support addition and subtraction.  So fractions,
          floats, and decimals would work and negative values are
          supported.  The same is also true for ‘update()’ and
          ‘subtract()’ which allow negative and zero values for both
          inputs and outputs.

        * The multiset methods are designed only for use cases with
          positive values.  The inputs may be negative or zero, but only
          outputs with positive values are created.  There are no type
          restrictions, but the value type needs to support addition,
          subtraction, and comparison.

        * The ‘elements()’ method requires integer counts.  It ignores
          zero and negative counts.

See also
........

   * Bag class(1) in Smalltalk.

   * Wikipedia entry for Multisets(2).

   * C++ multisets(3) tutorial with examples.

   * For mathematical operations on multisets and their use cases, see
     `Knuth, Donald.  The Art of Computer Programming Volume II, Section
     4.6.3, Exercise 19'.

   * To enumerate all distinct multisets of a given size over a given
     set of elements, see *note
     itertools.combinations_with_replacement(): 66f.

          map(Counter, combinations_with_replacement(’ABC’, 2)) –> AA AB
          AC BB BC CC

   ---------- Footnotes ----------

   (1) 
http://www.gnu.org/software/smalltalk/manual-base/html_node/Bag.html

   (2) http://en.wikipedia.org/wiki/Multiset

   (3) 
http://www.demo2s.com/Tutorial/Cpp/0380__set-multiset/Catalog0380__set-multiset.htm


File: python.info,  Node: deque objects,  Next: defaultdict objects,  Prev: Counter objects,  Up: collections --- Container datatypes

5.8.3.4 ‘deque’ objects
.......................

 -- Class: collections.deque ([iterable[, maxlen]])

     Returns a new deque object initialized left-to-right (using *note
     append(): 10c3.) with data from `iterable'.  If `iterable' is not
     specified, the new deque is empty.

     Deques are a generalization of stacks and queues (the name is
     pronounced "deck" and is short for "double-ended queue").  Deques
     support thread-safe, memory efficient appends and pops from either
     side of the deque with approximately the same O(1) performance in
     either direction.

     Though *note list: 397. objects support similar operations, they
     are optimized for fast fixed-length operations and incur O(n)
     memory movement costs for ‘pop(0)’ and ‘insert(0, v)’ operations
     which change both the size and position of the underlying data
     representation.

     If `maxlen' is not specified or is `None', deques may grow to an
     arbitrary length.  Otherwise, the deque is bounded to the specified
     maximum length.  Once a bounded length deque is full, when new
     items are added, a corresponding number of items are discarded from
     the opposite end.  Bounded length deques provide functionality
     similar to the ‘tail’ filter in Unix.  They are also useful for
     tracking transactions and other pools of data where only the most
     recent activity is of interest.

     Deque objects support the following methods:

      -- Method: append (x)

          Add `x' to the right side of the deque.

      -- Method: appendleft (x)

          Add `x' to the left side of the deque.

      -- Method: clear ()

          Remove all elements from the deque leaving it with length 0.

      -- Method: count (x)

          Count the number of deque elements equal to `x'.

          New in version 3.2.

      -- Method: extend (iterable)

          Extend the right side of the deque by appending elements from
          the iterable argument.

      -- Method: extendleft (iterable)

          Extend the left side of the deque by appending elements from
          `iterable'.  Note, the series of left appends results in
          reversing the order of elements in the iterable argument.

      -- Method: pop ()

          Remove and return an element from the right side of the deque.
          If no elements are present, raises an *note IndexError: 908.

      -- Method: popleft ()

          Remove and return an element from the left side of the deque.
          If no elements are present, raises an *note IndexError: 908.

      -- Method: remove (value)

          Removed the first occurrence of `value'.  If not found, raises
          a *note ValueError: 321.

      -- Method: reverse ()

          Reverse the elements of the deque in-place and then return
          ‘None’.

          New in version 3.2.

      -- Method: rotate (n)

          Rotate the deque `n' steps to the right.  If `n' is negative,
          rotate to the left.  Rotating one step to the right is
          equivalent to: ‘d.appendleft(d.pop())’.

     Deque objects also provide one read-only attribute:

      -- Attribute: maxlen

          Maximum size of a deque or `None' if unbounded.

          New in version 3.1.

In addition to the above, deques support iteration, pickling, ‘len(d)’,
‘reversed(d)’, ‘copy.copy(d)’, ‘copy.deepcopy(d)’, membership testing
with the *note in: 6d5. operator, and subscript references such as
‘d[-1]’.  Indexed access is O(1) at both ends but slows to O(n) in the
middle.  For fast random access, use lists instead.

Example:

     >>> from collections import deque
     >>> d = deque('ghi')                 # make a new deque with three items
     >>> for elem in d:                   # iterate over the deque's elements
     ...     print(elem.upper())
     G
     H
     I

     >>> d.append('j')                    # add a new entry to the right side
     >>> d.appendleft('f')                # add a new entry to the left side
     >>> d                                # show the representation of the deque
     deque(['f', 'g', 'h', 'i', 'j'])

     >>> d.pop()                          # return and remove the rightmost item
     'j'
     >>> d.popleft()                      # return and remove the leftmost item
     'f'
     >>> list(d)                          # list the contents of the deque
     ['g', 'h', 'i']
     >>> d[0]                             # peek at leftmost item
     'g'
     >>> d[-1]                            # peek at rightmost item
     'i'

     >>> list(reversed(d))                # list the contents of a deque in reverse
     ['i', 'h', 'g']
     >>> 'h' in d                         # search the deque
     True
     >>> d.extend('jkl')                  # add multiple elements at once
     >>> d
     deque(['g', 'h', 'i', 'j', 'k', 'l'])
     >>> d.rotate(1)                      # right rotation
     >>> d
     deque(['l', 'g', 'h', 'i', 'j', 'k'])
     >>> d.rotate(-1)                     # left rotation
     >>> d
     deque(['g', 'h', 'i', 'j', 'k', 'l'])

     >>> deque(reversed(d))               # make a new deque in reverse order
     deque(['l', 'k', 'j', 'i', 'h', 'g'])
     >>> d.clear()                        # empty the deque
     >>> d.pop()                          # cannot pop from an empty deque
     Traceback (most recent call last):
         File "<pyshell#6>", line 1, in -toplevel-
             d.pop()
     IndexError: pop from an empty deque

     >>> d.extendleft('abc')              # extendleft() reverses the input order
     >>> d
     deque(['c', 'b', 'a'])

* Menu:

* deque Recipes:: 


File: python.info,  Node: deque Recipes,  Up: deque objects

5.8.3.5 ‘deque’ Recipes
.......................

This section shows various approaches to working with deques.

Bounded length deques provide functionality similar to the ‘tail’ filter
in Unix:

     def tail(filename, n=10):
         'Return the last n lines of a file'
         with open(filename) as f:
             return deque(f, n)

Another approach to using deques is to maintain a sequence of recently
added elements by appending to the right and popping to the left:

     def moving_average(iterable, n=3):
         # moving_average([40, 30, 50, 46, 39, 44]) --> 40.0 42.0 45.0 43.0
         # http://en.wikipedia.org/wiki/Moving_average
         it = iter(iterable)
         d = deque(itertools.islice(it, n-1))
         d.appendleft(0)
         s = sum(d)
         for elem in it:
             s += elem - d.popleft()
             d.append(elem)
             yield s / n

The ‘rotate()’ method provides a way to implement *note deque: 589.
slicing and deletion.  For example, a pure Python implementation of ‘del
d[n]’ relies on the ‘rotate()’ method to position elements to be popped:

     def delete_nth(d, n):
         d.rotate(-n)
         d.popleft()
         d.rotate(n)

To implement *note deque: 589. slicing, use a similar approach applying
‘rotate()’ to bring a target element to the left side of the deque.
Remove old entries with ‘popleft()’, add new entries with ‘extend()’,
and then reverse the rotation.  With minor variations on that approach,
it is easy to implement Forth style stack manipulations such as ‘dup’,
‘drop’, ‘swap’, ‘over’, ‘pick’, ‘rot’, and ‘roll’.


File: python.info,  Node: defaultdict objects,  Next: namedtuple Factory Function for Tuples with Named Fields,  Prev: deque objects,  Up: collections --- Container datatypes

5.8.3.6 ‘defaultdict’ objects
.............................

 -- Class: collections.defaultdict ([default_factory[, ...]])

     Returns a new dictionary-like object.  *note defaultdict: 55a. is a
     subclass of the built-in *note dict: 380. class.  It overrides one
     method and adds one writable instance variable.  The remaining
     functionality is the same as for the *note dict: 380. class and is
     not documented here.

     The first argument provides the initial value for the *note
     default_factory: 10ce. attribute; it defaults to ‘None’.  All
     remaining arguments are treated the same as if they were passed to
     the *note dict: 380. constructor, including keyword arguments.

     *note defaultdict: 55a. objects support the following method in
     addition to the standard *note dict: 380. operations:

      -- Method: __missing__ (key)

          If the *note default_factory: 10ce. attribute is ‘None’, this
          raises a *note KeyError: 706. exception with the `key' as
          argument.

          If *note default_factory: 10ce. is not ‘None’, it is called
          without arguments to provide a default value for the given
          `key', this value is inserted in the dictionary for the `key',
          and returned.

          If calling *note default_factory: 10ce. raises an exception
          this exception is propagated unchanged.

          This method is called by the *note __getitem__(): 88d. method
          of the *note dict: 380. class when the requested key is not
          found; whatever it returns or raises is then returned or
          raised by *note __getitem__(): 88d.

          Note that *note __missing__(): 10cf. is `not' called for any
          operations besides *note __getitem__(): 88d.  This means that
          ‘get()’ will, like normal dictionaries, return ‘None’ as a
          default rather than using *note default_factory: 10ce.

     *note defaultdict: 55a. objects support the following instance
     variable:

      -- Attribute: default_factory

          This attribute is used by the *note __missing__(): 10cf.
          method; it is initialized from the first argument to the
          constructor, if present, or to ‘None’, if absent.

* Menu:

* defaultdict Examples:: 


File: python.info,  Node: defaultdict Examples,  Up: defaultdict objects

5.8.3.7 ‘defaultdict’ Examples
..............................

Using *note list: 397. as the ‘default_factory’, it is easy to group a
sequence of key-value pairs into a dictionary of lists:

     >>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
     >>> d = defaultdict(list)
     >>> for k, v in s:
     ...     d[k].append(v)
     ...
     >>> list(d.items())
     [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]

When each key is encountered for the first time, it is not already in
the mapping; so an entry is automatically created using the
‘default_factory’ function which returns an empty *note list: 397.  The
‘list.append()’ operation then attaches the value to the new list.  When
keys are encountered again, the look-up proceeds normally (returning the
list for that key) and the ‘list.append()’ operation adds another value
to the list.  This technique is simpler and faster than an equivalent
technique using *note dict.setdefault(): 399.:

     >>> d = {}
     >>> for k, v in s:
     ...     d.setdefault(k, []).append(v)
     ...
     >>> list(d.items())
     [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]

Setting the ‘default_factory’ to *note int: 185. makes the *note
defaultdict: 55a. useful for counting (like a bag or multiset in other
languages):

     >>> s = 'mississippi'
     >>> d = defaultdict(int)
     >>> for k in s:
     ...     d[k] += 1
     ...
     >>> list(d.items())
     [('i', 4), ('p', 2), ('s', 4), ('m', 1)]

When a letter is first encountered, it is missing from the mapping, so
the ‘default_factory’ function calls *note int(): 185. to supply a
default count of zero.  The increment operation then builds up the count
for each letter.

The function *note int(): 185. which always returns zero is just a
special case of constant functions.  A faster and more flexible way to
create constant functions is to use a lambda function which can supply
any constant value (not just zero):

     >>> def constant_factory(value):
     ...     return lambda: value
     >>> d = defaultdict(constant_factory('<missing>'))
     >>> d.update(name='John', action='ran')
     >>> '%(name)s %(action)s to %(object)s' % d
     'John ran to <missing>'

Setting the ‘default_factory’ to *note set: 5a4. makes the *note
defaultdict: 55a. useful for building a dictionary of sets:

     >>> s = [('red', 1), ('blue', 2), ('red', 3), ('blue', 4), ('red', 1), ('blue', 4)]
     >>> d = defaultdict(set)
     >>> for k, v in s:
     ...     d[k].add(v)
     ...
     >>> list(d.items())
     [('blue', {2, 4}), ('red', {1, 3})]


File: python.info,  Node: namedtuple Factory Function for Tuples with Named Fields,  Next: OrderedDict objects,  Prev: defaultdict objects,  Up: collections --- Container datatypes

5.8.3.8 ‘namedtuple()’ Factory Function for Tuples with Named Fields
....................................................................

Named tuples assign meaning to each position in a tuple and allow for
more readable, self-documenting code.  They can be used wherever regular
tuples are used, and they add the ability to access fields by name
instead of position index.

 -- Function: collections.namedtuple (typename, field_names,
          verbose=False, rename=False)

     Returns a new tuple subclass named `typename'.  The new subclass is
     used to create tuple-like objects that have fields accessible by
     attribute lookup as well as being indexable and iterable.
     Instances of the subclass also have a helpful docstring (with
     typename and field_names) and a helpful *note __repr__(): 5a3.
     method which lists the tuple contents in a ‘name=value’ format.

     The `field_names' are a single string with each fieldname separated
     by whitespace and/or commas, for example ‘'x y'’ or ‘'x, y'’.
     Alternatively, `field_names' can be a sequence of strings such as
     ‘['x', 'y']’.

     Any valid Python identifier may be used for a fieldname except for
     names starting with an underscore.  Valid identifiers consist of
     letters, digits, and underscores but do not start with a digit or
     underscore and cannot be a *note keyword: a2. such as `class',
     `for', `return', `global', `pass', or `raise'.

     If `rename' is true, invalid fieldnames are automatically replaced
     with positional names.  For example, ‘['abc', 'def', 'ghi', 'abc']’
     is converted to ‘['abc', '_1', 'ghi', '_3']’, eliminating the
     keyword ‘def’ and the duplicate fieldname ‘abc’.

     If `verbose' is true, the class definition is printed after it is
     built.  This option is outdated; instead, it is simpler to print
     the ‘_source’ attribute.

     Named tuple instances do not have per-instance dictionaries, so
     they are lightweight and require no more memory than regular
     tuples.

     Changed in version 3.1: Added support for `rename'.

     >>> # Basic example
     >>> Point = namedtuple('Point', ['x', 'y'])
     >>> p = Point(11, y=22)     # instantiate with positional or keyword arguments
     >>> p[0] + p[1]             # indexable like the plain tuple (11, 22)
     33
     >>> x, y = p                # unpack like a regular tuple
     >>> x, y
     (11, 22)
     >>> p.x + p.y               # fields also accessible by name
     33
     >>> p                       # readable __repr__ with a name=value style
     Point(x=11, y=22)

Named tuples are especially useful for assigning field names to result
tuples returned by the *note csv: 29. or *note sqlite3: ed. modules:

     EmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, department, paygrade')

     import csv
     for emp in map(EmployeeRecord._make, csv.reader(open("employees.csv", "rb"))):
         print(emp.name, emp.title)

     import sqlite3
     conn = sqlite3.connect('/companydata')
     cursor = conn.cursor()
     cursor.execute('SELECT name, age, title, department, paygrade FROM employees')
     for emp in map(EmployeeRecord._make, cursor.fetchall()):
         print(emp.name, emp.title)

In addition to the methods inherited from tuples, named tuples support
three additional methods and two attributes.  To prevent conflicts with
field names, the method and attribute names start with an underscore.

 -- Class Method: somenamedtuple._make (iterable)

     Class method that makes a new instance from an existing sequence or
     iterable.

          >>> t = [11, 22]
          >>> Point._make(t)
          Point(x=11, y=22)

 -- Method: somenamedtuple._asdict ()

     Return a new *note OrderedDict: 587. which maps field names to
     their corresponding values.  Note, this method is no longer needed
     now that the same effect can be achieved by using the built-in
     *note vars(): a88. function:

          >>> vars(p)
          OrderedDict([('x', 11), ('y', 22)])

     Changed in version 3.1: Returns an *note OrderedDict: 587. instead
     of a regular *note dict: 380.

 -- Method: somenamedtuple._replace (kwargs)

     Return a new instance of the named tuple replacing specified fields
     with new values:

          >>> p = Point(x=11, y=22)
          >>> p._replace(x=33)
          Point(x=33, y=22)

          >>> for partnum, record in inventory.items():
          ...     inventory[partnum] = record._replace(price=newprices[partnum], timestamp=time.now())

 -- Attribute: somenamedtuple._source

     A string with the pure Python source code used to create the named
     tuple class.  The source makes the named tuple self-documenting.
     It can be printed, executed using *note exec(): 6a0, or saved to a
     file and imported.

     New in version 3.3.

 -- Attribute: somenamedtuple._fields

     Tuple of strings listing the field names.  Useful for introspection
     and for creating new named tuple types from existing named tuples.

          >>> p._fields            # view the field names
          ('x', 'y')

          >>> Color = namedtuple('Color', 'red green blue')
          >>> Pixel = namedtuple('Pixel', Point._fields + Color._fields)
          >>> Pixel(11, 22, 128, 255, 0)
          Pixel(x=11, y=22, red=128, green=255, blue=0)

To retrieve a field whose name is stored in a string, use the *note
getattr(): 55f. function:

     >>> getattr(p, 'x')
     11

To convert a dictionary to a named tuple, use the double-star-operator
(as described in *note Unpacking Argument Lists: a45.):

     >>> d = {'x': 11, 'y': 22}
     >>> Point(**d)
     Point(x=11, y=22)

Since a named tuple is a regular Python class, it is easy to add or
change functionality with a subclass.  Here is how to add a calculated
field and a fixed-width print format:

     >>> class Point(namedtuple('Point', 'x y')):
         __slots__ = ()
         @property
         def hypot(self):
             return (self.x ** 2 + self.y ** 2) ** 0.5
         def __str__(self):
             return 'Point: x=%6.3f  y=%6.3f  hypot=%6.3f' % (self.x, self.y, self.hypot)

     >>> for p in Point(3, 4), Point(14, 5/7):
         print(p)
     Point: x= 3.000  y= 4.000  hypot= 5.000
     Point: x=14.000  y= 0.714  hypot=14.018

The subclass shown above sets ‘__slots__’ to an empty tuple.  This helps
keep memory requirements low by preventing the creation of instance
dictionaries.

Subclassing is not useful for adding new, stored fields.  Instead,
simply create a new named tuple type from the ‘_fields’ attribute:

     >>> Point3D = namedtuple('Point3D', Point._fields + ('z',))

Default values can be implemented by using ‘_replace()’ to customize a
prototype instance:

     >>> Account = namedtuple('Account', 'owner balance transaction_count')
     >>> default_account = Account('<owner name>', 0.0, 0)
     >>> johns_account = default_account._replace(owner='John')
     >>> janes_account = default_account._replace(owner='Jane')

Enumerated constants can be implemented with named tuples, but it is
simpler and more efficient to use a simple *note Enum: 10d6.:

     >>> Status = namedtuple('Status', 'open pending closed')._make(range(3))
     >>> Status.open, Status.pending, Status.closed
     (0, 1, 2)
     >>> from enum import Enum
     >>> class Status(Enum):
     ...     open, pending, closed = range(3)

See also
........

   * Recipe for named tuple abstract base class with a metaclass
     mix-in(1) by Jan Kaliszewski.  Besides providing an *note abstract
     base class: 550. for named tuples, it also supports an alternate
     *note metaclass: 10d7.-based constructor that is convenient for use
     cases where named tuples are being subclassed.

   ---------- Footnotes ----------

   (1) 
http://code.activestate.com/recipes/577629-namedtupleabc-abstract-base-class-mix-in-for-named/


File: python.info,  Node: OrderedDict objects,  Next: UserDict objects,  Prev: namedtuple Factory Function for Tuples with Named Fields,  Up: collections --- Container datatypes

5.8.3.9 ‘OrderedDict’ objects
.............................

Ordered dictionaries are just like regular dictionaries but they
remember the order that items were inserted.  When iterating over an
ordered dictionary, the items are returned in the order their keys were
first added.

 -- Class: collections.OrderedDict ([items])

     Return an instance of a dict subclass, supporting the usual *note
     dict: 380. methods.  An `OrderedDict' is a dict that remembers the
     order that keys were first inserted.  If a new entry overwrites an
     existing entry, the original insertion position is left unchanged.
     Deleting an entry and reinserting it will move it to the end.

     New in version 3.1.

      -- Method: popitem (last=True)

          The *note popitem(): 6ea. method for ordered dictionaries
          returns and removes a (key, value) pair.  The pairs are
          returned in LIFO order if `last' is true or FIFO order if
          false.

      -- Method: move_to_end (key, last=True)

          Move an existing `key' to either end of an ordered dictionary.
          The item is moved to the right end if `last' is true (the
          default) or to the beginning if `last' is false.  Raises *note
          KeyError: 706. if the `key' does not exist:

               >>> d = OrderedDict.fromkeys('abcde')
               >>> d.move_to_end('b')
               >>> ''.join(d.keys())
               'acdeb'
               >>> d.move_to_end('b', last=False)
               >>> ''.join(d.keys())
               'bacde'

          New in version 3.2.

In addition to the usual mapping methods, ordered dictionaries also
support reverse iteration using *note reversed(): 188.

Equality tests between *note OrderedDict: 587. objects are
order-sensitive and are implemented as
‘list(od1.items())==list(od2.items())’.  Equality tests between *note
OrderedDict: 587. objects and other *note Mapping: 10d9. objects are
order-insensitive like regular dictionaries.  This allows *note
OrderedDict: 587. objects to be substituted anywhere a regular
dictionary is used.

The *note OrderedDict: 587. constructor and ‘update()’ method both
accept keyword arguments, but their order is lost because Python’s
function call semantics pass-in keyword arguments using a regular
unordered dictionary.

* Menu:

* OrderedDict Examples and Recipes:: 


File: python.info,  Node: OrderedDict Examples and Recipes,  Up: OrderedDict objects

5.8.3.10 ‘OrderedDict’ Examples and Recipes
...........................................

Since an ordered dictionary remembers its insertion order, it can be
used in conjuction with sorting to make a sorted dictionary:

     >>> # regular unsorted dictionary
     >>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

     >>> # dictionary sorted by key
     >>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))
     OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])

     >>> # dictionary sorted by value
     >>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))
     OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])

     >>> # dictionary sorted by length of the key string
     >>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))
     OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])

The new sorted dictionaries maintain their sort order when entries are
deleted.  But when new keys are added, the keys are appended to the end
and the sort is not maintained.

It is also straight-forward to create an ordered dictionary variant that
remembers the order the keys were `last' inserted.  If a new entry
overwrites an existing entry, the original insertion position is changed
and moved to the end:

     class LastUpdatedOrderedDict(OrderedDict):
         'Store items in the order the keys were last added'

         def __setitem__(self, key, value):
             if key in self:
                 del self[key]
             OrderedDict.__setitem__(self, key, value)

An ordered dictionary can be combined with the *note Counter: 3bd. class
so that the counter remembers the order elements are first encountered:

     class OrderedCounter(Counter, OrderedDict):
         'Counter that remembers the order elements are first encountered'

         def __repr__(self):
             return '%s(%r)' % (self.__class__.__name__, OrderedDict(self))

         def __reduce__(self):
             return self.__class__, (OrderedDict(self),)


File: python.info,  Node: UserDict objects,  Next: UserList objects,  Prev: OrderedDict objects,  Up: collections --- Container datatypes

5.8.3.11 ‘UserDict’ objects
...........................

The class, *note UserDict: 10b6. acts as a wrapper around dictionary
objects.  The need for this class has been partially supplanted by the
ability to subclass directly from *note dict: 380.; however, this class
can be easier to work with because the underlying dictionary is
accessible as an attribute.

 -- Class: collections.UserDict ([initialdata])

     Class that simulates a dictionary.  The instance’s contents are
     kept in a regular dictionary, which is accessible via the *note
     data: 10dc. attribute of *note UserDict: 10b6. instances.  If
     `initialdata' is provided, *note data: 10dc. is initialized with
     its contents; note that a reference to `initialdata' will not be
     kept, allowing it be used for other purposes.

     In addition to supporting the methods and operations of mappings,
     *note UserDict: 10b6. instances provide the following attribute:

      -- Attribute: data

          A real dictionary used to store the contents of the *note
          UserDict: 10b6. class.


File: python.info,  Node: UserList objects,  Next: UserString objects,  Prev: UserDict objects,  Up: collections --- Container datatypes

5.8.3.12 ‘UserList’ objects
...........................

This class acts as a wrapper around list objects.  It is a useful base
class for your own list-like classes which can inherit from them and
override existing methods or add new ones.  In this way, one can add new
behaviors to lists.

The need for this class has been partially supplanted by the ability to
subclass directly from *note list: 397.; however, this class can be
easier to work with because the underlying list is accessible as an
attribute.

 -- Class: collections.UserList ([list])

     Class that simulates a list.  The instance’s contents are kept in a
     regular list, which is accessible via the *note data: 10de.
     attribute of *note UserList: 10b7. instances.  The instance’s
     contents are initially set to a copy of `list', defaulting to the
     empty list ‘[]’.  `list' can be any iterable, for example a real
     Python list or a *note UserList: 10b7. object.

     In addition to supporting the methods and operations of mutable
     sequences, *note UserList: 10b7. instances provide the following
     attribute:

      -- Attribute: data

          A real *note list: 397. object used to store the contents of
          the *note UserList: 10b7. class.

`Subclassing requirements:' Subclasses of *note UserList: 10b7. are
expected to offer a constructor which can be called with either no
arguments or one argument.  List operations which return a new sequence
attempt to create an instance of the actual implementation class.  To do
so, it assumes that the constructor can be called with a single
parameter, which is a sequence object used as a data source.

If a derived class does not wish to comply with this requirement, all of
the special methods supported by this class will need to be overridden;
please consult the sources for information about the methods which need
to be provided in that case.


File: python.info,  Node: UserString objects,  Prev: UserList objects,  Up: collections --- Container datatypes

5.8.3.13 ‘UserString’ objects
.............................

The class, *note UserString: 10b8. acts as a wrapper around string
objects.  The need for this class has been partially supplanted by the
ability to subclass directly from *note str: 178.; however, this class
can be easier to work with because the underlying string is accessible
as an attribute.

 -- Class: collections.UserString ([sequence])

     Class that simulates a string or a Unicode string object.  The
     instance’s content is kept in a regular string object, which is
     accessible via the ‘data’ attribute of *note UserString: 10b8.
     instances.  The instance’s contents are initially set to a copy of
     `sequence'.  The `sequence' can be an instance of *note bytes: 179,
     *note str: 178, *note UserString: 10b8. (or a subclass) or an
     arbitrary sequence which can be converted into a string using the
     built-in *note str(): 178. function.


File: python.info,  Node: collections abc --- Abstract Base Classes for Containers,  Next: heapq --- Heap queue algorithm,  Prev: collections --- Container datatypes,  Up: Data Types

5.8.4 ‘collections.abc’ — Abstract Base Classes for Containers
--------------------------------------------------------------

New in version 3.3: Formerly, this module was part of the *note
collections: 1e. module.

`Source code:' Lib/_collections_abc.py(1)

__________________________________________________________________

This module provides *note abstract base classes: 550. that can be used
to test whether a class provides a particular interface; for example,
whether it is hashable or whether it is a mapping.

* Menu:

* Collections Abstract Base Classes:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/3.4/Lib/_collections_abc.py


File: python.info,  Node: Collections Abstract Base Classes,  Up: collections abc --- Abstract Base Classes for Containers

5.8.4.1 Collections Abstract Base Classes
.........................................

The collections module offers the following *note ABCs: 550.:

ABC                           Inherits from             Abstract Methods           Mixin Methods
                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------
                                                                                   
*note Container: 10e3.                                  ‘__contains__’
                                                        
                                                                                   
*note Hashable: 10e4.                                   ‘__hash__’
                                                        
                                                                                   
*note Iterable: 10e5.                                   ‘__iter__’
                                                        
                                                                                   
*note Iterator: 10e6.         *note Iterable: 10e5.     ‘__next__’                 ‘__iter__’
                                                                                   
                                                                                   
*note Sized: 10e7.                                      ‘__len__’
                                                        
                                                                                   
*note Callable: 10e8.                                   ‘__call__’
                                                        
                                                                                   
*note Sequence: dd5.          *note Sized: 10e7,        ‘__getitem__’, ‘__len__’   ‘__contains__’, ‘__iter__’, ‘__reversed__’, ‘index’,
                              *note Iterable: 10e5,                                and ‘count’
                              *note Container: 10e3.                               
                              
                                                                                   
*note MutableSequence: 398.   *note Sequence: dd5.      ‘__getitem__’,             Inherited *note Sequence: dd5. methods and ‘append’,
                                                        ‘__setitem__’,             ‘reverse’, ‘extend’, ‘pop’, ‘remove’, and ‘__iadd__’
                                                        ‘__delitem__’,             
                                                        ‘__len__’, ‘insert’
                                                        
                                                                                   
*note Set: e7e.               *note Sized: 10e7,        ‘__contains__’,            ‘__le__’, ‘__lt__’, ‘__eq__’, ‘__ne__’, ‘__gt__’,
                              *note Iterable: 10e5,     ‘__iter__’, ‘__len__’      ‘__ge__’, ‘__and__’, ‘__or__’, ‘__sub__’, ‘__xor__’,
                              *note Container: 10e3.                               and ‘isdisjoint’
                                                                                   
                                                                                   
*note MutableSet: 10e9.       *note Set: e7e.           ‘__contains__’,            Inherited *note Set: e7e. methods and ‘clear’, ‘pop’,
                                                        ‘__iter__’, ‘__len__’,     ‘remove’, ‘__ior__’, ‘__iand__’, ‘__ixor__’, and
                                                        ‘add’, ‘discard’           ‘__isub__’
                                                                                   
                                                                                   
*note Mapping: 10d9.          *note Sized: 10e7,        ‘__getitem__’,             ‘__contains__’, ‘keys’, ‘items’, ‘values’, ‘get’,
                              *note Iterable: 10e5,     ‘__iter__’, ‘__len__’      ‘__eq__’, and ‘__ne__’
                              *note Container: 10e3.                               
                              
                                                                                   
*note MutableMapping: 3d9.    *note Mapping: 10d9.      ‘__getitem__’,             Inherited *note Mapping: 10d9. methods and ‘pop’,
                                                        ‘__setitem__’,             ‘popitem’, ‘clear’, ‘update’, and ‘setdefault’
                                                        ‘__delitem__’,             
                                                        ‘__iter__’, ‘__len__’
                                                        
                                                                                   
*note MappingView: 10ea.      *note Sized: 10e7.                                   ‘__len__’
                                                                                   
                                                                                   
*note ItemsView: 10eb.        *note MappingView:                                   ‘__contains__’, ‘__iter__’
                              10ea, *note Set: e7e.                                
                              
                                                                                   
*note KeysView: 10ec.         *note MappingView:                                   ‘__contains__’, ‘__iter__’
                              10ea, *note Set: e7e.                                
                              
                                                                                   
*note ValuesView: 10ed.       *note MappingView:                                   ‘__contains__’, ‘__iter__’
                              10ea.                                                
                              

 -- Class: collections.abc.Container
 -- Class: collections.abc.Hashable
 -- Class: collections.abc.Sized
 -- Class: collections.abc.Callable

     ABCs for classes that provide respectively the methods *note
     __contains__(): 79c, *note __hash__(): 39f, *note __len__(): 84f,
     and *note __call__(): c01.

 -- Class: collections.abc.Iterable

     ABC for classes that provide the *note __iter__(): 79b. method.
     See also the definition of *note iterable: 5f6.

 -- Class: collections.abc.Iterator

     ABC for classes that provide the *note __iter__(): dcf. and *note
     __next__(): 6c7. methods.  See also the definition of *note
     iterator: d91.

 -- Class: collections.abc.Sequence
 -- Class: collections.abc.MutableSequence

     ABCs for read-only and mutable *note sequences: a1c.

 -- Class: collections.abc.Set
 -- Class: collections.abc.MutableSet

     ABCs for read-only and mutable sets.

 -- Class: collections.abc.Mapping
 -- Class: collections.abc.MutableMapping

     ABCs for read-only and mutable *note mappings: 559.

 -- Class: collections.abc.MappingView
 -- Class: collections.abc.ItemsView
 -- Class: collections.abc.KeysView
 -- Class: collections.abc.ValuesView

     ABCs for mapping, items, keys, and values *note views: 10ee.

These ABCs allow us to ask classes or instances if they provide
particular functionality, for example:

     size = None
     if isinstance(myvar, collections.abc.Sized):
         size = len(myvar)

Several of the ABCs are also useful as mixins that make it easier to
develop classes supporting container APIs.  For example, to write a
class supporting the full *note Set: e7e. API, it is only necessary to
supply the three underlying abstract methods: *note __contains__(): 79c,
*note __iter__(): 79b, and *note __len__(): 84f.  The ABC supplies the
remaining methods such as *note __and__(): c3d. and ‘isdisjoint()’:

     class ListBasedSet(collections.abc.Set):
          ''' Alternate set implementation favoring space over speed
              and not requiring the set elements to be hashable. '''
          def __init__(self, iterable):
              self.elements = lst = []
              for value in iterable:
                  if value not in lst:
                      lst.append(value)
          def __iter__(self):
              return iter(self.elements)
          def __contains__(self, value):
              return value in self.elements
          def __len__(self):
              return len(self.elements)

     s1 = ListBasedSet('abcdef')
     s2 = ListBasedSet('defghi')
     overlap = s1 & s2            # The __and__() method is supported automatically

Notes on using *note Set: e7e. and *note MutableSet: 10e9. as a mixin:

  1. Since some set operations create new sets, the default mixin
     methods need a way to create new instances from an iterable.  The
     class constructor is assumed to have a signature in the form
     ‘ClassName(iterable)’.  That assumption is factored-out to an
     internal classmethod called ‘_from_iterable()’ which calls
     ‘cls(iterable)’ to produce a new set.  If the *note Set: e7e. mixin
     is being used in a class with a different constructor signature,
     you will need to override ‘_from_iterable()’ with a classmethod
     that can construct new instances from an iterable argument.

  2. To override the comparisons (presumably for speed, as the semantics
     are fixed), redefine *note __le__(): 70f. and *note __ge__(): 711,
     then the other operations will automatically follow suit.

  3. The *note Set: e7e. mixin provides a ‘_hash()’ method to compute a
     hash value for the set; however, *note __hash__(): 39f. is not
     defined because not all sets are hashable or immutable.  To add set
     hashabilty using mixins, inherit from both *note Set(): e7e. and
     *note Hashable(): 10e4, then define ‘__hash__ = Set._hash’.

See also
........

   * OrderedSet recipe(1) for an example built on *note MutableSet:
     10e9.

   * For more about ABCs, see the *note abc: 4. module and PEP 3119(2).

   ---------- Footnotes ----------

   (1) http://code.activestate.com/recipes/576694/

   (2) https://www.python.org/dev/peps/pep-3119


File: python.info,  Node: heapq --- Heap queue algorithm,  Next: bisect --- Array bisection algorithm,  Prev: collections abc --- Abstract Base Classes for Containers,  Up: Data Types

5.8.5 ‘heapq’ — Heap queue algorithm
------------------------------------

`Source code:' Lib/heapq.py(1)

__________________________________________________________________

This module provides an implementation of the heap queue algorithm, also
known as the priority queue algorithm.

Heaps are binary trees for which every parent node has a value less than
or equal to any of its children.  This implementation uses arrays for
which ‘heap[k] <= heap[2*k+1]’ and ‘heap[k] <= heap[2*k+2]’ for all `k',
counting elements from zero.  For the sake of comparison, non-existing
elements are considered to be infinite.  The interesting property of a
heap is that its smallest element is always the root, ‘heap[0]’.

The API below differs from textbook heap algorithms in two aspects: (a)
We use zero-based indexing.  This makes the relationship between the
index for a node and the indexes for its children slightly less obvious,
but is more suitable since Python uses zero-based indexing.  (b) Our pop
method returns the smallest item, not the largest (called a "min heap"
in textbooks; a "max heap" is more common in texts because of its
suitability for in-place sorting).

These two make it possible to view the heap as a regular Python list
without surprises: ‘heap[0]’ is the smallest item, and ‘heap.sort()’
maintains the heap invariant!

To create a heap, use a list initialized to ‘[]’, or you can transform a
populated list into a heap via function *note heapify(): 10f1.

The following functions are provided:

 -- Function: heapq.heappush (heap, item)

     Push the value `item' onto the `heap', maintaining the heap
     invariant.

 -- Function: heapq.heappop (heap)

     Pop and return the smallest item from the `heap', maintaining the
     heap invariant.  If the heap is empty, *note IndexError: 908. is
     raised.

 -- Function: heapq.heappushpop (heap, item)

     Push `item' on the heap, then pop and return the smallest item from
     the `heap'.  The combined action runs more efficiently than *note
     heappush(): 10f2. followed by a separate call to *note heappop():
     10f3.

 -- Function: heapq.heapify (x)

     Transform list `x' into a heap, in-place, in linear time.

 -- Function: heapq.heapreplace (heap, item)

     Pop and return the smallest item from the `heap', and also push the
     new `item'.  The heap size doesn’t change.  If the heap is empty,
     *note IndexError: 908. is raised.

     This one step operation is more efficient than a *note heappop():
     10f3. followed by *note heappush(): 10f2. and can be more
     appropriate when using a fixed-size heap.  The pop/push combination
     always returns an element from the heap and replaces it with
     `item'.

     The value returned may be larger than the `item' added.  If that
     isn’t desired, consider using *note heappushpop(): 10f4. instead.
     Its push/pop combination returns the smaller of the two values,
     leaving the larger value on the heap.

The module also offers three general purpose functions based on heaps.

 -- Function: heapq.merge (*iterables)

     Merge multiple sorted inputs into a single sorted output (for
     example, merge timestamped entries from multiple log files).
     Returns an *note iterator: d91. over the sorted values.

     Similar to ‘sorted(itertools.chain(*iterables))’ but returns an
     iterable, does not pull the data into memory all at once, and
     assumes that each of the input streams is already sorted (smallest
     to largest).

 -- Function: heapq.nlargest (n, iterable, key=None)

     Return a list with the `n' largest elements from the dataset
     defined by `iterable'.  `key', if provided, specifies a function of
     one argument that is used to extract a comparison key from each
     element in the iterable: ‘key=str.lower’ Equivalent to:
     ‘sorted(iterable, key=key, reverse=True)[:n]’

 -- Function: heapq.nsmallest (n, iterable, key=None)

     Return a list with the `n' smallest elements from the dataset
     defined by `iterable'.  `key', if provided, specifies a function of
     one argument that is used to extract a comparison key from each
     element in the iterable: ‘key=str.lower’ Equivalent to:
     ‘sorted(iterable, key=key)[:n]’

The latter two functions perform best for smaller values of `n'.  For
larger values, it is more efficient to use the *note sorted(): 63e.
function.  Also, when ‘n==1’, it is more efficient to use the built-in
*note min(): 182. and *note max(): 183. functions.

* Menu:

* Basic Examples:: 
* Priority Queue Implementation Notes:: 
* Theory:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/3.4/Lib/heapq.py


File: python.info,  Node: Basic Examples,  Next: Priority Queue Implementation Notes,  Up: heapq --- Heap queue algorithm

5.8.5.1 Basic Examples
......................

A heapsort(1) can be implemented by pushing all values onto a heap and
then popping off the smallest values one at a time:

     >>> def heapsort(iterable):
     ...     h = []
     ...     for value in iterable:
     ...         heappush(h, value)
     ...     return [heappop(h) for i in range(len(h))]
     ...
     >>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])
     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

This is similar to ‘sorted(iterable)’, but unlike *note sorted(): 63e,
this implementation is not stable.

Heap elements can be tuples.  This is useful for assigning comparison
values (such as task priorities) alongside the main record being
tracked:

     >>> h = []
     >>> heappush(h, (5, 'write code'))
     >>> heappush(h, (7, 'release product'))
     >>> heappush(h, (1, 'write spec'))
     >>> heappush(h, (3, 'create tests'))
     >>> heappop(h)
     (1, 'write spec')

   ---------- Footnotes ----------

   (1) http://en.wikipedia.org/wiki/Heapsort


File: python.info,  Node: Priority Queue Implementation Notes,  Next: Theory,  Prev: Basic Examples,  Up: heapq --- Heap queue algorithm

5.8.5.2 Priority Queue Implementation Notes
...........................................

A priority queue(1) is common use for a heap, and it presents several
implementation challenges:

   * Sort stability: how do you get two tasks with equal priorities to
     be returned in the order they were originally added?

   * Tuple comparison breaks for (priority, task) pairs if the
     priorities are equal and the tasks do not have a default comparison
     order.

   * If the priority of a task changes, how do you move it to a new
     position in the heap?

   * Or if a pending task needs to be deleted, how do you find it and
     remove it from the queue?

A solution to the first two challenges is to store entries as 3-element
list including the priority, an entry count, and the task.  The entry
count serves as a tie-breaker so that two tasks with the same priority
are returned in the order they were added.  And since no two entry
counts are the same, the tuple comparison will never attempt to directly
compare two tasks.

The remaining challenges revolve around finding a pending task and
making changes to its priority or removing it entirely.  Finding a task
can be done with a dictionary pointing to an entry in the queue.

Removing the entry or changing its priority is more difficult because it
would break the heap structure invariants.  So, a possible solution is
to mark the entry as removed and add a new entry with the revised
priority:

     pq = []                         # list of entries arranged in a heap
     entry_finder = {}               # mapping of tasks to entries
     REMOVED = '<removed-task>'      # placeholder for a removed task
     counter = itertools.count()     # unique sequence count

     def add_task(task, priority=0):
         'Add a new task or update the priority of an existing task'
         if task in entry_finder:
             remove_task(task)
         count = next(counter)
         entry = [priority, count, task]
         entry_finder[task] = entry
         heappush(pq, entry)

     def remove_task(task):
         'Mark an existing task as REMOVED.  Raise KeyError if not found.'
         entry = entry_finder.pop(task)
         entry[-1] = REMOVED

     def pop_task():
         'Remove and return the lowest priority task. Raise KeyError if empty.'
         while pq:
             priority, count, task = heappop(pq)
             if task is not REMOVED:
                 del entry_finder[task]
                 return task
         raise KeyError('pop from an empty priority queue')

   ---------- Footnotes ----------

   (1) http://en.wikipedia.org/wiki/Priority_queue


File: python.info,  Node: Theory,  Prev: Priority Queue Implementation Notes,  Up: heapq --- Heap queue algorithm

5.8.5.3 Theory
..............

Heaps are arrays for which ‘a[k] <= a[2*k+1]’ and ‘a[k] <= a[2*k+2]’ for
all `k', counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that ‘a[0]’ is always its smallest element.

The strange invariant above is meant to be an efficient memory
representation for a tournament.  The numbers below are `k', not ‘a[k]’:

                                    0

                   1                                 2

           3               4                5               6

       7       8       9       10      11      12      13      14

     15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30

In the tree above, each cell `k' is topping ‘2*k+1’ and ‘2*k+2’.  In an
usual binary tournament we see in sports, each cell is the winner over
the two cells it tops, and we can trace the winner down the tree to see
all opponents s/he had.  However, in many computer applications of such
tournaments, we do not need to trace the history of a winner.  To be
more memory efficient, when a winner is promoted, we try to replace it
by something else at a lower level, and the rule becomes that a cell and
the two cells it tops contain three different items, but the top cell
"wins" over the two topped cells.

If this heap invariant is protected at all time, index 0 is clearly the
overall winner.  The simplest algorithmic way to remove it and find the
"next" winner is to move some loser (let’s say cell 30 in the diagram
above) into the 0 position, and then percolate this new 0 down the tree,
exchanging values, until the invariant is re-established.  This is
clearly logarithmic on the total number of items in the tree.  By
iterating over all items, you get an O(n log n) sort.

A nice feature of this sort is that you can efficiently insert new items
while the sort is going on, provided that the inserted items are not
"better" than the last 0’th element you extracted.  This is especially
useful in simulation contexts, where the tree holds all incoming events,
and the "win" condition means the smallest scheduled time.  When an
event schedules other events for execution, they are scheduled into the
future, so they can easily go into the heap.  So, a heap is a good
structure for implementing schedulers (this is what I used for my MIDI
sequencer :-).

Various structures for implementing schedulers have been extensively
studied, and heaps are good for this, as they are reasonably speedy, the
speed is almost constant, and the worst case is not much different than
the average case.  However, there are other representations which are
more efficient overall, yet the worst cases might be terrible.

Heaps are also very useful in big disk sorts.  You most probably all
know that a big sort implies producing "runs" (which are pre-sorted
sequences, whose size is usually related to the amount of CPU memory),
followed by a merging passes for these runs, which merging is often very
cleverly organised (1).  It is very important that the initial sort
produces the longest runs possible.  Tournaments are a good way to
achieve that.  If, using all the memory available to hold a tournament,
you replace and percolate items that happen to fit the current run,
you’ll produce runs which are twice the size of the memory for random
input, and much better for input fuzzily ordered.

Moreover, if you output the 0’th item on disk and get an input which may
not fit in the current tournament (because the value "wins" over the
last output value), it cannot fit in the heap, so the size of the heap
decreases.  The freed memory could be cleverly reused immediately for
progressively building a second heap, which grows at exactly the same
rate the first heap is melting.  When the first heap completely
vanishes, you switch heaps and start a new run.  Clever and quite
effective!

In a word, heaps are useful memory structures to know.  I use them in a
few applications, and I think it is good to keep a ’heap’ module around.
:-)

   ---------- Footnotes ----------

   (1) The disk balancing algorithms which are current, nowadays, are
more annoying than clever, and this is a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big tape
drives, the story was quite different, and one had to be very clever to
ensure (far in advance) that each tape movement will be the most
effective possible (that is, will best participate at "progressing" the
merge).  Some tapes were even able to read backwards, and this was also
used to avoid the rewinding time.  Believe me, real good tape sorts were
quite spectacular to watch!  From all times, sorting has always been a
Great Art!  :-)


File: python.info,  Node: bisect --- Array bisection algorithm,  Next: array --- Efficient arrays of numeric values,  Prev: heapq --- Heap queue algorithm,  Up: Data Types

5.8.6 ‘bisect’ — Array bisection algorithm
------------------------------------------

`Source code:' Lib/bisect.py(1)

__________________________________________________________________

This module provides support for maintaining a list in sorted order
without having to sort the list after each insertion.  For long lists of
items with expensive comparison operations, this can be an improvement
over the more common approach.  The module is called *note bisect: 12.
because it uses a basic bisection algorithm to do its work.  The source
code may be most useful as a working example of the algorithm (the
boundary conditions are already right!).

The following functions are provided:

 -- Function: bisect.bisect_left (a, x, lo=0, hi=len(a))

     Locate the insertion point for `x' in `a' to maintain sorted order.
     The parameters `lo' and `hi' may be used to specify a subset of the
     list which should be considered; by default the entire list is
     used.  If `x' is already present in `a', the insertion point will
     be before (to the left of) any existing entries.  The return value
     is suitable for use as the first parameter to ‘list.insert()’
     assuming that `a' is already sorted.

     The returned insertion point `i' partitions the array `a' into two
     halves so that ‘all(val < x for val in a[lo:i])’ for the left side
     and ‘all(val >= x for val in a[i:hi])’ for the right side.

 -- Function: bisect.bisect_right (a, x, lo=0, hi=len(a))
 -- Function: bisect.bisect (a, x, lo=0, hi=len(a))

     Similar to *note bisect_left(): 10fe, but returns an insertion
     point which comes after (to the right of) any existing entries of
     `x' in `a'.

     The returned insertion point `i' partitions the array `a' into two
     halves so that ‘all(val <= x for val in a[lo:i])’ for the left side
     and ‘all(val > x for val in a[i:hi])’ for the right side.

 -- Function: bisect.insort_left (a, x, lo=0, hi=len(a))

     Insert `x' in `a' in sorted order.  This is equivalent to
     ‘a.insert(bisect.bisect_left(a, x, lo, hi), x)’ assuming that `a'
     is already sorted.  Keep in mind that the O(log n) search is
     dominated by the slow O(n) insertion step.

 -- Function: bisect.insort_right (a, x, lo=0, hi=len(a))
 -- Function: bisect.insort (a, x, lo=0, hi=len(a))

     Similar to *note insort_left(): 1101, but inserting `x' in `a'
     after any existing entries of `x'.

See also
........

SortedCollection recipe(2) that uses bisect to build a full-featured
collection class with straight-forward search methods and support for a
key-function.  The keys are precomputed to save unnecessary calls to the
key function during searches.

* Menu:

* Searching Sorted Lists:: 
* Other Examples:: 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/3.4/Lib/bisect.py

   (2) http://code.activestate.com/recipes/577197-sortedcollection/


File: python.info,  Node: Searching Sorted Lists,  Next: Other Examples,  Up: bisect --- Array bisection algorithm

5.8.6.1 Searching Sorted Lists
..............................

The above *note bisect(): 12. functions are useful for finding insertion
points but can be tricky or awkward to use for common searching tasks.
The following five functions show how to transform them into the
standard lookups for sorted lists:

     def index(a, x):
         'Locate the leftmost value exactly equal to x'
         i = bisect_left(a, x)
         if i != len(a) and a[i] == x:
             return i
         raise ValueError

     def find_lt(a, x):
         'Find rightmost value less than x'
         i = bisect_left(a, x)
         if i:
             return a[i-1]
         raise ValueError

     def find_le(a, x):
         'Find rightmost value less than or equal to x'
         i = bisect_right(a, x)
         if i:
             return a[i-1]
         raise ValueError

     def find_gt(a, x):
         'Find leftmost value greater than x'
         i = bisect_right(a, x)
         if i != len(a):
             return a[i]
         raise ValueError

     def find_ge(a, x):
         'Find leftmost item greater than or equal to x'
         i = bisect_left(a, x)
         if i != len(a):
             return a[i]
         raise ValueError


File: python.info,  Node: Other Examples,  Prev: Searching Sorted Lists,  Up: bisect --- Array bisection algorithm

5.8.6.2 Other Examples
......................

The *note bisect(): 12. function can be useful for numeric table
lookups.  This example uses *note bisect(): 12. to look up a letter
grade for an exam score (say) based on a set of ordered numeric
breakpoints: 90 and up is an ’A’, 80 to 89 is a ’B’, and so on:

     >>> def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
     ...     i = bisect(breakpoints, score)
     ...     return grades[i]
     ...
     >>> [grade(score) for score in [33, 99, 77, 70, 89, 90, 100]]
     ['F', 'A', 'C', 'C', 'B', 'A', 'A']

Unlike the *note sorted(): 63e. function, it does not make sense for the
*note bisect(): 12. functions to have `key' or `reversed' arguments
because that would lead to an inefficient design (successive calls to
bisect functions would not "remember" all of the previous key lookups).

Instead, it is better to search a list of precomputed keys to find the
index of the record in question:

     >>> data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]
     >>> data.sort(key=lambda r: r[1])
     >>> keys = [r[1] for r in data]         # precomputed list of keys
     >>> data[bisect_left(keys, 0)]
     ('black', 0)
     >>> data[bisect_left(keys, 1)]
     ('blue', 1)
     >>> data[bisect_left(keys, 5)]
     ('red', 5)
     >>> data[bisect_left(keys, 8)]
     ('yellow', 8)

