This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 3.4.3, September 02, 2015

     Copyright © 1990-2015, Python Software Foundation

INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.3.1.


File: python.info,  Node: Overview Of Syntax Changes,  Next: Changes Already Present In Python 2 6,  Prev: Common Stumbling Blocks,  Up: What's New In Python 3 0

1.5.2 Overview Of Syntax Changes
--------------------------------

This section gives a brief overview of every `syntactic' change in
Python 3.0.

* Menu:

* New Syntax:: 
* Changed Syntax:: 
* Removed Syntax:: 


File: python.info,  Node: New Syntax,  Next: Changed Syntax,  Up: Overview Of Syntax Changes

1.5.2.1 New Syntax
..................

   * PEP 3107(1): Function argument and return value annotations.  This
     provides a standardized way of annotating a function’s parameters
     and return value.  There are no semantics attached to such
     annotations except that they can be introspected at runtime using
     the ‘__annotations__’ attribute.  The intent is to encourage
     experimentation through metaclasses, decorators or frameworks.

   * PEP 3102(2): Keyword-only arguments.  Named parameters occurring
     after ‘*args’ in the parameter list `must' be specified using
     keyword syntax in the call.  You can also use a bare ‘*’ in the
     parameter list to indicate that you don’t accept a variable-length
     argument list, but you do have keyword-only arguments.

   * Keyword arguments are allowed after the list of base classes in a
     class definition.  This is used by the new convention for
     specifying a metaclass (see next section), but can be used for
     other purposes as well, as long as the metaclass supports it.

   * PEP 3104(3): *note nonlocal: 69a. statement.  Using ‘nonlocal x’
     you can now assign directly to a variable in an outer (but
     non-global) scope.  *note nonlocal: 69a. is a new reserved word.

   * PEP 3132(4): Extended Iterable Unpacking.  You can now write things
     like ‘a, b, *rest = some_sequence’.  And even ‘*rest, a = stuff’.
     The ‘rest’ object is always a (possibly empty) list; the right-hand
     side may be any iterable.  Example:

          (a, *rest, b) = range(5)

     This sets `a' to ‘0’, `b' to ‘4’, and `rest' to ‘[1, 2, 3]’.

   * Dictionary comprehensions: ‘{k: v for k, v in stuff}’ means the
     same thing as ‘dict(stuff)’ but is more flexible.  (This is PEP
     0274(5) vindicated.  :-)

   * Set literals, e.g.  ‘{1, 2}’.  Note that ‘{}’ is an empty
     dictionary; use ‘set()’ for an empty set.  Set comprehensions are
     also supported; e.g., ‘{x for x in stuff}’ means the same thing as
     ‘set(stuff)’ but is more flexible.

   * New octal literals, e.g.  ‘0o720’ (already in 2.6).  The old octal
     literals (‘0720’) are gone.

   * New binary literals, e.g.  ‘0b1010’ (already in 2.6), and there is
     a new corresponding built-in function, *note bin(): 69b.

   * Bytes literals are introduced with a leading ‘b’ or ‘B’, and there
     is a new corresponding built-in function, *note bytes(): 179.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3107

   (2) https://www.python.org/dev/peps/pep-3102

   (3) https://www.python.org/dev/peps/pep-3104

   (4) https://www.python.org/dev/peps/pep-3132

   (5) https://www.python.org/dev/peps/pep-0274


File: python.info,  Node: Changed Syntax,  Next: Removed Syntax,  Prev: New Syntax,  Up: Overview Of Syntax Changes

1.5.2.2 Changed Syntax
......................

   * PEP 3109(1) and PEP 3134(2): new *note raise: 69d. statement
     syntax: ‘raise [`expr' [from `expr']]’.  See below.

   * *note as: 69e. and *note with: 19b. are now reserved words.  (Since
     2.6, actually.)

   * ‘True’, ‘False’, and ‘None’ are reserved words.  (2.6 partially
     enforced the restrictions on ‘None’ already.)

   * Change from *note except: 563. `exc', `var' to *note except: 563.
     `exc' *note as: 69e. `var'.  See PEP 3110(3).

   * PEP 3115(4): New Metaclass Syntax.  Instead of:

          class C:
              __metaclass__ = M
              ...

     you must now use:

          class C(metaclass=M):
              ...

     The module-global ‘__metaclass__’ variable is no longer supported.
     (It was a crutch to make it easier to default to new-style classes
     without deriving every class from *note object: 381.)

   * List comprehensions no longer support the syntactic form ‘[... for
     `var' in `item1', `item2', ...]’.  Use ‘[... for `var' in (`item1',
     `item2', ...)]’ instead.  Also note that list comprehensions have
     different semantics: they are closer to syntactic sugar for a
     generator expression inside a *note list(): 397. constructor, and
     in particular the loop control variables are no longer leaked into
     the surrounding scope.

   * The `ellipsis' (‘...’) can be used as an atomic expression
     anywhere.  (Previously it was only allowed in slices.)  Also, it
     `must' now be spelled as ‘...’.  (Previously it could also be
     spelled as ‘. . .’, by a mere accident of the grammar.)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3109

   (2) https://www.python.org/dev/peps/pep-3134

   (3) https://www.python.org/dev/peps/pep-3110

   (4) https://www.python.org/dev/peps/pep-3115


File: python.info,  Node: Removed Syntax,  Prev: Changed Syntax,  Up: Overview Of Syntax Changes

1.5.2.3 Removed Syntax
......................

   * PEP 3113(1): Tuple parameter unpacking removed.  You can no longer
     write ‘def foo(a, (b, c)): ...’.  Use ‘def foo(a, b_c): b, c = b_c’
     instead.

   * Removed backticks (use *note repr(): 3db. instead).

   * Removed ‘<>’ (use ‘!=’ instead).

   * Removed keyword: *note exec(): 6a0. is no longer a keyword; it
     remains as a function.  (Fortunately the function syntax was also
     accepted in 2.x.)  Also note that *note exec(): 6a0. no longer
     takes a stream argument; instead of ‘exec(f)’ you can use
     ‘exec(f.read())’.

   * Integer literals no longer support a trailing ‘l’ or ‘L’.

   * String literals no longer support a leading ‘u’ or ‘U’.

   * The *note from: 6a1. `module' *note import: 674. ‘*’ syntax is only
     allowed at the module level, no longer inside functions.

   * The only acceptable syntax for relative imports is ‘from
     .[`module'] import `name'’.  All *note import: 674. forms not
     starting with ‘.’ are interpreted as absolute imports.  ( PEP
     0328(2))

   * Classic classes are gone.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3113

   (2) https://www.python.org/dev/peps/pep-0328


File: python.info,  Node: Changes Already Present In Python 2 6,  Next: Library Changes,  Prev: Overview Of Syntax Changes,  Up: What's New In Python 3 0

1.5.3 Changes Already Present In Python 2.6
-------------------------------------------

Since many users presumably make the jump straight from Python 2.5 to
Python 3.0, this section reminds the reader of new features that were
originally designed for Python 3.0 but that were back-ported to Python
2.6.  The corresponding sections in *note What’s New in Python 2.6: 6a3.
should be consulted for longer descriptions.

   * *note PEP 343; The ’with’ statement: 6a4.  The *note with: 19b.
     statement is now a standard feature and no longer needs to be
     imported from the *note __future__: 0.  Also check out *note
     Writing Context Managers: 6a5. and *note The contextlib module:
     6a6.

   * *note PEP 366; Explicit Relative Imports From a Main Module: 6a7.
     This enhances the usefulness of the *note -m: 6a8. option when the
     referenced module lives in a package.

   * *note PEP 370; Per-user site-packages Directory: 6a9.

   * *note PEP 371; The multiprocessing Package: 6aa.

   * *note PEP 3101; Advanced String Formatting: 6ab.  Note: the 2.6
     description mentions the *note format(): 556. method for both 8-bit
     and Unicode strings.  In 3.0, only the *note str: 178. type (text
     strings with Unicode support) supports this method; the *note
     bytes: 179. type does not.  The plan is to eventually make this the
     only API for string formatting, and to start deprecating the ‘%’
     operator in Python 3.1.

   * *note PEP 3105; print As a Function: 6ac.  This is now a standard
     feature and no longer needs to be imported from *note __future__:
     0.  More details were given above.

   * *note PEP 3110; Exception-Handling Changes: 6ad.  The *note except:
     563. `exc' *note as: 69e. `var' syntax is now standard and *note
     except: 563. `exc', `var' is no longer supported.  (Of course, the
     *note as: 69e. `var' part is still optional.)

   * *note PEP 3112; Byte Literals: 6ae.  The ‘b"..."’ string literal
     notation (and its variants like ‘b'...'’, ‘b"""..."""’, and
     ‘br"..."’) now produces a literal of type *note bytes: 179.

   * *note PEP 3116; New I/O Library: 6af.  The *note io: 9e. module is
     now the standard way of doing file I/O. The built-in *note open():
     1a2. function is now an alias for *note io.open(): 408. and has
     additional keyword arguments `encoding', `errors', `newline' and
     `closefd'.  Also note that an invalid `mode' argument now raises
     *note ValueError: 321, not *note IOError: 360.  The binary file
     object underlying a text file object can be accessed as ‘f.buffer’
     (but beware that the text object maintains a buffer of itself in
     order to speed up the encoding and decoding operations).

   * *note PEP 3118; Revised Buffer Protocol: 6b0.  The old builtin
     ‘buffer()’ is now really gone; the new builtin *note memoryview():
     187. provides (mostly) similar functionality.

   * *note PEP 3119; Abstract Base Classes: 6b1.  The *note abc: 4.
     module and the ABCs defined in the *note collections: 1e. module
     plays a somewhat more prominent role in the language now, and
     built-in collection types like *note dict: 380. and *note list:
     397. conform to the ‘collections.MutableMapping’ and
     ‘collections.MutableSequence’ ABCs, respectively.

   * *note PEP 3127; Integer Literal Support and Syntax: 6b2.  As
     mentioned above, the new octal literal notation is the only one
     supported, and binary literals have been added.

   * *note PEP 3129; Class Decorators: 6b3.

   * *note PEP 3141; A Type Hierarchy for Numbers: 6b4.  The *note
     numbers: bd. module is another new use of ABCs, defining Python’s
     "numeric tower".  Also note the new *note fractions: 82. module
     which implements *note numbers.Rational: 6b5.


File: python.info,  Node: Library Changes,  Next: PEP 3101 A New Approach To String Formatting,  Prev: Changes Already Present In Python 2 6,  Up: What's New In Python 3 0

1.5.4 Library Changes
---------------------

Due to time constraints, this document does not exhaustively cover the
very extensive changes to the standard library.  PEP 3108(1) is the
reference for the major changes to the library.  Here’s a capsule
review:

   * Many old modules were removed.  Some, like ‘gopherlib’ (no longer
     used) and ‘md5’ (replaced by *note hashlib: 8c.), were already
     deprecated by PEP 0004(2).  Others were removed as a result of the
     removal of support for various platforms such as Irix, BeOS and Mac
     OS 9 (see PEP 0011(3)).  Some modules were also selected for
     removal in Python 3.0 due to lack of use or because a better
     replacement exists.  See PEP 3108(4) for an exhaustive list.

   * The ‘bsddb3’ package was removed because its presence in the core
     standard library has proved over time to be a particular burden for
     the core developers due to testing instability and Berkeley DB’s
     release schedule.  However, the package is alive and well,
     externally maintained at
     ‘http://www.jcea.es/programacion/pybsddb.htm’.

   * Some modules were renamed because their old name disobeyed PEP
     0008(5), or for various other reasons.  Here’s the list:

     Old Name                    New Name
                                 
     --------------------------------------------------------
                                 
     _winreg                     winreg
                                 
                                 
     ConfigParser                configparser
                                 
                                 
     copy_reg                    copyreg
                                 
                                 
     Queue                       queue
                                 
                                 
     SocketServer                socketserver
                                 
                                 
     markupbase                  _markupbase
                                 
                                 
     repr                        reprlib
                                 
                                 
     test.test_support           test.support
                                 

   * A common pattern in Python 2.x is to have one version of a module
     implemented in pure Python, with an optional accelerated version
     implemented as a C extension; for example, *note pickle: c6. and
     ‘cPickle’.  This places the burden of importing the accelerated
     version and falling back on the pure Python version on each user of
     these modules.  In Python 3.0, the accelerated versions are
     considered implementation details of the pure Python versions.
     Users should always import the standard version, which attempts to
     import the accelerated version and falls back to the pure Python
     version.  The *note pickle: c6. / ‘cPickle’ pair received this
     treatment.  The *note profile: cf. module is on the list for 3.1.
     The ‘StringIO’ module has been turned into a class in the *note io:
     9e. module.

   * Some related modules have been grouped into packages, and usually
     the submodule names have been simplified.  The resulting new
     packages are:

        * *note dbm: 30. (‘anydbm’, ‘dbhash’, *note dbm: 30, ‘dumbdbm’,
          ‘gdbm’, ‘whichdb’).

        * *note html: 8f. (‘HTMLParser’, ‘htmlentitydefs’).

        * ‘http’ (‘httplib’, ‘BaseHTTPServer’, ‘CGIHTTPServer’,
          ‘SimpleHTTPServer’, ‘Cookie’, ‘cookielib’).

        * *note tkinter: 106. (all ‘Tkinter’-related modules except
          *note turtle: 110.).  The target audience of *note turtle:
          110. doesn’t really care about *note tkinter: 106.  Also note
          that as of Python 2.6, the functionality of *note turtle: 110.
          has been greatly enhanced.

        * *note urllib: 116. (*note urllib: 116, ‘urllib2’, ‘urlparse’,
          ‘robotparse’).

        * ‘xmlrpc’ (‘xmlrpclib’, ‘DocXMLRPCServer’,
          ‘SimpleXMLRPCServer’).

Some other changes to standard library modules, not covered by PEP
3108(6):

   * Killed ‘sets’.  Use the built-in *note set(): 5a4. class.

   * Cleanup of the *note sys: f8. module: removed ‘sys.exitfunc()’,
     ‘sys.exc_clear()’, ‘sys.exc_type’, ‘sys.exc_value’,
     ‘sys.exc_traceback’.  (Note that *note sys.last_type: 6b7. etc.
     remain.)

   * Cleanup of the *note array.array: 6b8. type: the ‘read()’ and
     ‘write()’ methods are gone; use ‘fromfile()’ and ‘tofile()’
     instead.  Also, the ‘'c'’ typecode for array is gone – use either
     ‘'b'’ for bytes or ‘'u'’ for Unicode characters.

   * Cleanup of the *note operator: be. module: removed
     ‘sequenceIncludes()’ and ‘isCallable()’.

   * Cleanup of the ‘thread’ module: ‘acquire_lock()’ and
     ‘release_lock()’ are gone; use ‘acquire()’ and ‘release()’ instead.

   * Cleanup of the *note random: d8. module: removed the ‘jumpahead()’
     API.

   * The ‘new’ module is gone.

   * The functions ‘os.tmpnam()’, ‘os.tempnam()’ and ‘os.tmpfile()’ have
     been removed in favor of the *note tempfile: fe. module.

   * The *note tokenize: 10b. module has been changed to work with
     bytes.  The main entry point is now *note tokenize.tokenize(): 6b9,
     instead of generate_tokens.

   * ‘string.letters’ and its friends (‘string.lowercase’ and
     ‘string.uppercase’) are gone.  Use *note string.ascii_letters: 6ba.
     etc.  instead.  (The reason for the removal is that
     ‘string.letters’ and friends had locale-specific behavior, which is
     a bad idea for such attractively-named global "constants".)

   * Renamed module ‘__builtin__’ to *note builtins: 13. (removing the
     underscores, adding an ’s’).  The ‘__builtins__’ variable found in
     most global namespaces is unchanged.  To modify a builtin, you
     should use *note builtins: 13, not ‘__builtins__’!

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3108

   (2) https://www.python.org/dev/peps/pep-0004

   (3) https://www.python.org/dev/peps/pep-0011

   (4) https://www.python.org/dev/peps/pep-3108

   (5) https://www.python.org/dev/peps/pep-0008

   (6) https://www.python.org/dev/peps/pep-3108


File: python.info,  Node: PEP 3101 A New Approach To String Formatting,  Next: Changes To Exceptions,  Prev: Library Changes,  Up: What's New In Python 3 0

`PEP 3101': A New Approach To String Formatting

   * A new system for built-in string formatting operations replaces the
     ‘%’ string formatting operator.  (However, the ‘%’ operator is
     still supported; it will be deprecated in Python 3.1 and removed
     from the language at some later time.)  Read PEP 3101(1) for the
     full scoop.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3101


File: python.info,  Node: Changes To Exceptions,  Next: Miscellaneous Other Changes,  Prev: PEP 3101 A New Approach To String Formatting,  Up: What's New In Python 3 0

1.5.6 Changes To Exceptions
---------------------------

The APIs for raising and catching exception have been cleaned up and new
powerful features added:

   * PEP 0352(1): All exceptions must be derived (directly or
     indirectly) from *note BaseException: 6bd.  This is the root of the
     exception hierarchy.  This is not new as a recommendation, but the
     `requirement' to inherit from *note BaseException: 6bd. is new.
     (Python 2.6 still allowed classic classes to be raised, and placed
     no restriction on what you can catch.)  As a consequence, string
     exceptions are finally truly and utterly dead.

   * Almost all exceptions should actually derive from *note Exception:
     6be.; *note BaseException: 6bd. should only be used as a base class
     for exceptions that should only be handled at the top level, such
     as *note SystemExit: 6bf. or *note KeyboardInterrupt: 6c0.  The
     recommended idiom for handling all exceptions except for this
     latter category is to use *note except: 563. *note Exception: 6be.

   * ‘StandardError’ was removed.

   * Exceptions no longer behave as sequences.  Use the ‘args’ attribute
     instead.

   * PEP 3109(2): Raising exceptions.  You must now use ‘raise
     `Exception'(`args')’ instead of ‘raise `Exception', `args'’.
     Additionally, you can no longer explicitly specify a traceback;
     instead, if you `have' to do this, you can assign directly to the
     ‘__traceback__’ attribute (see below).

   * PEP 3110(3): Catching exceptions.  You must now use ‘except
     `SomeException' as `variable'’ instead of ‘except `SomeException',
     `variable'’.  Moreover, the `variable' is explicitly deleted when
     the *note except: 563. block is left.

   * PEP 3134(4): Exception chaining.  There are two cases: implicit
     chaining and explicit chaining.  Implicit chaining happens when an
     exception is raised in an *note except: 563. or *note finally: 2c5.
     handler block.  This usually happens due to a bug in the handler
     block; we call this a `secondary' exception.  In this case, the
     original exception (that was being handled) is saved as the
     ‘__context__’ attribute of the secondary exception.  Explicit
     chaining is invoked with this syntax:

          raise SecondaryException() from primary_exception

     (where `primary_exception' is any expression that produces an
     exception object, probably an exception that was previously
     caught).  In this case, the primary exception is stored on the
     ‘__cause__’ attribute of the secondary exception.  The traceback
     printed when an unhandled exception occurs walks the chain of
     ‘__cause__’ and ‘__context__’ attributes and prints a separate
     traceback for each component of the chain, with the primary
     exception at the top.  (Java users may recognize this behavior.)

   * PEP 3134(5): Exception objects now store their traceback as the
     ‘__traceback__’ attribute.  This means that an exception object now
     contains all the information pertaining to an exception, and there
     are fewer reasons to use *note sys.exc_info(): 6c1. (though the
     latter is not removed).

   * A few exception messages are improved when Windows fails to load an
     extension module.  For example, ‘error code 193’ is now ‘%1 is not
     a valid Win32 application’.  Strings now deal with non-English
     locales.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0352

   (2) https://www.python.org/dev/peps/pep-3109

   (3) https://www.python.org/dev/peps/pep-3110

   (4) https://www.python.org/dev/peps/pep-3134

   (5) https://www.python.org/dev/peps/pep-3134


File: python.info,  Node: Miscellaneous Other Changes,  Next: Build and C API Changes<4>,  Prev: Changes To Exceptions,  Up: What's New In Python 3 0

1.5.7 Miscellaneous Other Changes
---------------------------------

* Menu:

* Operators And Special Methods:: 
* Builtins:: 


File: python.info,  Node: Operators And Special Methods,  Next: Builtins,  Up: Miscellaneous Other Changes

1.5.7.1 Operators And Special Methods
.....................................

   * ‘!=’ now returns the opposite of ‘==’, unless ‘==’ returns *note
     NotImplemented: 1d6.

   * The concept of "unbound methods" has been removed from the
     language.  When referencing a method as a class attribute, you now
     get a plain function object.

   * ‘__getslice__()’, ‘__setslice__()’ and ‘__delslice__()’ were
     killed.  The syntax ‘a[i:j]’ now translates to
     ‘a.__getitem__(slice(i, j))’ (or *note __setitem__(): 6c4. or *note
     __delitem__(): 6c5, when used as an assignment or deletion target,
     respectively).

   * PEP 3114(1): the standard *note next(): 6c6. method has been
     renamed to *note __next__(): 6c7.

   * The ‘__oct__()’ and ‘__hex__()’ special methods are removed – *note
     oct(): 6c8. and *note hex(): 6c9. use *note __index__(): 6ca. now
     to convert the argument to an integer.

   * Removed support for ‘__members__’ and ‘__methods__’.

   * The function attributes named ‘func_X’ have been renamed to use the
     ‘__X__’ form, freeing up these names in the function attribute
     namespace for user-defined attributes.  To wit, ‘func_closure’,
     ‘func_code’, ‘func_defaults’, ‘func_dict’, ‘func_doc’,
     ‘func_globals’, ‘func_name’ were renamed to ‘__closure__’,
     ‘__code__’, ‘__defaults__’, ‘__dict__’, ‘__doc__’, ‘__globals__’,
     *note __name__: 6cb, respectively.

   * ‘__nonzero__()’ is now *note __bool__(): 6cc.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3114


File: python.info,  Node: Builtins,  Prev: Operators And Special Methods,  Up: Miscellaneous Other Changes

1.5.7.2 Builtins
................

   * PEP 3135(1): New *note super(): 311.  You can now invoke *note
     super(): 311. without arguments and (assuming this is in a regular
     instance method defined inside a *note class: 6ce. statement) the
     right class and instance will automatically be chosen.  With
     arguments, the behavior of *note super(): 311. is unchanged.

   * PEP 3111(2): ‘raw_input()’ was renamed to *note input(): 6cf.  That
     is, the new *note input(): 6cf. function reads a line from *note
     sys.stdin: 692. and returns it with the trailing newline stripped.
     It raises *note EOFError: 6d0. if the input is terminated
     prematurely.  To get the old behavior of *note input(): 6cf, use
     ‘eval(input())’.

   * A new built-in function *note next(): 6c6. was added to call the
     *note __next__(): 6c7. method on an object.

   * The *note round(): 6d1. function rounding strategy and return type
     have changed.  Exact halfway cases are now rounded to the nearest
     even result instead of away from zero.  (For example, ‘round(2.5)’
     now returns ‘2’ rather than ‘3’.)  ‘round(x[, n])’ now delegates to
     ‘x.__round__([n])’ instead of always returning a float.  It
     generally returns an integer when called with a single argument and
     a value of the same type as ‘x’ when called with two arguments.

   * Moved ‘intern()’ to *note sys.intern(): 6d2.

   * Removed: ‘apply()’.  Instead of ‘apply(f, args)’ use ‘f(*args)’.

   * Removed *note callable(): 56c.  Instead of ‘callable(f)’ you can
     use ‘isinstance(f, collections.Callable)’.  The
     ‘operator.isCallable()’ function is also gone.

   * Removed ‘coerce()’.  This function no longer serves a purpose now
     that classic classes are gone.

   * Removed ‘execfile()’.  Instead of ‘execfile(fn)’ use
     ‘exec(open(fn).read())’.

   * Removed the ‘file’ type.  Use *note open(): 1a2.  There are now
     several different kinds of streams that open can return in the
     *note io: 9e. module.

   * Removed ‘reduce()’.  Use *note functools.reduce(): 6d3. if you
     really need it; however, 99 percent of the time an explicit *note
     for: 688. loop is more readable.

   * Removed ‘reload()’.  Use *note imp.reload(): 6d4.

   * Removed.  ‘dict.has_key()’ – use the *note in: 6d5. operator
     instead.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3135

   (2) https://www.python.org/dev/peps/pep-3111


File: python.info,  Node: Build and C API Changes<4>,  Next: Performance,  Prev: Miscellaneous Other Changes,  Up: What's New In Python 3 0

1.5.8 Build and C API Changes
-----------------------------

Due to time constraints, here is a `very' incomplete list of changes to
the C API.

   * Support for several platforms was dropped, including but not
     limited to Mac OS 9, BeOS, RISCOS, Irix, and Tru64.

   * PEP 3118(1): New Buffer API.

   * PEP 3121(2): Extension Module Initialization & Finalization.

   * PEP 3123(3): Making *note PyObject_HEAD: 6d7. conform to standard
     C.

   * No more C API support for restricted execution.

   * ‘PyNumber_Coerce()’, ‘PyNumber_CoerceEx()’, ‘PyMember_Get()’, and
     ‘PyMember_Set()’ C APIs are removed.

   * New C API *note PyImport_ImportModuleNoBlock(): 39b, works like
     *note PyImport_ImportModule(): 6d8. but won’t block on the import
     lock (returning an error instead).

   * Renamed the boolean conversion C-level slot and method:
     ‘nb_nonzero’ is now ‘nb_bool’.

   * Removed ‘METH_OLDARGS’ and ‘WITH_CYCLE_GC’ from the C API.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3118

   (2) https://www.python.org/dev/peps/pep-3121

   (3) https://www.python.org/dev/peps/pep-3123


File: python.info,  Node: Performance,  Next: Porting To Python 3 0,  Prev: Build and C API Changes<4>,  Up: What's New In Python 3 0

1.5.9 Performance
-----------------

The net result of the 3.0 generalizations is that Python 3.0 runs the
pystone benchmark around 10% slower than Python 2.5.  Most likely the
biggest cause is the removal of special-casing for small integers.
There’s room for improvement, but it will happen after 3.0 is released!


File: python.info,  Node: Porting To Python 3 0,  Prev: Performance,  Up: What's New In Python 3 0

1.5.10 Porting To Python 3.0
----------------------------

For porting existing Python 2.5 or 2.6 source code to Python 3.0, the
best strategy is the following:

  0. (Prerequisite:) Start with excellent test coverage.

  1. Port to Python 2.6.  This should be no more work than the average
     port from Python 2.x to Python 2.(x+1).  Make sure all your tests
     pass.

  2. (Still using 2.6:) Turn on the ‘-3’ command line switch.  This
     enables warnings about features that will be removed (or change) in
     3.0.  Run your test suite again, and fix code that you get warnings
     about until there are no warnings left, and all your tests still
     pass.

  3. Run the ‘2to3’ source-to-source translator over your source code
     tree.  (See *note 2to3 - Automated Python 2 to 3 code translation:
     6db. for more on this tool.)  Run the result of the translation
     under Python 3.0.  Manually fix up any remaining issues, fixing
     problems until all tests pass again.

It is not recommended to try to write source code that runs unchanged
under both Python 2.6 and 3.0; you’d have to use a very contorted coding
style, e.g.  avoiding ‘print’ statements, metaclasses, and much more.
If you are maintaining a library that needs to support both Python 2.6
and Python 3.0, the best approach is to modify step 3 above by editing
the 2.6 version of the source code and running the ‘2to3’ translator
again, rather than editing the 3.0 version of the source code.

For porting C extensions to Python 3.0, please see *note Porting
Extension Modules to Python 3: 6dc.


File: python.info,  Node: What's New in Python 2 7,  Next: What's New in Python 2 6,  Prev: What's New In Python 3 0,  Up: What's New in Python

1.6 What’s New in Python 2.7
============================


Author: A.M. Kuchling (amk at amk.ca)

This article explains the new features in Python 2.7.  Python 2.7 was
released on July 3, 2010.

Numeric handling has been improved in many ways, for both floating-point
numbers and for the *note Decimal: 3d4. class.  There are some useful
additions to the standard library, such as a greatly enhanced *note
unittest: 114. module, the *note argparse: 6. module for parsing
command-line options, convenient *note OrderedDict: 587. and *note
Counter: 3bd. classes in the *note collections: 1e. module, and many
other improvements.

Python 2.7 is planned to be the last of the 2.x releases, so we worked
on making it a good release for the long term.  To help with porting to
Python 3, several new features from the Python 3.x series have been
included in 2.7.

This article doesn’t attempt to provide a complete specification of the
new features, but instead provides a convenient overview.  For full
details, you should refer to the documentation for Python 2.7 at
‘https://docs.python.org’.  If you want to understand the rationale for
the design and implementation, refer to the PEP for a particular new
feature or the issue on ‘https://bugs.python.org’ in which a change was
discussed.  Whenever possible, "What’s New in Python" links to the
bug/patch item for each change.

* Menu:

* The Future for Python 2.x: The Future for Python 2 x. 
* Changes to the Handling of Deprecation Warnings:: 
* Python 3.1 Features: Python 3 1 Features. 
* PEP 372; Adding an Ordered Dictionary to collections: PEP 372 Adding an Ordered Dictionary to collections. 
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator<2>. 
* PEP 389; The argparse Module for Parsing Command Lines: PEP 389 The argparse Module for Parsing Command Lines. 
* PEP 391; Dictionary-Based Configuration For Logging: PEP 391 Dictionary-Based Configuration For Logging. 
* PEP 3106; Dictionary Views: PEP 3106 Dictionary Views. 
* PEP 3137; The memoryview Object: PEP 3137 The memoryview Object. 
* Other Language Changes: Other Language Changes<5>. 
* New and Improved Modules:: 
* Build and C API Changes: Build and C API Changes<5>. 
* Other Changes and Fixes:: 
* Porting to Python 2.7: Porting to Python 2 7. 
* New Features Added to Python 2.7 Maintenance Releases: New Features Added to Python 2 7 Maintenance Releases. 
* Acknowledgements:: 


File: python.info,  Node: The Future for Python 2 x,  Next: Changes to the Handling of Deprecation Warnings,  Up: What's New in Python 2 7

1.6.1 The Future for Python 2.x
-------------------------------

Python 2.7 is the last major release in the 2.x series, as the Python
maintainers have shifted the focus of their new feature development
efforts to the Python 3.x series.  This means that while Python 2
continues to receive bug fixes, and to be updated to build correctly on
new hardware and versions of supported operated systems, there will be
no new full feature releases for the language or standard library.

However, while there is a large common subset between Python 2.7 and
Python 3, and many of the changes involved in migrating to that common
subset, or directly to Python 3, can be safely automated, some other
changes (notably those associated with Unicode handling) may require
careful consideration, and preferably robust automated regression test
suites, to migrate effectively.

This means that Python 2.7 will remain in place for a long time,
providing a stable and supported base platform for production systems
that have not yet been ported to Python 3.  The full expected lifecycle
of the Python 2.7 series is detailed in PEP 373(1).

Some key consequences of the long-term significance of 2.7 are:

   * As noted above, the 2.7 release has a much longer period of
     maintenance when compared to earlier 2.x versions.  Python 2.7 is
     currently expected to remain supported by the core development team
     (receiving security updates and other bug fixes) until at least
     2020 (10 years after its initial release, compared to the more
     typical support period of 18-24 months).

   * As the Python 2.7 standard library ages, making effective use of
     the Python Package Index (either directly or via a redistributor)
     becomes more important for Python 2 users.  In addition to a wide
     variety of third party packages for various tasks, the available
     packages include backports of new modules and features from the
     Python 3 standard library that are compatible with Python 2, as
     well as various tools and libraries that can make it easier to
     migrate to Python 3.  The Python Packaging User Guide(2) provides
     guidance on downloading and installing software from the Python
     Package Index.

   * While the preferred approach to enhancing Python 2 is now the
     publication of new packages on the Python Package Index, this
     approach doesn’t necessarily work in all cases, especially those
     related to network security.  In exceptional cases that cannot be
     handled adequately by publishing new or updated packages on PyPI,
     the Python Enhancement Proposal process may be used to make the
     case for adding new features directly to the Python 2 standard
     library.  Any such additions, and the maintenance releases where
     they were added, will be noted in the *note New Features Added to
     Python 2.7 Maintenance Releases: 6e1. section below.

For projects wishing to migrate from Python 2 to Python 3, or for
library and framework developers wishing to support users on both Python
2 and Python 3, there are a variety of tools and guides available to
help decide on a suitable approach and manage some of the technical
details involved.  The recommended starting point is the *note Porting
Python 2 Code to Python 3: 6e2. HOWTO guide.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0373

   (2) https://packaging.python.org


File: python.info,  Node: Changes to the Handling of Deprecation Warnings,  Next: Python 3 1 Features,  Prev: The Future for Python 2 x,  Up: What's New in Python 2 7

1.6.2 Changes to the Handling of Deprecation Warnings
-----------------------------------------------------

For Python 2.7, a policy decision was made to silence warnings only of
interest to developers by default.  *note DeprecationWarning: 2e1. and
its descendants are now ignored unless otherwise requested, preventing
users from seeing warnings triggered by an application.  This change was
also made in the branch that became Python 3.2.  (Discussed on
stdlib-sig and carried out in issue 7319(1).)

In previous releases, *note DeprecationWarning: 2e1. messages were
enabled by default, providing Python developers with a clear indication
of where their code may break in a future major version of Python.

However, there are increasingly many users of Python-based applications
who are not directly involved in the development of those applications.
*note DeprecationWarning: 2e1. messages are irrelevant to such users,
making them worry about an application that’s actually working correctly
and burdening application developers with responding to these concerns.

You can re-enable display of *note DeprecationWarning: 2e1. messages by
running Python with the *note -Wdefault: 6e4. (short form: *note -Wd:
6e4.) switch, or by setting the *note PYTHONWARNINGS: 566. environment
variable to ‘"default"’ (or ‘"d"’) before running Python.  Python code
can also re-enable them by calling ‘warnings.simplefilter('default')’.

The ‘unittest’ module also automatically reenables deprecation warnings
when running tests.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7319


File: python.info,  Node: Python 3 1 Features,  Next: PEP 372 Adding an Ordered Dictionary to collections,  Prev: Changes to the Handling of Deprecation Warnings,  Up: What's New in Python 2 7

1.6.3 Python 3.1 Features
-------------------------

Much as Python 2.6 incorporated features from Python 3.0, version 2.7
incorporates some of the new features in Python 3.1.  The 2.x series
continues to provide tools for migrating to the 3.x series.

A partial list of 3.1 features that were backported to 2.7:

   * The syntax for set literals (‘{1,2,3}’ is a mutable set).

   * Dictionary and set comprehensions (‘{i: i*2 for i in range(3)}’).

   * Multiple context managers in a single *note with: 19b. statement.

   * A new version of the *note io: 9e. library, rewritten in C for
     performance.

   * The ordered-dictionary type described in *note PEP 372; Adding an
     Ordered Dictionary to collections: 6e6.

   * The new ‘","’ format specifier described in *note PEP 378; Format
     Specifier for Thousands Separator: 6e7.

   * The *note memoryview: 187. object.

   * A small subset of the *note importlib: 99. module, *note described
     below: 6e8.

   * The *note repr(): 3db. of a float ‘x’ is shorter in many cases:
     it’s now based on the shortest decimal string that’s guaranteed to
     round back to ‘x’.  As in previous versions of Python, it’s
     guaranteed that ‘float(repr(x))’ recovers ‘x’.

   * Float-to-string and string-to-float conversions are correctly
     rounded.  The *note round(): 6d1. function is also now correctly
     rounded.

   * The *note PyCapsule: 659. type, used to provide a C API for
     extension modules.

   * The *note PyLong_AsLongAndOverflow(): 64f. C API function.

Other new Python3-mode warnings include:

   * ‘operator.isCallable()’ and ‘operator.sequenceIncludes()’, which
     are not supported in 3.x, now trigger warnings.

   * The ‘-3’ switch now automatically enables the ‘-Qwarn’ switch that
     causes warnings about using classic division with integers and long
     integers.


File: python.info,  Node: PEP 372 Adding an Ordered Dictionary to collections,  Next: PEP 378 Format Specifier for Thousands Separator<2>,  Prev: Python 3 1 Features,  Up: What's New in Python 2 7

1.6.4 PEP 372: Adding an Ordered Dictionary to collections
----------------------------------------------------------

Regular Python dictionaries iterate over key/value pairs in arbitrary
order.  Over the years, a number of authors have written alternative
implementations that remember the order that the keys were originally
inserted.  Based on the experiences from those implementations, 2.7
introduces a new *note OrderedDict: 587. class in the *note collections:
1e. module.

The *note OrderedDict: 587. API provides the same interface as regular
dictionaries but iterates over keys and values in a guaranteed order
depending on when a key was first inserted:

     >>> from collections import OrderedDict
     >>> d = OrderedDict([('first', 1),
     ...                  ('second', 2),
     ...                  ('third', 3)])
     >>> d.items()
     [('first', 1), ('second', 2), ('third', 3)]

If a new entry overwrites an existing entry, the original insertion
position is left unchanged:

     >>> d['second'] = 4
     >>> d.items()
     [('first', 1), ('second', 4), ('third', 3)]

Deleting an entry and reinserting it will move it to the end:

     >>> del d['second']
     >>> d['second'] = 5
     >>> d.items()
     [('first', 1), ('third', 3), ('second', 5)]

The *note popitem(): 6ea. method has an optional `last' argument that
defaults to True.  If `last' is True, the most recently added key is
returned and removed; if it’s False, the oldest key is selected:

     >>> od = OrderedDict([(x,0) for x in range(20)])
     >>> od.popitem()
     (19, 0)
     >>> od.popitem()
     (18, 0)
     >>> od.popitem(last=False)
     (0, 0)
     >>> od.popitem(last=False)
     (1, 0)

Comparing two ordered dictionaries checks both the keys and values, and
requires that the insertion order was the same:

     >>> od1 = OrderedDict([('first', 1),
     ...                    ('second', 2),
     ...                    ('third', 3)])
     >>> od2 = OrderedDict([('third', 3),
     ...                    ('first', 1),
     ...                    ('second', 2)])
     >>> od1 == od2
     False
     >>> # Move 'third' key to the end
     >>> del od2['third']; od2['third'] = 3
     >>> od1 == od2
     True

Comparing an *note OrderedDict: 587. with a regular dictionary ignores
the insertion order and just compares the keys and values.

How does the *note OrderedDict: 587. work?  It maintains a doubly-linked
list of keys, appending new keys to the list as they’re inserted.  A
secondary dictionary maps keys to their corresponding list node, so
deletion doesn’t have to traverse the entire linked list and therefore
remains O(1).

The standard library now supports use of ordered dictionaries in several
modules.

   * The ‘ConfigParser’ module uses them by default, meaning that
     configuration files can now be read, modified, and then written
     back in their original order.

   * The *note _asdict(): 6eb. method for *note
     collections.namedtuple(): 66b. now returns an ordered dictionary
     with the values appearing in the same order as the underlying tuple
     indices.

   * The *note json: a1. module’s *note JSONDecoder: 6ec. class
     constructor was extended with an `object_pairs_hook' parameter to
     allow ‘OrderedDict’ instances to be built by the decoder.  Support
     was also added for third-party tools like PyYAML(1).

See also
........

PEP 372(2) - Adding an ordered dictionary to collections

     PEP written by Armin Ronacher and Raymond Hettinger; implemented by
     Raymond Hettinger.

   ---------- Footnotes ----------

   (1) http://pyyaml.org/

   (2) https://www.python.org/dev/peps/pep-0372


File: python.info,  Node: PEP 378 Format Specifier for Thousands Separator<2>,  Next: PEP 389 The argparse Module for Parsing Command Lines,  Prev: PEP 372 Adding an Ordered Dictionary to collections,  Up: What's New in Python 2 7

1.6.5 PEP 378: Format Specifier for Thousands Separator
-------------------------------------------------------

To make program output more readable, it can be useful to add separators
to large numbers, rendering them as 18,446,744,073,709,551,616 instead
of 18446744073709551616.

The fully general solution for doing this is the *note locale: a5.
module, which can use different separators ("," in North America, "."
in Europe) and different grouping sizes, but *note locale: a5. is
complicated to use and unsuitable for multi-threaded applications where
different threads are producing output for different locales.

Therefore, a simple comma-grouping mechanism has been added to the
mini-language used by the *note str.format(): 557. method.  When
formatting a floating-point number, simply include a comma between the
width and the precision:

     >>> '{:20,.2f}'.format(18446744073709551616.0)
     '18,446,744,073,709,551,616.00'

When formatting an integer, include the comma after the width:

     >>> '{:20,d}'.format(18446744073709551616)
     '18,446,744,073,709,551,616'

This mechanism is not adaptable at all; commas are always used as the
separator and the grouping is always into three-digit groups.  The
comma-formatting mechanism isn’t as general as the *note locale: a5.
module, but it’s easier to use.

See also
........

PEP 378(1) - Format Specifier for Thousands Separator

     PEP written by Raymond Hettinger; implemented by Eric Smith.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0378


File: python.info,  Node: PEP 389 The argparse Module for Parsing Command Lines,  Next: PEP 391 Dictionary-Based Configuration For Logging,  Prev: PEP 378 Format Specifier for Thousands Separator<2>,  Up: What's New in Python 2 7

1.6.6 PEP 389: The argparse Module for Parsing Command Lines
------------------------------------------------------------

The *note argparse: 6. module for parsing command-line arguments was
added as a more powerful replacement for the *note optparse: bf. module.

This means Python now supports three different modules for parsing
command-line arguments: *note getopt: 86, *note optparse: bf, and *note
argparse: 6.  The *note getopt: 86. module closely resembles the C
library’s ‘getopt()’ function, so it remains useful if you’re writing a
Python prototype that will eventually be rewritten in C. *note optparse:
bf. becomes redundant, but there are no plans to remove it because there
are many scripts still using it, and there’s no automated way to update
these scripts.  (Making the *note argparse: 6. API consistent with *note
optparse: bf.’s interface was discussed but rejected as too messy and
difficult.)

In short, if you’re writing a new script and don’t need to worry about
compatibility with earlier versions of Python, use *note argparse: 6.
instead of *note optparse: bf.

Here’s an example:

     import argparse

     parser = argparse.ArgumentParser(description='Command-line example.')

     # Add optional switches
     parser.add_argument('-v', action='store_true', dest='is_verbose',
                         help='produce verbose output')
     parser.add_argument('-o', action='store', dest='output',
                         metavar='FILE',
                         help='direct output to FILE instead of stdout')
     parser.add_argument('-C', action='store', type=int, dest='context',
                         metavar='NUM', default=0,
                         help='display NUM lines of added context')

     # Allow any number of additional arguments.
     parser.add_argument(nargs='*', action='store', dest='inputs',
                         help='input filenames (default is stdin)')

     args = parser.parse_args()
     print args.__dict__

Unless you override it, *note -h: 6ef. and *note –help: 6f0. switches
are automatically added, and produce neatly formatted output:

     -> ./python.exe argparse-example.py --help
     usage: argparse-example.py [-h] [-v] [-o FILE] [-C NUM] [inputs [inputs ...]]

     Command-line example.

     positional arguments:
       inputs      input filenames (default is stdin)

     optional arguments:
       -h, --help  show this help message and exit
       -v          produce verbose output
       -o FILE     direct output to FILE instead of stdout
       -C NUM      display NUM lines of added context

As with *note optparse: bf, the command-line switches and arguments are
returned as an object with attributes named by the `dest' parameters:

     -> ./python.exe argparse-example.py -v
     {'output': None,
      'is_verbose': True,
      'context': 0,
      'inputs': []}

     -> ./python.exe argparse-example.py -v -o /tmp/output -C 4 file1 file2
     {'output': '/tmp/output',
      'is_verbose': True,
      'context': 4,
      'inputs': ['file1', 'file2']}

*note argparse: 6. has much fancier validation than *note optparse: bf.;
you can specify an exact number of arguments as an integer, 0 or more
arguments by passing ‘'*'’, 1 or more by passing ‘'+'’, or an optional
argument with ‘'?'’.  A top-level parser can contain sub-parsers to
define subcommands that have different sets of switches, as in ‘svn
commit’, ‘svn checkout’, etc.  You can specify an argument’s type as
*note FileType: 1a1, which will automatically open files for you and
understands that ‘'-'’ means standard input or output.

See also
........

*note argparse: 6. documentation

     The documentation page of the argparse module.

*note Upgrading optparse code: 541.

     Part of the Python documentation, describing how to convert code
     that uses *note optparse: bf.

PEP 389(1) - argparse - New Command Line Parsing Module

     PEP written and implemented by Steven Bethard.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0389


File: python.info,  Node: PEP 391 Dictionary-Based Configuration For Logging,  Next: PEP 3106 Dictionary Views,  Prev: PEP 389 The argparse Module for Parsing Command Lines,  Up: What's New in Python 2 7

1.6.7 PEP 391: Dictionary-Based Configuration For Logging
---------------------------------------------------------

The *note logging: a6. module is very flexible; applications can define
a tree of logging subsystems, and each logger in this tree can filter
out certain messages, format them differently, and direct messages to a
varying number of handlers.

All this flexibility can require a lot of configuration.  You can write
Python statements to create objects and set their properties, but a
complex set-up requires verbose but boring code.  *note logging: a6.
also supports a ‘fileConfig()’ function that parses a file, but the file
format doesn’t support configuring filters, and it’s messier to generate
programmatically.

Python 2.7 adds a ‘dictConfig()’ function that uses a dictionary to
configure logging.  There are many ways to produce a dictionary from
different sources: construct one with code; parse a file containing
JSON; or use a YAML parsing library if one is installed.  For more
information see *note Configuration functions: 6f2.

The following example configures two loggers, the root logger and a
logger named "network".  Messages sent to the root logger will be sent
to the system log using the syslog protocol, and messages to the
"network" logger will be written to a ‘network.log’ file that will be
rotated once the log reaches 1MB.

     import logging
     import logging.config

     configdict = {
      'version': 1,    # Configuration schema in use; must be 1 for now
      'formatters': {
          'standard': {
              'format': ('%(asctime)s %(name)-15s '
                         '%(levelname)-8s %(message)s')}},

      'handlers': {'netlog': {'backupCount': 10,
                          'class': 'logging.handlers.RotatingFileHandler',
                          'filename': '/logs/network.log',
                          'formatter': 'standard',
                          'level': 'INFO',
                          'maxBytes': 1000000},
                   'syslog': {'class': 'logging.handlers.SysLogHandler',
                              'formatter': 'standard',
                              'level': 'ERROR'}},

      # Specify all the subordinate loggers
      'loggers': {
                  'network': {
                              'handlers': ['netlog']
                  }
      },
      # Specify properties of the root logger
      'root': {
               'handlers': ['syslog']
      },
     }

     # Set up configuration
     logging.config.dictConfig(configdict)

     # As an example, log two error messages
     logger = logging.getLogger('/')
     logger.error('Database not found')

     netlogger = logging.getLogger('network')
     netlogger.error('Connection failed')

Three smaller enhancements to the *note logging: a6. module, all
implemented by Vinay Sajip, are:

   * The *note SysLogHandler: 40d. class now supports syslogging over
     TCP. The constructor has a `socktype' parameter giving the type of
     socket to use, either *note socket.SOCK_DGRAM: 6f3. for UDP or
     *note socket.SOCK_STREAM: 6f4. for TCP. The default protocol
     remains UDP.

   * *note Logger: 6f5. instances gained a *note getChild(): 6f6. method
     that retrieves a descendant logger using a relative path.  For
     example, once you retrieve a logger by doing ‘log =
     getLogger('app')’, calling ‘log.getChild('network.listen')’ is
     equivalent to ‘getLogger('app.network.listen')’.

   * The *note LoggerAdapter: 6f7. class gained a ‘isEnabledFor()’
     method that takes a `level' and returns whether the underlying
     logger would process a message of that level of importance.

See also
........

PEP 391(1) - Dictionary-Based Configuration For Logging

     PEP written and implemented by Vinay Sajip.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0391


File: python.info,  Node: PEP 3106 Dictionary Views,  Next: PEP 3137 The memoryview Object,  Prev: PEP 391 Dictionary-Based Configuration For Logging,  Up: What's New in Python 2 7

1.6.8 PEP 3106: Dictionary Views
--------------------------------

The dictionary methods *note keys(): 682, *note values(): 684, and *note
items(): 683. are different in Python 3.x.  They return an object called
a `view' instead of a fully materialized list.

It’s not possible to change the return values of *note keys(): 682,
*note values(): 684, and *note items(): 683. in Python 2.7 because too
much code would break.  Instead the 3.x versions were added under the
new names ‘viewkeys()’, ‘viewvalues()’, and ‘viewitems()’.

     >>> d = dict((i*10, chr(65+i)) for i in range(26))
     >>> d
     {0: 'A', 130: 'N', 10: 'B', 140: 'O', 20: ..., 250: 'Z'}
     >>> d.viewkeys()
     dict_keys([0, 130, 10, 140, 20, 150, 30, ..., 250])

Views can be iterated over, but the key and item views also behave like
sets.  The ‘&’ operator performs intersection, and ‘|’ performs a union:

     >>> d1 = dict((i*10, chr(65+i)) for i in range(26))
     >>> d2 = dict((i**.5, i) for i in range(1000))
     >>> d1.viewkeys() & d2.viewkeys()
     set([0.0, 10.0, 20.0, 30.0])
     >>> d1.viewkeys() | range(0, 30)
     set([0, 1, 130, 3, 4, 5, 6, ..., 120, 250])

The view keeps track of the dictionary and its contents change as the
dictionary is modified:

     >>> vk = d.viewkeys()
     >>> vk
     dict_keys([0, 130, 10, ..., 250])
     >>> d[260] = '&'
     >>> vk
     dict_keys([0, 130, 260, 10, ..., 250])

However, note that you can’t add or remove keys while you’re iterating
over the view:

     >>> for k in vk:
     ...     d[k*2] = k
     ...
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     RuntimeError: dictionary changed size during iteration

You can use the view methods in Python 2.x code, and the 2to3 converter
will change them to the standard *note keys(): 682, *note values(): 684,
and *note items(): 683. methods.

See also
........

PEP 3106(1) - Revamping dict.keys(), .values() and .items()

     PEP written by Guido van Rossum.  Backported to 2.7 by Alexandre
     Vassalotti; issue 1967(2).

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3106

   (2) https://bugs.python.org/issue1967


File: python.info,  Node: PEP 3137 The memoryview Object,  Next: Other Language Changes<5>,  Prev: PEP 3106 Dictionary Views,  Up: What's New in Python 2 7

1.6.9 PEP 3137: The memoryview Object
-------------------------------------

The *note memoryview: 187. object provides a view of another object’s
memory content that matches the *note bytes: 179. type’s interface.

     >>> import string
     >>> m = memoryview(string.letters)
     >>> m
     <memory at 0x37f850>
     >>> len(m)           # Returns length of underlying object
     52
     >>> m[0], m[25], m[26]   # Indexing returns one byte
     ('a', 'z', 'A')
     >>> m2 = m[0:26]         # Slicing returns another memoryview
     >>> m2
     <memory at 0x37f080>

The content of the view can be converted to a string of bytes or a list
of integers:

     >>> m2.tobytes()
     'abcdefghijklmnopqrstuvwxyz'
     >>> m2.tolist()
     [97, 98, 99, 100, 101, 102, 103, ... 121, 122]
     >>>

*note memoryview: 187. objects allow modifying the underlying object if
it’s a mutable object.

     >>> m2[0] = 75
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     TypeError: cannot modify read-only memory
     >>> b = bytearray(string.letters)  # Creating a mutable object
     >>> b
     bytearray(b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
     >>> mb = memoryview(b)
     >>> mb[0] = '*'         # Assign to view, changing the bytearray.
     >>> b[0:5]              # The bytearray has been changed.
     bytearray(b'*bcde')
     >>>

See also
........

PEP 3137(1) - Immutable Bytes and Mutable Buffer

     PEP written by Guido van Rossum.  Implemented by Travis Oliphant,
     Antoine Pitrou and others.  Backported to 2.7 by Antoine Pitrou;
     issue 2396(2).

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3137

   (2) https://bugs.python.org/issue2396


File: python.info,  Node: Other Language Changes<5>,  Next: New and Improved Modules,  Prev: PEP 3137 The memoryview Object,  Up: What's New in Python 2 7

1.6.10 Other Language Changes
-----------------------------

Some smaller changes made to the core Python language are:

   * The syntax for set literals has been backported from Python 3.x.
     Curly brackets are used to surround the contents of the resulting
     mutable set; set literals are distinguished from dictionaries by
     not containing colons and values.  ‘{}’ continues to represent an
     empty dictionary; use ‘set()’ for an empty set.

          >>> {1, 2, 3, 4, 5}
          set([1, 2, 3, 4, 5])
          >>> set() # empty set
          set([])
          >>> {}    # empty dict
          {}

     Backported by Alexandre Vassalotti; issue 2335(1).

   * Dictionary and set comprehensions are another feature backported
     from 3.x, generalizing list/generator comprehensions to use the
     literal syntax for sets and dictionaries.

          >>> {x: x*x for x in range(6)}
          {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
          >>> {('a'*x) for x in range(6)}
          set(['', 'a', 'aa', 'aaa', 'aaaa', 'aaaaa'])

     Backported by Alexandre Vassalotti; issue 2333(2).

   * The *note with: 19b. statement can now use multiple context
     managers in one statement.  Context managers are processed from
     left to right and each one is treated as beginning a new *note
     with: 19b. statement.  This means that:

          with A() as a, B() as b:
              ... suite of statements ...

     is equivalent to:

          with A() as a:
              with B() as b:
                  ... suite of statements ...

     The ‘contextlib.nested()’ function provides a very similar
     function, so it’s no longer necessary and has been deprecated.

     (Proposed in ‘https://codereview.appspot.com/53094’; implemented by
     Georg Brandl.)

   * Conversions between floating-point numbers and strings are now
     correctly rounded on most platforms.  These conversions occur in
     many different places: *note str(): 178. on floats and complex
     numbers; the *note float: 327. and *note complex: 326.
     constructors; numeric formatting; serializing and deserializing
     floats and complex numbers using the *note marshal: ad, *note
     pickle: c6. and *note json: a1. modules; parsing of float and
     imaginary literals in Python code; and *note Decimal: 3d4.-to-float
     conversion.

     Related to this, the *note repr(): 3db. of a floating-point number
     `x' now returns a result based on the shortest decimal string
     that’s guaranteed to round back to `x' under correct rounding (with
     round-half-to-even rounding mode).  Previously it gave a string
     based on rounding x to 17 decimal digits.

     The rounding library responsible for this improvement works on
     Windows and on Unix platforms using the gcc, icc, or suncc
     compilers.  There may be a small number of platforms where correct
     operation of this code cannot be guaranteed, so the code is not
     used on such systems.  You can find out which code is being used by
     checking *note sys.float_repr_style: 6fb, which will be ‘short’ if
     the new code is in use and ‘legacy’ if it isn’t.

     Implemented by Eric Smith and Mark Dickinson, using David Gay’s
     ‘dtoa.c’ library; issue 7117(3).

   * Conversions from long integers and regular integers to floating
     point now round differently, returning the floating-point number
     closest to the number.  This doesn’t matter for small integers that
     can be converted exactly, but for large numbers that will
     unavoidably lose precision, Python 2.7 now approximates more
     closely.  For example, Python 2.6 computed the following:

          >>> n = 295147905179352891391
          >>> float(n)
          2.9514790517935283e+20
          >>> n - long(float(n))
          65535L

     Python 2.7’s floating-point result is larger, but much closer to
     the true value:

          >>> n = 295147905179352891391
          >>> float(n)
          2.9514790517935289e+20
          >>> n - long(float(n))
          -1L

     (Implemented by Mark Dickinson; issue 3166(4).)

     Integer division is also more accurate in its rounding behaviours.
     (Also implemented by Mark Dickinson; issue 1811(5).)

   * Implicit coercion for complex numbers has been removed; the
     interpreter will no longer ever attempt to call a ‘__coerce__()’
     method on complex objects.  (Removed by Meador Inge and Mark
     Dickinson; issue 5211(6).)

   * The *note str.format(): 557. method now supports automatic
     numbering of the replacement fields.  This makes using *note
     str.format(): 557. more closely resemble using ‘%s’ formatting:

          >>> '{}:{}:{}'.format(2009, 04, 'Sunday')
          '2009:4:Sunday'
          >>> '{}:{}:{day}'.format(2009, 4, day='Sunday')
          '2009:4:Sunday'

     The auto-numbering takes the fields from left to right, so the
     first ‘{...}’ specifier will use the first argument to *note
     str.format(): 557, the next specifier will use the next argument,
     and so on.  You can’t mix auto-numbering and explicit numbering –
     either number all of your specifier fields or none of them – but
     you can mix auto-numbering and named fields, as in the second
     example above.  (Contributed by Eric Smith; issue 5237(7).)

     Complex numbers now correctly support usage with *note format():
     556, and default to being right-aligned.  Specifying a precision or
     comma-separation applies to both the real and imaginary parts of
     the number, but a specified field width and alignment is applied to
     the whole of the resulting ‘1.5+3j’ output.  (Contributed by Eric
     Smith; issue 1588(8) and issue 7988(9).)

     The ’F’ format code now always formats its output using uppercase
     characters, so it will now produce ’INF’ and ’NAN’.  (Contributed
     by Eric Smith; issue 3382(10).)

     A low-level change: the *note object.__format__(): 308. method now
     triggers a *note PendingDeprecationWarning: 6fc. if it’s passed a
     format string, because the *note __format__(): 308. method for
     *note object: 381. converts the object to a string representation
     and formats that.  Previously the method silently applied the
     format string to the string representation, but that could hide
     mistakes in Python code.  If you’re supplying formatting
     information such as an alignment or precision, presumably you’re
     expecting the formatting to be applied in some object-specific way.
     (Fixed by Eric Smith; issue 7994(11).)

   * The *note int(): 185. and ‘long()’ types gained a ‘bit_length’
     method that returns the number of bits necessary to represent its
     argument in binary:

          >>> n = 37
          >>> bin(n)
          '0b100101'
          >>> n.bit_length()
          6
          >>> n = 2**123-1
          >>> n.bit_length()
          123
          >>> (n+1).bit_length()
          124

     (Contributed by Fredrik Johansson and Victor Stinner; issue
     3439(12).)

   * The *note import: 674. statement will no longer try an absolute
     import if a relative import (e.g.  ‘from .os import sep’) fails.
     This fixes a bug, but could possibly break certain *note import:
     674. statements that were only working by accident.  (Fixed by
     Meador Inge; issue 7902(13).)

   * It’s now possible for a subclass of the built-in ‘unicode’ type to
     override the ‘__unicode__()’ method.  (Implemented by Victor
     Stinner; issue 1583863(14).)

   * The *note bytearray: 17a. type’s *note translate(): 6fd. method now
     accepts ‘None’ as its first argument.  (Fixed by Georg Brandl;
     issue 4759(15).)

   * When using ‘@classmethod’ and ‘@staticmethod’ to wrap methods as
     class or static methods, the wrapper object now exposes the wrapped
     function as their ‘__func__’ attribute.  (Contributed by Amaury
     Forgeot d’Arc, after a suggestion by George Sakkis; issue
     5982(16).)

   * When a restricted set of attributes were set using ‘__slots__’,
     deleting an unset attribute would not raise *note AttributeError:
     320. as you would expect.  Fixed by Benjamin Peterson; issue
     7604(17).)

   * Two new encodings are now supported: "cp720", used primarily for
     Arabic text; and "cp858", a variant of CP 850 that adds the euro
     symbol.  (CP720 contributed by Alexander Belchenko and Amaury
     Forgeot d’Arc in issue 1616979(18); CP858 contributed by Tim Hatch
     in issue 8016(19).)

   * The ‘file’ object will now set the ‘filename’ attribute on the
     *note IOError: 360. exception when trying to open a directory on
     POSIX platforms (noted by Jan Kaliszewski; issue 4764(20)), and now
     explicitly checks for and forbids writing to read-only file objects
     instead of trusting the C library to catch and report the error
     (fixed by Stefan Krah; issue 5677(21)).

   * The Python tokenizer now translates line endings itself, so the
     *note compile(): 6fe. built-in function now accepts code using any
     line-ending convention.  Additionally, it no longer requires that
     the code end in a newline.

   * Extra parentheses in function definitions are illegal in Python
     3.x, meaning that you get a syntax error from ‘def f((x)): pass’.
     In Python3-warning mode, Python 2.7 will now warn about this odd
     usage.  (Noted by James Lingard; issue 7362(22).)

   * It’s now possible to create weak references to old-style class
     objects.  New-style classes were always weak-referenceable.  (Fixed
     by Antoine Pitrou; issue 8268(23).)

   * When a module object is garbage-collected, the module’s dictionary
     is now only cleared if no one else is holding a reference to the
     dictionary (issue 7140(24)).

* Menu:

* Interpreter Changes:: 
* Optimizations: Optimizations<4>. 

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2335

   (2) https://bugs.python.org/issue2333

   (3) https://bugs.python.org/issue7117

   (4) https://bugs.python.org/issue3166

   (5) https://bugs.python.org/issue1811

   (6) https://bugs.python.org/issue5211

   (7) https://bugs.python.org/issue5237

   (8) https://bugs.python.org/issue1588

   (9) https://bugs.python.org/issue7988

   (10) https://bugs.python.org/issue3382

   (11) https://bugs.python.org/issue7994

   (12) https://bugs.python.org/issue3439

   (13) https://bugs.python.org/issue7902

   (14) https://bugs.python.org/issue1583863

   (15) https://bugs.python.org/issue4759

   (16) https://bugs.python.org/issue5982

   (17) https://bugs.python.org/issue7604

   (18) https://bugs.python.org/issue1616979

   (19) https://bugs.python.org/issue8016

   (20) https://bugs.python.org/issue4764

   (21) https://bugs.python.org/issue5677

   (22) https://bugs.python.org/issue7362

   (23) https://bugs.python.org/issue8268

   (24) https://bugs.python.org/issue7140


File: python.info,  Node: Interpreter Changes,  Next: Optimizations<4>,  Up: Other Language Changes<5>

1.6.10.1 Interpreter Changes
............................

A new environment variable, *note PYTHONWARNINGS: 566, allows
controlling warnings.  It should be set to a string containing warning
settings, equivalent to those used with the *note -W: 6e4. switch,
separated by commas.  (Contributed by Brian Curtin; issue 7301(1).)

For example, the following setting will print warnings every time they
occur, but turn warnings from the ‘Cookie’ module into an error.  (The
exact syntax for setting an environment variable varies across operating
systems and shells.)

     export PYTHONWARNINGS=all,error:::Cookie:0

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7301


File: python.info,  Node: Optimizations<4>,  Prev: Interpreter Changes,  Up: Other Language Changes<5>

1.6.10.2 Optimizations
......................

Several performance enhancements have been added:

   * A new opcode was added to perform the initial setup for *note with:
     19b. statements, looking up the *note __enter__(): 702. and *note
     __exit__(): 703. methods.  (Contributed by Benjamin Peterson.)

   * The garbage collector now performs better for one common usage
     pattern: when many objects are being allocated without deallocating
     any of them.  This would previously take quadratic time for garbage
     collection, but now the number of full garbage collections is
     reduced as the number of objects on the heap grows.  The new logic
     only performs a full garbage collection pass when the middle
     generation has been collected 10 times and when the number of
     survivor objects from the middle generation exceeds 10% of the
     number of objects in the oldest generation.  (Suggested by Martin
     von Löwis and implemented by Antoine Pitrou; issue 4074(1).)

   * The garbage collector tries to avoid tracking simple containers
     which can’t be part of a cycle.  In Python 2.7, this is now true
     for tuples and dicts containing atomic types (such as ints,
     strings, etc.).  Transitively, a dict containing tuples of atomic
     types won’t be tracked either.  This helps reduce the cost of each
     garbage collection by decreasing the number of objects to be
     considered and traversed by the collector.  (Contributed by Antoine
     Pitrou; issue 4688(2).)

   * Long integers are now stored internally either in base 2**15 or in
     base 2**30, the base being determined at build time.  Previously,
     they were always stored in base 2**15.  Using base 2**30 gives
     significant performance improvements on 64-bit machines, but
     benchmark results on 32-bit machines have been mixed.  Therefore,
     the default is to use base 2**30 on 64-bit machines and base 2**15
     on 32-bit machines; on Unix, there’s a new configure option
     ‘--enable-big-digits’ that can be used to override this default.

     Apart from the performance improvements this change should be
     invisible to end users, with one exception: for testing and
     debugging purposes there’s a new structseq ‘sys.long_info’ that
     provides information about the internal format, giving the number
     of bits per digit and the size in bytes of the C type used to store
     each digit:

          >>> import sys
          >>> sys.long_info
          sys.long_info(bits_per_digit=30, sizeof_digit=4)

     (Contributed by Mark Dickinson; issue 4258(3).)

     Another set of changes made long objects a few bytes smaller: 2
     bytes smaller on 32-bit systems and 6 bytes on 64-bit.
     (Contributed by Mark Dickinson; issue 5260(4).)

   * The division algorithm for long integers has been made faster by
     tightening the inner loop, doing shifts instead of multiplications,
     and fixing an unnecessary extra iteration.  Various benchmarks show
     speedups of between 50% and 150% for long integer divisions and
     modulo operations.  (Contributed by Mark Dickinson; issue 5512(5).)
     Bitwise operations are also significantly faster (initial patch by
     Gregory Smith; issue 1087418(6)).

   * The implementation of ‘%’ checks for the left-side operand being a
     Python string and special-cases it; this results in a 1-3%
     performance increase for applications that frequently use ‘%’ with
     strings, such as templating libraries.  (Implemented by Collin
     Winter; issue 5176(7).)

   * List comprehensions with an ‘if’ condition are compiled into faster
     bytecode.  (Patch by Antoine Pitrou, back-ported to 2.7 by Jeffrey
     Yasskin; issue 4715(8).)

   * Converting an integer or long integer to a decimal string was made
     faster by special-casing base 10 instead of using a generalized
     conversion function that supports arbitrary bases.  (Patch by
     Gawain Bolton; issue 6713(9).)

   * The ‘split()’, ‘replace()’, ‘rindex()’, ‘rpartition()’, and
     ‘rsplit()’ methods of string-like types (strings, Unicode strings,
     and *note bytearray: 17a. objects) now use a fast reverse-search
     algorithm instead of a character-by-character scan.  This is
     sometimes faster by a factor of 10.  (Added by Florent Xicluna;
     issue 7462(10) and issue 7622(11).)

   * The *note pickle: c6. and ‘cPickle’ modules now automatically
     intern the strings used for attribute names, reducing memory usage
     of the objects resulting from unpickling.  (Contributed by Jake
     McGuire; issue 5084(12).)

   * The ‘cPickle’ module now special-cases dictionaries, nearly halving
     the time required to pickle them.  (Contributed by Collin Winter;
     issue 5670(13).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4074

   (2) https://bugs.python.org/issue4688

   (3) https://bugs.python.org/issue4258

   (4) https://bugs.python.org/issue5260

   (5) https://bugs.python.org/issue5512

   (6) https://bugs.python.org/issue1087418

   (7) https://bugs.python.org/issue5176

   (8) https://bugs.python.org/issue4715

   (9) https://bugs.python.org/issue6713

   (10) https://bugs.python.org/issue7462

   (11) https://bugs.python.org/issue7622

   (12) https://bugs.python.org/issue5084

   (13) https://bugs.python.org/issue5670


File: python.info,  Node: New and Improved Modules,  Next: Build and C API Changes<5>,  Prev: Other Language Changes<5>,  Up: What's New in Python 2 7

1.6.11 New and Improved Modules
-------------------------------

As in every release, Python’s standard library received a number of
enhancements and bug fixes.  Here’s a partial list of the most notable
changes, sorted alphabetically by module name.  Consult the ‘Misc/NEWS’
file in the source tree for a more complete list of changes, or look
through the Subversion logs for all the details.

   * The *note bdb: f. module’s base debugging class *note Bdb: 705.
     gained a feature for skipping modules.  The constructor now takes
     an iterable containing glob-style patterns such as ‘django.*’; the
     debugger will not step into stack frames from a module that matches
     one of these patterns.  (Contributed by Maru Newby after a
     suggestion by Senthil Kumaran; issue 5142(1).)

   * The *note binascii: 10. module now supports the buffer API, so it
     can be used with *note memoryview: 187. instances and other similar
     buffer objects.  (Backported from 3.x by Florent Xicluna; issue
     7703(2).)

   * Updated module: the ‘bsddb’ module has been updated from
     4.7.2devel9 to version 4.8.4 of the pybsddb package(3).  The new
     version features better Python 3.x compatibility, various bug
     fixes, and adds several new BerkeleyDB flags and methods.  (Updated
     by Jesús Cea Avión; issue 8156(4).  The pybsddb changelog can be
     read at ‘http://hg.jcea.es/pybsddb/file/tip/ChangeLog’.)

   * The *note bz2: 14. module’s *note BZ2File: 2db. now supports the
     context management protocol, so you can write ‘with
     bz2.BZ2File(...) as f:’.  (Contributed by Hagen Fürstenau; issue
     3860(5).)

   * New class: the *note Counter: 3bd. class in the *note collections:
     1e. module is useful for tallying data.  *note Counter: 3bd.
     instances behave mostly like dictionaries but return zero for
     missing keys instead of raising a *note KeyError: 706.:

          >>> from collections import Counter
          >>> c = Counter()
          >>> for letter in 'here is a sample of english text':
          ...   c[letter] += 1
          ...
          >>> c
          Counter({' ': 6, 'e': 5, 's': 3, 'a': 2, 'i': 2, 'h': 2,
          'l': 2, 't': 2, 'g': 1, 'f': 1, 'm': 1, 'o': 1, 'n': 1,
          'p': 1, 'r': 1, 'x': 1})
          >>> c['e']
          5
          >>> c['z']
          0

     There are three additional *note Counter: 3bd. methods.  *note
     most_common(): 707. returns the N most common elements and their
     counts.  *note elements(): 708. returns an iterator over the
     contained elements, repeating each element as many times as its
     count.  *note subtract(): 586. takes an iterable and subtracts one
     for each element instead of adding; if the argument is a dictionary
     or another ‘Counter’, the counts are subtracted.

          >>> c.most_common(5)
          [(' ', 6), ('e', 5), ('s', 3), ('a', 2), ('i', 2)]
          >>> c.elements() ->
             'a', 'a', ' ', ' ', ' ', ' ', ' ', ' ',
             'e', 'e', 'e', 'e', 'e', 'g', 'f', 'i', 'i',
             'h', 'h', 'm', 'l', 'l', 'o', 'n', 'p', 's',
             's', 's', 'r', 't', 't', 'x'
          >>> c['e']
          5
          >>> c.subtract('very heavy on the letter e')
          >>> c['e']    # Count is now lower
          -1

     Contributed by Raymond Hettinger; issue 1696199(6).

     New class: *note OrderedDict: 587. is described in the earlier
     section *note PEP 372; Adding an Ordered Dictionary to collections:
     6e6.

     New method: The *note deque: 589. data type now has a *note
     count(): 58a. method that returns the number of contained elements
     equal to the supplied argument `x', and a *note reverse(): 58b.
     method that reverses the elements of the deque in-place.  *note
     deque: 589. also exposes its maximum length as the read-only *note
     maxlen: 709. attribute.  (Both features added by Raymond
     Hettinger.)

     The *note namedtuple: 66b. class now has an optional `rename'
     parameter.  If `rename' is true, field names that are invalid
     because they’ve been repeated or aren’t legal Python identifiers
     will be renamed to legal names that are derived from the field’s
     position within the list of fields:

          >>> from collections import namedtuple
          >>> T = namedtuple('T', ['field1', '$illegal', 'for', 'field2'], rename=True)
          >>> T._fields
          ('field1', '_1', '_2', 'field2')

     (Added by Raymond Hettinger; issue 1818(7).)

     Finally, the ‘Mapping’ abstract base class now returns *note
     NotImplemented: 1d6. if a mapping is compared to another type that
     isn’t a ‘Mapping’.  (Fixed by Daniel Stutzbach; issue 8729(8).)

   * Constructors for the parsing classes in the ‘ConfigParser’ module
     now take a `allow_no_value' parameter, defaulting to false; if
     true, options without values will be allowed.  For example:

          >>> import ConfigParser, StringIO
          >>> sample_config = """
          ... [mysqld]
          ... user = mysql
          ... pid-file = /var/run/mysqld/mysqld.pid
          ... skip-bdb
          ... """
          >>> config = ConfigParser.RawConfigParser(allow_no_value=True)
          >>> config.readfp(StringIO.StringIO(sample_config))
          >>> config.get('mysqld', 'user')
          'mysql'
          >>> print config.get('mysqld', 'skip-bdb')
          None
          >>> print config.get('mysqld', 'unknown')
          Traceback (most recent call last):
            ...
          NoOptionError: No option 'unknown' in section: 'mysqld'

     (Contributed by Mats Kindahl; issue 7005(9).)

   * Deprecated function: ‘contextlib.nested()’, which allows handling
     more than one context manager with a single *note with: 19b.
     statement, has been deprecated, because the *note with: 19b.
     statement now supports multiple context managers.

   * The ‘cookielib’ module now ignores cookies that have an invalid
     version field, one that doesn’t contain an integer value.  (Fixed
     by John J. Lee; issue 3924(10).)

   * The *note copy: 25. module’s *note deepcopy(): 70a. function will
     now correctly copy bound instance methods.  (Implemented by Robert
     Collins; issue 1515(11).)

   * The *note ctypes: 2a. module now always converts ‘None’ to a C NULL
     pointer for arguments declared as pointers.  (Changed by Thomas
     Heller; issue 4606(12).)  The underlying libffi library(13) has
     been updated to version 3.0.9, containing various fixes for
     different platforms.  (Updated by Matthias Klose; issue 8142(14).)

   * New method: the *note datetime: 2f. module’s *note timedelta: 592.
     class gained a *note total_seconds(): 70b. method that returns the
     number of seconds in the duration.  (Contributed by Brian Quinlan;
     issue 5788(15).)

   * New method: the *note Decimal: 3d4. class gained a *note
     from_float(): 5b7. class method that performs an exact conversion
     of a floating-point number to a *note Decimal: 3d4.  This exact
     conversion strives for the closest decimal approximation to the
     floating-point representation’s value; the resulting decimal value
     will therefore still include the inaccuracy, if any.  For example,
     ‘Decimal.from_float(0.1)’ returns
     ‘Decimal('0.1000000000000000055511151231257827021181583404541015625')’.
     (Implemented by Raymond Hettinger; issue 4796(16).)

     Comparing instances of *note Decimal: 3d4. with floating-point
     numbers now produces sensible results based on the numeric values
     of the operands.  Previously such comparisons would fall back to
     Python’s default rules for comparing objects, which produced
     arbitrary results based on their type.  Note that you still cannot
     combine ‘Decimal’ and floating-point in other operations such as
     addition, since you should be explicitly choosing how to convert
     between float and *note Decimal: 3d4.  (Fixed by Mark Dickinson;
     issue 2531(17).)

     The constructor for *note Decimal: 3d4. now accepts floating-point
     numbers (added by Raymond Hettinger; issue 8257(18)) and
     non-European Unicode characters such as Arabic-Indic digits
     (contributed by Mark Dickinson; issue 6595(19)).

     Most of the methods of the *note Context: 3da. class now accept
     integers as well as *note Decimal: 3d4. instances; the only
     exceptions are the *note canonical(): 70c. and *note
     is_canonical(): 70d. methods.  (Patch by Juan José Conti; issue
     7633(20).)

     When using *note Decimal: 3d4. instances with a string’s *note
     format(): 557. method, the default alignment was previously
     left-alignment.  This has been changed to right-alignment, which is
     more sensible for numeric types.  (Changed by Mark Dickinson; issue
     6857(21).)

     Comparisons involving a signaling NaN value (or ‘sNAN’) now signal
     ‘InvalidOperation’ instead of silently returning a true or false
     value depending on the comparison operator.  Quiet NaN values (or
     ‘NaN’) are now hashable.  (Fixed by Mark Dickinson; issue
     7279(22).)

   * The *note difflib: 35. module now produces output that is more
     compatible with modern ‘diff’/‘patch’ tools through one small
     change, using a tab character instead of spaces as a separator in
     the header giving the filename.  (Fixed by Anatoly Techtonik; issue
     7585(23).)

   * The Distutils ‘sdist’ command now always regenerates the ‘MANIFEST’
     file, since even if the ‘MANIFEST.in’ or ‘setup.py’ files haven’t
     been modified, the user might have created some new files that
     should be included.  (Fixed by Tarek Ziadé; issue 8688(24).)

   * The *note doctest: 65. module’s ‘IGNORE_EXCEPTION_DETAIL’ flag will
     now ignore the name of the module containing the exception being
     tested.  (Patch by Lennart Regebro; issue 7490(25).)

   * The *note email: 67. module’s *note Message: 155. class will now
     accept a Unicode-valued payload, automatically converting the
     payload to the encoding specified by ‘output_charset’.  (Added by
     R. David Murray; issue 1368247(26).)

   * The *note Fraction: 5b8. class now accepts a single float or *note
     Decimal: 3d4. instance, or two rational numbers, as arguments to
     its constructor.  (Implemented by Mark Dickinson; rationals added
     in issue 5812(27), and float/decimal in issue 8294(28).)

     Ordering comparisons (‘<’, ‘<=’, ‘>’, ‘>=’) between fractions and
     complex numbers now raise a *note TypeError: 309.  This fixes an
     oversight, making the *note Fraction: 5b8. match the other numeric
     types.

   * New class: *note FTP_TLS: 3ed. in the *note ftplib: 83. module
     provides secure FTP connections using TLS encapsulation of
     authentication as well as subsequent control and data transfers.
     (Contributed by Giampaolo Rodola; issue 2054(29).)

     The *note storbinary(): 70e. method for binary uploads can now
     restart uploads thanks to an added `rest' parameter (patch by Pablo
     Mouzo; issue 6845(30).)

   * New class decorator: *note total_ordering(): 1d5. in the *note
     functools: 84. module takes a class that defines an *note __eq__():
     68d. method and one of *note __lt__(): 68c, *note __le__(): 70f,
     *note __gt__(): 710, or *note __ge__(): 711, and generates the
     missing comparison methods.  Since the ‘__cmp__()’ method is being
     deprecated in Python 3.x, this decorator makes it easier to define
     ordered classes.  (Added by Raymond Hettinger; issue 5479(31).)

     New function: *note cmp_to_key(): 581. will take an old-style
     comparison function that expects two arguments and return a new
     callable that can be used as the `key' parameter to functions such
     as *note sorted(): 63e, *note min(): 182. and *note max(): 183,
     etc.  The primary intended use is to help with making code
     compatible with Python 3.x.  (Added by Raymond Hettinger.)

   * New function: the *note gc: 85. module’s *note is_tracked(): 712.
     returns true if a given instance is tracked by the garbage
     collector, false otherwise.  (Contributed by Antoine Pitrou; issue
     4688(32).)

   * The *note gzip: 8b. module’s *note GzipFile: 5c5. now supports the
     context management protocol, so you can write ‘with
     gzip.GzipFile(...) as f:’ (contributed by Hagen Fürstenau; issue
     3860(33)), and it now implements the *note io.BufferedIOBase: 3b9.
     ABC, so you can wrap it with *note io.BufferedReader: 5c9. for
     faster processing (contributed by Nir Aides; issue 7471(34)).  It’s
     also now possible to override the modification time recorded in a
     gzipped file by providing an optional timestamp to the constructor.
     (Contributed by Jacques Frechet; issue 4272(35).)

     Files in gzip format can be padded with trailing zero bytes; the
     *note gzip: 8b. module will now consume these trailing bytes.
     (Fixed by Tadek Pietraszek and Brian Curtin; issue 2846(36).)

   * New attribute: the *note hashlib: 8c. module now has an
     ‘algorithms’ attribute containing a tuple naming the supported
     algorithms.  In Python 2.7, ‘hashlib.algorithms’ contains ‘('md5',
     'sha1', 'sha224', 'sha256', 'sha384', 'sha512')’.  (Contributed by
     Carl Chenet; issue 7418(37).)

   * The default ‘HTTPResponse’ class used by the ‘httplib’ module now
     supports buffering, resulting in much faster reading of HTTP
     responses.  (Contributed by Kristján Valur Jónsson; issue
     4879(38).)

     The ‘HTTPConnection’ and ‘HTTPSConnection’ classes now support a
     `source_address' parameter, a ‘(host, port)’ 2-tuple giving the
     source address that will be used for the connection.  (Contributed
     by Eldon Ziegler; issue 3972(39).)

   * The ‘ihooks’ module now supports relative imports.  Note that
     ‘ihooks’ is an older module for customizing imports, superseded by
     the ‘imputil’ module added in Python 2.0.  (Relative import support
     added by Neil Schemenauer.)

   * The *note imaplib: 96. module now supports IPv6 addresses.
     (Contributed by Derek Morr; issue 1655(40).)

   * New function: the *note inspect: 9d. module’s *note getcallargs():
     713. takes a callable and its positional and keyword arguments, and
     figures out which of the callable’s parameters will receive each
     argument, returning a dictionary mapping argument names to their
     values.  For example:

          >>> from inspect import getcallargs
          >>> def f(a, b=1, *pos, **named):
          ...     pass
          >>> getcallargs(f, 1, 2, 3)
          {'a': 1, 'b': 2, 'pos': (3,), 'named': {}}
          >>> getcallargs(f, a=2, x=4)
          {'a': 2, 'b': 1, 'pos': (), 'named': {'x': 4}}
          >>> getcallargs(f)
          Traceback (most recent call last):
          ...
          TypeError: f() takes at least 1 argument (0 given)

     Contributed by George Sakkis; issue 3135(41).

   * Updated module: The *note io: 9e. library has been upgraded to the
     version shipped with Python 3.1.  For 3.1, the I/O library was
     entirely rewritten in C and is 2 to 20 times faster depending on
     the task being performed.  The original Python version was renamed
     to the ‘_pyio’ module.

     One minor resulting change: the *note io.TextIOBase: 693. class now
     has an ‘errors’ attribute giving the error setting used for
     encoding and decoding errors (one of ‘'strict'’, ‘'replace'’,
     ‘'ignore'’).

     The *note io.FileIO: 714. class now raises an *note OSError: 254.
     when passed an invalid file descriptor.  (Implemented by Benjamin
     Peterson; issue 4991(42).)  The *note truncate(): 715. method now
     preserves the file position; previously it would change the file
     position to the end of the new file.  (Fixed by Pascal Chambon;
     issue 6939(43).)

   * New function: ‘itertools.compress(data, selectors)’ takes two
     iterators.  Elements of `data' are returned if the corresponding
     value in `selectors' is true:

          itertools.compress('ABCDEF', [1,0,1,0,1,1]) =>
            A, C, E, F

     New function: ‘itertools.combinations_with_replacement(iter, r)’
     returns all the possible `r'-length combinations of elements from
     the iterable `iter'.  Unlike *note combinations(): 716, individual
     elements can be repeated in the generated combinations:

          itertools.combinations_with_replacement('abc', 2) =>
            ('a', 'a'), ('a', 'b'), ('a', 'c'),
            ('b', 'b'), ('b', 'c'), ('c', 'c')

     Note that elements are treated as unique depending on their
     position in the input, not their actual values.

     The *note itertools.count(): 671. function now has a `step'
     argument that allows incrementing by values other than 1.  *note
     count(): 671. also now allows keyword arguments, and using
     non-integer values such as floats or *note Decimal: 3d4. instances.
     (Implemented by Raymond Hettinger; issue 5032(44).)

     *note itertools.combinations(): 716. and *note itertools.product():
     717. previously raised *note ValueError: 321. for values of `r'
     larger than the input iterable.  This was deemed a specification
     error, so they now return an empty iterator.  (Fixed by Raymond
     Hettinger; issue 4816(45).)

   * Updated module: The *note json: a1. module was upgraded to version
     2.0.9 of the simplejson package, which includes a C extension that
     makes encoding and decoding faster.  (Contributed by Bob Ippolito;
     issue 4136(46).)

     To support the new *note collections.OrderedDict: 587. type, *note
     json.load(): 718. now has an optional `object_pairs_hook' parameter
     that will be called with any object literal that decodes to a list
     of pairs.  (Contributed by Raymond Hettinger; issue 5381(47).)

   * The *note mailbox: ab. module’s *note Maildir: 719. class now
     records the timestamp on the directories it reads, and only
     re-reads them if the modification time has subsequently changed.
     This improves performance by avoiding unneeded directory scans.
     (Fixed by A.M. Kuchling and Antoine Pitrou; issue 1607951(48),
     issue 6896(49).)

   * New functions: the *note math: ae. module gained *note erf(): 59a.
     and *note erfc(): 59b. for the error function and the complementary
     error function, *note expm1(): 599. which computes ‘e**x - 1’ with
     more precision than using *note exp(): 71a. and subtracting 1,
     *note gamma(): 59c. for the Gamma function, and *note lgamma():
     59d. for the natural log of the Gamma function.  (Contributed by
     Mark Dickinson and nirinA raseliarison; issue 3366(50).)

   * The *note multiprocessing: b4. module’s ‘Manager*’ classes can now
     be passed a callable that will be called whenever a subprocess is
     started, along with a set of arguments that will be passed to the
     callable.  (Contributed by lekma; issue 5585(51).)

     The ‘Pool’ class, which controls a pool of worker processes, now
     has an optional `maxtasksperchild' parameter.  Worker processes
     will perform the specified number of tasks and then exit, causing
     the ‘Pool’ to start a new worker.  This is useful if tasks may leak
     memory or other resources, or if some tasks will cause the worker
     to become very large.  (Contributed by Charles Cazabon; issue
     6963(52).)

   * The *note nntplib: bc. module now supports IPv6 addresses.
     (Contributed by Derek Morr; issue 1664(53).)

   * New functions: the *note os: c0. module wraps the following POSIX
     system calls: *note getresgid(): 71b. and *note getresuid(): 71c,
     which return the real, effective, and saved GIDs and UIDs; *note
     setresgid(): 71d. and *note setresuid(): 71e, which set real,
     effective, and saved GIDs and UIDs to new values; *note
     initgroups(): 71f, which initialize the group access list for the
     current process.  (GID/UID functions contributed by Travis H.;
     issue 6508(54).  Support for initgroups added by Jean-Paul
     Calderone; issue 7333(55).)

     The *note os.fork(): 328. function now re-initializes the import
     lock in the child process; this fixes problems on Solaris when
     *note fork(): 328. is called from a thread.  (Fixed by Zsolt
     Cserna; issue 7242(56).)

   * In the *note os.path: c1. module, the *note normpath(): 720. and
     *note abspath(): 721. functions now preserve Unicode; if their
     input path is a Unicode string, the return value is also a Unicode
     string.  (*note normpath(): 720. fixed by Matt Giuca in issue
     5827(57); *note abspath(): 721. fixed by Ezio Melotti in issue
     3426(58).)

   * The *note pydoc: d5. module now has help for the various symbols
     that Python uses.  You can now do ‘help('<<')’ or ‘help('@')’, for
     example.  (Contributed by David Laban; issue 4739(59).)

   * The *note re: d9. module’s *note split(): 32a, *note sub(): 32c,
     and *note subn(): 672. now accept an optional `flags' argument, for
     consistency with the other functions in the module.  (Added by
     Gregory P. Smith.)

   * New function: *note run_path(): 722. in the *note runpy: de. module
     will execute the code at a provided `path' argument.  `path' can be
     the path of a Python source file (‘example.py’), a compiled
     bytecode file (‘example.pyc’), a directory (‘./package/’), or a zip
     archive (‘example.zip’).  If a directory or zip path is provided,
     it will be added to the front of ‘sys.path’ and the module *note
     __main__: 1. will be imported.  It’s expected that the directory or
     zip contains a ‘__main__.py’; if it doesn’t, some other
     ‘__main__.py’ might be imported from a location later in
     ‘sys.path’.  This makes more of the machinery of *note runpy: de.
     available to scripts that want to mimic the way Python’s command
     line processes an explicit path name.  (Added by Nick Coghlan;
     issue 6816(60).)

   * New function: in the *note shutil: e4. module, *note
     make_archive(): 5dc. takes a filename, archive type (zip or
     tar-format), and a directory path, and creates an archive
     containing the directory’s contents.  (Added by Tarek Ziadé.)

     *note shutil: e4.’s *note copyfile(): 24b. and *note copytree():
     5da. functions now raise a ‘SpecialFileError’ exception when asked
     to copy a named pipe.  Previously the code would treat named pipes
     like a regular file by opening them for reading, and this would
     block indefinitely.  (Fixed by Antoine Pitrou; issue 3002(61).)

   * The *note signal: e5. module no longer re-installs the signal
     handler unless this is truly necessary, which fixes a bug that
     could make it impossible to catch the EINTR signal robustly.
     (Fixed by Charles-Francois Natali; issue 8354(62).)

   * New functions: in the *note site: e6. module, three new functions
     return various site- and user-specific paths.  *note
     getsitepackages(): 61d. returns a list containing all global
     site-packages directories, *note getusersitepackages(): 61f.
     returns the path of the user’s site-packages directory, and *note
     getuserbase(): 61e. returns the value of the ‘USER_BASE’
     environment variable, giving the path to a directory that can be
     used to store data.  (Contributed by Tarek Ziadé; issue 6693(63).)

     The *note site: e6. module now reports exceptions occurring when
     the ‘sitecustomize’ module is imported, and will no longer catch
     and swallow the *note KeyboardInterrupt: 6c0. exception.  (Fixed by
     Victor Stinner; issue 3137(64).)

   * The *note create_connection(): 5e4. function gained a
     `source_address' parameter, a ‘(host, port)’ 2-tuple giving the
     source address that will be used for the connection.  (Contributed
     by Eldon Ziegler; issue 3972(65).)

     The *note recv_into(): 723. and *note recvfrom_into(): 724. methods
     will now write into objects that support the buffer API, most
     usefully the *note bytearray: 17a. and *note memoryview: 187.
     objects.  (Implemented by Antoine Pitrou; issue 8104(66).)

   * The ‘SocketServer’ module’s ‘TCPServer’ class now supports socket
     timeouts and disabling the Nagle algorithm.  The
     ‘disable_nagle_algorithm’ class attribute defaults to False; if
     overridden to be True, new request connections will have the
     TCP_NODELAY option set to prevent buffering many small sends into a
     single TCP packet.  The ‘timeout’ class attribute can hold a
     timeout in seconds that will be applied to the request socket; if
     no request is received within that time, ‘handle_timeout()’ will be
     called and ‘handle_request()’ will return.  (Contributed by
     Kristján Valur Jónsson; issue 6192(67) and issue 6267(68).)

   * Updated module: the *note sqlite3: ed. module has been updated to
     version 2.6.0 of the pysqlite package(69).  Version 2.6.0 includes
     a number of bugfixes, and adds the ability to load SQLite
     extensions from shared libraries.  Call the
     ‘enable_load_extension(True)’ method to enable extensions, and then
     call *note load_extension(): 5e0. to load a particular shared
     library.  (Updated by Gerhard Häring.)

   * The *note ssl: ee. module’s *note SSLSocket: 725. objects now
     support the buffer API, which fixed a test suite failure (fix by
     Antoine Pitrou; issue 7133(70)) and automatically set OpenSSL’s
     ‘SSL_MODE_AUTO_RETRY’, which will prevent an error code being
     returned from ‘recv()’ operations that trigger an SSL renegotiation
     (fix by Antoine Pitrou; issue 8222(71)).

     The *note ssl.wrap_socket(): 5e7. constructor function now takes a
     `ciphers' argument that’s a string listing the encryption
     algorithms to be allowed; the format of the string is described in
     the OpenSSL documentation(72).  (Added by Antoine Pitrou; issue
     8322(73).)

     Another change makes the extension load all of OpenSSL’s ciphers
     and digest algorithms so that they’re all available.  Some SSL
     certificates couldn’t be verified, reporting an "unknown algorithm"
     error.  (Reported by Beda Kosata, and fixed by Antoine Pitrou;
     issue 8484(74).)

     The version of OpenSSL being used is now available as the module
     attributes *note ssl.OPENSSL_VERSION: 5e9. (a string), *note
     ssl.OPENSSL_VERSION_INFO: 5ea. (a 5-tuple), and *note
     ssl.OPENSSL_VERSION_NUMBER: 5eb. (an integer).  (Added by Antoine
     Pitrou; issue 8321(75).)

   * The *note struct: f3. module will no longer silently ignore
     overflow errors when a value is too large for a particular integer
     format code (one of ‘bBhHiIlLqQ’); it now always raises a *note
     struct.error: 726. exception.  (Changed by Mark Dickinson; issue
     1523(76).)  The *note pack(): 65d. function will also attempt to
     use *note __index__(): 6ca. to convert and pack non-integers before
     trying the *note __int__(): 727. method or reporting an error.
     (Changed by Mark Dickinson; issue 8300(77).)

   * New function: the *note subprocess: f4. module’s *note
     check_output(): 279. runs a command with a specified set of
     arguments and returns the command’s output as a string when the
     command runs without error, or raises a *note CalledProcessError:
     728. exception otherwise.

          >>> subprocess.check_output(['df', '-h', '.'])
          'Filesystem     Size   Used  Avail Capacity  Mounted on\n
          /dev/disk0s2    52G    49G   3.0G    94%    /\n'

          >>> subprocess.check_output(['df', '-h', '/bogus'])
            ...
          subprocess.CalledProcessError: Command '['df', '-h', '/bogus']' returned non-zero exit status 1

     (Contributed by Gregory P. Smith.)

     The *note subprocess: f4. module will now retry its internal system
     calls on receiving an ‘EINTR’ signal.  (Reported by several people;
     final patch by Gregory P. Smith in issue 1068268(78).)

   * New function: *note is_declared_global(): 729. in the *note
     symtable: f7. module returns true for variables that are explicitly
     declared to be global, false for ones that are implicitly global.
     (Contributed by Jeremy Hylton.)

   * The *note syslog: fa. module will now use the value of
     ‘sys.argv[0]’ as the identifier instead of the previous default
     value of ‘'python'’.  (Changed by Sean Reifschneider; issue
     8451(79).)

   * The ‘sys.version_info’ value is now a named tuple, with attributes
     named ‘major’, ‘minor’, ‘micro’, ‘releaselevel’, and ‘serial’.
     (Contributed by Ross Light; issue 4285(80).)

     *note sys.getwindowsversion(): 72a. also returns a named tuple,
     with attributes named ‘major’, ‘minor’, ‘build’, *note platform:
     ca, ‘service_pack’, ‘service_pack_major’, ‘service_pack_minor’,
     ‘suite_mask’, and ‘product_type’.  (Contributed by Brian Curtin;
     issue 7766(81).)

   * The *note tarfile: fc. module’s default error handling has changed,
     to no longer suppress fatal errors.  The default error level was
     previously 0, which meant that errors would only result in a
     message being written to the debug log, but because the debug log
     is not activated by default, these errors go unnoticed.  The
     default error level is now 1, which raises an exception if there’s
     an error.  (Changed by Lars Gustäbel; issue 7357(82).)

     *note tarfile: fc. now supports filtering the *note TarInfo: 5ce.
     objects being added to a tar file.  When you call *note add(): 5cc,
     you may supply an optional `filter' argument that’s a callable.
     The `filter' callable will be passed the *note TarInfo: 5ce. for
     every file being added, and can modify and return it.  If the
     callable returns ‘None’, the file will be excluded from the
     resulting archive.  This is more powerful than the existing
     `exclude' argument, which has therefore been deprecated.  (Added by
     Lars Gustäbel; issue 6856(83).)  The *note TarFile: 5cb. class also
     now supports the context management protocol.  (Added by Lars
     Gustäbel; issue 7232(84).)

   * The *note wait(): 72b. method of the *note threading.Event: 4bc.
     class now returns the internal flag on exit.  This means the method
     will usually return true because *note wait(): 72b. is supposed to
     block until the internal flag becomes true.  The return value will
     only be false if a timeout was provided and the operation timed
     out.  (Contributed by Tim Lesher; issue 1674032(85).)

   * The Unicode database provided by the *note unicodedata: 113. module
     is now used internally to determine which characters are numeric,
     whitespace, or represent line breaks.  The database also includes
     information from the ‘Unihan.txt’ data file (patch by Anders
     Chrigström and Amaury Forgeot d’Arc; issue 1571184(86)) and has
     been updated to version 5.2.0 (updated by Florent Xicluna; issue
     8024(87)).

   * The ‘urlparse’ module’s ‘urlsplit()’ now handles unknown URL
     schemes in a fashion compliant with RFC 3986(88): if the URL is of
     the form ‘"<something>://..."’, the text before the ‘://’ is
     treated as the scheme, even if it’s a made-up scheme that the
     module doesn’t know about.  This change may break code that worked
     around the old behaviour.  For example, Python 2.6.4 or 2.5 will
     return the following:

          >>> import urlparse
          >>> urlparse.urlsplit('invented://host/filename?query')
          ('invented', '', '//host/filename?query', '', '')

     Python 2.7 (and Python 2.6.5) will return:

          >>> import urlparse
          >>> urlparse.urlsplit('invented://host/filename?query')
          ('invented', 'host', '/filename?query', '', '')

     (Python 2.7 actually produces slightly different output, since it
     returns a named tuple instead of a standard tuple.)

     The ‘urlparse’ module also supports IPv6 literal addresses as
     defined by RFC 2732(89) (contributed by Senthil Kumaran; issue
     2987(90)).

          >>> urlparse.urlparse('http://[1080::8:800:200C:417A]/foo')
          ParseResult(scheme='http', netloc='[1080::8:800:200C:417A]',
                      path='/foo', params='', query='', fragment='')

   * New class: the *note WeakSet: 72c. class in the *note weakref: 121.
     module is a set that only holds weak references to its elements;
     elements will be removed once there are no references pointing to
     them.  (Originally implemented in Python 3.x by Raymond Hettinger,
     and backported to 2.7 by Michael Foord.)

   * The ElementTree library, ‘xml.etree’, no longer escapes ampersands
     and angle brackets when outputting an XML processing instruction
     (which looks like ‘<?xml-stylesheet href="#style1"?>’) or comment
     (which looks like ‘<!-- comment -->’).  (Patch by Neil Muller;
     issue 2746(91).)

   * The XML-RPC client and server, provided by the ‘xmlrpclib’ and
     ‘SimpleXMLRPCServer’ modules, have improved performance by
     supporting HTTP/1.1 keep-alive and by optionally using gzip
     encoding to compress the XML being exchanged.  The gzip compression
     is controlled by the ‘encode_threshold’ attribute of
     ‘SimpleXMLRPCRequestHandler’, which contains a size in bytes;
     responses larger than this will be compressed.  (Contributed by
     Kristján Valur Jónsson; issue 6267(92).)

   * The *note zipfile: 13a. module’s *note ZipFile: 2c0. now supports
     the context management protocol, so you can write ‘with
     zipfile.ZipFile(...) as f:’.  (Contributed by Brian Curtin; issue
     5511(93).)

     *note zipfile: 13a. now also supports archiving empty directories
     and extracts them correctly.  (Fixed by Kuba Wieczorek; issue
     4710(94).)  Reading files out of an archive is faster, and
     interleaving *note read(): 72d. and ‘readline()’ now works
     correctly.  (Contributed by Nir Aides; issue 7610(95).)

     The *note is_zipfile(): 72e. function now accepts a file object, in
     addition to the path names accepted in earlier versions.
     (Contributed by Gabriel Genellina; issue 4756(96).)

     The *note writestr(): 72f. method now has an optional
     `compress_type' parameter that lets you override the default
     compression method specified in the *note ZipFile: 2c0.
     constructor.  (Contributed by Ronald Oussoren; issue 6003(97).)

* Menu:

* New module; importlib: New module importlib. 
* New module; sysconfig: New module sysconfig. 
* ttk; Themed Widgets for Tk: ttk Themed Widgets for Tk. 
* Updated module; unittest: Updated module unittest. 
* Updated module; ElementTree 1.3: Updated module ElementTree 1 3. 

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5142

   (2) https://bugs.python.org/issue7703

   (3) http://www.jcea.es/programacion/pybsddb.htm

   (4) https://bugs.python.org/issue8156

   (5) https://bugs.python.org/issue3860

   (6) https://bugs.python.org/issue1696199

   (7) https://bugs.python.org/issue1818

   (8) https://bugs.python.org/issue8729

   (9) https://bugs.python.org/issue7005

   (10) https://bugs.python.org/issue3924

   (11) https://bugs.python.org/issue1515

   (12) https://bugs.python.org/issue4606

   (13) http://sourceware.org/libffi/

   (14) https://bugs.python.org/issue8142

   (15) https://bugs.python.org/issue5788

   (16) https://bugs.python.org/issue4796

   (17) https://bugs.python.org/issue2531

   (18) https://bugs.python.org/issue8257

   (19) https://bugs.python.org/issue6595

   (20) https://bugs.python.org/issue7633

   (21) https://bugs.python.org/issue6857

   (22) https://bugs.python.org/issue7279

   (23) https://bugs.python.org/issue7585

   (24) https://bugs.python.org/issue8688

   (25) https://bugs.python.org/issue7490

   (26) https://bugs.python.org/issue1368247

   (27) https://bugs.python.org/issue5812

   (28) https://bugs.python.org/issue8294

   (29) https://bugs.python.org/issue2054

   (30) https://bugs.python.org/issue6845

   (31) https://bugs.python.org/issue5479

   (32) https://bugs.python.org/issue4688

   (33) https://bugs.python.org/issue3860

   (34) https://bugs.python.org/issue7471

   (35) https://bugs.python.org/issue4272

   (36) https://bugs.python.org/issue2846

   (37) https://bugs.python.org/issue7418

   (38) https://bugs.python.org/issue4879

   (39) https://bugs.python.org/issue3972

   (40) https://bugs.python.org/issue1655

   (41) https://bugs.python.org/issue3135

   (42) https://bugs.python.org/issue4991

   (43) https://bugs.python.org/issue6939

   (44) https://bugs.python.org/issue5032

   (45) https://bugs.python.org/issue4816

   (46) https://bugs.python.org/issue4136

   (47) https://bugs.python.org/issue5381

   (48) https://bugs.python.org/issue1607951

   (49) https://bugs.python.org/issue6896

   (50) https://bugs.python.org/issue3366

   (51) https://bugs.python.org/issue5585

   (52) https://bugs.python.org/issue6963

   (53) https://bugs.python.org/issue1664

   (54) https://bugs.python.org/issue6508

   (55) https://bugs.python.org/issue7333

   (56) https://bugs.python.org/issue7242

   (57) https://bugs.python.org/issue5827

   (58) https://bugs.python.org/issue3426

   (59) https://bugs.python.org/issue4739

   (60) https://bugs.python.org/issue6816

   (61) https://bugs.python.org/issue3002

   (62) https://bugs.python.org/issue8354

   (63) https://bugs.python.org/issue6693

   (64) https://bugs.python.org/issue3137

   (65) https://bugs.python.org/issue3972

   (66) https://bugs.python.org/issue8104

   (67) https://bugs.python.org/issue6192

   (68) https://bugs.python.org/issue6267

   (69) http://code.google.com/p/pysqlite/

   (70) https://bugs.python.org/issue7133

   (71) https://bugs.python.org/issue8222

   (72) http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT

   (73) https://bugs.python.org/issue8322

   (74) https://bugs.python.org/issue8484

   (75) https://bugs.python.org/issue8321

   (76) https://bugs.python.org/issue1523

   (77) https://bugs.python.org/issue8300

   (78) https://bugs.python.org/issue1068268

   (79) https://bugs.python.org/issue8451

   (80) https://bugs.python.org/issue4285

   (81) https://bugs.python.org/issue7766

   (82) https://bugs.python.org/issue7357

   (83) https://bugs.python.org/issue6856

   (84) https://bugs.python.org/issue7232

   (85) https://bugs.python.org/issue1674032

   (86) https://bugs.python.org/issue1571184

   (87) https://bugs.python.org/issue8024

   (88) https://tools.ietf.org/html/rfc3986.html

   (89) https://tools.ietf.org/html/rfc2732.html

   (90) https://bugs.python.org/issue2987

   (91) https://bugs.python.org/issue2746

   (92) https://bugs.python.org/issue6267

   (93) https://bugs.python.org/issue5511

   (94) https://bugs.python.org/issue4710

   (95) https://bugs.python.org/issue7610

   (96) https://bugs.python.org/issue4756

   (97) https://bugs.python.org/issue6003


File: python.info,  Node: New module importlib,  Next: New module sysconfig,  Up: New and Improved Modules

1.6.11.1 New module: importlib
..............................

Python 3.1 includes the *note importlib: 99. package, a
re-implementation of the logic underlying Python’s *note import: 674.
statement.  *note importlib: 99. is useful for implementors of Python
interpreters and to users who wish to write new importers that can
participate in the import process.  Python 2.7 doesn’t contain the
complete *note importlib: 99. package, but instead has a tiny subset
that contains a single function, *note import_module(): 52a.

‘import_module(name, package=None)’ imports a module.  `name' is a
string containing the module or package’s name.  It’s possible to do
relative imports by providing a string that begins with a ‘.’ character,
such as ‘..utils.errors’.  For relative imports, the `package' argument
must be provided and is the name of the package that will be used as the
anchor for the relative import.  *note import_module(): 52a. both
inserts the imported module into ‘sys.modules’ and returns the module
object.

Here are some examples:

     >>> from importlib import import_module
     >>> anydbm = import_module('anydbm')  # Standard absolute import
     >>> anydbm
     <module 'anydbm' from '/p/python/Lib/anydbm.py'>
     >>> # Relative import
     >>> file_util = import_module('..file_util', 'distutils.command')
     >>> file_util
     <module 'distutils.file_util' from '/python/Lib/distutils/file_util.pyc'>

*note importlib: 99. was implemented by Brett Cannon and introduced in
Python 3.1.


File: python.info,  Node: New module sysconfig,  Next: ttk Themed Widgets for Tk,  Prev: New module importlib,  Up: New and Improved Modules

1.6.11.2 New module: sysconfig
..............................

The *note sysconfig: f9. module has been pulled out of the Distutils
package, becoming a new top-level module in its own right.  *note
sysconfig: f9. provides functions for getting information about Python’s
build process: compiler switches, installation paths, the platform name,
and whether Python is running from its source directory.

Some of the functions in the module are:

   * *note get_config_var(): 32f. returns variables from Python’s
     Makefile and the ‘pyconfig.h’ file.

   * *note get_config_vars(): 330. returns a dictionary containing all
     of the configuration variables.

   * *note get_path(): 732. returns the configured path for a particular
     type of module: the standard library, site-specific modules,
     platform-specific modules, etc.

   * *note is_python_build(): 733. returns true if you’re running a
     binary from a Python source tree, and false otherwise.

Consult the *note sysconfig: f9. documentation for more details and for
a complete list of functions.

The Distutils package and *note sysconfig: f9. are now maintained by
Tarek Ziadé, who has also started a Distutils2 package (source
repository at ‘https://hg.python.org/distutils2/’) for developing a
next-generation version of Distutils.


File: python.info,  Node: ttk Themed Widgets for Tk,  Next: Updated module unittest,  Prev: New module sysconfig,  Up: New and Improved Modules

1.6.11.3 ttk: Themed Widgets for Tk
...................................

Tcl/Tk 8.5 includes a set of themed widgets that re-implement basic Tk
widgets but have a more customizable appearance and can therefore more
closely resemble the native platform’s widgets.  This widget set was
originally called Tile, but was renamed to Ttk (for "themed Tk") on
being added to Tcl/Tck release 8.5.

To learn more, read the ‘ttk’ module documentation.  You may also wish
to read the Tcl/Tk manual page describing the Ttk theme engine,
available at ‘http://www.tcl.tk/man/tcl8.5/TkCmd/ttk_intro.htm’.  Some
screenshots of the Python/Ttk code in use are at
‘http://code.google.com/p/python-ttk/wiki/Screenshots’.

The ‘ttk’ module was written by Guilherme Polo and added in issue
2983(1).  An alternate version called ‘Tile.py’, written by Martin
Franklin and maintained by Kevin Walzer, was proposed for inclusion in
issue 2618(2), but the authors argued that Guilherme Polo’s work was
more comprehensive.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2983

   (2) https://bugs.python.org/issue2618


File: python.info,  Node: Updated module unittest,  Next: Updated module ElementTree 1 3,  Prev: ttk Themed Widgets for Tk,  Up: New and Improved Modules

1.6.11.4 Updated module: unittest
.................................

The *note unittest: 114. module was greatly enhanced; many new features
were added.  Most of these features were implemented by Michael Foord,
unless otherwise noted.  The enhanced version of the module is
downloadable separately for use with Python versions 2.4 to 2.6,
packaged as the ‘unittest2’ package, from
‘https://pypi.python.org/pypi/unittest2’.

When used from the command line, the module can automatically discover
tests.  It’s not as fancy as py.test(1) or nose(2), but provides a
simple way to run tests kept within a set of package directories.  For
example, the following command will search the ‘test/’ subdirectory for
any importable test files named ‘test*.py’:

     python -m unittest discover -s test

Consult the *note unittest: 114. module documentation for more details.
(Developed in issue 6001(3).)

The *note main(): 2a2. function supports some other new options:

   * *note -b: 737. or ‘--buffer’ will buffer the standard output and
     standard error streams during each test.  If the test passes, any
     resulting output will be discarded; on failure, the buffered output
     will be displayed.

   * *note -c: 738. or ‘--catch’ will cause the control-C interrupt to
     be handled more gracefully.  Instead of interrupting the test
     process immediately, the currently running test will be completed
     and then the partial results up to the interruption will be
     reported.  If you’re impatient, a second press of control-C will
     cause an immediate interruption.

     This control-C handler tries to avoid causing problems when the
     code being tested or the tests being run have defined a signal
     handler of their own, by noticing that a signal handler was already
     set and calling it.  If this doesn’t work for you, there’s a *note
     removeHandler(): 739. decorator that can be used to mark tests that
     should have the control-C handling disabled.

   * ‘-f’ or ‘--failfast’ makes test execution stop immediately when a
     test fails instead of continuing to execute further tests.
     (Suggested by Cliff Dyer and implemented by Michael Foord; issue
     8074(4).)

The progress messages now show ’x’ for expected failures and ’u’ for
unexpected successes when run in verbose mode.  (Contributed by Benjamin
Peterson.)

Test cases can raise the *note SkipTest: 2a3. exception to skip a test
(issue 1034053(5)).

The error messages for *note assertEqual(): 5ff, *note assertTrue():
5fe, and *note assertFalse(): 73a. failures now provide more
information.  If you set the *note longMessage: 73b. attribute of your
*note TestCase: 29f. classes to True, both the standard error message
and any additional message you provide will be printed for failures.
(Added by Michael Foord; issue 5663(6).)

The *note assertRaises(): 4cc. method now returns a context handler when
called without providing a callable object to run.  For example, you can
write this:

     with self.assertRaises(KeyError):
         {}['foo']

(Implemented by Antoine Pitrou; issue 4444(7).)

Module- and class-level setup and teardown fixtures are now supported.
Modules can contain ‘setUpModule()’ and ‘tearDownModule()’ functions.
Classes can have *note setUpClass(): 73c. and *note tearDownClass():
73d. methods that must be defined as class methods (using ‘@classmethod’
or equivalent).  These functions and methods are invoked when the test
runner switches to a test case in a different module or class.

The methods *note addCleanup(): 73e. and *note doCleanups(): 73f. were
added.  *note addCleanup(): 73e. lets you add cleanup functions that
will be called unconditionally (after *note setUp(): 740. if *note
setUp(): 740. fails, otherwise after *note tearDown(): 741.).  This
allows for much simpler resource allocation and deallocation during
tests (issue 5679(8)).

A number of new methods were added that provide more specialized tests.
Many of these methods were written by Google engineers for use in their
test suites; Gregory P. Smith, Michael Foord, and GvR worked on merging
them into Python’s version of *note unittest: 114.

   * *note assertIsNone(): 742. and *note assertIsNotNone(): 743. take
     one expression and verify that the result is or is not ‘None’.

   * *note assertIs(): 744. and *note assertIsNot(): 745. take two
     values and check whether the two values evaluate to the same object
     or not.  (Added by Michael Foord; issue 2578(9).)

   * *note assertIsInstance(): 746. and *note assertNotIsInstance():
     747. check whether the resulting object is an instance of a
     particular class, or of one of a tuple of classes.  (Added by Georg
     Brandl; issue 7031(10).)

   * *note assertGreater(): 748, *note assertGreaterEqual(): 749, *note
     assertLess(): 74a, and *note assertLessEqual(): 74b. compare two
     quantities.

   * *note assertMultiLineEqual(): 74c. compares two strings, and if
     they’re not equal, displays a helpful comparison that highlights
     the differences in the two strings.  This comparison is now used by
     default when Unicode strings are compared with *note assertEqual():
     5ff.

   * ‘assertRegexpMatches()’ and ‘assertNotRegexpMatches()’ checks
     whether the first argument is a string matching or not matching the
     regular expression provided as the second argument (issue
     8038(11)).

   * ‘assertRaisesRegexp()’ checks whether a particular exception is
     raised, and then also checks that the string representation of the
     exception matches the provided regular expression.

   * *note assertIn(): 74d. and *note assertNotIn(): 74e. tests whether
     `first' is or is not in `second'.

   * ‘assertItemsEqual()’ tests whether two provided sequences contain
     the same elements.

   * *note assertSetEqual(): 74f. compares whether two sets are equal,
     and only reports the differences between the sets in case of error.

   * Similarly, *note assertListEqual(): 750. and *note
     assertTupleEqual(): 751. compare the specified types and explain
     any differences without necessarily printing their full values;
     these methods are now used by default when comparing lists and
     tuples using *note assertEqual(): 5ff.  More generally, *note
     assertSequenceEqual(): 752. compares two sequences and can
     optionally check whether both sequences are of a particular type.

   * *note assertDictEqual(): 753. compares two dictionaries and reports
     the differences; it’s now used by default when you compare two
     dictionaries using *note assertEqual(): 5ff.
     ‘assertDictContainsSubset()’ checks whether all of the key/value
     pairs in `first' are found in `second'.

   * *note assertAlmostEqual(): 601. and *note assertNotAlmostEqual():
     602. test whether `first' and `second' are approximately equal.
     This method can either round their difference to an
     optionally-specified number of `places' (the default is 7) and
     compare it to zero, or require the difference to be smaller than a
     supplied `delta' value.

   * *note loadTestsFromName(): 754. properly honors the *note
     suiteClass: 755. attribute of the *note TestLoader: 756.  (Fixed by
     Mark Roddy; issue 6866(12).)

   * A new hook lets you extend the *note assertEqual(): 5ff. method to
     handle new data types.  The *note addTypeEqualityFunc(): 757.
     method takes a type object and a function.  The function will be
     used when both of the objects being compared are of the specified
     type.  This function should compare the two objects and raise an
     exception if they don’t match; it’s a good idea for the function to
     provide additional information about why the two objects aren’t
     matching, much as the new sequence comparison methods do.

*note unittest.main(): 2a2. now takes an optional ‘exit’ argument.  If
False, *note main(): 2a2. doesn’t call *note sys.exit(): 758, allowing
*note main(): 2a2. to be used from the interactive interpreter.
(Contributed by J. Pablo Fernández; issue 3379(13).)

*note TestResult: 4d1. has new *note startTestRun(): 759. and *note
stopTestRun(): 75a. methods that are called immediately before and after
a test run.  (Contributed by Robert Collins; issue 5728(14).)

With all these changes, the ‘unittest.py’ was becoming awkwardly large,
so the module was turned into a package and the code split into several
files (by Benjamin Peterson).  This doesn’t affect how the module is
imported or used.

See also
........

‘http://www.voidspace.org.uk/python/articles/unittest2.shtml’

     Describes the new features, how to use them, and the rationale for
     various design decisions.  (By Michael Foord.)

   ---------- Footnotes ----------

   (1) http://pytest.org

   (2) http://code.google.com/p/python-nose/

   (3) https://bugs.python.org/issue6001

   (4) https://bugs.python.org/issue8074

   (5) https://bugs.python.org/issue1034053

   (6) https://bugs.python.org/issue5663

   (7) https://bugs.python.org/issue4444

   (8) https://bugs.python.org/issue5679

   (9) https://bugs.python.org/issue2578

   (10) https://bugs.python.org/issue7031

   (11) https://bugs.python.org/issue8038

   (12) https://bugs.python.org/issue6866

   (13) https://bugs.python.org/issue3379

   (14) https://bugs.python.org/issue5728


File: python.info,  Node: Updated module ElementTree 1 3,  Prev: Updated module unittest,  Up: New and Improved Modules

1.6.11.5 Updated module: ElementTree 1.3
........................................

The version of the ElementTree library included with Python was updated
to version 1.3.  Some of the new features are:

   * The various parsing functions now take a `parser' keyword argument
     giving an *note XMLParser: 2ff. instance that will be used.  This
     makes it possible to override the file’s internal encoding:

          p = ET.XMLParser(encoding='utf-8')
          t = ET.XML("""<root/>""", parser=p)

     Errors in parsing XML now raise a ‘ParseError’ exception, whose
     instances have a ‘position’ attribute containing a (`line',
     `column') tuple giving the location of the problem.

   * ElementTree’s code for converting trees to a string has been
     significantly reworked, making it roughly twice as fast in many
     cases.  The *note ElementTree.write(): 2bb. and ‘Element.write()’
     methods now have a `method' parameter that can be "xml" (the
     default), "html", or "text".  HTML mode will output empty elements
     as ‘<empty></empty>’ instead of ‘<empty/>’, and text mode will skip
     over elements and only output the text chunks.  If you set the
     ‘tag’ attribute of an element to ‘None’ but leave its children in
     place, the element will be omitted when the tree is written out, so
     you don’t need to do more extensive rearrangement to remove a
     single element.

     Namespace handling has also been improved.  All ‘xmlns:<whatever>’
     declarations are now output on the root element, not scattered
     throughout the resulting XML. You can set the default namespace for
     a tree by setting the ‘default_namespace’ attribute and can
     register new prefixes with *note register_namespace(): 57a.  In XML
     mode, you can use the true/false `xml_declaration' parameter to
     suppress the XML declaration.

   * New *note Element: 4d6. method: *note extend(): 57b. appends the
     items from a sequence to the element’s children.  Elements
     themselves behave like sequences, so it’s easy to move children
     from one element to another:

          from xml.etree import ElementTree as ET

          t = ET.XML("""<list>
            <item>1</item> <item>2</item>  <item>3</item>
          </list>""")
          new = ET.XML('<root/>')
          new.extend(t)

          # Outputs <root><item>1</item>...</root>
          print ET.tostring(new)

   * New ‘Element’ method: *note iter(): 75d. yields the children of the
     element as a generator.  It’s also possible to write ‘for child in
     elem:’ to loop over an element’s children.  The existing method
     ‘getiterator()’ is now deprecated, as is ‘getchildren()’ which
     constructs and returns a list of children.

   * New ‘Element’ method: *note itertext(): 57d. yields all chunks of
     text that are descendants of the element.  For example:

          t = ET.XML("""<list>
            <item>1</item> <item>2</item>  <item>3</item>
          </list>""")

          # Outputs ['\n  ', '1', ' ', '2', '  ', '3', '\n']
          print list(t.itertext())

   * Deprecated: using an element as a Boolean (i.e., ‘if elem:’) would
     return true if the element had any children, or false if there were
     no children.  This behaviour is confusing – ‘None’ is false, but so
     is a childless element?  – so it will now trigger a *note
     FutureWarning: 75e.  In your code, you should be explicit: write
     ‘len(elem) != 0’ if you’re interested in the number of children, or
     ‘elem is not None’.

Fredrik Lundh develops ElementTree and produced the 1.3 version; you can
read his article describing 1.3 at
‘http://effbot.org/zone/elementtree-13-intro.htm’.  Florent Xicluna
updated the version included with Python, after discussions on
python-dev and in issue 6472(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6472


File: python.info,  Node: Build and C API Changes<5>,  Next: Other Changes and Fixes,  Prev: New and Improved Modules,  Up: What's New in Python 2 7

1.6.12 Build and C API Changes
------------------------------

Changes to Python’s build process and to the C API include:

   * The latest release of the GNU Debugger, GDB 7, can be scripted
     using Python(1).  When you begin debugging an executable program P,
     GDB will look for a file named ‘P-gdb.py’ and automatically read
     it.  Dave Malcolm contributed a ‘python-gdb.py’ that adds a number
     of commands useful when debugging Python itself.  For example,
     ‘py-up’ and ‘py-down’ go up or down one Python stack frame, which
     usually corresponds to several C stack frames.  ‘py-print’ prints
     the value of a Python variable, and ‘py-bt’ prints the Python stack
     trace.  (Added as a result of issue 8032(2).)

   * If you use the ‘.gdbinit’ file provided with Python, the "pyo"
     macro in the 2.7 version now works correctly when the thread being
     debugged doesn’t hold the GIL; the macro now acquires it before
     printing.  (Contributed by Victor Stinner; issue 3632(3).)

   * *note Py_AddPendingCall(): 760. is now thread-safe, letting any
     worker thread submit notifications to the main Python thread.  This
     is particularly useful for asynchronous IO operations.
     (Contributed by Kristján Valur Jónsson; issue 4293(4).)

   * New function: *note PyCode_NewEmpty(): 761. creates an empty code
     object; only the filename, function name, and first line number are
     required.  This is useful for extension modules that are attempting
     to construct a more useful traceback stack.  Previously such
     extensions needed to call *note PyCode_New(): 762, which had many
     more arguments.  (Added by Jeffrey Yasskin.)

   * New function: *note PyErr_NewExceptionWithDoc(): 651. creates a new
     exception class, just as the existing *note PyErr_NewException():
     652. does, but takes an extra ‘char *’ argument containing the
     docstring for the new exception class.  (Added by ’lekma’ on the
     Python bug tracker; issue 7033(5).)

   * New function: *note PyFrame_GetLineNumber(): 763. takes a frame
     object and returns the line number that the frame is currently
     executing.  Previously code would need to get the index of the
     bytecode instruction currently executing, and then look up the line
     number corresponding to that address.  (Added by Jeffrey Yasskin.)

   * New functions: *note PyLong_AsLongAndOverflow(): 64f. and *note
     PyLong_AsLongLongAndOverflow(): 64e. approximates a Python long
     integer as a C ‘long’ or ‘long long’.  If the number is too large
     to fit into the output type, an `overflow' flag is set and returned
     to the caller.  (Contributed by Case Van Horsen; issue 7528(6) and
     issue 7767(7).)

   * New function: stemming from the rewrite of string-to-float
     conversion, a new *note PyOS_string_to_double(): 67b. function was
     added.  The old ‘PyOS_ascii_strtod()’ and ‘PyOS_ascii_atof()’
     functions are now deprecated.

   * New function: *note PySys_SetArgvEx(): 64c. sets the value of
     ‘sys.argv’ and can optionally update ‘sys.path’ to include the
     directory containing the script named by ‘sys.argv[0]’ depending on
     the value of an `updatepath' parameter.

     This function was added to close a security hole for applications
     that embed Python.  The old function, *note PySys_SetArgv(): 764,
     would always update ‘sys.path’, and sometimes it would add the
     current directory.  This meant that, if you ran an application
     embedding Python in a directory controlled by someone else,
     attackers could put a Trojan-horse module in the directory (say, a
     file named ‘os.py’) that your application would then import and
     run.

     If you maintain a C/C++ application that embeds Python, check
     whether you’re calling *note PySys_SetArgv(): 764. and carefully
     consider whether the application should be using *note
     PySys_SetArgvEx(): 64c. with `updatepath' set to false.

     Security issue reported as CVE-2008-5983(8); discussed in issue
     5753(9), and fixed by Antoine Pitrou.

   * New macros: the Python header files now define the following
     macros: ‘Py_ISALNUM’, ‘Py_ISALPHA’, ‘Py_ISDIGIT’, ‘Py_ISLOWER’,
     ‘Py_ISSPACE’, ‘Py_ISUPPER’, ‘Py_ISXDIGIT’, ‘Py_TOLOWER’, and
     ‘Py_TOUPPER’.  All of these functions are analogous to the C
     standard macros for classifying characters, but ignore the current
     locale setting, because in several places Python needs to analyze
     characters in a locale-independent way.  (Added by Eric Smith;
     issue 5793(10).)

   * Removed function: ‘PyEval_CallObject’ is now only available as a
     macro.  A function version was being kept around to preserve ABI
     linking compatibility, but that was in 1997; it can certainly be
     deleted by now.  (Removed by Antoine Pitrou; issue 8276(11).)

   * New format codes: the ‘PyFormat_FromString()’,
     ‘PyFormat_FromStringV()’, and *note PyErr_Format(): 765. functions
     now accept ‘%lld’ and ‘%llu’ format codes for displaying C’s ‘long
     long’ types.  (Contributed by Mark Dickinson; issue 7228(12).)

   * The complicated interaction between threads and process forking has
     been changed.  Previously, the child process created by *note
     os.fork(): 328. might fail because the child is created with only a
     single thread running, the thread performing the *note os.fork():
     328.  If other threads were holding a lock, such as Python’s import
     lock, when the fork was performed, the lock would still be marked
     as "held" in the new process.  But in the child process nothing
     would ever release the lock, since the other threads weren’t
     replicated, and the child process would no longer be able to
     perform imports.

     Python 2.7 acquires the import lock before performing an *note
     os.fork(): 328, and will also clean up any locks created using the
     *note threading: 103. module.  C extension modules that have
     internal locks, or that call ‘fork()’ themselves, will not benefit
     from this clean-up.

     (Fixed by Thomas Wouters; issue 1590864(13).)

   * The *note Py_Finalize(): 766. function now calls the internal
     ‘threading._shutdown()’ function; this prevents some exceptions
     from being raised when an interpreter shuts down.  (Patch by Adam
     Olsen; issue 1722344(14).)

   * When using the *note PyMemberDef: 767. structure to define
     attributes of a type, Python will no longer let you try to delete
     or set a ‘T_STRING_INPLACE’ attribute.

   * Global symbols defined by the *note ctypes: 2a. module are now
     prefixed with ‘Py’, or with ‘_ctypes’.  (Implemented by Thomas
     Heller; issue 3102(15).)

   * New configure option: the ‘--with-system-expat’ switch allows
     building the ‘pyexpat’ module to use the system Expat library.
     (Contributed by Arfrever Frehtes Taifersar Arahesis; issue
     7609(16).)

   * New configure option: the ‘--with-valgrind’ option will now disable
     the pymalloc allocator, which is difficult for the Valgrind
     memory-error detector to analyze correctly.  Valgrind will
     therefore be better at detecting memory leaks and overruns.
     (Contributed by James Henstridge; issue 2422(17).)

   * New configure option: you can now supply an empty string to
     ‘--with-dbmliborder=’ in order to disable all of the various DBM
     modules.  (Added by Arfrever Frehtes Taifersar Arahesis; issue
     6491(18).)

   * The ‘configure’ script now checks for floating-point rounding bugs
     on certain 32-bit Intel chips and defines a ‘X87_DOUBLE_ROUNDING’
     preprocessor definition.  No code currently uses this definition,
     but it’s available if anyone wishes to use it.  (Added by Mark
     Dickinson; issue 2937(19).)

     ‘configure’ also now sets a ‘LDCXXSHARED’ Makefile variable for
     supporting C++ linking.  (Contributed by Arfrever Frehtes Taifersar
     Arahesis; issue 1222585(20).)

   * The build process now creates the necessary files for pkg-config
     support.  (Contributed by Clinton Roy; issue 3585(21).)

   * The build process now supports Subversion 1.7.  (Contributed by
     Arfrever Frehtes Taifersar Arahesis; issue 6094(22).)

* Menu:

* Capsules:: 
* Port-Specific Changes; Windows: Port-Specific Changes Windows. 
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X. 
* Port-Specific Changes; FreeBSD: Port-Specific Changes FreeBSD. 

   ---------- Footnotes ----------

   (1) http://sourceware.org/gdb/current/onlinedocs/gdb/Python.html

   (2) https://bugs.python.org/issue8032

   (3) https://bugs.python.org/issue3632

   (4) https://bugs.python.org/issue4293

   (5) https://bugs.python.org/issue7033

   (6) https://bugs.python.org/issue7528

   (7) https://bugs.python.org/issue7767

   (8) http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983

   (9) https://bugs.python.org/issue5753

   (10) https://bugs.python.org/issue5793

   (11) https://bugs.python.org/issue8276

   (12) https://bugs.python.org/issue7228

   (13) https://bugs.python.org/issue1590864

   (14) https://bugs.python.org/issue1722344

   (15) https://bugs.python.org/issue3102

   (16) https://bugs.python.org/issue7609

   (17) https://bugs.python.org/issue2422

   (18) https://bugs.python.org/issue6491

   (19) https://bugs.python.org/issue2937

   (20) https://bugs.python.org/issue1222585

   (21) https://bugs.python.org/issue3585

   (22) https://bugs.python.org/issue6094


File: python.info,  Node: Capsules,  Next: Port-Specific Changes Windows,  Up: Build and C API Changes<5>

1.6.12.1 Capsules
.................

Python 3.1 adds a new C datatype, *note PyCapsule: 659, for providing a
C API to an extension module.  A capsule is essentially the holder of a
C ‘void *’ pointer, and is made available as a module attribute; for
example, the *note socket: ea. module’s API is exposed as ‘socket.CAPI’,
and *note unicodedata: 113. exposes ‘ucnhash_CAPI’.  Other extensions
can import the module, access its dictionary to get the capsule object,
and then get the ‘void *’ pointer, which will usually point to an array
of pointers to the module’s various API functions.

There is an existing data type already used for this, ‘PyCObject’, but
it doesn’t provide type safety.  Evil code written in pure Python could
cause a segmentation fault by taking a ‘PyCObject’ from module A and
somehow substituting it for the ‘PyCObject’ in module B. Capsules know
their own name, and getting the pointer requires providing the name:

     void *vtable;

     if (!PyCapsule_IsValid(capsule, "mymodule.CAPI") {
             PyErr_SetString(PyExc_ValueError, "argument type invalid");
             return NULL;
     }

     vtable = PyCapsule_GetPointer(capsule, "mymodule.CAPI");

You are assured that ‘vtable’ points to whatever you’re expecting.  If a
different capsule was passed in, *note PyCapsule_IsValid(): 76a. would
detect the mismatched name and return false.  Refer to *note Providing a
C API for an Extension Module: 76b. for more information on using these
objects.

Python 2.7 now uses capsules internally to provide various
extension-module APIs, but the ‘PyCObject_AsVoidPtr()’ was modified to
handle capsules, preserving compile-time compatibility with the
‘CObject’ interface.  Use of ‘PyCObject_AsVoidPtr()’ will signal a *note
PendingDeprecationWarning: 6fc, which is silent by default.

Implemented in Python 3.1 and backported to 2.7 by Larry Hastings;
discussed in issue 5630(1).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5630


File: python.info,  Node: Port-Specific Changes Windows,  Next: Port-Specific Changes Mac OS X,  Prev: Capsules,  Up: Build and C API Changes<5>

1.6.12.2 Port-Specific Changes: Windows
.......................................

   * The *note msvcrt: b3. module now contains some constants from the
     ‘crtassem.h’ header file: ‘CRT_ASSEMBLY_VERSION’,
     ‘VC_ASSEMBLY_PUBLICKEYTOKEN’, and ‘LIBRARIES_ASSEMBLY_NAME_PREFIX’.
     (Contributed by David Cournapeau; issue 4365(1).)

   * The ‘_winreg’ module for accessing the registry now implements the
     ‘CreateKeyEx()’ and ‘DeleteKeyEx()’ functions, extended versions of
     previously-supported functions that take several extra arguments.
     The ‘DisableReflectionKey()’, ‘EnableReflectionKey()’, and
     ‘QueryReflectionKey()’ were also tested and documented.
     (Implemented by Brian Curtin: issue 7347(2).)

   * The new ‘_beginthreadex()’ API is used to start threads, and the
     native thread-local storage functions are now used.  (Contributed
     by Kristján Valur Jónsson; issue 3582(3).)

   * The *note os.kill(): 76d. function now works on Windows.  The
     signal value can be the constants ‘CTRL_C_EVENT’,
     ‘CTRL_BREAK_EVENT’, or any integer.  The first two constants will
     send Control-C and Control-Break keystroke events to subprocesses;
     any other value will use the ‘TerminateProcess()’ API. (Contributed
     by Miki Tebeka; issue 1220212(4).)

   * The *note os.listdir(): 43a. function now correctly fails for an
     empty path.  (Fixed by Hirokazu Yamamoto; issue 5913(5).)

   * The ‘mimelib’ module will now read the MIME database from the
     Windows registry when initializing.  (Patch by Gabriel Genellina;
     issue 4969(6).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4365

   (2) https://bugs.python.org/issue7347

   (3) https://bugs.python.org/issue3582

   (4) https://bugs.python.org/issue1220212

   (5) https://bugs.python.org/issue5913

   (6) https://bugs.python.org/issue4969


File: python.info,  Node: Port-Specific Changes Mac OS X,  Next: Port-Specific Changes FreeBSD,  Prev: Port-Specific Changes Windows,  Up: Build and C API Changes<5>

1.6.12.3 Port-Specific Changes: Mac OS X
........................................

   * The path ‘/Library/Python/2.7/site-packages’ is now appended to
     ‘sys.path’, in order to share added packages between the system
     installation and a user-installed copy of the same version.
     (Changed by Ronald Oussoren; issue 4865(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4865


File: python.info,  Node: Port-Specific Changes FreeBSD,  Prev: Port-Specific Changes Mac OS X,  Up: Build and C API Changes<5>

1.6.12.4 Port-Specific Changes: FreeBSD
.......................................

   * FreeBSD 7.1’s ‘SO_SETFIB’ constant, used with
     ‘getsockopt()’/‘setsockopt()’ to select an alternate routing table,
     is now available in the *note socket: ea. module.  (Added by Kyle
     VanderBeek; issue 8235(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8235


File: python.info,  Node: Other Changes and Fixes,  Next: Porting to Python 2 7,  Prev: Build and C API Changes<5>,  Up: What's New in Python 2 7

1.6.13 Other Changes and Fixes
------------------------------

   * Two benchmark scripts, ‘iobench’ and ‘ccbench’, were added to the
     ‘Tools’ directory.  ‘iobench’ measures the speed of the built-in
     file I/O objects returned by *note open(): 1a2. while performing
     various operations, and ‘ccbench’ is a concurrency benchmark that
     tries to measure computing throughput, thread switching latency,
     and IO processing bandwidth when performing several tasks using a
     varying number of threads.

   * The ‘Tools/i18n/msgfmt.py’ script now understands plural forms in
     ‘.po’ files.  (Fixed by Martin von Löwis; issue 5464(1).)

   * When importing a module from a ‘.pyc’ or ‘.pyo’ file with an
     existing ‘.py’ counterpart, the ‘co_filename’ attributes of the
     resulting code objects are overwritten when the original filename
     is obsolete.  This can happen if the file has been renamed, moved,
     or is accessed through different paths.  (Patch by Ziga Seilnacht
     and Jean-Paul Calderone; issue 1180193(2).)

   * The ‘regrtest.py’ script now takes a ‘--randseed=’ switch that
     takes an integer that will be used as the random seed for the ‘-r’
     option that executes tests in random order.  The ‘-r’ option also
     reports the seed that was used (Added by Collin Winter.)

   * Another ‘regrtest.py’ switch is ‘-j’, which takes an integer
     specifying how many tests run in parallel.  This allows reducing
     the total runtime on multi-core machines.  This option is
     compatible with several other options, including the *note -R: 771.
     switch which is known to produce long runtimes.  (Added by Antoine
     Pitrou, issue 6152(3).)  This can also be used with a new ‘-F’
     switch that runs selected tests in a loop until they fail.  (Added
     by Antoine Pitrou; issue 7312(4).)

   * When executed as a script, the ‘py_compile.py’ module now accepts
     ‘'-'’ as an argument, which will read standard input for the list
     of filenames to be compiled.  (Contributed by Piotr Ożarowski;
     issue 8233(5).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5464

   (2) https://bugs.python.org/issue1180193

   (3) https://bugs.python.org/issue6152

   (4) https://bugs.python.org/issue7312

   (5) https://bugs.python.org/issue8233


File: python.info,  Node: Porting to Python 2 7,  Next: New Features Added to Python 2 7 Maintenance Releases,  Prev: Other Changes and Fixes,  Up: What's New in Python 2 7

1.6.14 Porting to Python 2.7
----------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code:

   * The *note range(): 396. function processes its arguments more
     consistently; it will now call *note __int__(): 727. on non-float,
     non-integer arguments that are supplied to it.  (Fixed by Alexander
     Belopolsky; issue 1533(1).)

   * The string *note format(): 556. method changed the default
     precision used for floating-point and complex numbers from 6
     decimal places to 12, which matches the precision used by *note
     str(): 178.  (Changed by Eric Smith; issue 5920(2).)

   * Because of an optimization for the *note with: 19b. statement, the
     special methods *note __enter__(): 702. and *note __exit__(): 703.
     must belong to the object’s type, and cannot be directly attached
     to the object’s instance.  This affects new-style classes (derived
     from *note object: 381.) and C extension types.  (issue 6101(3).)

   * Due to a bug in Python 2.6, the `exc_value' parameter to *note
     __exit__(): 703. methods was often the string representation of the
     exception, not an instance.  This was fixed in 2.7, so `exc_value'
     will be an instance as expected.  (Fixed by Florent Xicluna; issue
     7853(4).)

   * When a restricted set of attributes were set using ‘__slots__’,
     deleting an unset attribute would not raise *note AttributeError:
     320. as you would expect.  Fixed by Benjamin Peterson; issue
     7604(5).)

In the standard library:

   * Operations with *note datetime: 3c7. instances that resulted in a
     year falling outside the supported range didn’t always raise *note
     OverflowError: 325.  Such errors are now checked more carefully and
     will now raise the exception.  (Reported by Mark Leander, patch by
     Anand B. Pillai and Alexander Belopolsky; issue 7150(6).)

   * When using *note Decimal: 3d4. instances with a string’s *note
     format(): 556. method, the default alignment was previously
     left-alignment.  This has been changed to right-alignment, which
     might change the output of your programs.  (Changed by Mark
     Dickinson; issue 6857(7).)

     Comparisons involving a signaling NaN value (or ‘sNAN’) now signal
     *note InvalidOperation: 3d5. instead of silently returning a true
     or false value depending on the comparison operator.  Quiet NaN
     values (or ‘NaN’) are now hashable.  (Fixed by Mark Dickinson;
     issue 7279(8).)

   * The ElementTree library, ‘xml.etree’, no longer escapes ampersands
     and angle brackets when outputting an XML processing instruction
     (which looks like ‘<?xml-stylesheet href="#style1"?>’) or comment
     (which looks like ‘<!– comment –>’).  (Patch by Neil Muller; issue
     2746(9).)

   * The ‘readline()’ method of ‘StringIO’ objects now does nothing when
     a negative length is requested, as other file-like objects do.
     (issue 7348(10)).

   * The *note syslog: fa. module will now use the value of
     ‘sys.argv[0]’ as the identifier instead of the previous default
     value of ‘'python'’.  (Changed by Sean Reifschneider; issue
     8451(11).)

   * The *note tarfile: fc. module’s default error handling has changed,
     to no longer suppress fatal errors.  The default error level was
     previously 0, which meant that errors would only result in a
     message being written to the debug log, but because the debug log
     is not activated by default, these errors go unnoticed.  The
     default error level is now 1, which raises an exception if there’s
     an error.  (Changed by Lars Gustäbel; issue 7357(12).)

   * The ‘urlparse’ module’s ‘urlsplit()’ now handles unknown URL
     schemes in a fashion compliant with RFC 3986(13): if the URL is of
     the form ‘"<something>://..."’, the text before the ‘://’ is
     treated as the scheme, even if it’s a made-up scheme that the
     module doesn’t know about.  This change may break code that worked
     around the old behaviour.  For example, Python 2.6.4 or 2.5 will
     return the following:

          >>> import urlparse
          >>> urlparse.urlsplit('invented://host/filename?query')
          ('invented', '', '//host/filename?query', '', '')

     Python 2.7 (and Python 2.6.5) will return:

          >>> import urlparse
          >>> urlparse.urlsplit('invented://host/filename?query')
          ('invented', 'host', '/filename?query', '', '')

     (Python 2.7 actually produces slightly different output, since it
     returns a named tuple instead of a standard tuple.)

For C extensions:

   * C extensions that use integer format codes with the ‘PyArg_Parse*’
     family of functions will now raise a *note TypeError: 309.
     exception instead of triggering a *note DeprecationWarning: 2e1.
     (issue 5080(14)).

   * Use the new *note PyOS_string_to_double(): 67b. function instead of
     the old ‘PyOS_ascii_strtod()’ and ‘PyOS_ascii_atof()’ functions,
     which are now deprecated.

For applications that embed Python:

   * The *note PySys_SetArgvEx(): 64c. function was added, letting
     applications close a security hole when the existing *note
     PySys_SetArgv(): 764. function was used.  Check whether you’re
     calling *note PySys_SetArgv(): 764. and carefully consider whether
     the application should be using *note PySys_SetArgvEx(): 64c. with
     `updatepath' set to false.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1533

   (2) https://bugs.python.org/issue5920

   (3) https://bugs.python.org/issue6101

   (4) https://bugs.python.org/issue7853

   (5) https://bugs.python.org/issue7604

   (6) https://bugs.python.org/issue7150

   (7) https://bugs.python.org/issue6857

   (8) https://bugs.python.org/issue7279

   (9) https://bugs.python.org/issue2746

   (10) https://bugs.python.org/issue7348

   (11) https://bugs.python.org/issue8451

   (12) https://bugs.python.org/issue7357

   (13) https://tools.ietf.org/html/rfc3986.html

   (14) https://bugs.python.org/issue5080


File: python.info,  Node: New Features Added to Python 2 7 Maintenance Releases,  Next: Acknowledgements,  Prev: Porting to Python 2 7,  Up: What's New in Python 2 7

1.6.15 New Features Added to Python 2.7 Maintenance Releases
------------------------------------------------------------

New features may be added to Python 2.7 maintenance releases when the
situation genuinely calls for it.  Any such additions must go through
the Python Enhancement Proposal process, and make a compelling case for
why they can’t be adequately addressed by either adding the new feature
solely to Python 3, or else by publishing it on the Python Package
Index.

In addition to the specific proposals listed below, there is a general
exemption allowing new ‘-3’ warnings to be added in any Python 2.7
maintenance release.

* Menu:

* PEP 434; IDLE Enhancement Exception for All Branches: PEP 434 IDLE Enhancement Exception for All Branches. 
* PEP 466; Network Security Enhancements for Python 2.7: PEP 466 Network Security Enhancements for Python 2 7. 


File: python.info,  Node: PEP 434 IDLE Enhancement Exception for All Branches,  Next: PEP 466 Network Security Enhancements for Python 2 7,  Up: New Features Added to Python 2 7 Maintenance Releases

1.6.15.1 PEP 434: IDLE Enhancement Exception for All Branches
.............................................................

PEP 434(1) describes a general exemption for changes made to the IDLE
development environment shipped along with Python.  This exemption makes
it possible for the IDLE developers to provide a more consistent user
experience across all supported versions of Python 2 and 3.

For details of any IDLE changes, refer to the NEWS file for the specific
release.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0434


File: python.info,  Node: PEP 466 Network Security Enhancements for Python 2 7,  Prev: PEP 434 IDLE Enhancement Exception for All Branches,  Up: New Features Added to Python 2 7 Maintenance Releases

1.6.15.2 PEP 466: Network Security Enhancements for Python 2.7
..............................................................

PEP 466(1) describes a number of network security enhancement proposals
that have been approved for inclusion in Python 2.7 maintenance
releases, with the first of those changes appearing in the Python 2.7.7
release.

PEP 466(2) related features added in Python 2.7.7:

   * *note hmac.compare_digest(): 3f7. was backported from Python 3 to
     make a timing attack resistant comparison operation available to
     Python 2 applications.  (Contributed by Alex Gaynor; issue
     21306(3).)

   * OpenSSL 1.0.1g was upgraded in the official Windows installers
     published on python.org.  (Contributed by Zachary Ware; issue
     21462(4).)

PEP 466(5) related features added in Python 2.7.8:

   * *note hashlib.pbkdf2_hmac(): 159. was backported from Python 3 to
     make a hashing algorithm suitable for secure password storage
     broadly available to Python 2 applications.  (Contributed by Alex
     Gaynor; issue 21304(6).)

   * OpenSSL 1.0.1h was upgraded for the official Windows installers
     published on python.org.  (contributed by Zachary Ware in issue
     21671(7) for CVE-2014-0224)

PEP 466(8) related features added in Python 2.7.9:

   * Most of Python 3.4’s *note ssl: ee. module was backported.  This
     means *note ssl: ee. now supports Server Name Indication, TLS1.x
     settings, access to the platform certificate store, the *note
     SSLContext: 15d. class, and other features.  (Contributed by Alex
     Gaynor and David Reid; issue 21308(9).)

   * *note os.urandom(): 2df. was changed to cache a file descriptor to
     ‘/dev/urandom’ instead of reopening ‘/dev/urandom’ on every call.
     (Contributed by Alex Gaynor; issue 21305(10).)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0466

   (2) https://www.python.org/dev/peps/pep-0466

   (3) https://bugs.python.org/issue21306

   (4) https://bugs.python.org/issue21462

   (5) https://www.python.org/dev/peps/pep-0466

   (6) https://bugs.python.org/issue21304

   (7) https://bugs.python.org/issue21671

   (8) https://www.python.org/dev/peps/pep-0466

   (9) https://bugs.python.org/issue21308

   (10) https://bugs.python.org/issue21305


File: python.info,  Node: Acknowledgements,  Prev: New Features Added to Python 2 7 Maintenance Releases,  Up: What's New in Python 2 7

1.6.16 Acknowledgements
-----------------------

The author would like to thank the following people for offering
suggestions, corrections and assistance with various drafts of this
article: Nick Coghlan, Philip Jenvey, Ryan Lovett, R. David Murray, Hugh
Secker-Walker.


File: python.info,  Node: What's New in Python 2 6,  Next: What's New in Python 2 5,  Prev: What's New in Python 2 7,  Up: What's New in Python

1.7 What’s New in Python 2.6
============================


Author: A.M. Kuchling (amk at amk.ca)

This article explains the new features in Python 2.6, released on
October 1 2008.  The release schedule is described in PEP 361(1).

The major theme of Python 2.6 is preparing the migration path to Python
3.0, a major redesign of the language.  Whenever possible, Python 2.6
incorporates new features and syntax from 3.0 while remaining compatible
with existing code by not removing older features or syntax.  When it’s
not possible to do that, Python 2.6 tries to do what it can, adding
compatibility functions in a ‘future_builtins’ module and a ‘-3’ switch
to warn about usages that will become unsupported in 3.0.

Some significant new packages have been added to the standard library,
such as the *note multiprocessing: b4. and *note json: a1. modules, but
there aren’t many new features that aren’t related to Python 3.0 in some
way.

Python 2.6 also sees a number of improvements and bugfixes throughout
the source.  A search through the change logs finds there were 259
patches applied and 612 bugs fixed between Python 2.5 and 2.6.  Both
figures are likely to be underestimates.

This article doesn’t attempt to provide a complete specification of the
new features, but instead provides a convenient overview.  For full
details, you should refer to the documentation for Python 2.6.  If you
want to understand the rationale for the design and implementation,
refer to the PEP for a particular new feature.  Whenever possible,
"What’s New in Python" links to the bug/patch item for each change.

* Menu:

* Python 3.0: Python 3 0. 
* Changes to the Development Process:: 
* PEP 343; The ’with’ statement: PEP 343 The 'with' statement. 
* PEP 366; Explicit Relative Imports From a Main Module: PEP 366 Explicit Relative Imports From a Main Module. 
* PEP 370; Per-user site-packages Directory: PEP 370 Per-user site-packages Directory. 
* PEP 371; The multiprocessing Package: PEP 371 The multiprocessing Package. 
* PEP 3101; Advanced String Formatting: PEP 3101 Advanced String Formatting. 
* PEP 3105; print As a Function: PEP 3105 print As a Function. 
* PEP 3110; Exception-Handling Changes: PEP 3110 Exception-Handling Changes. 
* PEP 3112; Byte Literals: PEP 3112 Byte Literals. 
* PEP 3116; New I/O Library: PEP 3116 New I/O Library. 
* PEP 3118; Revised Buffer Protocol: PEP 3118 Revised Buffer Protocol. 
* PEP 3119; Abstract Base Classes: PEP 3119 Abstract Base Classes. 
* PEP 3127; Integer Literal Support and Syntax: PEP 3127 Integer Literal Support and Syntax. 
* PEP 3129; Class Decorators: PEP 3129 Class Decorators. 
* PEP 3141; A Type Hierarchy for Numbers: PEP 3141 A Type Hierarchy for Numbers. 
* Other Language Changes: Other Language Changes<6>. 
* New and Improved Modules: New and Improved Modules<2>. 
* Deprecations and Removals:: 
* Build and C API Changes: Build and C API Changes<6>. 
* Porting to Python 2.6: Porting to Python 2 6. 
* Acknowledgements: Acknowledgements<2>. 

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0361


File: python.info,  Node: Python 3 0,  Next: Changes to the Development Process,  Up: What's New in Python 2 6

1.7.1 Python 3.0
----------------

The development cycle for Python versions 2.6 and 3.0 was synchronized,
with the alpha and beta releases for both versions being made on the
same days.  The development of 3.0 has influenced many features in 2.6.

Python 3.0 is a far-ranging redesign of Python that breaks compatibility
with the 2.x series.  This means that existing Python code will need
some conversion in order to run on Python 3.0.  However, not all the
changes in 3.0 necessarily break compatibility.  In cases where new
features won’t cause existing code to break, they’ve been backported to
2.6 and are described in this document in the appropriate place.  Some
of the 3.0-derived features are:

   * A *note __complex__(): 77b. method for converting objects to a
     complex number.

   * Alternate syntax for catching exceptions: ‘except TypeError as
     exc’.

   * The addition of *note functools.reduce(): 6d3. as a synonym for the
     built-in ‘reduce()’ function.

Python 3.0 adds several new built-in functions and changes the semantics
of some existing builtins.  Functions that are new in 3.0 such as *note
bin(): 69b. have simply been added to Python 2.6, but existing builtins
haven’t been changed; instead, the ‘future_builtins’ module has versions
with the new 3.0 semantics.  Code written to be compatible with 3.0 can
do ‘from future_builtins import hex, map’ as necessary.

A new command-line switch, ‘-3’, enables warnings about features that
will be removed in Python 3.0.  You can run code with this switch to see
how much work will be necessary to port code to 3.0.  The value of this
switch is available to Python code as the boolean variable
‘sys.py3kwarning’, and to C extension code as ‘Py_Py3kWarningFlag’.

See also
........

The 3xxx series of PEPs, which contains proposals for Python 3.0.  PEP
3000(1) describes the development process for Python 3.0.  Start with
PEP 3100(2) that describes the general goals for Python 3.0, and then
explore the higher-numbered PEPS that propose specific features.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3000

   (2) https://www.python.org/dev/peps/pep-3100


File: python.info,  Node: Changes to the Development Process,  Next: PEP 343 The 'with' statement,  Prev: Python 3 0,  Up: What's New in Python 2 6

1.7.2 Changes to the Development Process
----------------------------------------

While 2.6 was being developed, the Python development process underwent
two significant changes: we switched from SourceForge’s issue tracker to
a customized Roundup installation, and the documentation was converted
from LaTeX to reStructuredText.

* Menu:

* New Issue Tracker; Roundup: New Issue Tracker Roundup. 
* New Documentation Format; reStructuredText Using Sphinx: New Documentation Format reStructuredText Using Sphinx. 


File: python.info,  Node: New Issue Tracker Roundup,  Next: New Documentation Format reStructuredText Using Sphinx,  Up: Changes to the Development Process

1.7.2.1 New Issue Tracker: Roundup
..................................

For a long time, the Python developers had been growing increasingly
annoyed by SourceForge’s bug tracker.  SourceForge’s hosted solution
doesn’t permit much customization; for example, it wasn’t possible to
customize the life cycle of issues.

The infrastructure committee of the Python Software Foundation therefore
posted a call for issue trackers, asking volunteers to set up different
products and import some of the bugs and patches from SourceForge.  Four
different trackers were examined: Jira(1), Launchpad(2), Roundup(3), and
Trac(4).  The committee eventually settled on Jira and Roundup as the
two candidates.  Jira is a commercial product that offers no-cost hosted
instances to free-software projects; Roundup is an open-source project
that requires volunteers to administer it and a server to host it.

After posting a call for volunteers, a new Roundup installation was set
up at ‘https://bugs.python.org’.  One installation of Roundup can host
multiple trackers, and this server now also hosts issue trackers for
Jython and for the Python web site.  It will surely find other uses in
the future.  Where possible, this edition of "What’s New in Python"
links to the bug/patch item for each change.

Hosting of the Python bug tracker is kindly provided by Upfront
Systems(5) of Stellenbosch, South Africa.  Martin von Löwis put a lot of
effort into importing existing bugs and patches from SourceForge; his
scripts for this import operation are at
‘http://svn.python.org/view/tracker/importer/’ and may be useful to
other projects wishing to move from SourceForge to Roundup.

See also
........

‘https://bugs.python.org’

     The Python bug tracker.

‘http://bugs.jython.org’:

     The Jython bug tracker.

‘http://roundup.sourceforge.net/’

     Roundup downloads and documentation.

‘http://svn.python.org/view/tracker/importer/’

     Martin von Löwis’s conversion scripts.

   ---------- Footnotes ----------

   (1) http://www.atlassian.com/software/jira/

   (2) http://www.launchpad.net

   (3) http://roundup.sourceforge.net/

   (4) http://trac.edgewall.org/

   (5) http://www.upfrontsystems.co.za/


File: python.info,  Node: New Documentation Format reStructuredText Using Sphinx,  Prev: New Issue Tracker Roundup,  Up: Changes to the Development Process

1.7.2.2 New Documentation Format: reStructuredText Using Sphinx
...............................................................

The Python documentation was written using LaTeX since the project
started around 1989.  In the 1980s and early 1990s, most documentation
was printed out for later study, not viewed online.  LaTeX was widely
used because it provided attractive printed output while remaining
straightforward to write once the basic rules of the markup were
learned.

Today LaTeX is still used for writing publications destined for
printing, but the landscape for programming tools has shifted.  We no
longer print out reams of documentation; instead, we browse through it
online and HTML has become the most important format to support.
Unfortunately, converting LaTeX to HTML is fairly complicated and Fred
L. Drake Jr., the long-time Python documentation editor, spent a lot of
time maintaining the conversion process.  Occasionally people would
suggest converting the documentation into SGML and later XML, but
performing a good conversion is a major task and no one ever committed
the time required to finish the job.

During the 2.6 development cycle, Georg Brandl put a lot of effort into
building a new toolchain for processing the documentation.  The
resulting package is called Sphinx, and is available from
‘http://sphinx.pocoo.org/’.

Sphinx concentrates on HTML output, producing attractively styled and
modern HTML; printed output is still supported through conversion to
LaTeX. The input format is reStructuredText, a markup syntax supporting
custom extensions and directives that is commonly used in the Python
community.

Sphinx is a standalone package that can be used for writing, and almost
two dozen other projects (listed on the Sphinx web site(1)) have adopted
Sphinx as their documentation tool.

See also
........

Documenting Python(2)

     Describes how to write for Python’s documentation.

Sphinx(3)

     Documentation and code for the Sphinx toolchain.

Docutils(4)

     The underlying reStructuredText parser and toolset.

   ---------- Footnotes ----------

   (1) http://sphinx-doc.org/examples.html

   (2) https://docs.python.org/devguide/documenting.html

   (3) http://sphinx-doc.org/

   (4) http://docutils.sourceforge.net


File: python.info,  Node: PEP 343 The 'with' statement,  Next: PEP 366 Explicit Relative Imports From a Main Module,  Prev: Changes to the Development Process,  Up: What's New in Python 2 6

1.7.3 PEP 343: The ’with’ statement
-----------------------------------

The previous version, Python 2.5, added the ’*note with: 19b.’ statement
as an optional feature, to be enabled by a ‘from __future__ import
with_statement’ directive.  In 2.6 the statement no longer needs to be
specially enabled; this means that *note with: 19b. is now always a
keyword.  The rest of this section is a copy of the corresponding
section from the "What’s New in Python 2.5" document; if you’re familiar
with the ’*note with: 19b.’ statement from Python 2.5, you can skip this
section.

The ’*note with: 19b.’ statement clarifies code that previously would
use ‘try...finally’ blocks to ensure that clean-up code is executed.  In
this section, I’ll discuss the statement as it will commonly be used.
In the next section, I’ll examine the implementation details and show
how to write objects for use with this statement.

The ’*note with: 19b.’ statement is a control-flow structure whose basic
structure is:

     with expression [as variable]:
         with-block

The expression is evaluated, and it should result in an object that
supports the context management protocol (that is, has *note
__enter__(): 702. and *note __exit__(): 703. methods).

The object’s *note __enter__(): 702. is called before `with-block' is
executed and therefore can run set-up code.  It also may return a value
that is bound to the name `variable', if given.  (Note carefully that
`variable' is `not' assigned the result of `expression'.)

After execution of the `with-block' is finished, the object’s *note
__exit__(): 703. method is called, even if the block raised an
exception, and can therefore run clean-up code.

Some standard Python objects now support the context management protocol
and can be used with the ’*note with: 19b.’ statement.  File objects are
one example:

     with open('/etc/passwd', 'r') as f:
         for line in f:
             print line
             ... more processing code ...

After this statement has executed, the file object in `f' will have been
automatically closed, even if the *note for: 688. loop raised an
exception part- way through the block.

     Note: In this case, `f' is the same object created by *note open():
     1a2, because ‘file.__enter__()’ returns `self'.

The *note threading: 103. module’s locks and condition variables also
support the ’*note with: 19b.’ statement:

     lock = threading.Lock()
     with lock:
         # Critical section of code
         ...

The lock is acquired before the block is executed and always released
once the block is complete.

The ‘localcontext()’ function in the *note decimal: 34. module makes it
easy to save and restore the current decimal context, which encapsulates
the desired precision and rounding characteristics for computations:

     from decimal import Decimal, Context, localcontext

     # Displays with default precision of 28 digits
     v = Decimal('578')
     print v.sqrt()

     with localcontext(Context(prec=16)):
         # All code in this block uses a precision of 16 digits.
         # The original context is restored on exiting the block.
         print v.sqrt()

* Menu:

* Writing Context Managers:: 
* The contextlib module:: 


File: python.info,  Node: Writing Context Managers,  Next: The contextlib module,  Up: PEP 343 The 'with' statement

1.7.3.1 Writing Context Managers
................................

Under the hood, the ’*note with: 19b.’ statement is fairly complicated.
Most people will only use ’*note with: 19b.’ in company with existing
objects and don’t need to know these details, so you can skip the rest
of this section if you like.  Authors of new objects will need to
understand the details of the underlying implementation and should keep
reading.

A high-level explanation of the context management protocol is:

   * The expression is evaluated and should result in an object called a
     "context manager".  The context manager must have *note
     __enter__(): 702. and *note __exit__(): 703. methods.

   * The context manager’s *note __enter__(): 702. method is called.
     The value returned is assigned to `VAR'. If no ‘as VAR’ clause is
     present, the value is simply discarded.

   * The code in `BLOCK' is executed.

   * If `BLOCK' raises an exception, the context manager’s *note
     __exit__(): 703. method is called with three arguments, the
     exception details (‘type, value, traceback’, the same values
     returned by *note sys.exc_info(): 6c1, which can also be ‘None’ if
     no exception occurred).  The method’s return value controls whether
     an exception is re-raised: any false value re-raises the exception,
     and ‘True’ will result in suppressing it.  You’ll only rarely want
     to suppress the exception, because if you do the author of the code
     containing the ’*note with: 19b.’ statement will never realize
     anything went wrong.

   * If `BLOCK' didn’t raise an exception, the *note __exit__(): 703.
     method is still called, but `type', `value', and `traceback' are
     all ‘None’.

Let’s think through an example.  I won’t present detailed code but will
only sketch the methods necessary for a database that supports
transactions.

(For people unfamiliar with database terminology: a set of changes to
the database are grouped into a transaction.  Transactions can be either
committed, meaning that all the changes are written into the database,
or rolled back, meaning that the changes are all discarded and the
database is unchanged.  See any database textbook for more information.)

Let’s assume there’s an object representing a database connection.  Our
goal will be to let the user write code like this:

     db_connection = DatabaseConnection()
     with db_connection as cursor:
         cursor.execute('insert into ...')
         cursor.execute('delete from ...')
         # ... more operations ...

The transaction should be committed if the code in the block runs
flawlessly or rolled back if there’s an exception.  Here’s the basic
interface for ‘DatabaseConnection’ that I’ll assume:

     class DatabaseConnection:
         # Database interface
         def cursor(self):
             "Returns a cursor object and starts a new transaction"
         def commit(self):
             "Commits current transaction"
         def rollback(self):
             "Rolls back current transaction"

The *note __enter__(): 702. method is pretty easy, having only to start
a new transaction.  For this application the resulting cursor object
would be a useful result, so the method will return it.  The user can
then add ‘as cursor’ to their ’*note with: 19b.’ statement to bind the
cursor to a variable name.

     class DatabaseConnection:
         ...
         def __enter__(self):
             # Code to start a new transaction
             cursor = self.cursor()
             return cursor

The *note __exit__(): 703. method is the most complicated because it’s
where most of the work has to be done.  The method has to check if an
exception occurred.  If there was no exception, the transaction is
committed.  The transaction is rolled back if there was an exception.

In the code below, execution will just fall off the end of the function,
returning the default value of ‘None’.  ‘None’ is false, so the
exception will be re-raised automatically.  If you wished, you could be
more explicit and add a *note return: 781. statement at the marked
location.

     class DatabaseConnection:
         ...
         def __exit__(self, type, value, tb):
             if tb is None:
                 # No exception, so commit
                 self.commit()
             else:
                 # Exception occurred, so rollback.
                 self.rollback()
                 # return False


File: python.info,  Node: The contextlib module,  Prev: Writing Context Managers,  Up: PEP 343 The 'with' statement

1.7.3.2 The contextlib module
.............................

The *note contextlib: 24. module provides some functions and a decorator
that are useful when writing objects for use with the ’*note with: 19b.’
statement.

The decorator is called ‘contextmanager()’, and lets you write a single
generator function instead of defining a new class.  The generator
should yield exactly one value.  The code up to the *note yield: 21b.
will be executed as the *note __enter__(): 702. method, and the value
yielded will be the method’s return value that will get bound to the
variable in the ’*note with: 19b.’ statement’s *note as: 69e. clause, if
any.  The code after the *note yield: 21b. will be executed in the *note
__exit__(): 703. method.  Any exception raised in the block will be
raised by the *note yield: 21b. statement.

Using this decorator, our database example from the previous section
could be written as:

     from contextlib import contextmanager

     @contextmanager
     def db_transaction(connection):
         cursor = connection.cursor()
         try:
             yield cursor
         except:
             connection.rollback()
             raise
         else:
             connection.commit()

     db = DatabaseConnection()
     with db_transaction(db) as cursor:
         ...

The *note contextlib: 24. module also has a ‘nested(mgr1, mgr2, ...)’
function that combines a number of context managers so you don’t need to
write nested ’*note with: 19b.’ statements.  In this example, the single
’*note with: 19b.’ statement both starts a database transaction and
acquires a thread lock:

     lock = threading.Lock()
     with nested (db_transaction(db), lock) as (cursor, locked):
         ...

Finally, the ‘closing()’ function returns its argument so that it can be
bound to a variable, and calls the argument’s ‘.close()’ method at the
end of the block.

     import urllib, sys
     from contextlib import closing

     with closing(urllib.urlopen('http://www.yahoo.com')) as f:
         for line in f:
             sys.stdout.write(line)

See also
........

PEP 343(1) - The "with" statement

     PEP written by Guido van Rossum and Nick Coghlan; implemented by
     Mike Bland, Guido van Rossum, and Neal Norwitz.  The PEP shows the
     code generated for a ’*note with: 19b.’ statement, which can be
     helpful in learning how the statement works.

The documentation for the *note contextlib: 24. module.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0343


File: python.info,  Node: PEP 366 Explicit Relative Imports From a Main Module,  Next: PEP 370 Per-user site-packages Directory,  Prev: PEP 343 The 'with' statement,  Up: What's New in Python 2 6

1.7.4 PEP 366: Explicit Relative Imports From a Main Module
-----------------------------------------------------------

Python’s *note -m: 6a8. switch allows running a module as a script.
When you ran a module that was located inside a package, relative
imports didn’t work correctly.

The fix for Python 2.6 adds a *note __package__: 312. attribute to
modules.  When this attribute is present, relative imports will be
relative to the value of this attribute instead of the *note __name__:
6cb. attribute.

PEP 302-style importers can then set *note __package__: 312. as
necessary.  The *note runpy: de. module that implements the *note -m:
6a8. switch now does this, so relative imports will now work correctly
in scripts running from inside a package.


File: python.info,  Node: PEP 370 Per-user site-packages Directory,  Next: PEP 371 The multiprocessing Package,  Prev: PEP 366 Explicit Relative Imports From a Main Module,  Up: What's New in Python 2 6

1.7.5 PEP 370: Per-user ‘site-packages’ Directory
-------------------------------------------------

When you run Python, the module search path ‘sys.path’ usually includes
a directory whose path ends in ‘"site-packages"’.  This directory is
intended to hold locally-installed packages available to all users using
a machine or a particular site installation.

Python 2.6 introduces a convention for user-specific site directories.
The directory varies depending on the platform:

   * Unix and Mac OS X: ‘~/.local/’

   * Windows: ‘%APPDATA%/Python’

Within this directory, there will be version-specific subdirectories,
such as ‘lib/python2.6/site-packages’ on Unix/Mac OS and
‘Python26/site-packages’ on Windows.

If you don’t like the default directory, it can be overridden by an
environment variable.  *note PYTHONUSERBASE: 785. sets the root
directory used for all Python versions supporting this feature.  On
Windows, the directory for application-specific data can be changed by
setting the ‘APPDATA’ environment variable.  You can also modify the
‘site.py’ file for your Python installation.

The feature can be disabled entirely by running Python with the *note
-s: 786. option or setting the *note PYTHONNOUSERSITE: 787. environment
variable.

See also
........

PEP 370(1) - Per-user ‘site-packages’ Directory

     PEP written and implemented by Christian Heimes.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0370


File: python.info,  Node: PEP 371 The multiprocessing Package,  Next: PEP 3101 Advanced String Formatting,  Prev: PEP 370 Per-user site-packages Directory,  Up: What's New in Python 2 6

1.7.6 PEP 371: The ‘multiprocessing’ Package
--------------------------------------------

The new *note multiprocessing: b4. package lets Python programs create
new processes that will perform a computation and return a result to the
parent.  The parent and child processes can communicate using queues and
pipes, synchronize their operations using locks and semaphores, and can
share simple arrays of data.

The *note multiprocessing: b4. module started out as an exact emulation
of the *note threading: 103. module using processes instead of threads.
That goal was discarded along the path to Python 2.6, but the general
approach of the module is still similar.  The fundamental class is the
‘Process’, which is passed a callable object and a collection of
arguments.  The ‘start()’ method sets the callable running in a
subprocess, after which you can call the ‘is_alive()’ method to check
whether the subprocess is still running and the ‘join()’ method to wait
for the process to exit.

Here’s a simple example where the subprocess will calculate a factorial.
The function doing the calculation is written strangely so that it takes
significantly longer when the input argument is a multiple of 4.

     import time
     from multiprocessing import Process, Queue


     def factorial(queue, N):
         "Compute a factorial."
         # If N is a multiple of 4, this function will take much longer.
         if (N % 4) == 0:
             time.sleep(.05 * N/4)

         # Calculate the result
         fact = 1L
         for i in range(1, N+1):
             fact = fact * i

         # Put the result on the queue
         queue.put(fact)

     if __name__ == '__main__':
         queue = Queue()

         N = 5

         p = Process(target=factorial, args=(queue, N))
         p.start()
         p.join()

         result = queue.get()
         print 'Factorial', N, '=', result

A ‘Queue’ is used to communicate the result of the factorial.  The
‘Queue’ object is stored in a global variable.  The child process will
use the value of the variable when the child was created; because it’s a
‘Queue’, parent and child can use the object to communicate.  (If the
parent were to change the value of the global variable, the child’s
value would be unaffected, and vice versa.)

Two other classes, ‘Pool’ and ‘Manager’, provide higher-level
interfaces.  ‘Pool’ will create a fixed number of worker processes, and
requests can then be distributed to the workers by calling ‘apply()’ or
‘apply_async()’ to add a single request, and *note map(): 685. or
‘map_async()’ to add a number of requests.  The following code uses a
‘Pool’ to spread requests across 5 worker processes and retrieve a list
of results:

     from multiprocessing import Pool

     def factorial(N, dictionary):
         "Compute a factorial."
         ...
     p = Pool(5)
     result = p.map(factorial, range(1, 1000, 10))
     for v in result:
         print v

This produces the following output:

     1
     39916800
     51090942171709440000
     8222838654177922817725562880000000
     33452526613163807108170062053440751665152000000000
     ...

The other high-level interface, the ‘Manager’ class, creates a separate
server process that can hold master copies of Python data structures.
Other processes can then access and modify these data structures using
proxy objects.  The following example creates a shared dictionary by
calling the *note dict(): 380. method; the worker processes then insert
values into the dictionary.  (Locking is not done for you automatically,
which doesn’t matter in this example.  ‘Manager’’s methods also include
‘Lock()’, ‘RLock()’, and ‘Semaphore()’ to create shared locks.)

     import time
     from multiprocessing import Pool, Manager

     def factorial(N, dictionary):
         "Compute a factorial."
         # Calculate the result
         fact = 1L
         for i in range(1, N+1):
             fact = fact * i

         # Store result in dictionary
         dictionary[N] = fact

     if __name__ == '__main__':
         p = Pool(5)
         mgr = Manager()
         d = mgr.dict()         # Create shared dictionary

         # Run tasks using the pool
         for N in range(1, 1000, 10):
             p.apply_async(factorial, (N, d))

         # Mark pool as closed -- no more tasks can be added.
         p.close()

         # Wait for tasks to exit
         p.join()

         # Output results
         for k, v in sorted(d.items()):
             print k, v

This will produce the output:

     1 1
     11 39916800
     21 51090942171709440000
     31 8222838654177922817725562880000000
     41 33452526613163807108170062053440751665152000000000
     51 15511187532873822802242430164693032110632597200169861120000...

See also
........

The documentation for the *note multiprocessing: b4. module.

PEP 371(1) - Addition of the multiprocessing package

     PEP written by Jesse Noller and Richard Oudkerk; implemented by
     Richard Oudkerk and Jesse Noller.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0371


File: python.info,  Node: PEP 3101 Advanced String Formatting,  Next: PEP 3105 print As a Function,  Prev: PEP 371 The multiprocessing Package,  Up: What's New in Python 2 6

1.7.7 PEP 3101: Advanced String Formatting
------------------------------------------

In Python 3.0, the ‘%’ operator is supplemented by a more powerful
string formatting method, *note format(): 556.  Support for the *note
str.format(): 557. method has been backported to Python 2.6.

In 2.6, both 8-bit and Unicode strings have a ‘.format()’ method that
treats the string as a template and takes the arguments to be formatted.
The formatting template uses curly brackets (‘{’, ‘}’) as special
characters:

     >>> # Substitute positional argument 0 into the string.
     >>> "User ID: {0}".format("root")
     'User ID: root'
     >>> # Use the named keyword arguments
     >>> "User ID: {uid}   Last seen: {last_login}".format(
     ...    uid="root",
     ...    last_login = "5 Mar 2008 07:20")
     'User ID: root   Last seen: 5 Mar 2008 07:20'

Curly brackets can be escaped by doubling them:

     >>> "Empty dict: {{}}".format()
     "Empty dict: {}"

Field names can be integers indicating positional arguments, such as
‘{0}’, ‘{1}’, etc.  or names of keyword arguments.  You can also supply
compound field names that read attributes or access dictionary keys:

     >>> import sys
     >>> print 'Platform: {0.platform}\nPython version: {0.version}'.format(sys)
     Platform: darwin
     Python version: 2.6a1+ (trunk:61261M, Mar  5 2008, 20:29:41)
     [GCC 4.0.1 (Apple Computer, Inc. build 5367)]'

     >>> import mimetypes
     >>> 'Content-type: {0[.mp4]}'.format(mimetypes.types_map)
     'Content-type: video/mp4'

Note that when using dictionary-style notation such as ‘[.mp4]’, you
don’t need to put any quotation marks around the string; it will look up
the value using ‘.mp4’ as the key.  Strings beginning with a number will
be converted to an integer.  You can’t write more complicated
expressions inside a format string.

So far we’ve shown how to specify which field to substitute into the
resulting string.  The precise formatting used is also controllable by
adding a colon followed by a format specifier.  For example:

     >>> # Field 0: left justify, pad to 15 characters
     >>> # Field 1: right justify, pad to 6 characters
     >>> fmt = '{0:15} ${1:>6}'
     >>> fmt.format('Registration', 35)
     'Registration    $    35'
     >>> fmt.format('Tutorial', 50)
     'Tutorial        $    50'
     >>> fmt.format('Banquet', 125)
     'Banquet         $   125'

Format specifiers can reference other fields through nesting:

     >>> fmt = '{0:{1}}'
     >>> width = 15
     >>> fmt.format('Invoice #1234', width)
     'Invoice #1234  '
     >>> width = 35
     >>> fmt.format('Invoice #1234', width)
     'Invoice #1234                      '

The alignment of a field within the desired width can be specified:

Character            Effect
                     
----------------------------------------------------------------------
                     
< (default)          Left-align
                     
                     
>                    Right-align
                     
                     
^                    Center
                     
                     
=                    (For numeric types only) Pad after the sign.
                     

Format specifiers can also include a presentation type, which controls
how the value is formatted.  For example, floating-point numbers can be
formatted as a general number or in exponential notation:

     >>> '{0:g}'.format(3.75)
     '3.75'
     >>> '{0:e}'.format(3.75)
     '3.750000e+00'

A variety of presentation types are available.  Consult the 2.6
documentation for a *note complete list: 78a.; here’s a sample:

‘b’       Binary.  Outputs the number in base 2.
          
          
‘c’       Character.  Converts the integer to the corresponding Unicode character
          before printing.
          
          
‘d’       Decimal Integer.  Outputs the number in base 10.
          
          
‘o’       Octal format.  Outputs the number in base 8.
          
          
‘x’       Hex format.  Outputs the number in base 16, using lower-case letters for
          the digits above 9.
          
          
‘e’       Exponent notation.  Prints the number in scientific notation using the
          letter ’e’ to indicate the exponent.
          
          
‘g’       General format.  This prints the number as a fixed-point number, unless
          the number is too large, in which case it switches to ’e’ exponent
          notation.
          
          
‘n’       Number.  This is the same as ’g’ (for floats) or ’d’ (for integers),
          except that it uses the current locale setting to insert the appropriate
          number separator characters.
          
          
‘%’       Percentage.  Multiplies the number by 100 and displays in fixed (’f’)
          format, followed by a percent sign.
          

Classes and types can define a *note __format__(): 308. method to
control how they’re formatted.  It receives a single argument, the
format specifier:

     def __format__(self, format_spec):
         if isinstance(format_spec, unicode):
             return unicode(str(self))
         else:
             return str(self)

There’s also a *note format(): 556. builtin that will format a single
value.  It calls the type’s *note __format__(): 308. method with the
provided specifier:

     >>> format(75.6564, '.2f')
     '75.66'

See also
........

*note Format String Syntax: 78a.

     The reference documentation for format fields.

PEP 3101(1) - Advanced String Formatting

     PEP written by Talin.  Implemented by Eric Smith.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3101


File: python.info,  Node: PEP 3105 print As a Function,  Next: PEP 3110 Exception-Handling Changes,  Prev: PEP 3101 Advanced String Formatting,  Up: What's New in Python 2 6

1.7.8 PEP 3105: ‘print’ As a Function
-------------------------------------

The ‘print’ statement becomes the *note print(): 21c. function in Python
3.0.  Making *note print(): 21c. a function makes it possible to replace
the function by doing ‘def print(...)’ or importing a new function from
somewhere else.

Python 2.6 has a ‘__future__’ import that removes ‘print’ as language
syntax, letting you use the functional form instead.  For example:

     >>> from __future__ import print_function
     >>> print('# of entries', len(dictionary), file=sys.stderr)

The signature of the new function is:

     def print(*args, sep=' ', end='\n', file=None)

The parameters are:

        * `args': positional arguments whose values will be printed out.

        * `sep': the separator, which will be printed between arguments.

        * `end': the ending text, which will be printed after all of the
          arguments have been output.

        * `file': the file object to which the output will be sent.

See also
........

PEP 3105(1) - Make print a function

     PEP written by Georg Brandl.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3105


File: python.info,  Node: PEP 3110 Exception-Handling Changes,  Next: PEP 3112 Byte Literals,  Prev: PEP 3105 print As a Function,  Up: What's New in Python 2 6

1.7.9 PEP 3110: Exception-Handling Changes
------------------------------------------

One error that Python programmers occasionally make is writing the
following code:

     try:
         ...
     except TypeError, ValueError:  # Wrong!
         ...

The author is probably trying to catch both *note TypeError: 309. and
*note ValueError: 321. exceptions, but this code actually does something
different: it will catch *note TypeError: 309. and bind the resulting
exception object to the local name ‘"ValueError"’.  The *note
ValueError: 321. exception will not be caught at all.  The correct code
specifies a tuple of exceptions:

     try:
         ...
     except (TypeError, ValueError):
         ...

This error happens because the use of the comma here is ambiguous: does
it indicate two different nodes in the parse tree, or a single node
that’s a tuple?

Python 3.0 makes this unambiguous by replacing the comma with the word
"as".  To catch an exception and store the exception object in the
variable ‘exc’, you must write:

     try:
         ...
     except TypeError as exc:
         ...

Python 3.0 will only support the use of "as", and therefore interprets
the first example as catching two different exceptions.  Python 2.6
supports both the comma and "as", so existing code will continue to
work.  We therefore suggest using "as" when writing new Python code that
will only be executed with 2.6.

See also
........

PEP 3110(1) - Catching Exceptions in Python 3000

     PEP written and implemented by Collin Winter.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3110


File: python.info,  Node: PEP 3112 Byte Literals,  Next: PEP 3116 New I/O Library,  Prev: PEP 3110 Exception-Handling Changes,  Up: What's New in Python 2 6

1.7.10 PEP 3112: Byte Literals
------------------------------

Python 3.0 adopts Unicode as the language’s fundamental string type and
denotes 8-bit literals differently, either as ‘b'string'’ or using a
*note bytes: 179. constructor.  For future compatibility, Python 2.6
adds *note bytes: 179. as a synonym for the *note str: 178. type, and it
also supports the ‘b''’ notation.

The 2.6 *note str: 178. differs from 3.0’s *note bytes: 179. type in
various ways; most notably, the constructor is completely different.  In
3.0, ‘bytes([65, 66, 67])’ is 3 elements long, containing the bytes
representing ‘ABC’; in 2.6, ‘bytes([65, 66, 67])’ returns the 12-byte
string representing the *note str(): 178. of the list.

The primary use of *note bytes: 179. in 2.6 will be to write tests of
object type such as ‘isinstance(x, bytes)’.  This will help the 2to3
converter, which can’t tell whether 2.x code intends strings to contain
either characters or 8-bit bytes; you can now use either *note bytes:
179. or *note str: 178. to represent your intention exactly, and the
resulting code will also be correct in Python 3.0.

There’s also a ‘__future__’ import that causes all string literals to
become Unicode strings.  This means that ‘\u’ escape sequences can be
used to include Unicode characters:

     from __future__ import unicode_literals

     s = ('\u751f\u3080\u304e\u3000\u751f\u3054'
          '\u3081\u3000\u751f\u305f\u307e\u3054')

     print len(s)               # 12 Unicode characters

At the C level, Python 3.0 will rename the existing 8-bit string type,
called ‘PyStringObject’ in Python 2.x, to *note PyBytesObject: 78e.
Python 2.6 uses ‘#define’ to support using the names *note
PyBytesObject(): 78e, *note PyBytes_Check(): 78f, *note
PyBytes_FromStringAndSize(): 790, and all the other functions and macros
used with strings.

Instances of the *note bytes: 179. type are immutable just as strings
are.  A new *note bytearray: 17a. type stores a mutable sequence of
bytes:

     >>> bytearray([65, 66, 67])
     bytearray(b'ABC')
     >>> b = bytearray(u'\u21ef\u3244', 'utf-8')
     >>> b
     bytearray(b'\xe2\x87\xaf\xe3\x89\x84')
     >>> b[0] = '\xe3'
     >>> b
     bytearray(b'\xe3\x87\xaf\xe3\x89\x84')
     >>> unicode(str(b), 'utf-8')
     u'\u31ef \u3244'

Byte arrays support most of the methods of string types, such as
‘startswith()’/‘endswith()’, ‘find()’/‘rfind()’, and some of the methods
of lists, such as ‘append()’, ‘pop()’, and ‘reverse()’.

     >>> b = bytearray('ABC')
     >>> b.append('d')
     >>> b.append(ord('e'))
     >>> b
     bytearray(b'ABCde')

There’s also a corresponding C API, with *note PyByteArray_FromObject():
791, *note PyByteArray_FromStringAndSize(): 792, and various other
functions.

See also
........

PEP 3112(1) - Bytes literals in Python 3000

     PEP written by Jason Orendorff; backported to 2.6 by Christian
     Heimes.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3112


File: python.info,  Node: PEP 3116 New I/O Library,  Next: PEP 3118 Revised Buffer Protocol,  Prev: PEP 3112 Byte Literals,  Up: What's New in Python 2 6

1.7.11 PEP 3116: New I/O Library
--------------------------------

Python’s built-in file objects support a number of methods, but
file-like objects don’t necessarily support all of them.  Objects that
imitate files usually support ‘read()’ and ‘write()’, but they may not
support *note readline(): da, for example.  Python 3.0 introduces a
layered I/O library in the *note io: 9e. module that separates buffering
and text-handling features from the fundamental read and write
operations.

There are three levels of abstract base classes provided by the *note
io: 9e. module:

   * ‘RawIOBase’ defines raw I/O operations: ‘read()’, ‘readinto()’,
     ‘write()’, ‘seek()’, ‘tell()’, ‘truncate()’, and ‘close()’.  Most
     of the methods of this class will often map to a single system
     call.  There are also ‘readable()’, ‘writable()’, and ‘seekable()’
     methods for determining what operations a given object will allow.

     Python 3.0 has concrete implementations of this class for files and
     sockets, but Python 2.6 hasn’t restructured its file and socket
     objects in this way.

   * ‘BufferedIOBase’ is an abstract base class that buffers data in
     memory to reduce the number of system calls used, making I/O
     processing more efficient.  It supports all of the methods of
     ‘RawIOBase’, and adds a ‘raw’ attribute holding the underlying raw
     object.

     There are five concrete classes implementing this ABC.
     ‘BufferedWriter’ and ‘BufferedReader’ are for objects that support
     write-only or read-only usage that have a ‘seek()’ method for
     random access.  ‘BufferedRandom’ objects support read and write
     access upon the same underlying stream, and ‘BufferedRWPair’ is for
     objects such as TTYs that have both read and write operations
     acting upon unconnected streams of data.  The ‘BytesIO’ class
     supports reading, writing, and seeking over an in-memory buffer.

   * ‘TextIOBase’: Provides functions for reading and writing strings
     (remember, strings will be Unicode in Python 3.0), and supporting
     *note universal newlines: 794.  ‘TextIOBase’ defines the *note
     readline(): da. method and supports iteration upon objects.

     There are two concrete implementations.  ‘TextIOWrapper’ wraps a
     buffered I/O object, supporting all of the methods for text I/O and
     adding a ‘buffer’ attribute for access to the underlying object.
     ‘StringIO’ simply buffers everything in memory without ever writing
     anything to disk.

     (In Python 2.6, *note io.StringIO: 1b1. is implemented in pure
     Python, so it’s pretty slow.  You should therefore stick with the
     existing ‘StringIO’ module or ‘cStringIO’ for now.  At some point
     Python 3.0’s *note io: 9e. module will be rewritten into C for
     speed, and perhaps the C implementation will be backported to the
     2.x releases.)

In Python 2.6, the underlying implementations haven’t been restructured
to build on top of the *note io: 9e. module’s classes.  The module is
being provided to make it easier to write code that’s forward-compatible
with 3.0, and to save developers the effort of writing their own
implementations of buffering and text I/O.

See also
........

PEP 3116(1) - New I/O

     PEP written by Daniel Stutzbach, Mike Verdone, and Guido van
     Rossum.  Code by Guido van Rossum, Georg Brandl, Walter Doerwald,
     Jeremy Hylton, Martin von Löwis, Tony Lownds, and others.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3116


File: python.info,  Node: PEP 3118 Revised Buffer Protocol,  Next: PEP 3119 Abstract Base Classes,  Prev: PEP 3116 New I/O Library,  Up: What's New in Python 2 6

1.7.12 PEP 3118: Revised Buffer Protocol
----------------------------------------

The buffer protocol is a C-level API that lets Python types exchange
pointers into their internal representations.  A memory-mapped file can
be viewed as a buffer of characters, for example, and this lets another
module such as *note re: d9. treat memory-mapped files as a string of
characters to be searched.

The primary users of the buffer protocol are numeric-processing packages
such as NumPy, which expose the internal representation of arrays so
that callers can write data directly into an array instead of going
through a slower API. This PEP updates the buffer protocol in light of
experience from NumPy development, adding a number of new features such
as indicating the shape of an array or locking a memory region.

The most important new C API function is ‘PyObject_GetBuffer(PyObject
*obj, Py_buffer *view, int flags)’, which takes an object and a set of
flags, and fills in the ‘Py_buffer’ structure with information about the
object’s memory representation.  Objects can use this operation to lock
memory in place while an external caller could be modifying the
contents, so there’s a corresponding ‘PyBuffer_Release(Py_buffer *view)’
to indicate that the external caller is done.

The `flags' argument to *note PyObject_GetBuffer(): 796. specifies
constraints upon the memory returned.  Some examples are:

        * ‘PyBUF_WRITABLE’ indicates that the memory must be writable.

        * ‘PyBUF_LOCK’ requests a read-only or exclusive lock on the
          memory.

        * ‘PyBUF_C_CONTIGUOUS’ and ‘PyBUF_F_CONTIGUOUS’ requests a
          C-contiguous (last dimension varies the fastest) or
          Fortran-contiguous (first dimension varies the fastest) array
          layout.

Two new argument codes for *note PyArg_ParseTuple(): 4fa, ‘s*’ and ‘z*’,
return locked buffer objects for a parameter.

See also
........

PEP 3118(1) - Revising the buffer protocol

     PEP written by Travis Oliphant and Carl Banks; implemented by
     Travis Oliphant.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3118


File: python.info,  Node: PEP 3119 Abstract Base Classes,  Next: PEP 3127 Integer Literal Support and Syntax,  Prev: PEP 3118 Revised Buffer Protocol,  Up: What's New in Python 2 6

1.7.13 PEP 3119: Abstract Base Classes
--------------------------------------

Some object-oriented languages such as Java support interfaces,
declaring that a class has a given set of methods or supports a given
access protocol.  Abstract Base Classes (or ABCs) are an equivalent
feature for Python.  The ABC support consists of an *note abc: 4. module
containing a metaclass called ‘ABCMeta’, special handling of this
metaclass by the *note isinstance(): 798. and *note issubclass(): 799.
builtins, and a collection of basic ABCs that the Python developers
think will be widely useful.  Future versions of Python will probably
add more ABCs.

Let’s say you have a particular class and wish to know whether it
supports dictionary-style access.  The phrase "dictionary-style" is
vague, however.  It probably means that accessing items with ‘obj[1]’
works.  Does it imply that setting items with ‘obj[2] = value’ works?
Or that the object will have ‘keys()’, ‘values()’, and ‘items()’
methods?  What about the iterative variants such as ‘iterkeys()’?  *note
copy(): 25. and ‘update()’?  Iterating over the object with *note
iter(): 79a.?

The Python 2.6 *note collections: 1e. module includes a number of
different ABCs that represent these distinctions.  ‘Iterable’ indicates
that a class defines *note __iter__(): 79b, and ‘Container’ means the
class defines a *note __contains__(): 79c. method and therefore supports
‘x in y’ expressions.  The basic dictionary interface of getting items,
setting items, and ‘keys()’, ‘values()’, and ‘items()’, is defined by
the ‘MutableMapping’ ABC.

You can derive your own classes from a particular ABC to indicate they
support that ABC’s interface:

     import collections

     class Storage(collections.MutableMapping):
         ...

Alternatively, you could write the class without deriving from the
desired ABC and instead register the class by calling the ABC’s
‘register()’ method:

     import collections

     class Storage:
         ...

     collections.MutableMapping.register(Storage)

For classes that you write, deriving from the ABC is probably clearer.
The ‘register()’ method is useful when you’ve written a new ABC that can
describe an existing type or class, or if you want to declare that some
third-party class implements an ABC. For example, if you defined a
‘PrintableType’ ABC, it’s legal to do:

     # Register Python's types
     PrintableType.register(int)
     PrintableType.register(float)
     PrintableType.register(str)

Classes should obey the semantics specified by an ABC, but Python can’t
check this; it’s up to the class author to understand the ABC’s
requirements and to implement the code accordingly.

To check whether an object supports a particular interface, you can now
write:

     def func(d):
         if not isinstance(d, collections.MutableMapping):
             raise ValueError("Mapping object expected, not %r" % d)

Don’t feel that you must now begin writing lots of checks as in the
above example.  Python has a strong tradition of duck-typing, where
explicit type-checking is never done and code simply calls methods on an
object, trusting that those methods will be there and raising an
exception if they aren’t.  Be judicious in checking for ABCs and only do
it where it’s absolutely necessary.

You can write your own ABCs by using ‘abc.ABCMeta’ as the metaclass in a
class definition:

     from abc import ABCMeta, abstractmethod

     class Drawable():
         __metaclass__ = ABCMeta

         @abstractmethod
         def draw(self, x, y, scale=1.0):
             pass

         def draw_doubled(self, x, y):
             self.draw(x, y, scale=2.0)


     class Square(Drawable):
         def draw(self, x, y, scale):
             ...

In the ‘Drawable’ ABC above, the ‘draw_doubled()’ method renders the
object at twice its size and can be implemented in terms of other
methods described in ‘Drawable’.  Classes implementing this ABC
therefore don’t need to provide their own implementation of
‘draw_doubled()’, though they can do so.  An implementation of ‘draw()’
is necessary, though; the ABC can’t provide a useful generic
implementation.

You can apply the ‘@abstractmethod’ decorator to methods such as
‘draw()’ that must be implemented; Python will then raise an exception
for classes that don’t define the method.  Note that the exception is
only raised when you actually try to create an instance of a subclass
lacking the method:

     >>> class Circle(Drawable):
     ...     pass
     ...
     >>> c = Circle()
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     TypeError: Can't instantiate abstract class Circle with abstract methods draw
     >>>

Abstract data attributes can be declared using the ‘@abstractproperty’
decorator:

     from abc import abstractproperty
     ...

     @abstractproperty
     def readonly(self):
        return self._x

Subclasses must then define a ‘readonly()’ property.

See also
........

PEP 3119(1) - Introducing Abstract Base Classes

     PEP written by Guido van Rossum and Talin.  Implemented by Guido
     van Rossum.  Backported to 2.6 by Benjamin Aranguren, with Alex
     Martelli.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3119


File: python.info,  Node: PEP 3127 Integer Literal Support and Syntax,  Next: PEP 3129 Class Decorators,  Prev: PEP 3119 Abstract Base Classes,  Up: What's New in Python 2 6

1.7.14 PEP 3127: Integer Literal Support and Syntax
---------------------------------------------------

Python 3.0 changes the syntax for octal (base-8) integer literals,
prefixing them with "0o" or "0O" instead of a leading zero, and adds
support for binary (base-2) integer literals, signalled by a "0b" or
"0B" prefix.

Python 2.6 doesn’t drop support for a leading 0 signalling an octal
number, but it does add support for "0o" and "0b":

     >>> 0o21, 2*8 + 1
     (17, 17)
     >>> 0b101111
     47

The *note oct(): 6c8. builtin still returns numbers prefixed with a
leading zero, and a new *note bin(): 69b. builtin returns the binary
representation for a number:

     >>> oct(42)
     '052'
     >>> future_builtins.oct(42)
     '0o52'
     >>> bin(173)
     '0b10101101'

The *note int(): 185. and ‘long()’ builtins will now accept the "0o" and
"0b" prefixes when base-8 or base-2 are requested, or when the `base'
argument is zero (signalling that the base used should be determined
from the string):

     >>> int ('0o52', 0)
     42
     >>> int('1101', 2)
     13
     >>> int('0b1101', 2)
     13
     >>> int('0b1101', 0)
     13

See also
........

PEP 3127(1) - Integer Literal Support and Syntax

     PEP written by Patrick Maupin; backported to 2.6 by Eric Smith.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3127


File: python.info,  Node: PEP 3129 Class Decorators,  Next: PEP 3141 A Type Hierarchy for Numbers,  Prev: PEP 3127 Integer Literal Support and Syntax,  Up: What's New in Python 2 6

1.7.15 PEP 3129: Class Decorators
---------------------------------

Decorators have been extended from functions to classes.  It’s now legal
to write:

     @foo
     @bar
     class A:
       pass

This is equivalent to:

     class A:
       pass

     A = foo(bar(A))

See also
........

PEP 3129(1) - Class Decorators

     PEP written by Collin Winter.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3129


File: python.info,  Node: PEP 3141 A Type Hierarchy for Numbers,  Next: Other Language Changes<6>,  Prev: PEP 3129 Class Decorators,  Up: What's New in Python 2 6

1.7.16 PEP 3141: A Type Hierarchy for Numbers
---------------------------------------------

Python 3.0 adds several abstract base classes for numeric types inspired
by Scheme’s numeric tower.  These classes were backported to 2.6 as the
*note numbers: bd. module.

The most general ABC is ‘Number’.  It defines no operations at all, and
only exists to allow checking if an object is a number by doing
‘isinstance(obj, Number)’.

‘Complex’ is a subclass of ‘Number’.  Complex numbers can undergo the
basic operations of addition, subtraction, multiplication, division, and
exponentiation, and you can retrieve the real and imaginary parts and
obtain a number’s conjugate.  Python’s built-in complex type is an
implementation of ‘Complex’.

‘Real’ further derives from ‘Complex’, and adds operations that only
work on real numbers: ‘floor()’, ‘trunc()’, rounding, taking the
remainder mod N, floor division, and comparisons.

‘Rational’ numbers derive from ‘Real’, have ‘numerator’ and
‘denominator’ properties, and can be converted to floats.  Python 2.6
adds a simple rational-number class, ‘Fraction’, in the *note fractions:
82. module.  (It’s called ‘Fraction’ instead of ‘Rational’ to avoid a
name clash with *note numbers.Rational: 6b5.)

‘Integral’ numbers derive from ‘Rational’, and can be shifted left and
right with ‘<<’ and ‘>>’, combined using bitwise operations such as ‘&’
and ‘|’, and can be used as array indexes and slice boundaries.

In Python 3.0, the PEP slightly redefines the existing builtins *note
round(): 6d1, *note math.floor(): 7a0, *note math.ceil(): 7a1, and adds
a new one, *note math.trunc(): 7a2, that’s been backported to Python
2.6.  *note math.trunc(): 7a2. rounds toward zero, returning the closest
‘Integral’ that’s between the function’s argument and zero.

See also
........

PEP 3141(1) - A Type Hierarchy for Numbers

     PEP written by Jeffrey Yasskin.

Scheme’s numerical tower(2), from the Guile manual.

Scheme’s number datatypes(3) from the R5RS Scheme specification.

* Menu:

* The fractions Module:: 

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3141

   (2) 
http://www.gnu.org/software/guile/manual/html_node/Numerical-Tower.html#Numerical-Tower

   (3) 
http://schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.2


File: python.info,  Node: The fractions Module,  Up: PEP 3141 A Type Hierarchy for Numbers

1.7.16.1 The ‘fractions’ Module
...............................

To fill out the hierarchy of numeric types, the *note fractions: 82.
module provides a rational-number class.  Rational numbers store their
values as a numerator and denominator forming a fraction, and can
exactly represent numbers such as ‘2/3’ that floating-point numbers can
only approximate.

The ‘Fraction’ constructor takes two ‘Integral’ values that will be the
numerator and denominator of the resulting fraction.

     >>> from fractions import Fraction
     >>> a = Fraction(2, 3)
     >>> b = Fraction(2, 5)
     >>> float(a), float(b)
     (0.66666666666666663, 0.40000000000000002)
     >>> a+b
     Fraction(16, 15)
     >>> a/b
     Fraction(5, 3)

For converting floating-point numbers to rationals, the float type now
has an ‘as_integer_ratio()’ method that returns the numerator and
denominator for a fraction that evaluates to the same floating-point
value:

     >>> (2.5) .as_integer_ratio()
     (5, 2)
     >>> (3.1415) .as_integer_ratio()
     (7074029114692207L, 2251799813685248L)
     >>> (1./3) .as_integer_ratio()
     (6004799503160661L, 18014398509481984L)

Note that values that can only be approximated by floating-point
numbers, such as 1./3, are not simplified to the number being
approximated; the fraction attempts to match the floating-point value
`exactly'.

The *note fractions: 82. module is based upon an implementation by
Sjoerd Mullender that was in Python’s ‘Demo/classes/’ directory for a
long time.  This implementation was significantly updated by Jeffrey
Yasskin.


File: python.info,  Node: Other Language Changes<6>,  Next: New and Improved Modules<2>,  Prev: PEP 3141 A Type Hierarchy for Numbers,  Up: What's New in Python 2 6

1.7.17 Other Language Changes
-----------------------------

Some smaller changes made to the core Python language are:

   * Directories and zip archives containing a ‘__main__.py’ file can
     now be executed directly by passing their name to the interpreter.
     The directory or zip archive is automatically inserted as the first
     entry in sys.path.  (Suggestion and initial patch by Andy Chu,
     subsequently revised by Phillip J. Eby and Nick Coghlan; issue
     1739468(1).)

   * The *note hasattr(): 55e. function was catching and ignoring all
     errors, under the assumption that they meant a *note __getattr__():
     560. method was failing somehow and the return value of *note
     hasattr(): 55e. would therefore be ‘False’.  This logic shouldn’t
     be applied to *note KeyboardInterrupt: 6c0. and *note SystemExit:
     6bf, however; Python 2.6 will no longer discard such exceptions
     when *note hasattr(): 55e. encounters them.  (Fixed by Benjamin
     Peterson; issue 2196(2).)

   * When calling a function using the ‘**’ syntax to provide keyword
     arguments, you are no longer required to use a Python dictionary;
     any mapping will now work:

          >>> def f(**kw):
          ...    print sorted(kw)
          ...
          >>> ud=UserDict.UserDict()
          >>> ud['a'] = 1
          >>> ud['b'] = 'string'
          >>> f(**ud)
          ['a', 'b']

     (Contributed by Alexander Belopolsky; issue 1686487(3).)

     It’s also become legal to provide keyword arguments after a ‘*args’
     argument to a function call.

          >>> def f(*args, **kw):
          ...     print args, kw
          ...
          >>> f(1,2,3, *(4,5,6), keyword=13)
          (1, 2, 3, 4, 5, 6) {'keyword': 13}

     Previously this would have been a syntax error.  (Contributed by
     Amaury Forgeot d’Arc; issue 3473(4).)

   * A new builtin, ‘next(iterator, [default])’ returns the next item
     from the specified iterator.  If the `default' argument is
     supplied, it will be returned if `iterator' has been exhausted;
     otherwise, the *note StopIteration: 7a5. exception will be raised.
     (Backported in issue 2719(5).)

   * Tuples now have ‘index()’ and ‘count()’ methods matching the list
     type’s ‘index()’ and ‘count()’ methods:

          >>> t = (0,1,2,3,4,0,1,2)
          >>> t.index(3)
          3
          >>> t.count(0)
          2

     (Contributed by Raymond Hettinger)

   * The built-in types now have improved support for extended slicing
     syntax, accepting various combinations of ‘(start, stop, step)’.
     Previously, the support was partial and certain corner cases
     wouldn’t work.  (Implemented by Thomas Wouters.)

   * Properties now have three attributes, ‘getter’, ‘setter’ and
     ‘deleter’, that are decorators providing useful shortcuts for
     adding a getter, setter or deleter function to an existing
     property.  You would use them like this:

          class C(object):
              @property
              def x(self):
                  return self._x

              @x.setter
              def x(self, value):
                  self._x = value

              @x.deleter
              def x(self):
                  del self._x

          class D(C):
              @C.x.getter
              def x(self):
                  return self._x * 2

              @x.setter
              def x(self, value):
                  self._x = value / 2

   * Several methods of the built-in set types now accept multiple
     iterables: ‘intersection()’, ‘intersection_update()’, ‘union()’,
     ‘update()’, ‘difference()’ and ‘difference_update()’.

          >>> s=set('1234567890')
          >>> s.intersection('abc123', 'cdf246')  # Intersection between all inputs
          set(['2'])
          >>> s.difference('246', '789')
          set(['1', '0', '3', '5'])

     (Contributed by Raymond Hettinger.)

   * Many floating-point features were added.  The *note float(): 327.
     function will now turn the string ‘nan’ into an IEEE 754 Not A
     Number value, and ‘+inf’ and ‘-inf’ into positive or negative
     infinity.  This works on any platform with IEEE 754 semantics.
     (Contributed by Christian Heimes; issue 1635(6).)

     Other functions in the *note math: ae. module, ‘isinf()’ and
     ‘isnan()’, return true if their floating-point argument is infinite
     or Not A Number.  (issue 1640(7))

     Conversion functions were added to convert floating-point numbers
     into hexadecimal strings (issue 3008(8)).  These functions convert
     floats to and from a string representation without introducing
     rounding errors from the conversion between decimal and binary.
     Floats have a *note hex(): 6c9. method that returns a string
     representation, and the ‘float.fromhex()’ method converts a string
     back into a number:

          >>> a = 3.75
          >>> a.hex()
          '0x1.e000000000000p+1'
          >>> float.fromhex('0x1.e000000000000p+1')
          3.75
          >>> b=1./3
          >>> b.hex()
          '0x1.5555555555555p-2'

   * A numerical nicety: when creating a complex number from two floats
     on systems that support signed zeros (-0 and +0), the *note
     complex(): 326. constructor will now preserve the sign of the zero.
     (Fixed by Mark T. Dickinson; issue 1507(9).)

   * Classes that inherit a *note __hash__(): 39f. method from a parent
     class can set ‘__hash__ = None’ to indicate that the class isn’t
     hashable.  This will make ‘hash(obj)’ raise a *note TypeError: 309.
     and the class will not be indicated as implementing the ‘Hashable’
     ABC.

     You should do this when you’ve defined a ‘__cmp__()’ or *note
     __eq__(): 68d. method that compares objects by their value rather
     than by identity.  All objects have a default hash method that uses
     ‘id(obj)’ as the hash value.  There’s no tidy way to remove the
     *note __hash__(): 39f. method inherited from a parent class, so
     assigning ‘None’ was implemented as an override.  At the C level,
     extensions can set ‘tp_hash’ to *note
     PyObject_HashNotImplemented(): 7a6.  (Fixed by Nick Coghlan and
     Amaury Forgeot d’Arc; issue 2235(10).)

   * The *note GeneratorExit: 7a7. exception now subclasses *note
     BaseException: 6bd. instead of *note Exception: 6be.  This means
     that an exception handler that does ‘except Exception:’ will not
     inadvertently catch *note GeneratorExit: 7a7.  (Contributed by Chad
     Austin; issue 1537(11).)

   * Generator objects now have a ‘gi_code’ attribute that refers to the
     original code object backing the generator.  (Contributed by Collin
     Winter; issue 1473257(12).)

   * The *note compile(): 6fe. built-in function now accepts keyword
     arguments as well as positional parameters.  (Contributed by Thomas
     Wouters; issue 1444529(13).)

   * The *note complex(): 326. constructor now accepts strings
     containing parenthesized complex numbers, meaning that
     ‘complex(repr(cplx))’ will now round-trip values.  For example,
     ‘complex('(3+4j)')’ now returns the value (3+4j).  (issue
     1491866(14))

   * The string ‘translate()’ method now accepts ‘None’ as the
     translation table parameter, which is treated as the identity
     transformation.  This makes it easier to carry out operations that
     only delete characters.  (Contributed by Bengt Richter and
     implemented by Raymond Hettinger; issue 1193128(15).)

   * The built-in *note dir(): 7a8. function now checks for a *note
     __dir__(): 7a9. method on the objects it receives.  This method
     must return a list of strings containing the names of valid
     attributes for the object, and lets the object control the value
     that *note dir(): 7a8. produces.  Objects that have *note
     __getattr__(): 560. or *note __getattribute__(): 561. methods can
     use this to advertise pseudo-attributes they will honor.  (issue
     1591665(16))

   * Instance method objects have new attributes for the object and
     function comprising the method; the new synonym for ‘im_self’ is
     ‘__self__’, and ‘im_func’ is also available as ‘__func__’.  The old
     names are still supported in Python 2.6, but are gone in 3.0.

   * An obscure change: when you use the *note locals(): 7aa. function
     inside a *note class: 6ce. statement, the resulting dictionary no
     longer returns free variables.  (Free variables, in this case, are
     variables referenced in the *note class: 6ce. statement that aren’t
     attributes of the class.)

* Menu:

* Optimizations: Optimizations<5>. 
* Interpreter Changes: Interpreter Changes<2>. 

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1739468

   (2) https://bugs.python.org/issue2196

   (3) https://bugs.python.org/issue1686487

   (4) https://bugs.python.org/issue3473

   (5) https://bugs.python.org/issue2719

   (6) https://bugs.python.org/issue1635

   (7) https://bugs.python.org/issue1640

   (8) https://bugs.python.org/issue3008

   (9) https://bugs.python.org/issue1507

   (10) https://bugs.python.org/issue2235

   (11) https://bugs.python.org/issue1537

   (12) https://bugs.python.org/issue1473257

   (13) https://bugs.python.org/issue1444529

   (14) https://bugs.python.org/issue1491866

   (15) https://bugs.python.org/issue1193128

   (16) https://bugs.python.org/issue1591665


File: python.info,  Node: Optimizations<5>,  Next: Interpreter Changes<2>,  Up: Other Language Changes<6>

1.7.17.1 Optimizations
......................

   * The *note warnings: 11f. module has been rewritten in C. This makes
     it possible to invoke warnings from the parser, and may also make
     the interpreter’s startup faster.  (Contributed by Neal Norwitz and
     Brett Cannon; issue 1631171(1).)

   * Type objects now have a cache of methods that can reduce the work
     required to find the correct method implementation for a particular
     class; once cached, the interpreter doesn’t need to traverse base
     classes to figure out the right method to call.  The cache is
     cleared if a base class or the class itself is modified, so the
     cache should remain correct even in the face of Python’s dynamic
     nature.  (Original optimization implemented by Armin Rigo, updated
     for Python 2.6 by Kevin Jacobs; issue 1700288(2).)

     By default, this change is only applied to types that are included
     with the Python core.  Extension modules may not necessarily be
     compatible with this cache, so they must explicitly add
     ‘Py_TPFLAGS_HAVE_VERSION_TAG’ to the module’s ‘tp_flags’ field to
     enable the method cache.  (To be compatible with the method cache,
     the extension module’s code must not directly access and modify the
     ‘tp_dict’ member of any of the types it implements.  Most modules
     don’t do this, but it’s impossible for the Python interpreter to
     determine that.  See issue 1878(3) for some discussion.)

   * Function calls that use keyword arguments are significantly faster
     by doing a quick pointer comparison, usually saving the time of a
     full string comparison.  (Contributed by Raymond Hettinger, after
     an initial implementation by Antoine Pitrou; issue 1819(4).)

   * All of the functions in the *note struct: f3. module have been
     rewritten in C, thanks to work at the Need For Speed sprint.
     (Contributed by Raymond Hettinger.)

   * Some of the standard built-in types now set a bit in their type
     objects.  This speeds up checking whether an object is a subclass
     of one of these types.  (Contributed by Neal Norwitz.)

   * Unicode strings now use faster code for detecting whitespace and
     line breaks; this speeds up the ‘split()’ method by about 25% and
     ‘splitlines()’ by 35%.  (Contributed by Antoine Pitrou.)  Memory
     usage is reduced by using pymalloc for the Unicode string’s data.

   * The ‘with’ statement now stores the *note __exit__(): 703. method
     on the stack, producing a small speedup.  (Implemented by Jeffrey
     Yasskin.)

   * To reduce memory usage, the garbage collector will now clear
     internal free lists when garbage-collecting the highest generation
     of objects.  This may return memory to the operating system sooner.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1631171

   (2) https://bugs.python.org/issue1700288

   (3) https://bugs.python.org/issue1878

   (4) https://bugs.python.org/issue1819


File: python.info,  Node: Interpreter Changes<2>,  Prev: Optimizations<5>,  Up: Other Language Changes<6>

1.7.17.2 Interpreter Changes
............................

Two command-line options have been reserved for use by other Python
implementations.  The *note -J: 7ae. switch has been reserved for use by
Jython for Jython-specific options, such as switches that are passed to
the underlying JVM. *note -X: 3a6. has been reserved for options
specific to a particular implementation of Python such as CPython,
Jython, or IronPython.  If either option is used with Python 2.6, the
interpreter will report that the option isn’t currently used.

Python can now be prevented from writing ‘.pyc’ or ‘.pyo’ files by
supplying the *note -B: 7af. switch to the Python interpreter, or by
setting the *note PYTHONDONTWRITEBYTECODE: 7b0. environment variable
before running the interpreter.  This setting is available to Python
programs as the ‘sys.dont_write_bytecode’ variable, and Python code can
change the value to modify the interpreter’s behaviour.  (Contributed by
Neal Norwitz and Georg Brandl.)

The encoding used for standard input, output, and standard error can be
specified by setting the *note PYTHONIOENCODING: 2d9. environment
variable before running the interpreter.  The value should be a string
in the form ‘<encoding>’ or ‘<encoding>:<errorhandler>’.  The `encoding'
part specifies the encoding’s name, e.g.  ‘utf-8’ or ‘latin-1’; the
optional `errorhandler' part specifies what to do with characters that
can’t be handled by the encoding, and should be one of "error",
"ignore", or "replace".  (Contributed by Martin von Löwis.)


File: python.info,  Node: New and Improved Modules<2>,  Next: Deprecations and Removals,  Prev: Other Language Changes<6>,  Up: What's New in Python 2 6

1.7.18 New and Improved Modules
-------------------------------

As in every release, Python’s standard library received a number of
enhancements and bug fixes.  Here’s a partial list of the most notable
changes, sorted alphabetically by module name.  Consult the ‘Misc/NEWS’
file in the source tree for a more complete list of changes, or look
through the Subversion logs for all the details.

   * The *note asyncore: b. and *note asynchat: 9. modules are being
     actively maintained again, and a number of patches and bugfixes
     were applied.  (Maintained by Josiah Carlson; see issue 1736190(1)
     for one patch.)

   * The ‘bsddb’ module also has a new maintainer, Jesús Cea Avión, and
     the package is now available as a standalone package.  The web page
     for the package is www.jcea.es/programacion/pybsddb.htm(2).  The
     plan is to remove the package from the standard library in Python
     3.0, because its pace of releases is much more frequent than
     Python’s.

     The ‘bsddb.dbshelve’ module now uses the highest pickling protocol
     available, instead of restricting itself to protocol 1.
     (Contributed by W. Barnes.)

   * The *note cgi: 16. module will now read variables from the query
     string of an HTTP POST request.  This makes it possible to use form
     actions with URLs that include query strings such as
     "/cgi-bin/add.py?category=1".  (Contributed by Alexandre Fiori and
     Nubis; issue 1817(3).)

     The ‘parse_qs()’ and ‘parse_qsl()’ functions have been relocated
     from the *note cgi: 16. module to the ‘urlparse’ module.  The
     versions still available in the *note cgi: 16. module will trigger
     *note PendingDeprecationWarning: 6fc. messages in 2.6 (issue
     600362(4)).

   * The *note cmath: 19. module underwent extensive revision,
     contributed by Mark Dickinson and Christian Heimes.  Five new
     functions were added:

        * ‘polar()’ converts a complex number to polar form, returning
          the modulus and argument of the complex number.

        * ‘rect()’ does the opposite, turning a modulus, argument pair
          back into the corresponding complex number.

        * ‘phase()’ returns the argument (also called the angle) of a
          complex number.

        * ‘isnan()’ returns True if either the real or imaginary part of
          its argument is a NaN.

        * ‘isinf()’ returns True if either the real or imaginary part of
          its argument is infinite.

     The revisions also improved the numerical soundness of the *note
     cmath: 19. module.  For all functions, the real and imaginary parts
     of the results are accurate to within a few units of least
     precision (ulps) whenever possible.  See issue 1381(5) for the
     details.  The branch cuts for ‘asinh()’, ‘atanh()’: and ‘atan()’
     have also been corrected.

     The tests for the module have been greatly expanded; nearly 2000
     new test cases exercise the algebraic functions.

     On IEEE 754 platforms, the *note cmath: 19. module now handles IEEE
     754 special values and floating-point exceptions in a manner
     consistent with Annex ’G’ of the C99 standard.

   * A new data type in the *note collections: 1e. module:
     ‘namedtuple(typename, fieldnames)’ is a factory function that
     creates subclasses of the standard tuple whose fields are
     accessible by name as well as index.  For example:

          >>> var_type = collections.namedtuple('variable',
          ...             'id name type size')
          >>> # Names are separated by spaces or commas.
          >>> # 'id, name, type, size' would also work.
          >>> var_type._fields
          ('id', 'name', 'type', 'size')

          >>> var = var_type(1, 'frequency', 'int', 4)
          >>> print var[0], var.id    # Equivalent
          1 1
          >>> print var[2], var.type  # Equivalent
          int int
          >>> var._asdict()
          {'size': 4, 'type': 'int', 'id': 1, 'name': 'frequency'}
          >>> v2 = var._replace(name='amplitude')
          >>> v2
          variable(id=1, name='amplitude', type='int', size=4)

     Several places in the standard library that returned tuples have
     been modified to return ‘namedtuple’ instances.  For example, the
     ‘Decimal.as_tuple()’ method now returns a named tuple with ‘sign’,
     ‘digits’, and ‘exponent’ fields.

     (Contributed by Raymond Hettinger.)

   * Another change to the *note collections: 1e. module is that the
     ‘deque’ type now supports an optional `maxlen' parameter; if
     supplied, the deque’s size will be restricted to no more than
     `maxlen' items.  Adding more items to a full deque causes old items
     to be discarded.

          >>> from collections import deque
          >>> dq=deque(maxlen=3)
          >>> dq
          deque([], maxlen=3)
          >>> dq.append(1); dq.append(2); dq.append(3)
          >>> dq
          deque([1, 2, 3], maxlen=3)
          >>> dq.append(4)
          >>> dq
          deque([2, 3, 4], maxlen=3)

     (Contributed by Raymond Hettinger.)

   * The ‘Cookie’ module’s ‘Morsel’ objects now support an ‘httponly’
     attribute.  In some browsers.  cookies with this attribute set
     cannot be accessed or manipulated by JavaScript code.  (Contributed
     by Arvin Schnell; issue 1638033(6).)

   * A new window method in the *note curses: 2b. module, ‘chgat()’,
     changes the display attributes for a certain number of characters
     on a single line.  (Contributed by Fabian Kreutz.)

          # Boldface text starting at y=0,x=21
          # and affecting the rest of the line.
          stdscr.chgat(0, 21, curses.A_BOLD)

     The ‘Textbox’ class in the *note curses.textpad: 2e. module now
     supports editing in insert mode as well as overwrite mode.  Insert
     mode is enabled by supplying a true value for the `insert_mode'
     parameter when creating the ‘Textbox’ instance.

   * The *note datetime: 2f. module’s ‘strftime()’ methods now support a
     ‘%f’ format code that expands to the number of microseconds in the
     object, zero-padded on the left to six places.  (Contributed by
     Skip Montanaro; issue 1158(7).)

   * The *note decimal: 34. module was updated to version 1.66 of the
     General Decimal Specification(8).  New features include some
     methods for some basic mathematical functions such as ‘exp()’ and
     ‘log10()’:

          >>> Decimal(1).exp()
          Decimal("2.718281828459045235360287471")
          >>> Decimal("2.7182818").ln()
          Decimal("0.9999999895305022877376682436")
          >>> Decimal(1000).log10()
          Decimal("3")

     The ‘as_tuple()’ method of ‘Decimal’ objects now returns a named
     tuple with ‘sign’, ‘digits’, and ‘exponent’ fields.

     (Implemented by Facundo Batista and Mark Dickinson.  Named tuple
     support added by Raymond Hettinger.)

   * The *note difflib: 35. module’s ‘SequenceMatcher’ class now returns
     named tuples representing matches, with ‘a’, ‘b’, and ‘size’
     attributes.  (Contributed by Raymond Hettinger.)

   * An optional ‘timeout’ parameter, specifying a timeout measured in
     seconds, was added to the *note ftplib.FTP: 3ec. class constructor
     as well as the ‘connect()’ method.  (Added by Facundo Batista.)
     Also, the ‘FTP’ class’s ‘storbinary()’ and ‘storlines()’ now take
     an optional `callback' parameter that will be called with each
     block of data after the data has been sent.  (Contributed by Phil
     Schwartz; issue 1221598(9).)

   * The ‘reduce()’ built-in function is also available in the *note
     functools: 84. module.  In Python 3.0, the builtin has been dropped
     and ‘reduce()’ is only available from *note functools: 84.;
     currently there are no plans to drop the builtin in the 2.x series.
     (Patched by Christian Heimes; issue 1739906(10).)

   * When possible, the *note getpass: 87. module will now use
     ‘/dev/tty’ to print a prompt message and read the password, falling
     back to standard error and standard input.  If the password may be
     echoed to the terminal, a warning is printed before the prompt is
     displayed.  (Contributed by Gregory P. Smith.)

   * The *note glob.glob(): 7b2. function can now return Unicode
     filenames if a Unicode path was used and Unicode filenames are
     matched within the directory.  (issue 1001604(11))

   * A new function in the *note heapq: 8d. module, ‘merge(iter1, iter2,
     ...)’, takes any number of iterables returning data in sorted
     order, and returns a new generator that returns the contents of all
     the iterators, also in sorted order.  For example:

          >>> list(heapq.merge([1, 3, 5, 9], [2, 8, 16]))
          [1, 2, 3, 5, 8, 9, 16]

     Another new function, ‘heappushpop(heap, item)’, pushes `item' onto
     `heap', then pops off and returns the smallest item.  This is more
     efficient than making a call to ‘heappush()’ and then ‘heappop()’.

     *note heapq: 8d. is now implemented to only use less-than
     comparison, instead of the less-than-or-equal comparison it
     previously used.  This makes *note heapq: 8d.’s usage of a type
     match the *note list.sort(): 63d. method.  (Contributed by Raymond
     Hettinger.)

   * An optional ‘timeout’ parameter, specifying a timeout measured in
     seconds, was added to the ‘httplib.HTTPConnection’ and
     ‘HTTPSConnection’ class constructors.  (Added by Facundo Batista.)

   * Most of the *note inspect: 9d. module’s functions, such as
     ‘getmoduleinfo()’ and ‘getargs()’, now return named tuples.  In
     addition to behaving like tuples, the elements of the return value
     can also be accessed as attributes.  (Contributed by Raymond
     Hettinger.)

     Some new functions in the module include ‘isgenerator()’,
     ‘isgeneratorfunction()’, and ‘isabstract()’.

   * The *note itertools: a0. module gained several new functions.

     ‘izip_longest(iter1, iter2, ...[, fillvalue])’ makes tuples from
     each of the elements; if some of the iterables are shorter than
     others, the missing values are set to `fillvalue'.  For example:

          >>> tuple(itertools.izip_longest([1,2,3], [1,2,3,4,5]))
          ((1, 1), (2, 2), (3, 3), (None, 4), (None, 5))

     ‘product(iter1, iter2, ..., [repeat=N])’ returns the Cartesian
     product of the supplied iterables, a set of tuples containing every
     possible combination of the elements returned from each iterable.

          >>> list(itertools.product([1,2,3], [4,5,6]))
          [(1, 4), (1, 5), (1, 6),
           (2, 4), (2, 5), (2, 6),
           (3, 4), (3, 5), (3, 6)]

     The optional `repeat' keyword argument is used for taking the
     product of an iterable or a set of iterables with themselves,
     repeated `N' times.  With a single iterable argument, `N'-tuples
     are returned:

          >>> list(itertools.product([1,2], repeat=3))
          [(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2),
           (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)]

     With two iterables, `2N'-tuples are returned.

          >>> list(itertools.product([1,2], [3,4], repeat=2))
          [(1, 3, 1, 3), (1, 3, 1, 4), (1, 3, 2, 3), (1, 3, 2, 4),
           (1, 4, 1, 3), (1, 4, 1, 4), (1, 4, 2, 3), (1, 4, 2, 4),
           (2, 3, 1, 3), (2, 3, 1, 4), (2, 3, 2, 3), (2, 3, 2, 4),
           (2, 4, 1, 3), (2, 4, 1, 4), (2, 4, 2, 3), (2, 4, 2, 4)]

     ‘combinations(iterable, r)’ returns sub-sequences of length `r'
     from the elements of `iterable'.

          >>> list(itertools.combinations('123', 2))
          [('1', '2'), ('1', '3'), ('2', '3')]
          >>> list(itertools.combinations('123', 3))
          [('1', '2', '3')]
          >>> list(itertools.combinations('1234', 3))
          [('1', '2', '3'), ('1', '2', '4'),
           ('1', '3', '4'), ('2', '3', '4')]

     ‘permutations(iter[, r])’ returns all the permutations of length
     `r' of the iterable’s elements.  If `r' is not specified, it will
     default to the number of elements produced by the iterable.

          >>> list(itertools.permutations([1,2,3,4], 2))
          [(1, 2), (1, 3), (1, 4),
           (2, 1), (2, 3), (2, 4),
           (3, 1), (3, 2), (3, 4),
           (4, 1), (4, 2), (4, 3)]

     ‘itertools.chain(*iterables)’ is an existing function in *note
     itertools: a0. that gained a new constructor in Python 2.6.
     ‘itertools.chain.from_iterable(iterable)’ takes a single iterable
     that should return other iterables.  ‘chain()’ will then return all
     the elements of the first iterable, then all the elements of the
     second, and so on.

          >>> list(itertools.chain.from_iterable([[1,2,3], [4,5,6]]))
          [1, 2, 3, 4, 5, 6]

     (All contributed by Raymond Hettinger.)

   * The *note logging: a6. module’s ‘FileHandler’ class and its
     subclasses ‘WatchedFileHandler’, ‘RotatingFileHandler’, and
     ‘TimedRotatingFileHandler’ now have an optional `delay' parameter
     to their constructors.  If `delay' is true, opening of the log file
     is deferred until the first ‘emit()’ call is made.  (Contributed by
     Vinay Sajip.)

     ‘TimedRotatingFileHandler’ also has a `utc' constructor parameter.
     If the argument is true, UTC time will be used in determining when
     midnight occurs and in generating filenames; otherwise local time
     will be used.

   * Several new functions were added to the *note math: ae. module:

        * *note isinf(): 7b3. and *note isnan(): 7b4. determine whether
          a given float is a (positive or negative) infinity or a NaN
          (Not a Number), respectively.

        * *note copysign(): 7b5. copies the sign bit of an IEEE 754
          number, returning the absolute value of `x' combined with the
          sign bit of `y'.  For example, ‘math.copysign(1, -0.0)’
          returns -1.0.  (Contributed by Christian Heimes.)

        * *note factorial(): 7b6. computes the factorial of a number.
          (Contributed by Raymond Hettinger; issue 2138(12).)

        * *note fsum(): 7b7. adds up the stream of numbers from an
          iterable, and is careful to avoid loss of precision through
          using partial sums.  (Contributed by Jean Brouwers, Raymond
          Hettinger, and Mark Dickinson; issue 2819(13).)

        * *note acosh(): 7b8, *note asinh(): 7b9. and *note atanh():
          7ba. compute the inverse hyperbolic functions.

        * *note log1p(): 7bb. returns the natural logarithm of `1+x'
          (base `e').

        * ‘trunc()’ rounds a number toward zero, returning the closest
          ‘Integral’ that’s between the function’s argument and zero.
          Added as part of the backport of *note PEP 3141’s type
          hierarchy for numbers: 6b4.

   * The *note math: ae. module has been improved to give more
     consistent behaviour across platforms, especially with respect to
     handling of floating-point exceptions and IEEE 754 special values.

     Whenever possible, the module follows the recommendations of the
     C99 standard about 754’s special values.  For example, ‘sqrt(-1.)’
     should now give a *note ValueError: 321. across almost all
     platforms, while ‘sqrt(float('NaN'))’ should return a NaN on all
     IEEE 754 platforms.  Where Annex ’F’ of the C99 standard recommends
     signaling ’divide-by-zero’ or ’invalid’, Python will raise *note
     ValueError: 321.  Where Annex ’F’ of the C99 standard recommends
     signaling ’overflow’, Python will raise *note OverflowError: 325.
     (See issue 711019(14) and issue 1640(15).)

     (Contributed by Christian Heimes and Mark Dickinson.)

   * *note mmap: b0. objects now have a ‘rfind()’ method that searches
     for a substring beginning at the end of the string and searching
     backwards.  The ‘find()’ method also gained an `end' parameter
     giving an index at which to stop searching.  (Contributed by John
     Lenton.)

   * The *note operator: be. module gained a ‘methodcaller()’ function
     that takes a name and an optional set of arguments, returning a
     callable that will call the named function on any arguments passed
     to it.  For example:

          >>> # Equivalent to lambda s: s.replace('old', 'new')
          >>> replacer = operator.methodcaller('replace', 'old', 'new')
          >>> replacer('old wine in old bottles')
          'new wine in new bottles'

     (Contributed by Georg Brandl, after a suggestion by Gregory
     Petrosyan.)

     The ‘attrgetter()’ function now accepts dotted names and performs
     the corresponding attribute lookups:

          >>> inst_name = operator.attrgetter(
          ...        '__class__.__name__')
          >>> inst_name('')
          'str'
          >>> inst_name(help)
          '_Helper'

     (Contributed by Georg Brandl, after a suggestion by Barry Warsaw.)

   * The *note os: c0. module now wraps several new system calls.
     ‘fchmod(fd, mode)’ and ‘fchown(fd, uid, gid)’ change the mode and
     ownership of an opened file, and ‘lchmod(path, mode)’ changes the
     mode of a symlink.  (Contributed by Georg Brandl and Christian
     Heimes.)

     ‘chflags()’ and ‘lchflags()’ are wrappers for the corresponding
     system calls (where they’re available), changing the flags set on a
     file.  Constants for the flag values are defined in the *note stat:
     ef. module; some possible values include ‘UF_IMMUTABLE’ to signal
     the file may not be changed and ‘UF_APPEND’ to indicate that data
     can only be appended to the file.  (Contributed by M. Levinson.)

     ‘os.closerange(low, high)’ efficiently closes all file descriptors
     from `low' to `high', ignoring any errors and not including `high'
     itself.  This function is now used by the *note subprocess: f4.
     module to make starting processes faster.  (Contributed by Georg
     Brandl; issue 1663329(16).)

   * The ‘os.environ’ object’s ‘clear()’ method will now unset the
     environment variables using *note os.unsetenv(): 7bc. in addition
     to clearing the object’s keys.  (Contributed by Martin Horcicka;
     issue 1181(17).)

   * The *note os.walk(): 423. function now has a ‘followlinks’
     parameter.  If set to True, it will follow symlinks pointing to
     directories and visit the directory’s contents.  For backward
     compatibility, the parameter’s default value is false.  Note that
     the function can fall into an infinite recursion if there’s a
     symlink that points to a parent directory.  (issue 1273829(18))

   * In the *note os.path: c1. module, the ‘splitext()’ function has
     been changed to not split on leading period characters.  This
     produces better results when operating on Unix’s dot-files.  For
     example, ‘os.path.splitext('.ipython')’ now returns ‘('.ipython',
     '')’ instead of ‘('', '.ipython')’.  (issue 1115886(19))

     A new function, ‘os.path.relpath(path, start='.')’, returns a
     relative path from the ‘start’ path, if it’s supplied, or from the
     current working directory to the destination ‘path’.  (Contributed
     by Richard Barran; issue 1339796(20).)

     On Windows, *note os.path.expandvars(): 7bd. will now expand
     environment variables given in the form "%var%", and "~user" will
     be expanded into the user’s home directory path.  (Contributed by
     Josiah Carlson; issue 957650(21).)

   * The Python debugger provided by the *note pdb: c5. module gained a
     new command: "run" restarts the Python program being debugged and
     can optionally take new command-line arguments for the program.
     (Contributed by Rocky Bernstein; issue 1393667(22).)

   * The *note pdb.post_mortem(): 7be. function, used to begin debugging
     a traceback, will now use the traceback returned by *note
     sys.exc_info(): 6c1. if no traceback is supplied.  (Contributed by
     Facundo Batista; issue 1106316(23).)

   * The *note pickletools: c7. module now has an ‘optimize()’ function
     that takes a string containing a pickle and removes some unused
     opcodes, returning a shorter pickle that contains the same data
     structure.  (Contributed by Raymond Hettinger.)

   * A ‘get_data()’ function was added to the *note pkgutil: c9. module
     that returns the contents of resource files included with an
     installed Python package.  For example:

          >>> import pkgutil
          >>> print pkgutil.get_data('test', 'exception_hierarchy.txt')
          BaseException
           +-- SystemExit
           +-- KeyboardInterrupt
           +-- GeneratorExit
           +-- Exception
                +-- StopIteration
                +-- StandardError
           ...

     (Contributed by Paul Moore; issue 2439(24).)

   * The ‘pyexpat’ module’s ‘Parser’ objects now allow setting their
     ‘buffer_size’ attribute to change the size of the buffer used to
     hold character data.  (Contributed by Achim Gaedke; issue
     1137(25).)

   * The ‘Queue’ module now provides queue variants that retrieve
     entries in different orders.  The ‘PriorityQueue’ class stores
     queued items in a heap and retrieves them in priority order, and
     ‘LifoQueue’ retrieves the most recently added entries first,
     meaning that it behaves like a stack.  (Contributed by Raymond
     Hettinger.)

   * The *note random: d8. module’s ‘Random’ objects can now be pickled
     on a 32-bit system and unpickled on a 64-bit system, and vice
     versa.  Unfortunately, this change also means that Python 2.6’s
     ‘Random’ objects can’t be unpickled correctly on earlier versions
     of Python.  (Contributed by Shawn Ligocki; issue 1727780(26).)

     The new ‘triangular(low, high, mode)’ function returns random
     numbers following a triangular distribution.  The returned values
     are between `low' and `high', not including `high' itself, and with
     `mode' as the most frequently occurring value in the distribution.
     (Contributed by Wladmir van der Laan and Raymond Hettinger; issue
     1681432(27).)

   * Long regular expression searches carried out by the *note re: d9.
     module will check for signals being delivered, so time-consuming
     searches can now be interrupted.  (Contributed by Josh Hoyt and
     Ralf Schmitt; issue 846388(28).)

     The regular expression module is implemented by compiling bytecodes
     for a tiny regex-specific virtual machine.  Untrusted code could
     create malicious strings of bytecode directly and cause crashes, so
     Python 2.6 includes a verifier for the regex bytecode.
     (Contributed by Guido van Rossum from work for Google App Engine;
     issue 3487(29).)

   * The *note rlcompleter: dd. module’s ‘Completer.complete()’ method
     will now ignore exceptions triggered while evaluating a name.
     (Fixed by Lorenz Quack; issue 2250(30).)

   * The *note sched: df. module’s ‘scheduler’ instances now have a
     read-only *note queue: d6. attribute that returns the contents of
     the scheduler’s queue, represented as a list of named tuples with
     the fields ‘(time, priority, action, argument)’.  (Contributed by
     Raymond Hettinger; issue 1861(31).)

   * The *note select: e0. module now has wrapper functions for the
     Linux ‘epoll()’ and BSD ‘kqueue()’ system calls.  ‘modify()’ method
     was added to the existing ‘poll’ objects; ‘pollobj.modify(fd,
     eventmask)’ takes a file descriptor or file object and an event
     mask, modifying the recorded event mask for that file.
     (Contributed by Christian Heimes; issue 1657(32).)

   * The *note shutil.copytree(): 5da. function now has an optional
     `ignore' argument that takes a callable object.  This callable will
     receive each directory path and a list of the directory’s contents,
     and returns a list of names that will be ignored, not copied.

     The *note shutil: e4. module also provides an ‘ignore_patterns()’
     function for use with this new parameter.  ‘ignore_patterns()’
     takes an arbitrary number of glob-style patterns and returns a
     callable that will ignore any files and directories that match any
     of these patterns.  The following example copies a directory tree,
     but skips both ‘.svn’ directories and Emacs backup files, which
     have names ending with ’~’:

          shutil.copytree('Doc/library', '/tmp/library',
                          ignore=shutil.ignore_patterns('*~', '.svn'))

     (Contributed by Tarek Ziadé; issue 2663(33).)

   * Integrating signal handling with GUI handling event loops like
     those used by Tkinter or GTk+ has long been a problem; most
     software ends up polling, waking up every fraction of a second to
     check if any GUI events have occurred.  The *note signal: e5.
     module can now make this more efficient.  Calling
     ‘signal.set_wakeup_fd(fd)’ sets a file descriptor to be used; when
     a signal is received, a byte is written to that file descriptor.
     There’s also a C-level function, *note PySignal_SetWakeupFd(): 7bf,
     for setting the descriptor.

     Event loops will use this by opening a pipe to create two
     descriptors, one for reading and one for writing.  The writable
     descriptor will be passed to ‘set_wakeup_fd()’, and the readable
     descriptor will be added to the list of descriptors monitored by
     the event loop via ‘select()’ or ‘poll()’.  On receiving a signal,
     a byte will be written and the main event loop will be woken up,
     avoiding the need to poll.

     (Contributed by Adam Olsen; issue 1583(34).)

     The ‘siginterrupt()’ function is now available from Python code,
     and allows changing whether signals can interrupt system calls or
     not.  (Contributed by Ralf Schmitt.)

     The ‘setitimer()’ and ‘getitimer()’ functions have also been added
     (where they’re available).  ‘setitimer()’ allows setting interval
     timers that will cause a signal to be delivered to the process
     after a specified time, measured in wall-clock time, consumed
     process time, or combined process+system time.  (Contributed by
     Guilherme Polo; issue 2240(35).)

   * The *note smtplib: e8. module now supports SMTP over SSL thanks to
     the addition of the ‘SMTP_SSL’ class.  This class supports an
     interface identical to the existing ‘SMTP’ class.  (Contributed by
     Monty Taylor.)  Both class constructors also have an optional
     ‘timeout’ parameter that specifies a timeout for the initial
     connection attempt, measured in seconds.  (Contributed by Facundo
     Batista.)

     An implementation of the LMTP protocol ( RFC 2033(36)) was also
     added to the module.  LMTP is used in place of SMTP when
     transferring e-mail between agents that don’t manage a mail queue.
     (LMTP implemented by Leif Hedstrom; issue 957003(37).)

     ‘SMTP.starttls()’ now complies with RFC 3207(38) and forgets any
     knowledge obtained from the server not obtained from the TLS
     negotiation itself.  (Patch contributed by Bill Fenner; issue
     829951(39).)

   * The *note socket: ea. module now supports TIPC
     (‘http://tipc.sourceforge.net/’), a high-performance non-IP-based
     protocol designed for use in clustered environments.  TIPC
     addresses are 4- or 5-tuples.  (Contributed by Alberto Bertogli;
     issue 1646(40).)

     A new function, ‘create_connection()’, takes an address and
     connects to it using an optional timeout value, returning the
     connected socket object.  This function also looks up the address’s
     type and connects to it using IPv4 or IPv6 as appropriate.
     Changing your code to use ‘create_connection()’ instead of
     ‘socket(socket.AF_INET, ...)’ may be all that’s required to make
     your code work with IPv6.

   * The base classes in the ‘SocketServer’ module now support calling a
     ‘handle_timeout()’ method after a span of inactivity specified by
     the server’s ‘timeout’ attribute.  (Contributed by Michael
     Pomraning.)  The ‘serve_forever()’ method now takes an optional
     poll interval measured in seconds, controlling how often the server
     will check for a shutdown request.  (Contributed by Pedro Werneck
     and Jeffrey Yasskin; issue 742598(41), issue 1193577(42).)

   * The *note sqlite3: ed. module, maintained by Gerhard Häring, has
     been updated from version 2.3.2 in Python 2.5 to version 2.4.1.

   * The *note struct: f3. module now supports the C99 ‘_Bool’ type,
     using the format character ‘'?'’.  (Contributed by David Remahl.)

   * The ‘Popen’ objects provided by the *note subprocess: f4. module
     now have ‘terminate()’, ‘kill()’, and ‘send_signal()’ methods.  On
     Windows, ‘send_signal()’ only supports the ‘SIGTERM’ signal, and
     all these methods are aliases for the Win32 API function
     ‘TerminateProcess()’.  (Contributed by Christian Heimes.)

   * A new variable in the *note sys: f8. module, ‘float_info’, is an
     object containing information derived from the ‘float.h’ file about
     the platform’s floating-point support.  Attributes of this object
     include ‘mant_dig’ (number of digits in the mantissa), ‘epsilon’
     (smallest difference between 1.0 and the next largest value
     representable), and several others.  (Contributed by Christian
     Heimes; issue 1534(43).)

     Another new variable, ‘dont_write_bytecode’, controls whether
     Python writes any ‘.pyc’ or ‘.pyo’ files on importing a module.  If
     this variable is true, the compiled files are not written.  The
     variable is initially set on start-up by supplying the *note -B:
     7af. switch to the Python interpreter, or by setting the *note
     PYTHONDONTWRITEBYTECODE: 7b0. environment variable before running
     the interpreter.  Python code can subsequently change the value of
     this variable to control whether bytecode files are written or not.
     (Contributed by Neal Norwitz and Georg Brandl.)

     Information about the command-line arguments supplied to the Python
     interpreter is available by reading attributes of a named tuple
     available as ‘sys.flags’.  For example, the ‘verbose’ attribute is
     true if Python was executed in verbose mode, ‘debug’ is true in
     debugging mode, etc.  These attributes are all read-only.
     (Contributed by Christian Heimes.)

     A new function, ‘getsizeof()’, takes a Python object and returns
     the amount of memory used by the object, measured in bytes.
     Built-in objects return correct results; third-party extensions may
     not, but can define a ‘__sizeof__()’ method to return the object’s
     size.  (Contributed by Robert Schuppenies; issue 2898(44).)

     It’s now possible to determine the current profiler and tracer
     functions by calling *note sys.getprofile(): 7c0. and *note
     sys.gettrace(): 7c1.  (Contributed by Georg Brandl; issue
     1648(45).)

   * The *note tarfile: fc. module now supports POSIX.1-2001 (pax)
     tarfiles in addition to the POSIX.1-1988 (ustar) and GNU tar
     formats that were already supported.  The default format is GNU
     tar; specify the ‘format’ parameter to open a file using a
     different format:

          tar = tarfile.open("output.tar", "w",
                             format=tarfile.PAX_FORMAT)

     The new ‘encoding’ and ‘errors’ parameters specify an encoding and
     an error handling scheme for character conversions.  ‘'strict'’,
     ‘'ignore'’, and ‘'replace'’ are the three standard ways Python can
     handle errors,; ‘'utf-8'’ is a special value that replaces bad
     characters with their UTF-8 representation.  (Character conversions
     occur because the PAX format supports Unicode filenames, defaulting
     to UTF-8 encoding.)

     The ‘TarFile.add()’ method now accepts an ‘exclude’ argument that’s
     a function that can be used to exclude certain filenames from an
     archive.  The function must take a filename and return true if the
     file should be excluded or false if it should be archived.  The
     function is applied to both the name initially passed to ‘add()’
     and to the names of files in recursively-added directories.

     (All changes contributed by Lars Gustäbel).

   * An optional ‘timeout’ parameter was added to the *note
     telnetlib.Telnet: 7c2. class constructor, specifying a timeout
     measured in seconds.  (Added by Facundo Batista.)

   * The *note tempfile.NamedTemporaryFile: 7c3. class usually deletes
     the temporary file it created when the file is closed.  This
     behaviour can now be changed by passing ‘delete=False’ to the
     constructor.  (Contributed by Damien Miller; issue 1537850(46).)

     A new class, ‘SpooledTemporaryFile’, behaves like a temporary file
     but stores its data in memory until a maximum size is exceeded.  On
     reaching that limit, the contents will be written to an on-disk
     temporary file.  (Contributed by Dustin J. Mitchell.)

     The ‘NamedTemporaryFile’ and ‘SpooledTemporaryFile’ classes both
     work as context managers, so you can write ‘with
     tempfile.NamedTemporaryFile() as tmp: ...’.  (Contributed by
     Alexander Belopolsky; issue 2021(47).)

   * The ‘test.test_support’ module gained a number of context managers
     useful for writing tests.  ‘EnvironmentVarGuard()’ is a context
     manager that temporarily changes environment variables and
     automatically restores them to their old values.

     Another context manager, ‘TransientResource’, can surround calls to
     resources that may or may not be available; it will catch and
     ignore a specified list of exceptions.  For example, a network test
     may ignore certain failures when connecting to an external web
     site:

          with test_support.TransientResource(IOError,
                                          errno=errno.ETIMEDOUT):
              f = urllib.urlopen('https://sf.net')
              ...

     Finally, ‘check_warnings()’ resets the ‘warning’ module’s warning
     filters and returns an object that will record all warning messages
     triggered (issue 3781(48)):

          with test_support.check_warnings() as wrec:
              warnings.simplefilter("always")
              # ... code that triggers a warning ...
              assert str(wrec.message) == "function is outdated"
              assert len(wrec.warnings) == 1, "Multiple warnings raised"

     (Contributed by Brett Cannon.)

   * The *note textwrap: 102. module can now preserve existing
     whitespace at the beginnings and ends of the newly-created lines by
     specifying ‘drop_whitespace=False’ as an argument:

          >>> S = """This  sentence  has a bunch   of
          ...   extra   whitespace."""
          >>> print textwrap.fill(S, width=15)
          This  sentence
          has a bunch
          of    extra
          whitespace.
          >>> print textwrap.fill(S, drop_whitespace=False, width=15)
          This  sentence
            has a bunch
             of    extra
             whitespace.
          >>>

     (Contributed by Dwayne Bailey; issue 1581073(49).)

   * The *note threading: 103. module API is being changed to use
     properties such as ‘daemon’ instead of ‘setDaemon()’ and
     ‘isDaemon()’ methods, and some methods have been renamed to use
     underscores instead of camel-case; for example, the ‘activeCount()’
     method is renamed to ‘active_count()’.  Both the 2.6 and 3.0
     versions of the module support the same properties and renamed
     methods, but don’t remove the old methods.  No date has been set
     for the deprecation of the old APIs in Python 3.x; the old APIs
     won’t be removed in any 2.x version.  (Carried out by several
     people, most notably Benjamin Peterson.)

     The *note threading: 103. module’s ‘Thread’ objects gained an
     ‘ident’ property that returns the thread’s identifier, a nonzero
     integer.  (Contributed by Gregory P. Smith; issue 2871(50).)

   * The *note timeit: 105. module now accepts callables as well as
     strings for the statement being timed and for the setup code.  Two
     convenience functions were added for creating ‘Timer’ instances:
     ‘repeat(stmt, setup, time, repeat, number)’ and ‘timeit(stmt,
     setup, time, number)’ create an instance and call the corresponding
     method.  (Contributed by Erik Demaine; issue 1533909(51).)

   * The ‘Tkinter’ module now accepts lists and tuples for options,
     separating the elements by spaces before passing the resulting
     value to Tcl/Tk.  (Contributed by Guilherme Polo; issue 2906(52).)

   * The *note turtle: 110. module for turtle graphics was greatly
     enhanced by Gregor Lingl.  New features in the module include:

        * Better animation of turtle movement and rotation.

        * Control over turtle movement using the new ‘delay()’,
          ‘tracer()’, and ‘speed()’ methods.

        * The ability to set new shapes for the turtle, and to define a
          new coordinate system.

        * Turtles now have an ‘undo()’ method that can roll back
          actions.

        * Simple support for reacting to input events such as mouse and
          keyboard activity, making it possible to write simple games.

        * A ‘turtle.cfg’ file can be used to customize the starting
          appearance of the turtle’s screen.

        * The module’s docstrings can be replaced by new docstrings that
          have been translated into another language.

     (issue 1513695(53))

   * An optional ‘timeout’ parameter was added to the ‘urllib.urlopen()’
     function and the ‘urllib.ftpwrapper’ class constructor, as well as
     the ‘urllib2.urlopen()’ function.  The parameter specifies a
     timeout measured in seconds.  For example:

          >>> u = urllib2.urlopen("http://slow.example.com",
                                  timeout=3)
          Traceback (most recent call last):
            ...
          urllib2.URLError: <urlopen error timed out>
          >>>

     (Added by Facundo Batista.)

   * The Unicode database provided by the *note unicodedata: 113. module
     has been updated to version 5.1.0.  (Updated by Martin von Löwis;
     issue 3811(54).)

   * The *note warnings: 11f. module’s ‘formatwarning()’ and
     ‘showwarning()’ gained an optional `line' argument that can be used
     to supply the line of source code.  (Added as part of issue
     1631171(55), which re-implemented part of the *note warnings: 11f.
     module in C code.)

     A new function, ‘catch_warnings()’, is a context manager intended
     for testing purposes that lets you temporarily modify the warning
     filters and then restore their original values (issue 3781(56)).

   * The XML-RPC ‘SimpleXMLRPCServer’ and ‘DocXMLRPCServer’ classes can
     now be prevented from immediately opening and binding to their
     socket by passing True as the ‘bind_and_activate’ constructor
     parameter.  This can be used to modify the instance’s
     ‘allow_reuse_address’ attribute before calling the ‘server_bind()’
     and ‘server_activate()’ methods to open the socket and begin
     listening for connections.  (Contributed by Peter Parente; issue
     1599845(57).)

     ‘SimpleXMLRPCServer’ also has a ‘_send_traceback_header’ attribute;
     if true, the exception and formatted traceback are returned as HTTP
     headers "X-Exception" and "X-Traceback".  This feature is for
     debugging purposes only and should not be used on production
     servers because the tracebacks might reveal passwords or other
     sensitive information.  (Contributed by Alan McIntyre as part of
     his project for Google’s Summer of Code 2007.)

   * The ‘xmlrpclib’ module no longer automatically converts *note
     datetime.date: 7c4. and *note datetime.time: 7c5. to the
     ‘xmlrpclib.DateTime’ type; the conversion semantics were not
     necessarily correct for all applications.  Code using ‘xmlrpclib’
     should convert ‘date’ and *note time: 104. instances.  (issue
     1330538(58)) The code can also handle dates before 1900
     (contributed by Ralf Schmitt; issue 2014(59)) and 64-bit integers
     represented by using ‘<i8>’ in XML-RPC responses (contributed by
     Riku Lindblad; issue 2985(60)).

   * The *note zipfile: 13a. module’s ‘ZipFile’ class now has
     ‘extract()’ and ‘extractall()’ methods that will unpack a single
     file or all the files in the archive to the current directory, or
     to a specified directory:

          z = zipfile.ZipFile('python-251.zip')

          # Unpack a single file, writing it relative
          # to the /tmp directory.
          z.extract('Python/sysmodule.c', '/tmp')

          # Unpack all the files in the archive.
          z.extractall()

     (Contributed by Alan McIntyre; issue 467924(61).)

     The *note open(): 1a2, ‘read()’ and ‘extract()’ methods can now
     take either a filename or a ‘ZipInfo’ object.  This is useful when
     an archive accidentally contains a duplicated filename.
     (Contributed by Graham Horler; issue 1775025(62).)

     Finally, *note zipfile: 13a. now supports using Unicode filenames
     for archived files.  (Contributed by Alexey Borzenkov; issue
     1734346(63).)

* Menu:

* The ast module:: 
* The future_builtins module:: 
* The json module; JavaScript Object Notation: The json module JavaScript Object Notation. 
* The plistlib module; A Property-List Parser: The plistlib module A Property-List Parser. 
* ctypes Enhancements:: 
* Improved SSL Support:: 

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1736190

   (2) http://www.jcea.es/programacion/pybsddb.htm

   (3) https://bugs.python.org/issue1817

   (4) https://bugs.python.org/issue600362

   (5) https://bugs.python.org/issue1381

   (6) https://bugs.python.org/issue1638033

   (7) https://bugs.python.org/issue1158

   (8) http://www2.hursley.ibm.com/decimal/decarith.html

   (9) https://bugs.python.org/issue1221598

   (10) https://bugs.python.org/issue1739906

   (11) https://bugs.python.org/issue1001604

   (12) https://bugs.python.org/issue2138

   (13) https://bugs.python.org/issue2819

   (14) https://bugs.python.org/issue711019

   (15) https://bugs.python.org/issue1640

   (16) https://bugs.python.org/issue1663329

   (17) https://bugs.python.org/issue1181

   (18) https://bugs.python.org/issue1273829

   (19) https://bugs.python.org/issue1115886

   (20) https://bugs.python.org/issue1339796

   (21) https://bugs.python.org/issue957650

   (22) https://bugs.python.org/issue1393667

   (23) https://bugs.python.org/issue1106316

   (24) https://bugs.python.org/issue2439

   (25) https://bugs.python.org/issue1137

   (26) https://bugs.python.org/issue1727780

   (27) https://bugs.python.org/issue1681432

   (28) https://bugs.python.org/issue846388

   (29) https://bugs.python.org/issue3487

   (30) https://bugs.python.org/issue2250

   (31) https://bugs.python.org/issue1861

   (32) https://bugs.python.org/issue1657

   (33) https://bugs.python.org/issue2663

   (34) https://bugs.python.org/issue1583

   (35) https://bugs.python.org/issue2240

   (36) https://tools.ietf.org/html/rfc2033.html

   (37) https://bugs.python.org/issue957003

   (38) https://tools.ietf.org/html/rfc3207.html

   (39) https://bugs.python.org/issue829951

   (40) https://bugs.python.org/issue1646

   (41) https://bugs.python.org/issue742598

   (42) https://bugs.python.org/issue1193577

   (43) https://bugs.python.org/issue1534

   (44) https://bugs.python.org/issue2898

   (45) https://bugs.python.org/issue1648

   (46) https://bugs.python.org/issue1537850

   (47) https://bugs.python.org/issue2021

   (48) https://bugs.python.org/issue3781

   (49) https://bugs.python.org/issue1581073

   (50) https://bugs.python.org/issue2871

   (51) https://bugs.python.org/issue1533909

   (52) https://bugs.python.org/issue2906

   (53) https://bugs.python.org/issue1513695

   (54) https://bugs.python.org/issue3811

   (55) https://bugs.python.org/issue1631171

   (56) https://bugs.python.org/issue3781

   (57) https://bugs.python.org/issue1599845

   (58) https://bugs.python.org/issue1330538

   (59) https://bugs.python.org/issue2014

   (60) https://bugs.python.org/issue2985

   (61) https://bugs.python.org/issue467924

   (62) https://bugs.python.org/issue1775025

   (63) https://bugs.python.org/issue1734346


File: python.info,  Node: The ast module,  Next: The future_builtins module,  Up: New and Improved Modules<2>

1.7.18.1 The ‘ast’ module
.........................

The *note ast: 8. module provides an Abstract Syntax Tree representation
of Python code, and Armin Ronacher contributed a set of helper functions
that perform a variety of common tasks.  These will be useful for HTML
templating packages, code analyzers, and similar tools that process
Python code.

The ‘parse()’ function takes an expression and returns an AST. The
‘dump()’ function outputs a representation of a tree, suitable for
debugging:

     import ast

     t = ast.parse("""
     d = {}
     for i in 'abcdefghijklm':
         d[i + i] = ord(i) - ord('a') + 1
     print d
     """)
     print ast.dump(t)

This outputs a deeply nested tree:

     Module(body=[
       Assign(targets=[
         Name(id='d', ctx=Store())
        ], value=Dict(keys=[], values=[]))
       For(target=Name(id='i', ctx=Store()),
           iter=Str(s='abcdefghijklm'), body=[
         Assign(targets=[
           Subscript(value=
             Name(id='d', ctx=Load()),
               slice=
               Index(value=
                 BinOp(left=Name(id='i', ctx=Load()), op=Add(),
                  right=Name(id='i', ctx=Load()))), ctx=Store())
          ], value=
          BinOp(left=
           BinOp(left=
            Call(func=
             Name(id='ord', ctx=Load()), args=[
               Name(id='i', ctx=Load())
              ], keywords=[], starargs=None, kwargs=None),
            op=Sub(), right=Call(func=
             Name(id='ord', ctx=Load()), args=[
               Str(s='a')
              ], keywords=[], starargs=None, kwargs=None)),
            op=Add(), right=Num(n=1)))
         ], orelse=[])
        Print(dest=None, values=[
          Name(id='d', ctx=Load())
        ], nl=True)
      ])

The ‘literal_eval()’ method takes a string or an AST representing a
literal expression, parses and evaluates it, and returns the resulting
value.  A literal expression is a Python expression containing only
strings, numbers, dictionaries, etc.  but no statements or function
calls.  If you need to evaluate an expression but cannot accept the
security risk of using an *note eval(): 5d2. call, ‘literal_eval()’ will
handle it safely:

     >>> literal = '("a", "b", {2:4, 3:8, 1:2})'
     >>> print ast.literal_eval(literal)
     ('a', 'b', {1: 2, 2: 4, 3: 8})
     >>> print ast.literal_eval('"a" + "b"')
     Traceback (most recent call last):
       ...
     ValueError: malformed string

The module also includes ‘NodeVisitor’ and ‘NodeTransformer’ classes for
traversing and modifying an AST, and functions for common
transformations such as changing line numbers.


File: python.info,  Node: The future_builtins module,  Next: The json module JavaScript Object Notation,  Prev: The ast module,  Up: New and Improved Modules<2>

1.7.18.2 The ‘future_builtins’ module
.....................................

Python 3.0 makes many changes to the repertoire of built-in functions,
and most of the changes can’t be introduced in the Python 2.x series
because they would break compatibility.  The ‘future_builtins’ module
provides versions of these built-in functions that can be imported when
writing 3.0-compatible code.

The functions in this module currently include:

   * ‘ascii(obj)’: equivalent to *note repr(): 3db.  In Python 3.0,
     *note repr(): 3db. will return a Unicode string, while *note
     ascii(): 7c8. will return a pure ASCII bytestring.

   * ‘filter(predicate, iterable)’, ‘map(func, iterable1, ...)’: the 3.0
     versions return iterators, unlike the 2.x builtins which return
     lists.

   * ‘hex(value)’, ‘oct(value)’: instead of calling the ‘__hex__()’ or
     ‘__oct__()’ methods, these versions will call the *note
     __index__(): 6ca. method and convert the result to hexadecimal or
     octal.  *note oct(): 6c8. will use the new ‘0o’ notation for its
     result.


File: python.info,  Node: The json module JavaScript Object Notation,  Next: The plistlib module A Property-List Parser,  Prev: The future_builtins module,  Up: New and Improved Modules<2>

1.7.18.3 The ‘json’ module: JavaScript Object Notation
......................................................

The new *note json: a1. module supports the encoding and decoding of
Python types in JSON (Javascript Object Notation).  JSON is a
lightweight interchange format often used in web applications.  For more
information about JSON, see ‘http://www.json.org’.

*note json: a1. comes with support for decoding and encoding most
built-in Python types.  The following example encodes and decodes a
dictionary:

     >>> import json
     >>> data = {"spam": "foo", "parrot": 42}
     >>> in_json = json.dumps(data) # Encode the data
     >>> in_json
     '{"parrot": 42, "spam": "foo"}'
     >>> json.loads(in_json) # Decode into a Python object
     {"spam": "foo", "parrot": 42}

It’s also possible to write your own decoders and encoders to support
more types.  Pretty-printing of the JSON strings is also supported.

*note json: a1. (originally called simplejson) was written by Bob
Ippolito.


File: python.info,  Node: The plistlib module A Property-List Parser,  Next: ctypes Enhancements,  Prev: The json module JavaScript Object Notation,  Up: New and Improved Modules<2>

1.7.18.4 The ‘plistlib’ module: A Property-List Parser
......................................................

The ‘.plist’ format is commonly used on Mac OS X to store basic data
types (numbers, strings, lists, and dictionaries) by serializing them
into an XML-based format.  It resembles the XML-RPC serialization of
data types.

Despite being primarily used on Mac OS X, the format has nothing
Mac-specific about it and the Python implementation works on any
platform that Python supports, so the *note plistlib: cb. module has
been promoted to the standard library.

Using the module is simple:

     import sys
     import plistlib
     import datetime

     # Create data structure
     data_struct = dict(lastAccessed=datetime.datetime.now(),
                        version=1,
                        categories=('Personal','Shared','Private'))

     # Create string containing XML.
     plist_str = plistlib.writePlistToString(data_struct)
     new_struct = plistlib.readPlistFromString(plist_str)
     print data_struct
     print new_struct

     # Write data structure to a file and read it back.
     plistlib.writePlist(data_struct, '/tmp/customizations.plist')
     new_struct = plistlib.readPlist('/tmp/customizations.plist')

     # read/writePlist accepts file-like objects as well as paths.
     plistlib.writePlist(data_struct, sys.stdout)


File: python.info,  Node: ctypes Enhancements,  Next: Improved SSL Support,  Prev: The plistlib module A Property-List Parser,  Up: New and Improved Modules<2>

1.7.18.5 ctypes Enhancements
............................

Thomas Heller continued to maintain and enhance the *note ctypes: 2a.
module.

*note ctypes: 2a. now supports a ‘c_bool’ datatype that represents the
C99 ‘bool’ type.  (Contributed by David Remahl; issue 1649190(1).)

The *note ctypes: 2a. string, buffer and array types have improved
support for extended slicing syntax, where various combinations of
‘(start, stop, step)’ are supplied.  (Implemented by Thomas Wouters.)

All *note ctypes: 2a. data types now support ‘from_buffer()’ and
‘from_buffer_copy()’ methods that create a ctypes instance based on a
provided buffer object.  ‘from_buffer_copy()’ copies the contents of the
object, while ‘from_buffer()’ will share the same memory area.

A new calling convention tells *note ctypes: 2a. to clear the ‘errno’ or
Win32 LastError variables at the outset of each wrapped call.
(Implemented by Thomas Heller; issue 1798(2).)

You can now retrieve the Unix ‘errno’ variable after a function call.
When creating a wrapped function, you can supply ‘use_errno=True’ as a
keyword parameter to the ‘DLL()’ function and then call the module-level
methods ‘set_errno()’ and ‘get_errno()’ to set and retrieve the error
value.

The Win32 LastError variable is similarly supported by the ‘DLL()’,
‘OleDLL()’, and ‘WinDLL()’ functions.  You supply ‘use_last_error=True’
as a keyword parameter and then call the module-level methods
‘set_last_error()’ and ‘get_last_error()’.

The ‘byref()’ function, used to retrieve a pointer to a ctypes instance,
now has an optional `offset' parameter that is a byte count that will be
added to the returned pointer.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1649190

   (2) https://bugs.python.org/issue1798


File: python.info,  Node: Improved SSL Support,  Prev: ctypes Enhancements,  Up: New and Improved Modules<2>

1.7.18.6 Improved SSL Support
.............................

Bill Janssen made extensive improvements to Python 2.6’s support for the
Secure Sockets Layer by adding a new module, *note ssl: ee, that’s built
atop the OpenSSL(1) library.  This new module provides more control over
the protocol negotiated, the X.509 certificates used, and has better
support for writing SSL servers (as opposed to clients) in Python.  The
existing SSL support in the *note socket: ea. module hasn’t been removed
and continues to work, though it will be removed in Python 3.0.

To use the new module, you must first create a TCP connection in the
usual way and then pass it to the *note ssl.wrap_socket(): 5e7.
function.  It’s possible to specify whether a certificate is required,
and to obtain certificate info by calling the ‘getpeercert()’ method.

See also
........

The documentation for the *note ssl: ee. module.

   ---------- Footnotes ----------

   (1) http://www.openssl.org/


File: python.info,  Node: Deprecations and Removals,  Next: Build and C API Changes<6>,  Prev: New and Improved Modules<2>,  Up: What's New in Python 2 6

1.7.19 Deprecations and Removals
--------------------------------

   * String exceptions have been removed.  Attempting to use them raises
     a *note TypeError: 309.

   * Changes to the *note Exception: 6be. interface as dictated by PEP
     352(1) continue to be made.  For 2.6, the ‘message’ attribute is
     being deprecated in favor of the ‘args’ attribute.

   * (3.0-warning mode) Python 3.0 will feature a reorganized standard
     library that will drop many outdated modules and rename others.
     Python 2.6 running in 3.0-warning mode will warn about these
     modules when they are imported.

     The list of deprecated modules is: ‘audiodev’, ‘bgenlocations’,
     ‘buildtools’, ‘bundlebuilder’, ‘Canvas’, ‘compiler’, ‘dircache’,
     ‘dl’, ‘fpformat’, ‘gensuitemodule’, ‘ihooks’, ‘imageop’, ‘imgfile’,
     ‘linuxaudiodev’, ‘mhlib’, ‘mimetools’, ‘multifile’, ‘new’, ‘pure’,
     ‘statvfs’, ‘sunaudiodev’, ‘test.testall’, and ‘toaiff’.

   * The ‘gopherlib’ module has been removed.

   * The ‘MimeWriter’ module and ‘mimify’ module have been deprecated;
     use the *note email: 67. package instead.

   * The ‘md5’ module has been deprecated; use the *note hashlib: 8c.
     module instead.

   * The ‘posixfile’ module has been deprecated; *note fcntl.lockf():
     7ce. provides better locking.

   * The ‘popen2’ module has been deprecated; use the *note subprocess:
     f4. module.

   * The ‘rgbimg’ module has been removed.

   * The ‘sets’ module has been deprecated; it’s better to use the
     built-in *note set: 5a4. and *note frozenset: 63c. types.

   * The ‘sha’ module has been deprecated; use the *note hashlib: 8c.
     module instead.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0352


File: python.info,  Node: Build and C API Changes<6>,  Next: Porting to Python 2 6,  Prev: Deprecations and Removals,  Up: What's New in Python 2 6

1.7.20 Build and C API Changes
------------------------------

Changes to Python’s build process and to the C API include:

   * Python now must be compiled with C89 compilers (after 19 years!).
     This means that the Python source tree has dropped its own
     implementations of ‘memmove()’ and ‘strerror()’, which are in the
     C89 standard library.

   * Python 2.6 can be built with Microsoft Visual Studio 2008 (version
     9.0), and this is the new default compiler.  See the ‘PCbuild’
     directory for the build files.  (Implemented by Christian Heimes.)

   * On Mac OS X, Python 2.6 can be compiled as a 4-way universal build.
     The ‘configure’ script can take a
     ‘--with-universal-archs=[32-bit|64-bit|all]’ switch, controlling
     whether the binaries are built for 32-bit architectures (x86,
     PowerPC), 64-bit (x86-64 and PPC-64), or both.  (Contributed by
     Ronald Oussoren.)

   * The BerkeleyDB module now has a C API object, available as
     ‘bsddb.db.api’.  This object can be used by other C extensions that
     wish to use the ‘bsddb’ module for their own purposes.
     (Contributed by Duncan Grisby.)

   * The new buffer interface, previously described in *note the PEP
     3118 section: 795, adds *note PyObject_GetBuffer(): 796. and *note
     PyBuffer_Release(): 7d0, as well as a few other functions.

   * Python’s use of the C stdio library is now thread-safe, or at least
     as thread-safe as the underlying library is.  A long-standing
     potential bug occurred if one thread closed a file object while
     another thread was reading from or writing to the object.  In 2.6
     file objects have a reference count, manipulated by the
     ‘PyFile_IncUseCount()’ and ‘PyFile_DecUseCount()’ functions.  File
     objects can’t be closed unless the reference count is zero.
     ‘PyFile_IncUseCount()’ should be called while the GIL is still
     held, before carrying out an I/O operation using the ‘FILE *’
     pointer, and ‘PyFile_DecUseCount()’ should be called immediately
     after the GIL is re-acquired.  (Contributed by Antoine Pitrou and
     Gregory P. Smith.)

   * Importing modules simultaneously in two different threads no longer
     deadlocks; it will now raise an *note ImportError: 318.  A new API
     function, *note PyImport_ImportModuleNoBlock(): 39b, will look for
     a module in ‘sys.modules’ first, then try to import it after
     acquiring an import lock.  If the import lock is held by another
     thread, an *note ImportError: 318. is raised.  (Contributed by
     Christian Heimes.)

   * Several functions return information about the platform’s
     floating-point support.  *note PyFloat_GetMax(): 7d1. returns the
     maximum representable floating point value, and *note
     PyFloat_GetMin(): 7d2. returns the minimum positive value.  *note
     PyFloat_GetInfo(): 7d3. returns an object containing more
     information from the ‘float.h’ file, such as ‘"mant_dig"’ (number
     of digits in the mantissa), ‘"epsilon"’ (smallest difference
     between 1.0 and the next largest value representable), and several
     others.  (Contributed by Christian Heimes; issue 1534(1).)

   * C functions and methods that use *note PyComplex_AsCComplex(): 7d4.
     will now accept arguments that have a *note __complex__(): 77b.
     method.  In particular, the functions in the *note cmath: 19.
     module will now accept objects with this method.  This is a
     backport of a Python 3.0 change.  (Contributed by Mark Dickinson;
     issue 1675423(2).)

   * Python’s C API now includes two functions for case-insensitive
     string comparisons, ‘PyOS_stricmp(char*, char*)’ and
     ‘PyOS_strnicmp(char*, char*, Py_ssize_t)’.  (Contributed by
     Christian Heimes; issue 1635(3).)

   * Many C extensions define their own little macro for adding integers
     and strings to the module’s dictionary in the ‘init*’ function.
     Python 2.6 finally defines standard macros for adding values to a
     module, *note PyModule_AddStringMacro: 7d5. and
     ‘PyModule_AddIntMacro()’.  (Contributed by Christian Heimes.)

   * Some macros were renamed in both 3.0 and 2.6 to make it clearer
     that they are macros, not functions.  ‘Py_Size()’ became
     ‘Py_SIZE()’, ‘Py_Type()’ became ‘Py_TYPE()’, and ‘Py_Refcnt()’
     became ‘Py_REFCNT()’.  The mixed-case macros are still available in
     Python 2.6 for backward compatibility.  (issue 1629(4))

   * Distutils now places C extensions it builds in a different
     directory when running on a debug version of Python.  (Contributed
     by Collin Winter; issue 1530959(5).)

   * Several basic data types, such as integers and strings, maintain
     internal free lists of objects that can be re-used.  The data
     structures for these free lists now follow a naming convention: the
     variable is always named ‘free_list’, the counter is always named
     ‘numfree’, and a macro ‘Py<typename>_MAXFREELIST’ is always
     defined.

   * A new Makefile target, "make patchcheck", prepares the Python
     source tree for making a patch: it fixes trailing whitespace in all
     modified ‘.py’ files, checks whether the documentation has been
     changed, and reports whether the ‘Misc/ACKS’ and ‘Misc/NEWS’ files
     have been updated.  (Contributed by Brett Cannon.)

     Another new target, "make profile-opt", compiles a Python binary
     using GCC’s profile-guided optimization.  It compiles Python with
     profiling enabled, runs the test suite to obtain a set of profiling
     results, and then compiles using these results for optimization.
     (Contributed by Gregory P. Smith.)

* Menu:

* Port-Specific Changes; Windows: Port-Specific Changes Windows<2>. 
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X<2>. 
* Port-Specific Changes; IRIX: Port-Specific Changes IRIX. 

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1534

   (2) https://bugs.python.org/issue1675423

   (3) https://bugs.python.org/issue1635

   (4) https://bugs.python.org/issue1629

   (5) https://bugs.python.org/issue1530959

