This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 3.4.3, September 02, 2015

     Copyright © 1990-2015, Python Software Foundation

INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.3.1.


File: python.info,  Node: Descriptors,  Next: Multiple Inheritance The Diamond Rule,  Prev: Old and New Classes,  Up: PEPs 252 and 253 Type and Class Changes

1.11.2.2 Descriptors
....................

In previous versions of Python, there was no consistent way to discover
what attributes and methods were supported by an object.  There were
some informal conventions, such as defining ‘__members__’ and
‘__methods__’ attributes that were lists of names, but often the author
of an extension type or a class wouldn’t bother to define them.  You
could fall back on inspecting the ‘__dict__’ of an object, but when
class inheritance or an arbitrary *note __getattr__(): 560. hook were in
use this could still be inaccurate.

The one big idea underlying the new class model is that an API for
describing the attributes of an object using `descriptors' has been
formalized.  Descriptors specify the value of an attribute, stating
whether it’s a method or a field.  With the descriptor API, static
methods and class methods become possible, as well as more exotic
constructs.

Attribute descriptors are objects that live inside class objects, and
have a few attributes of their own:

   * *note __name__: 6cb. is the attribute’s name.

   * ‘__doc__’ is the attribute’s docstring.

   * ‘__get__(object)’ is a method that retrieves the attribute value
     from `object'.

   * ‘__set__(object, value)’ sets the attribute on `object' to `value'.

   * ‘__delete__(object, value)’ deletes the `value' attribute of
     `object'.

For example, when you write ‘obj.x’, the steps that Python actually
performs are:

     descriptor = obj.__class__.x
     descriptor.__get__(obj)

For methods, ‘descriptor.__get__()’ returns a temporary object that’s
callable, and wraps up the instance and the method to be called on it.
This is also why static methods and class methods are now possible; they
have descriptors that wrap up just the method, or the method and the
class.  As a brief explanation of these new kinds of methods, static
methods aren’t passed the instance, and therefore resemble regular
functions.  Class methods are passed the class of the object, but not
the object itself.  Static and class methods are defined like this:

     class C(object):
         def f(arg1, arg2):
             ...
         f = staticmethod(f)

         def g(cls, arg1, arg2):
             ...
         g = classmethod(g)

The *note staticmethod(): 3b1. function takes the function ‘f()’, and
returns it wrapped up in a descriptor so it can be stored in the class
object.  You might expect there to be special syntax for creating such
methods (‘def static f’, ‘defstatic f()’, or something like that) but no
such syntax has been defined yet; that’s been left for future versions
of Python.

More new features, such as slots and properties, are also implemented as
new kinds of descriptors, and it’s not difficult to write a descriptor
class that does something novel.  For example, it would be possible to
write a descriptor class that made it possible to write Eiffel-style
preconditions and postconditions for a method.  A class that used this
feature might be defined like this:

     from eiffel import eiffelmethod

     class C(object):
         def f(self, arg1, arg2):
             # The actual function
             ...
         def pre_f(self):
             # Check preconditions
             ...
         def post_f(self):
             # Check postconditions
             ...

         f = eiffelmethod(f, pre_f, post_f)

Note that a person using the new ‘eiffelmethod()’ doesn’t have to
understand anything about descriptors.  This is why I think the new
features don’t increase the basic complexity of the language.  There
will be a few wizards who need to know about it in order to write
‘eiffelmethod()’ or the ZODB or whatever, but most users will just write
code on top of the resulting libraries and ignore the implementation
details.


File: python.info,  Node: Multiple Inheritance The Diamond Rule,  Next: Attribute Access,  Prev: Descriptors,  Up: PEPs 252 and 253 Type and Class Changes

1.11.2.3 Multiple Inheritance: The Diamond Rule
...............................................

Multiple inheritance has also been made more useful through changing the
rules under which names are resolved.  Consider this set of classes
(diagram taken from PEP 253(1) by Guido van Rossum):

           class A:
             ^ ^  def save(self): ...
            /   \
           /     \
          /       \
         /         \
     class B     class C:
         ^         ^  def save(self): ...
          \       /
           \     /
            \   /
             \ /
           class D

The lookup rule for classic classes is simple but not very smart; the
base classes are searched depth-first, going from left to right.  A
reference to ‘D.save()’ will search the classes ‘D’, ‘B’, and then ‘A’,
where ‘save()’ would be found and returned.  ‘C.save()’ would never be
found at all.  This is bad, because if ‘C’’s ‘save()’ method is saving
some internal state specific to ‘C’, not calling it will result in that
state never getting saved.

New-style classes follow a different algorithm that’s a bit more
complicated to explain, but does the right thing in this situation.
(Note that Python 2.3 changes this algorithm to one that produces the
same results in most cases, but produces more useful results for really
complicated inheritance graphs.)

  1. List all the base classes, following the classic lookup rule and
     include a class multiple times if it’s visited repeatedly.  In the
     above example, the list of visited classes is [‘D’, ‘B’, ‘A’, ‘C’,
     ‘A’].

  2. Scan the list for duplicated classes.  If any are found, remove all
     but one occurrence, leaving the `last' one in the list.  In the
     above example, the list becomes [‘D’, ‘B’, ‘C’, ‘A’] after dropping
     duplicates.

Following this rule, referring to ‘D.save()’ will return ‘C.save()’,
which is the behaviour we’re after.  This lookup rule is the same as the
one followed by Common Lisp.  A new built-in function, *note super():
311, provides a way to get at a class’s superclasses without having to
reimplement Python’s algorithm.  The most commonly used form will be
‘super(class, obj)’, which returns a bound superclass object (not the
actual class object).  This form will be used in methods to call a
method in the superclass; for example, ‘D’’s ‘save()’ method would look
like this:

     class D (B,C):
         def save (self):
             # Call superclass .save()
             super(D, self).save()
             # Save D's private information here
             ...

*note super(): 311. can also return unbound superclass objects when
called as ‘super(class)’ or ‘super(class1, class2)’, but this probably
won’t often be useful.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0253


File: python.info,  Node: Attribute Access,  Next: Related Links,  Prev: Multiple Inheritance The Diamond Rule,  Up: PEPs 252 and 253 Type and Class Changes

1.11.2.4 Attribute Access
.........................

A fair number of sophisticated Python classes define hooks for attribute
access using *note __getattr__(): 560.; most commonly this is done for
convenience, to make code more readable by automatically mapping an
attribute access such as ‘obj.parent’ into a method call such as
‘obj.get_parent’.  Python 2.2 adds some new ways of controlling
attribute access.

First, ‘__getattr__(attr_name)’ is still supported by new-style classes,
and nothing about it has changed.  As before, it will be called when an
attempt is made to access ‘obj.foo’ and no attribute named ‘foo’ is
found in the instance’s dictionary.

New-style classes also support a new method,
‘__getattribute__(attr_name)’.  The difference between the two methods
is that *note __getattribute__(): 561. is `always' called whenever any
attribute is accessed, while the old *note __getattr__(): 560. is only
called if ‘foo’ isn’t found in the instance’s dictionary.

However, Python 2.2’s support for `properties' will often be a simpler
way to trap attribute references.  Writing a *note __getattr__(): 560.
method is complicated because to avoid recursion you can’t use regular
attribute accesses inside them, and instead have to mess around with the
contents of ‘__dict__’.  *note __getattr__(): 560. methods also end up
being called by Python when it checks for other methods such as *note
__repr__(): 5a3. or ‘__coerce__()’, and so have to be written with this
in mind.  Finally, calling a function on every attribute access results
in a sizable performance loss.

*note property: 3ac. is a new built-in type that packages up three
functions that get, set, or delete an attribute, and a docstring.  For
example, if you want to define a ‘size’ attribute that’s computed, but
also settable, you could write:

     class C(object):
         def get_size (self):
             result = ... computation ...
             return result
         def set_size (self, size):
             ... compute something based on the size
             and set internal state appropriately ...

         # Define a property.  The 'delete this attribute'
         # method is defined as None, so the attribute
         # can't be deleted.
         size = property(get_size, set_size,
                         None,
                         "Storage size of this instance")

That is certainly clearer and easier to write than a pair of *note
__getattr__(): 560./*note __setattr__(): 8ba. methods that check for the
‘size’ attribute and handle it specially while retrieving all other
attributes from the instance’s ‘__dict__’.  Accesses to ‘size’ are also
the only ones which have to perform the work of calling a function, so
references to other attributes run at their usual speed.

Finally, it’s possible to constrain the list of attributes that can be
referenced on an object using the new ‘__slots__’ class attribute.
Python objects are usually very dynamic; at any time it’s possible to
define a new attribute on an instance by just doing ‘obj.new_attr=1’.  A
new-style class can define a class attribute named ‘__slots__’ to limit
the legal attributes to a particular set of names.  An example will make
this clear:

     >>> class C(object):
     ...     __slots__ = ('template', 'name')
     ...
     >>> obj = C()
     >>> print obj.template
     None
     >>> obj.template = 'Test'
     >>> print obj.template
     Test
     >>> obj.newattr = None
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     AttributeError: 'C' object has no attribute 'newattr'

Note how you get an *note AttributeError: 320. on the attempt to assign
to an attribute not listed in ‘__slots__’.


File: python.info,  Node: Related Links,  Prev: Attribute Access,  Up: PEPs 252 and 253 Type and Class Changes

1.11.2.5 Related Links
......................

This section has just been a quick overview of the new features, giving
enough of an explanation to start you programming, but many details have
been simplified or ignored.  Where should you go to get a more complete
picture?

‘https://www.python.org/2.2/descrintro.html’ is a lengthy tutorial
introduction to the descriptor features, written by Guido van Rossum.
If my description has whetted your appetite, go read this tutorial next,
because it goes into much more detail about the new features while still
remaining quite easy to read.

Next, there are two relevant PEPs, PEP 252(1) and PEP 253(2).  PEP
252(3) is titled "Making Types Look More Like Classes", and covers the
descriptor API. PEP 253(4) is titled "Subtyping Built-in Types", and
describes the changes to type objects that make it possible to subtype
built-in objects.  PEP 253(5) is the more complicated PEP of the two,
and at a few points the necessary explanations of types and meta-types
may cause your head to explode.  Both PEPs were written and implemented
by Guido van Rossum, with substantial assistance from the rest of the
Zope Corp.  team.

Finally, there’s the ultimate authority: the source code.  Most of the
machinery for the type handling is in ‘Objects/typeobject.c’, but you
should only resort to it after all other avenues have been exhausted,
including posting a question to python-list or python-dev.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0252

   (2) https://www.python.org/dev/peps/pep-0253

   (3) https://www.python.org/dev/peps/pep-0252

   (4) https://www.python.org/dev/peps/pep-0253

   (5) https://www.python.org/dev/peps/pep-0253


File: python.info,  Node: PEP 234 Iterators,  Next: PEP 255 Simple Generators<2>,  Prev: PEPs 252 and 253 Type and Class Changes,  Up: What's New in Python 2 2

1.11.3 PEP 234: Iterators
-------------------------

Another significant addition to 2.2 is an iteration interface at both
the C and Python levels.  Objects can define how they can be looped over
by callers.

In Python versions up to 2.1, the usual way to make ‘for item in obj’
work is to define a *note __getitem__(): 88d. method that looks
something like this:

     def __getitem__(self, index):
         return <next item>

*note __getitem__(): 88d. is more properly used to define an indexing
operation on an object so that you can write ‘obj[5]’ to retrieve the
sixth element.  It’s a bit misleading when you’re using this only to
support *note for: 688. loops.  Consider some file-like object that
wants to be looped over; the `index' parameter is essentially
meaningless, as the class probably assumes that a series of *note
__getitem__(): 88d. calls will be made with `index' incrementing by one
each time.  In other words, the presence of the *note __getitem__():
88d. method doesn’t mean that using ‘file[5]’ to randomly access the
sixth element will work, though it really should.

In Python 2.2, iteration can be implemented separately, and *note
__getitem__(): 88d. methods can be limited to classes that really do
support random access.  The basic idea of iterators is simple.  A new
built-in function, ‘iter(obj)’ or ‘iter(C, sentinel)’, is used to get an
iterator.  ‘iter(obj)’ returns an iterator for the object `obj', while
‘iter(C, sentinel)’ returns an iterator that will invoke the callable
object `C' until it returns `sentinel' to signal that the iterator is
done.

Python classes can define an *note __iter__(): 79b. method, which should
create and return a new iterator for the object; if the object is its
own iterator, this method can just return ‘self’.  In particular,
iterators will usually be their own iterators.  Extension types
implemented in C can implement a *note tp_iter: 8bd. function in order
to return an iterator, and extension types that want to behave as
iterators can define a *note tp_iternext: 8be. function.

So, after all this, what do iterators actually do?  They have one
required method, *note next(): 6c6, which takes no arguments and returns
the next value.  When there are no more values to be returned, calling
*note next(): 6c6. should raise the *note StopIteration: 7a5. exception.

     >>> L = [1,2,3]
     >>> i = iter(L)
     >>> print i
     <iterator object at 0x8116870>
     >>> i.next()
     1
     >>> i.next()
     2
     >>> i.next()
     3
     >>> i.next()
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     StopIteration
     >>>

In 2.2, Python’s *note for: 688. statement no longer expects a sequence;
it expects something for which *note iter(): 79a. will return an
iterator.  For backward compatibility and convenience, an iterator is
automatically constructed for sequences that don’t implement *note
__iter__(): 79b. or a *note tp_iter: 8bd. slot, so ‘for i in [1,2,3]’
will still work.  Wherever the Python interpreter loops over a sequence,
it’s been changed to use the iterator protocol.  This means you can do
things like this:

     >>> L = [1,2,3]
     >>> i = iter(L)
     >>> a,b,c = i
     >>> a,b,c
     (1, 2, 3)

Iterator support has been added to some of Python’s basic types.
Calling *note iter(): 79a. on a dictionary will return an iterator which
loops over its keys:

     >>> m = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,
     ...      'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}
     >>> for key in m: print key, m[key]
     ...
     Mar 3
     Feb 2
     Aug 8
     Sep 9
     May 5
     Jun 6
     Jul 7
     Jan 1
     Apr 4
     Nov 11
     Dec 12
     Oct 10

That’s just the default behaviour.  If you want to iterate over keys,
values, or key/value pairs, you can explicitly call the ‘iterkeys()’,
‘itervalues()’, or ‘iteritems()’ methods to get an appropriate iterator.
In a minor related change, the *note in: 6d5. operator now works on
dictionaries, so ‘key in dict’ is now equivalent to ‘dict.has_key(key)’.

Files also provide an iterator, which calls the *note readline(): da.
method until there are no more lines in the file.  This means you can
now read each line of a file using code like this:

     for line in file:
         # do something for each line
         ...

Note that you can only go forward in an iterator; there’s no way to get
the previous element, reset the iterator, or make a copy of it.  An
iterator object could provide such additional capabilities, but the
iterator protocol only requires a *note next(): 6c6. method.

See also
........

PEP 234(1) - Iterators

     Written by Ka-Ping Yee and GvR; implemented by the Python Labs
     crew, mostly by GvR and Tim Peters.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0234


File: python.info,  Node: PEP 255 Simple Generators<2>,  Next: PEP 237 Unifying Long Integers and Integers<2>,  Prev: PEP 234 Iterators,  Up: What's New in Python 2 2

1.11.4 PEP 255: Simple Generators
---------------------------------

Generators are another new feature, one that interacts with the
introduction of iterators.

You’re doubtless familiar with how function calls work in Python or C.
When you call a function, it gets a private namespace where its local
variables are created.  When the function reaches a *note return: 781.
statement, the local variables are destroyed and the resulting value is
returned to the caller.  A later call to the same function will get a
fresh new set of local variables.  But, what if the local variables
weren’t thrown away on exiting a function?  What if you could later
resume the function where it left off?  This is what generators provide;
they can be thought of as resumable functions.

Here’s the simplest example of a generator function:

     def generate_ints(N):
         for i in range(N):
             yield i

A new keyword, *note yield: 21b, was introduced for generators.  Any
function containing a *note yield: 21b. statement is a generator
function; this is detected by Python’s bytecode compiler which compiles
the function specially as a result.  Because a new keyword was
introduced, generators must be explicitly enabled in a module by
including a ‘from __future__ import generators’ statement near the top
of the module’s source code.  In Python 2.3 this statement will become
unnecessary.

When you call a generator function, it doesn’t return a single value;
instead it returns a generator object that supports the iterator
protocol.  On executing the *note yield: 21b. statement, the generator
outputs the value of ‘i’, similar to a *note return: 781. statement.
The big difference between *note yield: 21b. and a *note return: 781.
statement is that on reaching a *note yield: 21b. the generator’s state
of execution is suspended and local variables are preserved.  On the
next call to the generator’s ‘next()’ method, the function will resume
executing immediately after the *note yield: 21b. statement.  (For
complicated reasons, the *note yield: 21b. statement isn’t allowed
inside the *note try: 7ee. block of a *note try: 7ee...*note finally:
2c5. statement; read PEP 255(1) for a full explanation of the
interaction between *note yield: 21b. and exceptions.)

Here’s a sample usage of the ‘generate_ints()’ generator:

     >>> gen = generate_ints(3)
     >>> gen
     <generator object at 0x8117f90>
     >>> gen.next()
     0
     >>> gen.next()
     1
     >>> gen.next()
     2
     >>> gen.next()
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
       File "<stdin>", line 2, in generate_ints
     StopIteration

You could equally write ‘for i in generate_ints(5)’, or ‘a,b,c =
generate_ints(3)’.

Inside a generator function, the *note return: 781. statement can only
be used without a value, and signals the end of the procession of
values; afterwards the generator cannot return any further values.
*note return: 781. with a value, such as ‘return 5’, is a syntax error
inside a generator function.  The end of the generator’s results can
also be indicated by raising *note StopIteration: 7a5. manually, or by
just letting the flow of execution fall off the bottom of the function.

You could achieve the effect of generators manually by writing your own
class and storing all the local variables of the generator as instance
variables.  For example, returning a list of integers could be done by
setting ‘self.count’ to 0, and having the *note next(): 6c6. method
increment ‘self.count’ and return it.  However, for a moderately
complicated generator, writing a corresponding class would be much
messier.  ‘Lib/test/test_generators.py’ contains a number of more
interesting examples.  The simplest one implements an in-order traversal
of a tree using generators recursively.

     # A recursive generator that generates Tree leaves in in-order.
     def inorder(t):
         if t:
             for x in inorder(t.left):
                 yield x
             yield t.label
             for x in inorder(t.right):
                 yield x

Two other examples in ‘Lib/test/test_generators.py’ produce solutions
for the N-Queens problem (placing $N$ queens on an $NxN$ chess board so
that no queen threatens another) and the Knight’s Tour (a route that
takes a knight to every square of an $NxN$ chessboard without visiting
any square twice).

The idea of generators comes from other programming languages,
especially Icon (‘http://www.cs.arizona.edu/icon/’), where the idea of
generators is central.  In Icon, every expression and function call
behaves like a generator.  One example from "An Overview of the Icon
Programming Language" at
‘http://www.cs.arizona.edu/icon/docs/ipd266.htm’ gives an idea of what
this looks like:

     sentence := "Store it in the neighboring harbor"
     if (i := find("or", sentence)) > 5 then write(i)

In Icon the ‘find()’ function returns the indexes at which the substring
"or" is found: 3, 23, 33.  In the *note if: 86d. statement, ‘i’ is first
assigned a value of 3, but 3 is less than 5, so the comparison fails,
and Icon retries it with the second value of 23.  23 is greater than 5,
so the comparison now succeeds, and the code prints the value 23 to the
screen.

Python doesn’t go nearly as far as Icon in adopting generators as a
central concept.  Generators are considered a new part of the core
Python language, but learning or using them isn’t compulsory; if they
don’t solve any problems that you have, feel free to ignore them.  One
novel feature of Python’s interface as compared to Icon’s is that a
generator’s state is represented as a concrete object (the iterator)
that can be passed around to other functions or stored in a data
structure.

See also
........

PEP 255(2) - Simple Generators

     Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.
     Implemented mostly by Neil Schemenauer and Tim Peters, with other
     fixes from the Python Labs crew.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0255

   (2) https://www.python.org/dev/peps/pep-0255


File: python.info,  Node: PEP 237 Unifying Long Integers and Integers<2>,  Next: PEP 238 Changing the Division Operator,  Prev: PEP 255 Simple Generators<2>,  Up: What's New in Python 2 2

1.11.5 PEP 237: Unifying Long Integers and Integers
---------------------------------------------------

In recent versions, the distinction between regular integers, which are
32-bit values on most machines, and long integers, which can be of
arbitrary size, was becoming an annoyance.  For example, on platforms
that support files larger than ‘2**32’ bytes, the ‘tell()’ method of
file objects has to return a long integer.  However, there were various
bits of Python that expected plain integers and would raise an error if
a long integer was provided instead.  For example, in Python 1.5, only
regular integers could be used as a slice index, and ‘'abc'[1L:]’ would
raise a *note TypeError: 309. exception with the message ’slice index
must be int’.

Python 2.2 will shift values from short to long integers as required.
The ’L’ suffix is no longer needed to indicate a long integer literal,
as now the compiler will choose the appropriate type.  (Using the ’L’
suffix will be discouraged in future 2.x versions of Python, triggering
a warning in Python 2.4, and probably dropped in Python 3.0.)  Many
operations that used to raise an *note OverflowError: 325. will now
return a long integer as their result.  For example:

     >>> 1234567890123
     1234567890123L
     >>> 2 ** 64
     18446744073709551616L

In most cases, integers and long integers will now be treated
identically.  You can still distinguish them with the *note type(): 8c1.
built-in function, but that’s rarely needed.

See also
........

PEP 237(1) - Unifying Long Integers and Integers

     Written by Moshe Zadka and Guido van Rossum.  Implemented mostly by
     Guido van Rossum.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0237


File: python.info,  Node: PEP 238 Changing the Division Operator,  Next: Unicode Changes,  Prev: PEP 237 Unifying Long Integers and Integers<2>,  Up: What's New in Python 2 2

1.11.6 PEP 238: Changing the Division Operator
----------------------------------------------

The most controversial change in Python 2.2 heralds the start of an
effort to fix an old design flaw that’s been in Python from the
beginning.  Currently Python’s division operator, ‘/’, behaves like C’s
division operator when presented with two integer arguments: it returns
an integer result that’s truncated down when there would be a fractional
part.  For example, ‘3/2’ is 1, not 1.5, and ‘(-1)/2’ is -1, not -0.5.
This means that the results of division can vary unexpectedly depending
on the type of the two operands and because Python is dynamically typed,
it can be difficult to determine the possible types of the operands.

(The controversy is over whether this is `really' a design flaw, and
whether it’s worth breaking existing code to fix this.  It’s caused
endless discussions on python-dev, and in July 2001 erupted into an
storm of acidly sarcastic postings on ‘comp.lang.python’.  I won’t argue
for either side here and will stick to describing what’s implemented in
2.2.  Read PEP 238(1) for a summary of arguments and counter-arguments.)

Because this change might break code, it’s being introduced very
gradually.  Python 2.2 begins the transition, but the switch won’t be
complete until Python 3.0.

First, I’ll borrow some terminology from PEP 238(2).  "True division" is
the division that most non-programmers are familiar with: 3/2 is 1.5,
1/4 is 0.25, and so forth.  "Floor division" is what Python’s ‘/’
operator currently does when given integer operands; the result is the
floor of the value returned by true division.  "Classic division" is the
current mixed behaviour of ‘/’; it returns the result of floor division
when the operands are integers, and returns the result of true division
when one of the operands is a floating-point number.

Here are the changes 2.2 introduces:

   * A new operator, ‘//’, is the floor division operator.  (Yes, we
     know it looks like C++’s comment symbol.)  ‘//’ `always' performs
     floor division no matter what the types of its operands are, so ‘1
     // 2’ is 0 and ‘1.0 // 2.0’ is also 0.0.

     ‘//’ is always available in Python 2.2; you don’t need to enable it
     using a ‘__future__’ statement.

   * By including a ‘from __future__ import division’ in a module, the
     ‘/’ operator will be changed to return the result of true division,
     so ‘1/2’ is 0.5.  Without the ‘__future__’ statement, ‘/’ still
     means classic division.  The default meaning of ‘/’ will not change
     until Python 3.0.

   * Classes can define methods called *note __truediv__(): 8c3. and
     *note __floordiv__(): 8c4. to overload the two division operators.
     At the C level, there are also slots in the *note PyNumberMethods:
     800. structure so extension types can define the two operators.

   * Python 2.2 supports some command-line arguments for testing whether
     code will works with the changed division semantics.  Running
     python with ‘-Q warn’ will cause a warning to be issued whenever
     division is applied to two integers.  You can use this to find code
     that’s affected by the change and fix it.  By default, Python 2.2
     will simply perform classic division without a warning; the warning
     will be turned on by default in Python 2.3.

See also
........

PEP 238(3) - Changing the Division Operator

     Written by Moshe Zadka and Guido van Rossum.  Implemented by Guido
     van Rossum..

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0238

   (2) https://www.python.org/dev/peps/pep-0238

   (3) https://www.python.org/dev/peps/pep-0238


File: python.info,  Node: Unicode Changes,  Next: PEP 227 Nested Scopes,  Prev: PEP 238 Changing the Division Operator,  Up: What's New in Python 2 2

1.11.7 Unicode Changes
----------------------

Python’s Unicode support has been enhanced a bit in 2.2.  Unicode
strings are usually stored as UCS-2, as 16-bit unsigned integers.
Python 2.2 can also be compiled to use UCS-4, 32-bit unsigned integers,
as its internal encoding by supplying ‘--enable-unicode=ucs4’ to the
configure script.  (It’s also possible to specify ‘--disable-unicode’ to
completely disable Unicode support.)

When built to use UCS-4 (a "wide Python"), the interpreter can natively
handle Unicode characters from U+000000 to U+110000, so the range of
legal values for the ‘unichr()’ function is expanded accordingly.  Using
an interpreter compiled to use UCS-2 (a "narrow Python"), values greater
than 65535 will still cause ‘unichr()’ to raise a *note ValueError: 321.
exception.  This is all described in PEP 261(1), "Support for ’wide’
Unicode characters"; consult it for further details.

Another change is simpler to explain.  Since their introduction, Unicode
strings have supported an ‘encode()’ method to convert the string to a
selected encoding such as UTF-8 or Latin-1.  A symmetric
‘decode([*encoding*])’ method has been added to 8-bit strings (though
not to Unicode strings) in 2.2.  ‘decode()’ assumes that the string is
in the specified encoding and decodes it, returning whatever is returned
by the codec.

Using this new feature, codecs have been added for tasks not directly
related to Unicode.  For example, codecs have been added for
uu-encoding, MIME’s base64 encoding, and compression with the *note
zlib: 13c. module:

     >>> s = """Here is a lengthy piece of redundant, overly verbose,
     ... and repetitive text.
     ... """
     >>> data = s.encode('zlib')
     >>> data
     'x\x9c\r\xc9\xc1\r\x80 \x10\x04\xc0?Ul...'
     >>> data.decode('zlib')
     'Here is a lengthy piece of redundant, overly verbose,\nand repetitive text.\n'
     >>> print s.encode('uu')
     begin 666 <data>
     M2&5R92!I<R!A(&QE;F=T:'D@<&EE8V4@;V8@<F5D=6YD86YT+"!O=F5R;'D@
     >=F5R8F]S92P*86YD(')E<&5T:71I=F4@=&5X="X*

     end
     >>> "sheesh".encode('rot-13')
     'furrfu'

To convert a class instance to Unicode, a ‘__unicode__()’ method can be
defined by a class, analogous to *note __str__(): 8c6.

‘encode()’, ‘decode()’, and ‘__unicode__()’ were implemented by
Marc-André Lemburg.  The changes to support using UCS-4 internally were
implemented by Fredrik Lundh and Martin von Löwis.

See also
........

PEP 261(2) - Support for ’wide’ Unicode characters

     Written by Paul Prescod.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0261

   (2) https://www.python.org/dev/peps/pep-0261


File: python.info,  Node: PEP 227 Nested Scopes,  Next: New and Improved Modules<3>,  Prev: Unicode Changes,  Up: What's New in Python 2 2

1.11.8 PEP 227: Nested Scopes
-----------------------------

In Python 2.1, statically nested scopes were added as an optional
feature, to be enabled by a ‘from __future__ import nested_scopes’
directive.  In 2.2 nested scopes no longer need to be specially enabled,
and are now always present.  The rest of this section is a copy of the
description of nested scopes from my "What’s New in Python 2.1"
document; if you read it when 2.1 came out, you can skip the rest of
this section.

The largest change introduced in Python 2.1, and made complete in 2.2,
is to Python’s scoping rules.  In Python 2.0, at any given time there
are at most three namespaces used to look up variable names: local,
module-level, and the built-in namespace.  This often surprised people
because it didn’t match their intuitive expectations.  For example, a
nested recursive function definition doesn’t work:

     def f():
         ...
         def g(value):
             ...
             return g(value-1) + 1
         ...

The function ‘g()’ will always raise a *note NameError: 7f8. exception,
because the binding of the name ‘g’ isn’t in either its local namespace
or in the module-level namespace.  This isn’t much of a problem in
practice (how often do you recursively define interior functions like
this?), but this also made using the *note lambda: 687. statement
clumsier, and this was a problem in practice.  In code which uses *note
lambda: 687. you can often find local variables being copied by passing
them as the default values of arguments.

     def find(self, name):
         "Return list of any entries equal to 'name'"
         L = filter(lambda x, name=name: x == name,
                    self.list_attribute)
         return L

The readability of Python code written in a strongly functional style
suffers greatly as a result.

The most significant change to Python 2.2 is that static scoping has
been added to the language to fix this problem.  As a first effect, the
‘name=name’ default argument is now unnecessary in the above example.
Put simply, when a given variable name is not assigned a value within a
function (by an assignment, or the *note def: 841, *note class: 6ce, or
*note import: 674. statements), references to the variable will be
looked up in the local namespace of the enclosing scope.  A more
detailed explanation of the rules, and a dissection of the
implementation, can be found in the PEP.

This change may cause some compatibility problems for code where the
same variable name is used both at the module level and as a local
variable within a function that contains further function definitions.
This seems rather unlikely though, since such code would have been
pretty confusing to read in the first place.

One side effect of the change is that the ‘from module import *’ and
‘exec’ statements have been made illegal inside a function scope under
certain conditions.  The Python reference manual has said all along that
‘from module import *’ is only legal at the top level of a module, but
the CPython interpreter has never enforced this before.  As part of the
implementation of nested scopes, the compiler which turns Python source
into bytecodes has to generate different code to access variables in a
containing scope.  ‘from module import *’ and ‘exec’ make it impossible
for the compiler to figure this out, because they add names to the local
namespace that are unknowable at compile time.  Therefore, if a function
contains function definitions or *note lambda: 687. expressions with
free variables, the compiler will flag this by raising a *note
SyntaxError: 319. exception.

To make the preceding explanation a bit clearer, here’s an example:

     x = 1
     def f():
         # The next line is a syntax error
         exec 'x=2'
         def g():
             return x

Line 4 containing the ‘exec’ statement is a syntax error, since ‘exec’
would define a new local variable named ‘x’ whose value should be
accessed by ‘g()’.

This shouldn’t be much of a limitation, since ‘exec’ is rarely used in
most Python code (and when it is used, it’s often a sign of a poor
design anyway).

See also
........

PEP 227(1) - Statically Nested Scopes

     Written and implemented by Jeremy Hylton.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0227


File: python.info,  Node: New and Improved Modules<3>,  Next: Interpreter Changes and Fixes,  Prev: PEP 227 Nested Scopes,  Up: What's New in Python 2 2

1.11.9 New and Improved Modules
-------------------------------

   * The ‘xmlrpclib’ module was contributed to the standard library by
     Fredrik Lundh, providing support for writing XML-RPC clients.
     XML-RPC is a simple remote procedure call protocol built on top of
     HTTP and XML. For example, the following snippet retrieves a list
     of RSS channels from the O’Reilly Network, and then lists the
     recent headlines for one channel:

          import xmlrpclib
          s = xmlrpclib.Server(
                'http://www.oreillynet.com/meerkat/xml-rpc/server.php')
          channels = s.meerkat.getChannels()
          # channels is a list of dictionaries, like this:
          # [{'id': 4, 'title': 'Freshmeat Daily News'}
          #  {'id': 190, 'title': '32Bits Online'},
          #  {'id': 4549, 'title': '3DGamers'}, ... ]

          # Get the items for one channel
          items = s.meerkat.getItems( {'channel': 4} )

          # 'items' is another list of dictionaries, like this:
          # [{'link': 'http://freshmeat.net/releases/52719/',
          #   'description': 'A utility which converts HTML to XSL FO.',
          #   'title': 'html2fo 0.3 (Default)'}, ... ]

     The ‘SimpleXMLRPCServer’ module makes it easy to create
     straightforward XML-RPC servers.  See ‘http://www.xmlrpc.com/’ for
     more information about XML-RPC.

   * The new *note hmac: 8e. module implements the HMAC algorithm
     described by RFC 2104(1).  (Contributed by Gerhard Häring.)

   * Several functions that originally returned lengthy tuples now
     return pseudo- sequences that still behave like tuples but also
     have mnemonic attributes such as memberst_mtime or ‘tm_year’.  The
     enhanced functions include *note stat(): ef, ‘fstat()’,
     ‘statvfs()’, and ‘fstatvfs()’ in the *note os: c0. module, and
     ‘localtime()’, ‘gmtime()’, and ‘strptime()’ in the *note time: 104.
     module.

     For example, to obtain a file’s size using the old tuples, you’d
     end up writing something like ‘file_size =
     os.stat(filename)[stat.ST_SIZE]’, but now this can be written more
     clearly as ‘file_size = os.stat(filename).st_size’.

     The original patch for this feature was contributed by Nick
     Mathewson.

   * The Python profiler has been extensively reworked and various
     errors in its output have been corrected.  (Contributed by Fred L.
     Drake, Jr.  and Tim Peters.)

   * The *note socket: ea. module can be compiled to support IPv6;
     specify the ‘--enable-ipv6’ option to Python’s configure script.
     (Contributed by Jun-ichiro "itojun" Hagino.)

   * Two new format characters were added to the *note struct: f3.
     module for 64-bit integers on platforms that support the C ‘long
     long’ type.  ‘q’ is for a signed 64-bit integer, and ‘Q’ is for an
     unsigned one.  The value is returned in Python’s long integer type.
     (Contributed by Tim Peters.)

   * In the interpreter’s interactive mode, there’s a new built-in
     function *note help(): 157. that uses the *note pydoc: d5. module
     introduced in Python 2.1 to provide interactive help.
     ‘help(object)’ displays any available help text about `object'.
     *note help(): 157. with no argument puts you in an online help
     utility, where you can enter the names of functions, classes, or
     modules to read their help text.  (Contributed by Guido van Rossum,
     using Ka-Ping Yee’s *note pydoc: d5. module.)

   * Various bugfixes and performance improvements have been made to the
     SRE engine underlying the *note re: d9. module.  For example, the
     *note re.sub(): 32c. and *note re.split(): 32a. functions have been
     rewritten in C. Another contributed patch speeds up certain Unicode
     character ranges by a factor of two, and a new ‘finditer()’ method
     that returns an iterator over all the non-overlapping matches in a
     given string.  (SRE is maintained by Fredrik Lundh.  The BIGCHARSET
     patch was contributed by Martin von Löwis.)

   * The *note smtplib: e8. module now supports RFC 2487(2), "Secure
     SMTP over TLS", so it’s now possible to encrypt the SMTP traffic
     between a Python program and the mail transport agent being handed
     a message.  *note smtplib: e8. also supports SMTP authentication.
     (Contributed by Gerhard Häring.)

   * The *note imaplib: 96. module, maintained by Piers Lauder, has
     support for several new extensions: the NAMESPACE extension defined
     in RFC 2342(3), SORT, GETACL and SETACL. (Contributed by Anthony
     Baxter and Michel Pelletier.)

   * The ‘rfc822’ module’s parsing of email addresses is now compliant
     with RFC 2822(4), an update to RFC 822(5).  (The module’s name is
     `not' going to be changed to ‘rfc2822’.)  A new package, *note
     email: 67, has also been added for parsing and generating e-mail
     messages.  (Contributed by Barry Warsaw, and arising out of his
     work on Mailman.)

   * The *note difflib: 35. module now contains a new ‘Differ’ class for
     producing human-readable lists of changes (a "delta") between two
     sequences of lines of text.  There are also two generator
     functions, ‘ndiff()’ and ‘restore()’, which respectively return a
     delta from two sequences, or one of the original sequences from a
     delta.  (Grunt work contributed by David Goodger, from ndiff.py
     code by Tim Peters who then did the generatorization.)

   * New constants ‘ascii_letters’, ‘ascii_lowercase’, and
     ‘ascii_uppercase’ were added to the *note string: f1. module.
     There were several modules in the standard library that used
     ‘string.letters’ to mean the ranges A-Za-z, but that assumption is
     incorrect when locales are in use, because ‘string.letters’ varies
     depending on the set of legal characters defined by the current
     locale.  The buggy modules have all been fixed to use
     ‘ascii_letters’ instead.  (Reported by an unknown person; fixed by
     Fred L. Drake, Jr.)

   * The *note mimetypes: af. module now makes it easier to use
     alternative MIME-type databases by the addition of a ‘MimeTypes’
     class, which takes a list of filenames to be parsed.  (Contributed
     by Fred L. Drake, Jr.)

   * A ‘Timer’ class was added to the *note threading: 103. module that
     allows scheduling an activity to happen at some future time.
     (Contributed by Itamar Shtull-Trauring.)

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc2104.html

   (2) https://tools.ietf.org/html/rfc2487.html

   (3) https://tools.ietf.org/html/rfc2342.html

   (4) https://tools.ietf.org/html/rfc2822.html

   (5) https://tools.ietf.org/html/rfc822.html


File: python.info,  Node: Interpreter Changes and Fixes,  Next: Other Changes and Fixes<3>,  Prev: New and Improved Modules<3>,  Up: What's New in Python 2 2

1.11.10 Interpreter Changes and Fixes
-------------------------------------

Some of the changes only affect people who deal with the Python
interpreter at the C level because they’re writing Python extension
modules, embedding the interpreter, or just hacking on the interpreter
itself.  If you only write Python code, none of the changes described
here will affect you very much.

   * Profiling and tracing functions can now be implemented in C, which
     can operate at much higher speeds than Python-based functions and
     should reduce the overhead of profiling and tracing.  This will be
     of interest to authors of development environments for Python.  Two
     new C functions were added to Python’s API, *note
     PyEval_SetProfile(): 8ca. and *note PyEval_SetTrace(): 8cb.  The
     existing *note sys.setprofile(): 8cc. and *note sys.settrace():
     8cd. functions still exist, and have simply been changed to use the
     new C-level interface.  (Contributed by Fred L. Drake, Jr.)

   * Another low-level API, primarily of interest to implementors of
     Python debuggers and development tools, was added.  *note
     PyInterpreterState_Head(): 8ce. and *note
     PyInterpreterState_Next(): 8cf. let a caller walk through all the
     existing interpreter objects; *note
     PyInterpreterState_ThreadHead(): 8d0. and *note
     PyThreadState_Next(): 8d1. allow looping over all the thread states
     for a given interpreter.  (Contributed by David Beazley.)

   * The C-level interface to the garbage collector has been changed to
     make it easier to write extension types that support garbage
     collection and to debug misuses of the functions.  Various
     functions have slightly different semantics, so a bunch of
     functions had to be renamed.  Extensions that use the old API will
     still compile but will `not' participate in garbage collection, so
     updating them for 2.2 should be considered fairly high priority.

     To upgrade an extension module to the new API, perform the
     following steps:

   * Rename ‘Py_TPFLAGS_GC()’ to ‘PyTPFLAGS_HAVE_GC()’.

   * 
     Use *note PyObject_GC_New(): 8d2. or *note PyObject_GC_NewVar(): 8d3. to allocate

          objects, and *note PyObject_GC_Del(): 8d4. to deallocate them.

   * 
     Rename ‘PyObject_GC_Init()’ to *note PyObject_GC_Track(): 8d5. and

          ‘PyObject_GC_Fini()’ to *note PyObject_GC_UnTrack(): 8d6.

   * Remove ‘PyGC_HEAD_SIZE()’ from object size calculations.

   * Remove calls to ‘PyObject_AS_GC()’ and ‘PyObject_FROM_GC()’.

   * A new ‘et’ format sequence was added to *note PyArg_ParseTuple():
     4fa.; ‘et’ takes both a parameter and an encoding name, and
     converts the parameter to the given encoding if the parameter turns
     out to be a Unicode string, or leaves it alone if it’s an 8-bit
     string, assuming it to already be in the desired encoding.  This
     differs from the ‘es’ format character, which assumes that 8-bit
     strings are in Python’s default ASCII encoding and converts them to
     the specified new encoding.  (Contributed by M.-A. Lemburg, and
     used for the MBCS support on Windows described in the following
     section.)

   * A different argument parsing function, *note PyArg_UnpackTuple():
     8d7, has been added that’s simpler and presumably faster.  Instead
     of specifying a format string, the caller simply gives the minimum
     and maximum number of arguments expected, and a set of pointers to
     *note PyObject*: 7fb. variables that will be filled in with
     argument values.

   * Two new flags *note METH_NOARGS: 8a4. and *note METH_O: 8d8. are
     available in method definition tables to simplify implementation of
     methods with no arguments or a single untyped argument.  Calling
     such methods is more efficient than calling a corresponding method
     that uses *note METH_VARARGS: 8d9.  Also, the old ‘METH_OLDARGS’
     style of writing C methods is now officially deprecated.

   * Two new wrapper functions, *note PyOS_snprintf(): 8da. and *note
     PyOS_vsnprintf(): 8db. were added to provide cross-platform
     implementations for the relatively new ‘snprintf()’ and
     ‘vsnprintf()’ C lib APIs.  In contrast to the standard ‘sprintf()’
     and ‘vsprintf()’ functions, the Python versions check the bounds of
     the buffer used to protect against buffer overruns.  (Contributed
     by M.-A. Lemburg.)

   * The *note _PyTuple_Resize(): 8dc. function has lost an unused
     parameter, so now it takes 2 parameters instead of 3.  The third
     argument was never used, and can simply be discarded when porting
     code from earlier versions to Python 2.2.


File: python.info,  Node: Other Changes and Fixes<3>,  Next: Acknowledgements<6>,  Prev: Interpreter Changes and Fixes,  Up: What's New in Python 2 2

1.11.11 Other Changes and Fixes
-------------------------------

As usual there were a bunch of other improvements and bugfixes scattered
throughout the source tree.  A search through the CVS change logs finds
there were 527 patches applied and 683 bugs fixed between Python 2.1 and
2.2; 2.2.1 applied 139 patches and fixed 143 bugs; 2.2.2 applied 106
patches and fixed 82 bugs.  These figures are likely to be
underestimates.

Some of the more notable changes are:

   * The code for the MacOS port for Python, maintained by Jack Jansen,
     is now kept in the main Python CVS tree, and many changes have been
     made to support MacOS X.

     The most significant change is the ability to build Python as a
     framework, enabled by supplying the ‘--enable-framework’ option to
     the configure script when compiling Python.  According to Jack
     Jansen, "This installs a self- contained Python installation plus
     the OS X framework "glue" into
     ‘/Library/Frameworks/Python.framework’ (or another location of
     choice).  For now there is little immediate added benefit to this
     (actually, there is the disadvantage that you have to change your
     PATH to be able to find Python), but it is the basis for creating a
     full-blown Python application, porting the MacPython IDE, possibly
     using Python as a standard OSA scripting language and much more."

     Most of the MacPython toolbox modules, which interface to MacOS
     APIs such as windowing, QuickTime, scripting, etc.  have been
     ported to OS X, but they’ve been left commented out in ‘setup.py’.
     People who want to experiment with these modules can uncomment them
     manually.

   * Keyword arguments passed to built-in functions that don’t take them
     now cause a *note TypeError: 309. exception to be raised, with the
     message "`function' takes no keyword arguments".

   * Weak references, added in Python 2.1 as an extension module, are
     now part of the core because they’re used in the implementation of
     new-style classes.  The *note ReferenceError: 8de. exception has
     therefore moved from the *note weakref: 121. module to become a
     built-in exception.

   * A new script, ‘Tools/scripts/cleanfuture.py’ by Tim Peters,
     automatically removes obsolete ‘__future__’ statements from Python
     source code.

   * An additional `flags' argument has been added to the built-in
     function *note compile(): 6fe, so the behaviour of ‘__future__’
     statements can now be correctly observed in simulated shells, such
     as those presented by IDLE and other development environments.
     This is described in PEP 264(1).  (Contributed by Michael Hudson.)

   * The new license introduced with Python 1.6 wasn’t GPL-compatible.
     This is fixed by some minor textual changes to the 2.2 license, so
     it’s now legal to embed Python inside a GPLed program again.  Note
     that Python itself is not GPLed, but instead is under a license
     that’s essentially equivalent to the BSD license, same as it always
     was.  The license changes were also applied to the Python 2.0.1 and
     2.1.1 releases.

   * When presented with a Unicode filename on Windows, Python will now
     convert it to an MBCS encoded string, as used by the Microsoft file
     APIs.  As MBCS is explicitly used by the file APIs, Python’s choice
     of ASCII as the default encoding turns out to be an annoyance.  On
     Unix, the locale’s character set is used if
     ‘locale.nl_langinfo(CODESET)’ is available.  (Windows support was
     contributed by Mark Hammond with assistance from Marc-André
     Lemburg.  Unix support was added by Martin von Löwis.)

   * Large file support is now enabled on Windows.  (Contributed by Tim
     Peters.)

   * The ‘Tools/scripts/ftpmirror.py’ script now parses a ‘.netrc’ file,
     if you have one.  (Contributed by Mike Romberg.)

   * Some features of the object returned by the ‘xrange()’ function are
     now deprecated, and trigger warnings when they’re accessed; they’ll
     disappear in Python 2.3.  ‘xrange’ objects tried to pretend they
     were full sequence types by supporting slicing, sequence
     multiplication, and the *note in: 6d5. operator, but these features
     were rarely used and therefore buggy.  The ‘tolist()’ method and
     the ‘start’, ‘stop’, and ‘step’ attributes are also being
     deprecated.  At the C level, the fourth argument to the
     ‘PyRange_New()’ function, ‘repeat’, has also been deprecated.

   * There were a bunch of patches to the dictionary implementation,
     mostly to fix potential core dumps if a dictionary contains objects
     that sneakily changed their hash value, or mutated the dictionary
     they were contained in.  For a while python-dev fell into a gentle
     rhythm of Michael Hudson finding a case that dumped core, Tim
     Peters fixing the bug, Michael finding another case, and round and
     round it went.

   * On Windows, Python can now be compiled with Borland C thanks to a
     number of patches contributed by Stephen Hansen, though the result
     isn’t fully functional yet.  (But this `is' progress...)

   * Another Windows enhancement: Wise Solutions generously offered
     PythonLabs use of their InstallerMaster 8.1 system.  Earlier
     PythonLabs Windows installers used Wise 5.0a, which was beginning
     to show its age.  (Packaged up by Tim Peters.)

   * Files ending in ‘.pyw’ can now be imported on Windows.  ‘.pyw’ is a
     Windows-only thing, used to indicate that a script needs to be run
     using PYTHONW.EXE instead of PYTHON.EXE in order to prevent a DOS
     console from popping up to display the output.  This patch makes it
     possible to import such scripts, in case they’re also usable as
     modules.  (Implemented by David Bolen.)

   * On platforms where Python uses the C ‘dlopen()’ function to load
     extension modules, it’s now possible to set the flags used by
     ‘dlopen()’ using the *note sys.getdlopenflags(): 8df. and *note
     sys.setdlopenflags(): 469. functions.  (Contributed by Bram Stolk.)

   * The *note pow(): 8e0. built-in function no longer supports 3
     arguments when floating-point numbers are supplied.  ‘pow(x, y, z)’
     returns ‘(x**y) % z’, but this is never useful for floating point
     numbers, and the final result varies unpredictably depending on the
     platform.  A call such as ‘pow(2.0, 8.0, 7.0)’ will now raise a
     *note TypeError: 309. exception.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0264


File: python.info,  Node: Acknowledgements<6>,  Prev: Other Changes and Fixes<3>,  Up: What's New in Python 2 2

1.11.12 Acknowledgements
------------------------

The author would like to thank the following people for offering
suggestions, corrections and assistance with various drafts of this
article: Fred Bremmer, Keith Briggs, Andrew Dalke, Fred L. Drake, Jr.,
Carel Fellinger, David Goodger, Mark Hammond, Stephen Hansen, Michael
Hudson, Jack Jansen, Marc-André Lemburg, Martin von Löwis, Fredrik
Lundh, Michael McLay, Nick Mathewson, Paul Moore, Gustavo Niemeyer, Don
O’Donnell, Joonas Paalasma, Tim Peters, Jens Quade, Tom Reinhardt, Neil
Schemenauer, Guido van Rossum, Greg Ward, Edward Welbourne.


File: python.info,  Node: What's New in Python 2 1,  Next: What's New in Python 2 0,  Prev: What's New in Python 2 2,  Up: What's New in Python

1.12 What’s New in Python 2.1
=============================


Author: A.M. Kuchling

* Menu:

* Introduction: Introduction<2>. 
* PEP 227; Nested Scopes: PEP 227 Nested Scopes<2>. 
* PEP 236; __future__ Directives: PEP 236 __future__ Directives. 
* PEP 207; Rich Comparisons: PEP 207 Rich Comparisons. 
* PEP 230; Warning Framework: PEP 230 Warning Framework. 
* PEP 229; New Build System: PEP 229 New Build System. 
* PEP 205; Weak References: PEP 205 Weak References. 
* PEP 232; Function Attributes: PEP 232 Function Attributes. 
* PEP 235; Importing Modules on Case-Insensitive Platforms: PEP 235 Importing Modules on Case-Insensitive Platforms. 
* PEP 217; Interactive Display Hook: PEP 217 Interactive Display Hook. 
* PEP 208; New Coercion Model: PEP 208 New Coercion Model. 
* PEP 241; Metadata in Python Packages: PEP 241 Metadata in Python Packages. 
* New and Improved Modules: New and Improved Modules<4>. 
* Other Changes and Fixes: Other Changes and Fixes<4>. 
* Acknowledgements: Acknowledgements<7>. 


File: python.info,  Node: Introduction<2>,  Next: PEP 227 Nested Scopes<2>,  Up: What's New in Python 2 1

1.12.1 Introduction
-------------------

This article explains the new features in Python 2.1.  While there
aren’t as many changes in 2.1 as there were in Python 2.0, there are
still some pleasant surprises in store.  2.1 is the first release to be
steered through the use of Python Enhancement Proposals, or PEPs, so
most of the sizable changes have accompanying PEPs that provide more
complete documentation and a design rationale for the change.  This
article doesn’t attempt to document the new features completely, but
simply provides an overview of the new features for Python programmers.
Refer to the Python 2.1 documentation, or to the specific PEP, for more
details about any new feature that particularly interests you.

One recent goal of the Python development team has been to accelerate
the pace of new releases, with a new release coming every 6 to 9 months.
2.1 is the first release to come out at this faster pace, with the first
alpha appearing in January, 3 months after the final version of 2.0 was
released.

The final release of Python 2.1 was made on April 17, 2001.


File: python.info,  Node: PEP 227 Nested Scopes<2>,  Next: PEP 236 __future__ Directives,  Prev: Introduction<2>,  Up: What's New in Python 2 1

1.12.2 PEP 227: Nested Scopes
-----------------------------

The largest change in Python 2.1 is to Python’s scoping rules.  In
Python 2.0, at any given time there are at most three namespaces used to
look up variable names: local, module-level, and the built-in namespace.
This often surprised people because it didn’t match their intuitive
expectations.  For example, a nested recursive function definition
doesn’t work:

     def f():
         ...
         def g(value):
             ...
             return g(value-1) + 1
         ...

The function ‘g()’ will always raise a *note NameError: 7f8. exception,
because the binding of the name ‘g’ isn’t in either its local namespace
or in the module-level namespace.  This isn’t much of a problem in
practice (how often do you recursively define interior functions like
this?), but this also made using the *note lambda: 687. statement
clumsier, and this was a problem in practice.  In code which uses *note
lambda: 687. you can often find local variables being copied by passing
them as the default values of arguments.

     def find(self, name):
         "Return list of any entries equal to 'name'"
         L = filter(lambda x, name=name: x == name,
                    self.list_attribute)
         return L

The readability of Python code written in a strongly functional style
suffers greatly as a result.

The most significant change to Python 2.1 is that static scoping has
been added to the language to fix this problem.  As a first effect, the
‘name=name’ default argument is now unnecessary in the above example.
Put simply, when a given variable name is not assigned a value within a
function (by an assignment, or the *note def: 841, *note class: 6ce, or
*note import: 674. statements), references to the variable will be
looked up in the local namespace of the enclosing scope.  A more
detailed explanation of the rules, and a dissection of the
implementation, can be found in the PEP.

This change may cause some compatibility problems for code where the
same variable name is used both at the module level and as a local
variable within a function that contains further function definitions.
This seems rather unlikely though, since such code would have been
pretty confusing to read in the first place.

One side effect of the change is that the ‘from module import *’ and
‘exec’ statements have been made illegal inside a function scope under
certain conditions.  The Python reference manual has said all along that
‘from module import *’ is only legal at the top level of a module, but
the CPython interpreter has never enforced this before.  As part of the
implementation of nested scopes, the compiler which turns Python source
into bytecodes has to generate different code to access variables in a
containing scope.  ‘from module import *’ and ‘exec’ make it impossible
for the compiler to figure this out, because they add names to the local
namespace that are unknowable at compile time.  Therefore, if a function
contains function definitions or *note lambda: 687. expressions with
free variables, the compiler will flag this by raising a *note
SyntaxError: 319. exception.

To make the preceding explanation a bit clearer, here’s an example:

     x = 1
     def f():
         # The next line is a syntax error
         exec 'x=2'
         def g():
             return x

Line 4 containing the ‘exec’ statement is a syntax error, since ‘exec’
would define a new local variable named ‘x’ whose value should be
accessed by ‘g()’.

This shouldn’t be much of a limitation, since ‘exec’ is rarely used in
most Python code (and when it is used, it’s often a sign of a poor
design anyway).

Compatibility concerns have led to nested scopes being introduced
gradually; in Python 2.1, they aren’t enabled by default, but can be
turned on within a module by using a future statement as described in
PEP 236.  (See the following section for further discussion of PEP 236.)
In Python 2.2, nested scopes will become the default and there will be
no way to turn them off, but users will have had all of 2.1’s lifetime
to fix any breakage resulting from their introduction.

See also
........

PEP 227(1) - Statically Nested Scopes

     Written and implemented by Jeremy Hylton.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0227


File: python.info,  Node: PEP 236 __future__ Directives,  Next: PEP 207 Rich Comparisons,  Prev: PEP 227 Nested Scopes<2>,  Up: What's New in Python 2 1

1.12.3 PEP 236: __future__ Directives
-------------------------------------

The reaction to nested scopes was widespread concern about the dangers
of breaking code with the 2.1 release, and it was strong enough to make
the Pythoneers take a more conservative approach.  This approach
consists of introducing a convention for enabling optional functionality
in release N that will become compulsory in release N+1.

The syntax uses a ‘from...import’ statement using the reserved module
name *note __future__: 0.  Nested scopes can be enabled by the following
statement:

     from __future__ import nested_scopes

While it looks like a normal *note import: 674. statement, it’s not;
there are strict rules on where such a future statement can be put.
They can only be at the top of a module, and must precede any Python
code or regular *note import: 674. statements.  This is because such
statements can affect how the Python bytecode compiler parses code and
generates bytecode, so they must precede any statement that will result
in bytecodes being produced.

See also
........

PEP 236(1) - Back to the *note __future__: 0.

     Written by Tim Peters, and primarily implemented by Jeremy Hylton.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0236


File: python.info,  Node: PEP 207 Rich Comparisons,  Next: PEP 230 Warning Framework,  Prev: PEP 236 __future__ Directives,  Up: What's New in Python 2 1

1.12.4 PEP 207: Rich Comparisons
--------------------------------

In earlier versions, Python’s support for implementing comparisons on
user- defined classes and extension types was quite simple.  Classes
could implement a ‘__cmp__()’ method that was given two instances of a
class, and could only return 0 if they were equal or +1 or -1 if they
weren’t; the method couldn’t raise an exception or return anything other
than a Boolean value.  Users of Numeric Python often found this model
too weak and restrictive, because in the number-crunching programs that
numeric Python is used for, it would be more useful to be able to
perform elementwise comparisons of two matrices, returning a matrix
containing the results of a given comparison for each element.  If the
two matrices are of different sizes, then the compare has to be able to
raise an exception to signal the error.

In Python 2.1, rich comparisons were added in order to support this
need.  Python classes can now individually overload each of the ‘<’,
‘<=’, ‘>’, ‘>=’, ‘==’, and ‘!=’ operations.  The new magic method names
are:

Operation       Method name
                
-------------------------------------
                
‘<’             *note __lt__():
                68c.
                
                
‘<=’            *note __le__():
                70f.
                
                
‘>’             *note __gt__():
                710.
                
                
‘>=’            *note __ge__():
                711.
                
                
‘==’            *note __eq__():
                68d.
                
                
‘!=’            *note __ne__():
                8e8.
                

(The magic methods are named after the corresponding Fortran operators
‘.LT.’.  ‘.LE.’, &c.  Numeric programmers are almost certainly quite
familiar with these names and will find them easy to remember.)

Each of these magic methods is of the form ‘method(self, other)’, where
‘self’ will be the object on the left-hand side of the operator, while
‘other’ will be the object on the right-hand side.  For example, the
expression ‘A < B’ will cause ‘A.__lt__(B)’ to be called.

Each of these magic methods can return anything at all: a Boolean, a
matrix, a list, or any other Python object.  Alternatively they can
raise an exception if the comparison is impossible, inconsistent, or
otherwise meaningless.

The built-in ‘cmp(A,B)’ function can use the rich comparison machinery,
and now accepts an optional argument specifying which comparison
operation to use; this is given as one of the strings ‘"<"’, ‘"<="’,
‘">"’, ‘">="’, ‘"=="’, or ‘"!="’.  If called without the optional third
argument, ‘cmp()’ will only return -1, 0, or +1 as in previous versions
of Python; otherwise it will call the appropriate method and can return
any Python object.

There are also corresponding changes of interest to C programmers;
there’s a new slot ‘tp_richcmp’ in type objects and an API for
performing a given rich comparison.  I won’t cover the C API here, but
will refer you to PEP 207, or to 2.1’s C API documentation, for the full
list of related functions.

See also
........

PEP 207(1) - Rich Comparisions

     Written by Guido van Rossum, heavily based on earlier work by David
     Ascher, and implemented by Guido van Rossum.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0207


File: python.info,  Node: PEP 230 Warning Framework,  Next: PEP 229 New Build System,  Prev: PEP 207 Rich Comparisons,  Up: What's New in Python 2 1

1.12.5 PEP 230: Warning Framework
---------------------------------

Over its 10 years of existence, Python has accumulated a certain number
of obsolete modules and features along the way.  It’s difficult to know
when a feature is safe to remove, since there’s no way of knowing how
much code uses it — perhaps no programs depend on the feature, or
perhaps many do.  To enable removing old features in a more structured
way, a warning framework was added.  When the Python developers want to
get rid of a feature, it will first trigger a warning in the next
version of Python.  The following Python version can then drop the
feature, and users will have had a full release cycle to remove uses of
the old feature.

Python 2.1 adds the warning framework to be used in this scheme.  It
adds a *note warnings: 11f. module that provide functions to issue
warnings, and to filter out warnings that you don’t want to be
displayed.  Third-party modules can also use this framework to deprecate
old features that they no longer wish to support.

For example, in Python 2.1 the ‘regex’ module is deprecated, so
importing it causes a warning to be printed:

     >>> import regex
     __main__:1: DeprecationWarning: the regex module
              is deprecated; please use the re module
     >>>

Warnings can be issued by calling the *note warnings.warn(): 8ea.
function:

     warnings.warn("feature X no longer supported")

The first parameter is the warning message; an additional optional
parameters can be used to specify a particular warning category.

Filters can be added to disable certain warnings; a regular expression
pattern can be applied to the message or to the module name in order to
suppress a warning.  For example, you may have a program that uses the
‘regex’ module and not want to spare the time to convert it to use the
*note re: d9. module right now.  The warning can be suppressed by
calling

     import warnings
     warnings.filterwarnings(action = 'ignore',
                             message='.*regex module is deprecated',
                             category=DeprecationWarning,
                             module = '__main__')

This adds a filter that will apply only to warnings of the class *note
DeprecationWarning: 2e1. triggered in the *note __main__: 1. module, and
applies a regular expression to only match the message about the ‘regex’
module being deprecated, and will cause such warnings to be ignored.
Warnings can also be printed only once, printed every time the offending
code is executed, or turned into exceptions that will cause the program
to stop (unless the exceptions are caught in the usual way, of course).

Functions were also added to Python’s C API for issuing warnings; refer
to PEP 230 or to Python’s API documentation for the details.

See also
........

PEP 5(1) - Guidelines for Language Evolution

     Written by Paul Prescod, to specify procedures to be followed when
     removing old features from Python.  The policy described in this
     PEP hasn’t been officially adopted, but the eventual policy
     probably won’t be too different from Prescod’s proposal.

PEP 230(2) - Warning Framework

     Written and implemented by Guido van Rossum.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0005

   (2) https://www.python.org/dev/peps/pep-0230


File: python.info,  Node: PEP 229 New Build System,  Next: PEP 205 Weak References,  Prev: PEP 230 Warning Framework,  Up: What's New in Python 2 1

1.12.6 PEP 229: New Build System
--------------------------------

When compiling Python, the user had to go in and edit the
‘Modules/Setup’ file in order to enable various additional modules; the
default set is relatively small and limited to modules that compile on
most Unix platforms.  This means that on Unix platforms with many more
features, most notably Linux, Python installations often don’t contain
all useful modules they could.

Python 2.0 added the Distutils, a set of modules for distributing and
installing extensions.  In Python 2.1, the Distutils are used to compile
much of the standard library of extension modules, autodetecting which
ones are supported on the current machine.  It’s hoped that this will
make Python installations easier and more featureful.

Instead of having to edit the ‘Modules/Setup’ file in order to enable
modules, a ‘setup.py’ script in the top directory of the Python source
distribution is run at build time, and attempts to discover which
modules can be enabled by examining the modules and header files on the
system.  If a module is configured in ‘Modules/Setup’, the ‘setup.py’
script won’t attempt to compile that module and will defer to the
‘Modules/Setup’ file’s contents.  This provides a way to specific any
strange command-line flags or libraries that are required for a specific
platform.

In another far-reaching change to the build mechanism, Neil Schemenauer
restructured things so Python now uses a single makefile that isn’t
recursive, instead of makefiles in the top directory and in each of the
‘Python/’, ‘Parser/’, ‘Objects/’, and ‘Modules/’ subdirectories.  This
makes building Python faster and also makes hacking the Makefiles
clearer and simpler.

See also
........

PEP 229(1) - Using Distutils to Build Python

     Written and implemented by A.M. Kuchling.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0229


File: python.info,  Node: PEP 205 Weak References,  Next: PEP 232 Function Attributes,  Prev: PEP 229 New Build System,  Up: What's New in Python 2 1

1.12.7 PEP 205: Weak References
-------------------------------

Weak references, available through the *note weakref: 121. module, are a
minor but useful new data type in the Python programmer’s toolbox.

Storing a reference to an object (say, in a dictionary or a list) has
the side effect of keeping that object alive forever.  There are a few
specific cases where this behaviour is undesirable, object caches being
the most common one, and another being circular references in data
structures such as trees.

For example, consider a memoizing function that caches the results of
another function ‘f(x)’ by storing the function’s argument and its
result in a dictionary:

     _cache = {}
     def memoize(x):
         if _cache.has_key(x):
             return _cache[x]

         retval = f(x)

         # Cache the returned object
         _cache[x] = retval

         return retval

This version works for simple things such as integers, but it has a side
effect; the ‘_cache’ dictionary holds a reference to the return values,
so they’ll never be deallocated until the Python process exits and
cleans up This isn’t very noticeable for integers, but if ‘f()’ returns
an object, or a data structure that takes up a lot of memory, this can
be a problem.

Weak references provide a way to implement a cache that won’t keep
objects alive beyond their time.  If an object is only accessible
through weak references, the object will be deallocated and the weak
references will now indicate that the object it referred to no longer
exists.  A weak reference to an object `obj' is created by calling ‘wr =
weakref.ref(obj)’.  The object being referred to is returned by calling
the weak reference as if it were a function: ‘wr()’.  It will return the
referenced object, or ‘None’ if the object no longer exists.

This makes it possible to write a ‘memoize()’ function whose cache
doesn’t keep objects alive, by storing weak references in the cache.

     _cache = {}
     def memoize(x):
         if _cache.has_key(x):
             obj = _cache[x]()
             # If weak reference object still exists,
             # return it
             if obj is not None: return obj

         retval = f(x)

         # Cache a weak reference
         _cache[x] = weakref.ref(retval)

         return retval

The *note weakref: 121. module also allows creating proxy objects which
behave like weak references — an object referenced only by proxy objects
is deallocated – but instead of requiring an explicit call to retrieve
the object, the proxy transparently forwards all operations to the
object as long as the object still exists.  If the object is
deallocated, attempting to use a proxy will cause a *note
weakref.ReferenceError: 8ed. exception to be raised.

     proxy = weakref.proxy(obj)
     proxy.attr   # Equivalent to obj.attr
     proxy.meth() # Equivalent to obj.meth()
     del obj
     proxy.attr   # raises weakref.ReferenceError

See also
........

PEP 205(1) - Weak References

     Written and implemented by Fred L. Drake, Jr.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0205


File: python.info,  Node: PEP 232 Function Attributes,  Next: PEP 235 Importing Modules on Case-Insensitive Platforms,  Prev: PEP 205 Weak References,  Up: What's New in Python 2 1

1.12.8 PEP 232: Function Attributes
-----------------------------------

In Python 2.1, functions can now have arbitrary information attached to
them.  People were often using docstrings to hold information about
functions and methods, because the ‘__doc__’ attribute was the only way
of attaching any information to a function.  For example, in the Zope
Web application server, functions are marked as safe for public access
by having a docstring, and in John Aycock’s SPARK parsing framework,
docstrings hold parts of the BNF grammar to be parsed.  This overloading
is unfortunate, since docstrings are really intended to hold a
function’s documentation; for example, it means you can’t properly
document functions intended for private use in Zope.

Arbitrary attributes can now be set and retrieved on functions using the
regular Python syntax:

     def f(): pass

     f.publish = 1
     f.secure = 1
     f.grammar = "A ::= B (C D)*"

The dictionary containing attributes can be accessed as the function’s
‘__dict__’.  Unlike the ‘__dict__’ attribute of class instances, in
functions you can actually assign a new dictionary to ‘__dict__’, though
the new value is restricted to a regular Python dictionary; you `can’t'
be tricky and set it to a ‘UserDict’ instance, or any other random
object that behaves like a mapping.

See also
........

PEP 232(1) - Function Attributes

     Written and implemented by Barry Warsaw.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0232


File: python.info,  Node: PEP 235 Importing Modules on Case-Insensitive Platforms,  Next: PEP 217 Interactive Display Hook,  Prev: PEP 232 Function Attributes,  Up: What's New in Python 2 1

1.12.9 PEP 235: Importing Modules on Case-Insensitive Platforms
---------------------------------------------------------------

Some operating systems have filesystems that are case-insensitive, MacOS
and Windows being the primary examples; on these systems, it’s
impossible to distinguish the filenames ‘FILE.PY’ and ‘file.py’, even
though they do store the file’s name in its original case (they’re
case-preserving, too).

In Python 2.1, the *note import: 674. statement will work to simulate
case- sensitivity on case-insensitive platforms.  Python will now search
for the first case-sensitive match by default, raising an *note
ImportError: 318. if no such file is found, so ‘import file’ will not
import a module named ‘FILE.PY’.  Case- insensitive matching can be
requested by setting the *note PYTHONCASEOK: 8f0. environment variable
before starting the Python interpreter.


File: python.info,  Node: PEP 217 Interactive Display Hook,  Next: PEP 208 New Coercion Model,  Prev: PEP 235 Importing Modules on Case-Insensitive Platforms,  Up: What's New in Python 2 1

1.12.10 PEP 217: Interactive Display Hook
-----------------------------------------

When using the Python interpreter interactively, the output of commands
is displayed using the built-in *note repr(): 3db. function.  In Python
2.1, the variable *note sys.displayhook(): 8f2. can be set to a callable
object which will be called instead of *note repr(): 3db.  For example,
you can set it to a special pretty- printing function:

     >>> # Create a recursive data structure
     ... L = [1,2,3]
     >>> L.append(L)
     >>> L # Show Python's default output
     [1, 2, 3, [...]]
     >>> # Use pprint.pprint() as the display function
     ... import sys, pprint
     >>> sys.displayhook = pprint.pprint
     >>> L
     [1, 2, 3,  <Recursion on list with id=135143996>]
     >>>

See also
........

PEP 217(1) - Display Hook for Interactive Use

     Written and implemented by Moshe Zadka.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0217


File: python.info,  Node: PEP 208 New Coercion Model,  Next: PEP 241 Metadata in Python Packages,  Prev: PEP 217 Interactive Display Hook,  Up: What's New in Python 2 1

1.12.11 PEP 208: New Coercion Model
-----------------------------------

How numeric coercion is done at the C level was significantly modified.
This will only affect the authors of C extensions to Python, allowing
them more flexibility in writing extension types that support numeric
operations.

Extension types can now set the type flag ‘Py_TPFLAGS_CHECKTYPES’ in
their ‘PyTypeObject’ structure to indicate that they support the new
coercion model.  In such extension types, the numeric slot functions can
no longer assume that they’ll be passed two arguments of the same type;
instead they may be passed two arguments of differing types, and can
then perform their own internal coercion.  If the slot function is
passed a type it can’t handle, it can indicate the failure by returning
a reference to the ‘Py_NotImplemented’ singleton value.  The numeric
functions of the other type will then be tried, and perhaps they can
handle the operation; if the other type also returns
‘Py_NotImplemented’, then a *note TypeError: 309. will be raised.
Numeric methods written in Python can also return ‘Py_NotImplemented’,
causing the interpreter to act as if the method did not exist (perhaps
raising a *note TypeError: 309, perhaps trying another object’s numeric
methods).

See also
........

PEP 208(1) - Reworking the Coercion Model

     Written and implemented by Neil Schemenauer, heavily based upon
     earlier work by Marc-André Lemburg.  Read this to understand the
     fine points of how numeric operations will now be processed at the
     C level.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0208


File: python.info,  Node: PEP 241 Metadata in Python Packages,  Next: New and Improved Modules<4>,  Prev: PEP 208 New Coercion Model,  Up: What's New in Python 2 1

1.12.12 PEP 241: Metadata in Python Packages
--------------------------------------------

A common complaint from Python users is that there’s no single catalog
of all the Python modules in existence.  T. Middleton’s Vaults of
Parnassus at ‘http://www.vex.net/parnassus/’ are the largest catalog of
Python modules, but registering software at the Vaults is optional, and
many people don’t bother.

As a first small step toward fixing the problem, Python software
packaged using the Distutils ‘sdist’ command will include a file named
‘PKG-INFO’ containing information about the package such as its name,
version, and author (metadata, in cataloguing terminology).  PEP 241
contains the full list of fields that can be present in the ‘PKG-INFO’
file.  As people began to package their software using Python 2.1, more
and more packages will include metadata, making it possible to build
automated cataloguing systems and experiment with them.  With the result
experience, perhaps it’ll be possible to design a really good catalog
and then build support for it into Python 2.2.  For example, the
Distutils ‘sdist’ and ‘bdist_*’ commands could support a ‘upload’ option
that would automatically upload your package to a catalog server.

You can start creating packages containing ‘PKG-INFO’ even if you’re not
using Python 2.1, since a new release of the Distutils will be made for
users of earlier Python versions.  Version 1.0.2 of the Distutils
includes the changes described in PEP 241, as well as various bugfixes
and enhancements.  It will be available from the Distutils SIG at
‘https://www.python.org/sigs/distutils-sig/’.

See also
........

PEP 241(1) - Metadata for Python Software Packages

     Written and implemented by A.M. Kuchling.

PEP 243(2) - Module Repository Upload Mechanism

     Written by Sean Reifschneider, this draft PEP describes a proposed
     mechanism for uploading Python packages to a central server.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0241

   (2) https://www.python.org/dev/peps/pep-0243


File: python.info,  Node: New and Improved Modules<4>,  Next: Other Changes and Fixes<4>,  Prev: PEP 241 Metadata in Python Packages,  Up: What's New in Python 2 1

1.12.13 New and Improved Modules
--------------------------------

   * Ka-Ping Yee contributed two new modules: ‘inspect.py’, a module for
     getting information about live Python code, and ‘pydoc.py’, a
     module for interactively converting docstrings to HTML or text.  As
     a bonus, ‘Tools/scripts/pydoc’, which is now automatically
     installed, uses ‘pydoc.py’ to display documentation given a Python
     module, package, or class name.  For example, ‘pydoc xml.dom’
     displays the following:

          Python Library Documentation: package xml.dom in xml

          NAME
              xml.dom - W3C Document Object Model implementation for Python.

          FILE
              /usr/local/lib/python2.1/xml/dom/__init__.pyc

          DESCRIPTION
              The Python mapping of the Document Object Model is documented in the
              Python Library Reference in the section on the xml.dom package.

              This package contains the following modules:
                ...

     ‘pydoc’ also includes a Tk-based interactive help browser.  ‘pydoc’
     quickly becomes addictive; try it out!

   * Two different modules for unit testing were added to the standard
     library.  The *note doctest: 65. module, contributed by Tim Peters,
     provides a testing framework based on running embedded examples in
     docstrings and comparing the results against the expected output.
     PyUnit, contributed by Steve Purcell, is a unit testing framework
     inspired by JUnit, which was in turn an adaptation of Kent Beck’s
     Smalltalk testing framework.  See ‘http://pyunit.sourceforge.net/’
     for more information about PyUnit.

   * The *note difflib: 35. module contains a class, ‘SequenceMatcher’,
     which compares two sequences and computes the changes required to
     transform one sequence into the other.  For example, this module
     can be used to write a tool similar to the Unix ‘diff’ program, and
     in fact the sample program ‘Tools/scripts/ndiff.py’ demonstrates
     how to write such a script.

   * *note curses.panel: 2d, a wrapper for the panel library, part of
     ncurses and of SYSV curses, was contributed by Thomas Gellekum.
     The panel library provides windows with the additional feature of
     depth.  Windows can be moved higher or lower in the depth ordering,
     and the panel library figures out where panels overlap and which
     sections are visible.

   * The PyXML package has gone through a few releases since Python 2.0,
     and Python 2.1 includes an updated version of the *note xml: 12c.
     package.  Some of the noteworthy changes include support for Expat
     1.2 and later versions, the ability for Expat parsers to handle
     files in any encoding supported by Python, and various bugfixes for
     SAX, DOM, and the ‘minidom’ module.

   * Ping also contributed another hook for handling uncaught
     exceptions.  *note sys.excepthook(): 8f6. can be set to a callable
     object.  When an exception isn’t caught by any *note try:
     7ee...*note except: 563. blocks, the exception will be passed to
     *note sys.excepthook(): 8f6, which can then do whatever it likes.
     At the Ninth Python Conference, Ping demonstrated an application
     for this hook: printing an extended traceback that not only lists
     the stack frames, but also lists the function arguments and the
     local variables for each frame.

   * Various functions in the *note time: 104. module, such as
     ‘asctime()’ and ‘localtime()’, require a floating point argument
     containing the time in seconds since the epoch.  The most common
     use of these functions is to work with the current time, so the
     floating point argument has been made optional; when a value isn’t
     provided, the current time will be used.  For example, log file
     entries usually need a string containing the current time; in
     Python 2.1, ‘time.asctime()’ can be used, instead of the lengthier
     ‘time.asctime(time.localtime(time.time()))’ that was previously
     required.

     This change was proposed and implemented by Thomas Wouters.

   * The *note ftplib: 83. module now defaults to retrieving files in
     passive mode, because passive mode is more likely to work from
     behind a firewall.  This request came from the Debian bug tracking
     system, since other Debian packages use *note ftplib: 83. to
     retrieve files and then don’t work from behind a firewall.  It’s
     deemed unlikely that this will cause problems for anyone, because
     Netscape defaults to passive mode and few people complain, but if
     passive mode is unsuitable for your application or network setup,
     call ‘set_pasv(0)’ on FTP objects to disable passive mode.

   * Support for raw socket access has been added to the *note socket:
     ea. module, contributed by Grant Edwards.

   * The *note pstats: d0. module now contains a simple interactive
     statistics browser for displaying timing profiles for Python
     programs, invoked when the module is run as a script.  Contributed
     by Eric S. Raymond.

   * A new implementation-dependent function, ‘sys._getframe([depth])’,
     has been added to return a given frame object from the current call
     stack.  *note sys._getframe(): 8f7. returns the frame at the top of
     the call stack; if the optional integer argument `depth' is
     supplied, the function returns the frame that is `depth' calls
     below the top of the stack.  For example, ‘sys._getframe(1)’
     returns the caller’s frame object.

     This function is only present in CPython, not in Jython or the .NET
     implementation.  Use it for debugging, and resist the temptation to
     put it into production code.


File: python.info,  Node: Other Changes and Fixes<4>,  Next: Acknowledgements<7>,  Prev: New and Improved Modules<4>,  Up: What's New in Python 2 1

1.12.14 Other Changes and Fixes
-------------------------------

There were relatively few smaller changes made in Python 2.1 due to the
shorter release cycle.  A search through the CVS change logs turns up
117 patches applied, and 136 bugs fixed; both figures are likely to be
underestimates.  Some of the more notable changes are:

   * A specialized object allocator is now optionally available, that
     should be faster than the system ‘malloc()’ and have less memory
     overhead.  The allocator uses C’s ‘malloc()’ function to get large
     pools of memory, and then fulfills smaller memory requests from
     these pools.  It can be enabled by providing the ‘--with-pymalloc’
     option to the ‘configure’ script; see ‘Objects/obmalloc.c’ for the
     implementation details.

     Authors of C extension modules should test their code with the
     object allocator enabled, because some incorrect code may break,
     causing core dumps at runtime.  There are a bunch of memory
     allocation functions in Python’s C API that have previously been
     just aliases for the C library’s ‘malloc()’ and ‘free()’, meaning
     that if you accidentally called mismatched functions, the error
     wouldn’t be noticeable.  When the object allocator is enabled,
     these functions aren’t aliases of ‘malloc()’ and ‘free()’ any more,
     and calling the wrong function to free memory will get you a core
     dump.  For example, if memory was allocated using ‘PyMem_New()’, it
     has to be freed using ‘PyMem_Del()’, not ‘free()’.  A few modules
     included with Python fell afoul of this and had to be fixed;
     doubtless there are more third-party modules that will have the
     same problem.

     The object allocator was contributed by Vladimir Marangozov.

   * The speed of line-oriented file I/O has been improved because
     people often complain about its lack of speed, and because it’s
     often been used as a naïve benchmark.  The *note readline(): da.
     method of file objects has therefore been rewritten to be much
     faster.  The exact amount of the speedup will vary from platform to
     platform depending on how slow the C library’s ‘getc()’ was, but is
     around 66%, and potentially much faster on some particular
     operating systems.  Tim Peters did much of the benchmarking and
     coding for this change, motivated by a discussion in
     comp.lang.python.

     A new module and method for file objects was also added,
     contributed by Jeff Epler.  The new method, ‘xreadlines()’, is
     similar to the existing ‘xrange()’ built-in.  ‘xreadlines()’
     returns an opaque sequence object that only supports being iterated
     over, reading a line on every iteration but not reading the entire
     file into memory as the existing ‘readlines()’ method does.  You’d
     use it like this:

          for line in sys.stdin.xreadlines():
              # ... do something for each line ...
              ...

     For a fuller discussion of the line I/O changes, see the python-dev
     summary for January 1-15, 2001 at
     ‘https://www.python.org/dev/summary/2001-01-1/’.

   * A new method, ‘popitem()’, was added to dictionaries to enable
     destructively iterating through the contents of a dictionary; this
     can be faster for large dictionaries because there’s no need to
     construct a list containing all the keys or values.  ‘D.popitem()’
     removes a random ‘(key, value)’ pair from the dictionary ‘D’ and
     returns it as a 2-tuple.  This was implemented mostly by Tim Peters
     and Guido van Rossum, after a suggestion and preliminary patch by
     Moshe Zadka.

   * Modules can now control which names are imported when ‘from module
     import *’ is used, by defining an ‘__all__’ attribute containing a
     list of names that will be imported.  One common complaint is that
     if the module imports other modules such as *note sys: f8. or *note
     string: f1, ‘from module import *’ will add them to the importing
     module’s namespace.  To fix this, simply list the public names in
     ‘__all__’:

          # List public names
          __all__ = ['Database', 'open']

     A stricter version of this patch was first suggested and
     implemented by Ben Wolfson, but after some python-dev discussion, a
     weaker final version was checked in.

   * Applying *note repr(): 3db. to strings previously used octal
     escapes for non-printable characters; for example, a newline was
     ‘'\012'’.  This was a vestigial trace of Python’s C ancestry, but
     today octal is of very little practical use.  Ka-Ping Yee suggested
     using hex escapes instead of octal ones, and using the ‘\n’, ‘\t’,
     ‘\r’ escapes for the appropriate characters, and implemented this
     new formatting.

   * Syntax errors detected at compile-time can now raise exceptions
     containing the filename and line number of the error, a pleasant
     side effect of the compiler reorganization done by Jeremy Hylton.

   * C extensions which import other modules have been changed to use
     ‘PyImport_ImportModule()’, which means that they will use any
     import hooks that have been installed.  This is also encouraged for
     third-party extensions that need to import some other module from C
     code.

   * The size of the Unicode character database was shrunk by another
     340K thanks to Fredrik Lundh.

   * Some new ports were contributed: MacOS X (by Steven Majewski),
     Cygwin (by Jason Tishler); RISCOS (by Dietmar Schwertberger);
     Unixware 7 (by Billy G. Allie).

And there’s the usual list of minor bugfixes, minor memory leaks,
docstring edits, and other tweaks, too lengthy to be worth itemizing;
see the CVS logs for the full details if you want them.


File: python.info,  Node: Acknowledgements<7>,  Prev: Other Changes and Fixes<4>,  Up: What's New in Python 2 1

1.12.15 Acknowledgements
------------------------

The author would like to thank the following people for offering
suggestions on various drafts of this article: Graeme Cross, David
Goodger, Jay Graves, Michael Hudson, Marc-André Lemburg, Fredrik Lundh,
Neil Schemenauer, Thomas Wouters.


File: python.info,  Node: What's New in Python 2 0,  Next: Changelog,  Prev: What's New in Python 2 1,  Up: What's New in Python

1.13 What’s New in Python 2.0
=============================


Author: A.M. Kuchling and Moshe Zadka

* Menu:

* Introduction: Introduction<3>. 
* What About Python 1.6?: What About Python 1 6?. 
* New Development Process:: 
* Unicode: Unicode<2>. 
* List Comprehensions:: 
* Augmented Assignment:: 
* String Methods:: 
* Garbage Collection of Cycles:: 
* Other Core Changes:: 
* Porting to 2.0: Porting to 2 0. 
* Extending/Embedding Changes:: 
* Distutils; Making Modules Easy to Install: Distutils Making Modules Easy to Install. 
* XML Modules:: 
* Module changes:: 
* New modules:: 
* IDLE Improvements:: 
* Deleted and Deprecated Modules:: 
* Acknowledgements: Acknowledgements<8>. 


File: python.info,  Node: Introduction<3>,  Next: What About Python 1 6?,  Up: What's New in Python 2 0

1.13.1 Introduction
-------------------

A new release of Python, version 2.0, was released on October 16, 2000.
This article covers the exciting new features in 2.0, highlights some
other useful changes, and points out a few incompatible changes that may
require rewriting code.

Python’s development never completely stops between releases, and a
steady flow of bug fixes and improvements are always being submitted.  A
host of minor fixes, a few optimizations, additional docstrings, and
better error messages went into 2.0; to list them all would be
impossible, but they’re certainly significant.  Consult the
publicly-available CVS logs if you want to see the full list.  This
progress is due to the five developers working for PythonLabs are now
getting paid to spend their days fixing bugs, and also due to the
improved communication resulting from moving to SourceForge.


File: python.info,  Node: What About Python 1 6?,  Next: New Development Process,  Prev: Introduction<3>,  Up: What's New in Python 2 0

1.13.2 What About Python 1.6?
-----------------------------

Python 1.6 can be thought of as the Contractual Obligations Python
release.  After the core development team left CNRI in May 2000, CNRI
requested that a 1.6 release be created, containing all the work on
Python that had been performed at CNRI. Python 1.6 therefore represents
the state of the CVS tree as of May 2000, with the most significant new
feature being Unicode support.  Development continued after May, of
course, so the 1.6 tree received a few fixes to ensure that it’s
forward-compatible with Python 2.0.  1.6 is therefore part of Python’s
evolution, and not a side branch.

So, should you take much interest in Python 1.6?  Probably not.  The
1.6final and 2.0beta1 releases were made on the same day (September 5,
2000), the plan being to finalize Python 2.0 within a month or so.  If
you have applications to maintain, there seems little point in breaking
things by moving to 1.6, fixing them, and then having another round of
breakage within a month by moving to 2.0; you’re better off just going
straight to 2.0.  Most of the really interesting features described in
this document are only in 2.0, because a lot of work was done between
May and September.


File: python.info,  Node: New Development Process,  Next: Unicode<2>,  Prev: What About Python 1 6?,  Up: What's New in Python 2 0

1.13.3 New Development Process
------------------------------

The most important change in Python 2.0 may not be to the code at all,
but to how Python is developed: in May 2000 the Python developers began
using the tools made available by SourceForge for storing source code,
tracking bug reports, and managing the queue of patch submissions.  To
report bugs or submit patches for Python 2.0, use the bug tracking and
patch manager tools available from Python’s project page, located at
‘http://sourceforge.net/projects/python/’.

The most important of the services now hosted at SourceForge is the
Python CVS tree, the version-controlled repository containing the source
code for Python.  Previously, there were roughly 7 or so people who had
write access to the CVS tree, and all patches had to be inspected and
checked in by one of the people on this short list.  Obviously, this
wasn’t very scalable.  By moving the CVS tree to SourceForge, it became
possible to grant write access to more people; as of September 2000
there were 27 people able to check in changes, a fourfold increase.
This makes possible large-scale changes that wouldn’t be attempted if
they’d have to be filtered through the small group of core developers.
For example, one day Peter Schneider-Kamp took it into his head to drop
K&R C compatibility and convert the C source for Python to ANSI C. After
getting approval on the python-dev mailing list, he launched into a
flurry of checkins that lasted about a week, other developers joined in
to help, and the job was done.  If there were only 5 people with write
access, probably that task would have been viewed as "nice, but not
worth the time and effort needed" and it would never have gotten done.

The shift to using SourceForge’s services has resulted in a remarkable
increase in the speed of development.  Patches now get submitted,
commented on, revised by people other than the original submitter, and
bounced back and forth between people until the patch is deemed worth
checking in.  Bugs are tracked in one central location and can be
assigned to a specific person for fixing, and we can count the number of
open bugs to measure progress.  This didn’t come without a cost:
developers now have more e-mail to deal with, more mailing lists to
follow, and special tools had to be written for the new environment.
For example, SourceForge sends default patch and bug notification e-mail
messages that are completely unhelpful, so Ka-Ping Yee wrote an HTML
screen-scraper that sends more useful messages.

The ease of adding code caused a few initial growing pains, such as code
was checked in before it was ready or without getting clear agreement
from the developer group.  The approval process that has emerged is
somewhat similar to that used by the Apache group.  Developers can vote
+1, +0, -0, or -1 on a patch; +1 and -1 denote acceptance or rejection,
while +0 and -0 mean the developer is mostly indifferent to the change,
though with a slight positive or negative slant.  The most significant
change from the Apache model is that the voting is essentially advisory,
letting Guido van Rossum, who has Benevolent Dictator For Life status,
know what the general opinion is.  He can still ignore the result of a
vote, and approve or reject a change even if the community disagrees
with him.

Producing an actual patch is the last step in adding a new feature, and
is usually easy compared to the earlier task of coming up with a good
design.  Discussions of new features can often explode into lengthy
mailing list threads, making the discussion hard to follow, and no one
can read every posting to python-dev.  Therefore, a relatively formal
process has been set up to write Python Enhancement Proposals (PEPs),
modelled on the Internet RFC process.  PEPs are draft documents that
describe a proposed new feature, and are continually revised until the
community reaches a consensus, either accepting or rejecting the
proposal.  Quoting from the introduction to PEP 1, "PEP Purpose and
Guidelines":

     PEP stands for Python Enhancement Proposal.  A PEP is a design
     document providing information to the Python community, or
     describing a new feature for Python.  The PEP should provide a
     concise technical specification of the feature and a rationale for
     the feature.

     We intend PEPs to be the primary mechanisms for proposing new
     features, for collecting community input on an issue, and for
     documenting the design decisions that have gone into Python.  The
     PEP author is responsible for building consensus within the
     community and documenting dissenting opinions.

Read the rest of PEP 1 for the details of the PEP editorial process,
style, and format.  PEPs are kept in the Python CVS tree on SourceForge,
though they’re not part of the Python 2.0 distribution, and are also
available in HTML form from ‘https://www.python.org/peps/’.  As of
September 2000, there are 25 PEPS, ranging from PEP 201, "Lockstep
Iteration", to PEP 225, "Elementwise/Objectwise Operators".


File: python.info,  Node: Unicode<2>,  Next: List Comprehensions,  Prev: New Development Process,  Up: What's New in Python 2 0

1.13.4 Unicode
--------------

The largest new feature in Python 2.0 is a new fundamental data type:
Unicode strings.  Unicode uses 16-bit numbers to represent characters
instead of the 8-bit number used by ASCII, meaning that 65,536 distinct
characters can be supported.

The final interface for Unicode support was arrived at through countless
often- stormy discussions on the python-dev mailing list, and mostly
implemented by Marc-André Lemburg, based on a Unicode string type
implementation by Fredrik Lundh.  A detailed explanation of the
interface was written up as PEP 100(1), "Python Unicode Integration".
This article will simply cover the most significant points about the
Unicode interfaces.

In Python source code, Unicode strings are written as ‘u"string"’.
Arbitrary Unicode characters can be written using a new escape sequence,
‘\uHHHH’, where `HHHH' is a 4-digit hexadecimal number from 0000 to
FFFF. The existing ‘\xHHHH’ escape sequence can also be used, and octal
escapes can be used for characters up to U+01FF, which is represented by
‘\777’.

Unicode strings, just like regular strings, are an immutable sequence
type.  They can be indexed and sliced, but not modified in place.
Unicode strings have an ‘encode( [encoding] )’ method that returns an
8-bit string in the desired encoding.  Encodings are named by strings,
such as ‘'ascii'’, ‘'utf-8'’, ‘'iso-8859-1'’, or whatever.  A codec API
is defined for implementing and registering new encodings that are then
available throughout a Python program.  If an encoding isn’t specified,
the default encoding is usually 7-bit ASCII, though it can be changed
for your Python installation by calling the
‘sys.setdefaultencoding(encoding)’ function in a customised version of
‘site.py’.

Combining 8-bit and Unicode strings always coerces to Unicode, using the
default ASCII encoding; the result of ‘'a' + u'bc'’ is ‘u'abc'’.

New built-in functions have been added, and existing built-ins modified
to support Unicode:

   * ‘unichr(ch)’ returns a Unicode string 1 character long, containing
     the character `ch'.

   * ‘ord(u)’, where `u' is a 1-character regular or Unicode string,
     returns the number of the character as an integer.

   * ‘unicode(string [, encoding] [, errors] )’ creates a Unicode string
     from an 8-bit string.  ‘encoding’ is a string naming the encoding
     to use.  The ‘errors’ parameter specifies the treatment of
     characters that are invalid for the current encoding; passing
     ‘'strict'’ as the value causes an exception to be raised on any
     encoding error, while ‘'ignore'’ causes errors to be silently
     ignored and ‘'replace'’ uses U+FFFD, the official replacement
     character, in case of any problems.

   * The ‘exec’ statement, and various built-ins such as ‘eval()’,
     ‘getattr()’, and ‘setattr()’ will also accept Unicode strings as
     well as regular strings.  (It’s possible that the process of fixing
     this missed some built-ins; if you find a built-in function that
     accepts strings but doesn’t accept Unicode strings at all, please
     report it as a bug.)

A new module, *note unicodedata: 113, provides an interface to Unicode
character properties.  For example, ‘unicodedata.category(u'A')’ returns
the 2-character string ’Lu’, the ’L’ denoting it’s a letter, and ’u’
meaning that it’s uppercase.  ‘unicodedata.bidirectional(u'\u0660')’
returns ’AN’, meaning that U+0660 is an Arabic number.

The *note codecs: 1c. module contains functions to look up existing
encodings and register new ones.  Unless you want to implement a new
encoding, you’ll most often use the ‘codecs.lookup(encoding)’ function,
which returns a 4-element tuple: ‘(encode_func, decode_func,
stream_reader, stream_writer)’.

   * `encode_func' is a function that takes a Unicode string, and
     returns a 2-tuple ‘(string, length)’.  `string' is an 8-bit string
     containing a portion (perhaps all) of the Unicode string converted
     into the given encoding, and `length' tells you how much of the
     Unicode string was converted.

   * `decode_func' is the opposite of `encode_func', taking an 8-bit
     string and returning a 2-tuple ‘(ustring, length)’, consisting of
     the resulting Unicode string `ustring' and the integer `length'
     telling how much of the 8-bit string was consumed.

   * `stream_reader' is a class that supports decoding input from a
     stream.  `stream_reader(file_obj)' returns an object that supports
     the ‘read()’, *note readline(): da, and ‘readlines()’ methods.
     These methods will all translate from the given encoding and return
     Unicode strings.

   * `stream_writer', similarly, is a class that supports encoding
     output to a stream.  `stream_writer(file_obj)' returns an object
     that supports the ‘write()’ and ‘writelines()’ methods.  These
     methods expect Unicode strings, translating them to the given
     encoding on output.

For example, the following code writes a Unicode string into a file,
encoding it as UTF-8:

     import codecs

     unistr = u'\u0660\u2000ab ...'

     (UTF8_encode, UTF8_decode,
      UTF8_streamreader, UTF8_streamwriter) = codecs.lookup('UTF-8')

     output = UTF8_streamwriter( open( '/tmp/output', 'wb') )
     output.write( unistr )
     output.close()

The following code would then read UTF-8 input from the file:

     input = UTF8_streamreader( open( '/tmp/output', 'rb') )
     print repr(input.read())
     input.close()

Unicode-aware regular expressions are available through the *note re:
d9. module, which has a new underlying implementation called SRE written
by Fredrik Lundh of Secret Labs AB.

A ‘-U’ command line option was added which causes the Python compiler to
interpret all string literals as Unicode string literals.  This is
intended to be used in testing and future-proofing your Python code,
since some future version of Python may drop support for 8-bit strings
and provide only Unicode strings.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0100


File: python.info,  Node: List Comprehensions,  Next: Augmented Assignment,  Prev: Unicode<2>,  Up: What's New in Python 2 0

1.13.5 List Comprehensions
--------------------------

Lists are a workhorse data type in Python, and many programs manipulate
a list at some point.  Two common operations on lists are to loop over
them, and either pick out the elements that meet a certain criterion, or
apply some function to each element.  For example, given a list of
strings, you might want to pull out all the strings containing a given
substring, or strip off trailing whitespace from each line.

The existing *note map(): 685. and *note filter(): 686. functions can be
used for this purpose, but they require a function as one of their
arguments.  This is fine if there’s an existing built-in function that
can be passed directly, but if there isn’t, you have to create a little
function to do the required work, and Python’s scoping rules make the
result ugly if the little function needs additional information.  Take
the first example in the previous paragraph, finding all the strings in
the list containing a given substring.  You could write the following to
do it:

     # Given the list L, make a list of all strings
     # containing the substring S.
     sublist = filter( lambda s, substring=S:
                          string.find(s, substring) != -1,
                       L)

Because of Python’s scoping rules, a default argument is used so that
the anonymous function created by the *note lambda: 687. statement knows
what substring is being searched for.  List comprehensions make this
cleaner:

     sublist = [ s for s in L if string.find(s, S) != -1 ]

List comprehensions have the form:

     [ expression for expr in sequence1
                  for expr2 in sequence2 ...
                  for exprN in sequenceN
                  if condition ]

The *note for: 688...*note in: 6d5. clauses contain the sequences to be
iterated over.  The sequences do not have to be the same length, because
they are `not' iterated over in parallel, but from left to right; this
is explained more clearly in the following paragraphs.  The elements of
the generated list will be the successive values of `expression'.  The
final *note if: 86d. clause is optional; if present, `expression' is
only evaluated and added to the result if `condition' is true.

To make the semantics very clear, a list comprehension is equivalent to
the following Python code:

     for expr1 in sequence1:
         for expr2 in sequence2:
         ...
             for exprN in sequenceN:
                  if (condition):
                       # Append the value of
                       # the expression to the
                       # resulting list.

This means that when there are multiple *note for: 688...*note in: 6d5.
clauses, the resulting list will be equal to the product of the lengths
of all the sequences.  If you have two lists of length 3, the output
list is 9 elements long:

     seq1 = 'abc'
     seq2 = (1,2,3)
     >>> [ (x,y) for x in seq1 for y in seq2]
     [('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3), ('c', 1),
     ('c', 2), ('c', 3)]

To avoid introducing an ambiguity into Python’s grammar, if `expression'
is creating a tuple, it must be surrounded with parentheses.  The first
list comprehension below is a syntax error, while the second one is
correct:

     # Syntax error
     [ x,y for x in seq1 for y in seq2]
     # Correct
     [ (x,y) for x in seq1 for y in seq2]

The idea of list comprehensions originally comes from the functional
programming language Haskell (‘http://www.haskell.org’).  Greg Ewing
argued most effectively for adding them to Python and wrote the initial
list comprehension patch, which was then discussed for a seemingly
endless time on the python-dev mailing list and kept up-to-date by Skip
Montanaro.


File: python.info,  Node: Augmented Assignment,  Next: String Methods,  Prev: List Comprehensions,  Up: What's New in Python 2 0

1.13.6 Augmented Assignment
---------------------------

Augmented assignment operators, another long-requested feature, have
been added to Python 2.0.  Augmented assignment operators include ‘+=’,
‘-=’, ‘*=’, and so forth.  For example, the statement ‘a += 2’
increments the value of the variable ‘a’ by 2, equivalent to the
slightly lengthier ‘a = a + 2’.

The full list of supported assignment operators is ‘+=’, ‘-=’, ‘*=’,
‘/=’, ‘%=’, ‘**=’, ‘&=’, ‘|=’, ‘^=’, ‘>>=’, and ‘<<=’.  Python classes
can override the augmented assignment operators by defining methods
named *note __iadd__(): 902, *note __isub__(): 903, etc.  For example,
the following ‘Number’ class stores a number and supports using += to
create a new instance with an incremented value.

     class Number:
         def __init__(self, value):
             self.value = value
         def __iadd__(self, increment):
             return Number( self.value + increment)

     n = Number(5)
     n += 3
     print n.value

The *note __iadd__(): 902. special method is called with the value of
the increment, and should return a new instance with an appropriately
modified value; this return value is bound as the new value of the
variable on the left-hand side.

Augmented assignment operators were first introduced in the C
programming language, and most C-derived languages, such as ‘awk’, C++,
Java, Perl, and PHP also support them.  The augmented assignment patch
was implemented by Thomas Wouters.


File: python.info,  Node: String Methods,  Next: Garbage Collection of Cycles,  Prev: Augmented Assignment,  Up: What's New in Python 2 0

1.13.7 String Methods
---------------------

Until now string-manipulation functionality was in the *note string: f1.
module, which was usually a front-end for the ‘strop’ module written in
C. The addition of Unicode posed a difficulty for the ‘strop’ module,
because the functions would all need to be rewritten in order to accept
either 8-bit or Unicode strings.  For functions such as
‘string.replace()’, which takes 3 string arguments, that means eight
possible permutations, and correspondingly complicated code.

Instead, Python 2.0 pushes the problem onto the string type, making
string manipulation functionality available through methods on both
8-bit strings and Unicode strings.

     >>> 'andrew'.capitalize()
     'Andrew'
     >>> 'hostname'.replace('os', 'linux')
     'hlinuxtname'
     >>> 'moshe'.find('sh')
     2

One thing that hasn’t changed, a noteworthy April Fools’ joke
notwithstanding, is that Python strings are immutable.  Thus, the string
methods return new strings, and do not modify the string on which they
operate.

The old *note string: f1. module is still around for backwards
compatibility, but it mostly acts as a front-end to the new string
methods.

Two methods which have no parallel in pre-2.0 versions, although they
did exist in JPython for quite some time, are ‘startswith()’ and
‘endswith()’.  ‘s.startswith(t)’ is equivalent to ‘s[:len(t)] == t’,
while ‘s.endswith(t)’ is equivalent to ‘s[-len(t):] == t’.

One other method which deserves special mention is ‘join()’.  The
‘join()’ method of a string receives one parameter, a sequence of
strings, and is equivalent to the ‘string.join()’ function from the old
*note string: f1. module, with the arguments reversed.  In other words,
‘s.join(seq)’ is equivalent to the old ‘string.join(seq, s)’.


File: python.info,  Node: Garbage Collection of Cycles,  Next: Other Core Changes,  Prev: String Methods,  Up: What's New in Python 2 0

1.13.8 Garbage Collection of Cycles
-----------------------------------

The C implementation of Python uses reference counting to implement
garbage collection.  Every Python object maintains a count of the number
of references pointing to itself, and adjusts the count as references
are created or destroyed.  Once the reference count reaches zero, the
object is no longer accessible, since you need to have a reference to an
object to access it, and if the count is zero, no references exist any
longer.

Reference counting has some pleasant properties: it’s easy to understand
and implement, and the resulting implementation is portable, fairly
fast, and reacts well with other libraries that implement their own
memory handling schemes.  The major problem with reference counting is
that it sometimes doesn’t realise that objects are no longer accessible,
resulting in a memory leak.  This happens when there are cycles of
references.

Consider the simplest possible cycle, a class instance which has a
reference to itself:

     instance = SomeClass()
     instance.myself = instance

After the above two lines of code have been executed, the reference
count of ‘instance’ is 2; one reference is from the variable named
‘'instance'’, and the other is from the ‘myself’ attribute of the
instance.

If the next line of code is ‘del instance’, what happens?  The reference
count of ‘instance’ is decreased by 1, so it has a reference count of 1;
the reference in the ‘myself’ attribute still exists.  Yet the instance
is no longer accessible through Python code, and it could be deleted.
Several objects can participate in a cycle if they have references to
each other, causing all of the objects to be leaked.

Python 2.0 fixes this problem by periodically executing a cycle
detection algorithm which looks for inaccessible cycles and deletes the
objects involved.  A new *note gc: 85. module provides functions to
perform a garbage collection, obtain debugging statistics, and tuning
the collector’s parameters.

Running the cycle detection algorithm takes some time, and therefore
will result in some additional overhead.  It is hoped that after we’ve
gotten experience with the cycle collection from using 2.0, Python 2.1
will be able to minimize the overhead with careful tuning.  It’s not yet
obvious how much performance is lost, because benchmarking this is
tricky and depends crucially on how often the program creates and
destroys objects.  The detection of cycles can be disabled when Python
is compiled, if you can’t afford even a tiny speed penalty or suspect
that the cycle collection is buggy, by specifying the
‘--without-cycle-gc’ switch when running the ‘configure’ script.

Several people tackled this problem and contributed to a solution.  An
early implementation of the cycle detection approach was written by Toby
Kelsey.  The current algorithm was suggested by Eric Tiedemann during a
visit to CNRI, and Guido van Rossum and Neil Schemenauer wrote two
different implementations, which were later integrated by Neil.  Lots of
other people offered suggestions along the way; the March 2000 archives
of the python-dev mailing list contain most of the relevant discussion,
especially in the threads titled "Reference cycle collection for Python"
and "Finalization again".


File: python.info,  Node: Other Core Changes,  Next: Porting to 2 0,  Prev: Garbage Collection of Cycles,  Up: What's New in Python 2 0

1.13.9 Other Core Changes
-------------------------

Various minor changes have been made to Python’s syntax and built-in
functions.  None of the changes are very far-reaching, but they’re handy
conveniences.

* Menu:

* Minor Language Changes:: 
* Changes to Built-in Functions:: 


File: python.info,  Node: Minor Language Changes,  Next: Changes to Built-in Functions,  Up: Other Core Changes

1.13.9.1 Minor Language Changes
...............................

A new syntax makes it more convenient to call a given function with a
tuple of arguments and/or a dictionary of keyword arguments.  In Python
1.5 and earlier, you’d use the ‘apply()’ built-in function: ‘apply(f,
args, kw)’ calls the function ‘f()’ with the argument tuple `args' and
the keyword arguments in the dictionary `kw'.  ‘apply()’ is the same in
2.0, but thanks to a patch from Greg Ewing, ‘f(*args, **kw)’ as a
shorter and clearer way to achieve the same effect.  This syntax is
symmetrical with the syntax for defining functions:

     def f(*args, **kw):
         # args is a tuple of positional args,
         # kw is a dictionary of keyword args
         ...

The ‘print’ statement can now have its output directed to a file-like
object by following the ‘print’ with ‘>> file’, similar to the
redirection operator in Unix shells.  Previously you’d either have to
use the ‘write()’ method of the file-like object, which lacks the
convenience and simplicity of ‘print’, or you could assign a new value
to ‘sys.stdout’ and then restore the old value.  For sending output to
standard error, it’s much easier to write this:

     print >> sys.stderr, "Warning: action field not supplied"

Modules can now be renamed on importing them, using the syntax ‘import
module as name’ or ‘from module import name as othername’.  The patch
was submitted by Thomas Wouters.

A new format style is available when using the ‘%’ operator; ’%r’ will
insert the *note repr(): 3db. of its argument.  This was also added from
symmetry considerations, this time for symmetry with the existing ’%s’
format style, which inserts the *note str(): 178. of its argument.  For
example, ‘'%r %s' % ('abc', 'abc')’ returns a string containing ‘'abc'
abc’.

Previously there was no way to implement a class that overrode Python’s
built-in *note in: 6d5. operator and implemented a custom version.  ‘obj
in seq’ returns true if `obj' is present in the sequence `seq'; Python
computes this by simply trying every index of the sequence until either
`obj' is found or an *note IndexError: 908. is encountered.  Moshe Zadka
contributed a patch which adds a *note __contains__(): 79c. magic method
for providing a custom implementation for *note in: 6d5.  Additionally,
new built-in objects written in C can define what *note in: 6d5. means
for them via a new slot in the sequence protocol.

Earlier versions of Python used a recursive algorithm for deleting
objects.  Deeply nested data structures could cause the interpreter to
fill up the C stack and crash; Christian Tismer rewrote the deletion
logic to fix this problem.  On a related note, comparing recursive
objects recursed infinitely and crashed; Jeremy Hylton rewrote the code
to no longer crash, producing a useful result instead.  For example,
after this code:

     a = []
     b = []
     a.append(a)
     b.append(b)

The comparison ‘a==b’ returns true, because the two recursive data
structures are isomorphic.  See the thread "trashcan and PR#7" in the
April 2000 archives of the python-dev mailing list for the discussion
leading up to this implementation, and some useful relevant links.  Note
that comparisons can now also raise exceptions.  In earlier versions of
Python, a comparison operation such as ‘cmp(a,b)’ would always produce
an answer, even if a user-defined ‘__cmp__()’ method encountered an
error, since the resulting exception would simply be silently swallowed.

Work has been done on porting Python to 64-bit Windows on the Itanium
processor, mostly by Trent Mick of ActiveState.  (Confusingly,
‘sys.platform’ is still ‘'win32'’ on Win64 because it seems that for
ease of porting, MS Visual C++ treats code as 32 bit on Itanium.)
PythonWin also supports Windows CE; see the Python CE page at
‘http://pythonce.sourceforge.net/’ for more information.

Another new platform is Darwin/MacOS X; initial support for it is in
Python 2.0.  Dynamic loading works, if you specify "configure –with-dyld
–with-suffix=.x".  Consult the README in the Python source distribution
for more instructions.

An attempt has been made to alleviate one of Python’s warts, the
often-confusing *note NameError: 7f8. exception when code refers to a
local variable before the variable has been assigned a value.  For
example, the following code raises an exception on the ‘print’ statement
in both 1.5.2 and 2.0; in 1.5.2 a *note NameError: 7f8. exception is
raised, while 2.0 raises a new *note UnboundLocalError: 909. exception.
*note UnboundLocalError: 909. is a subclass of *note NameError: 7f8, so
any existing code that expects *note NameError: 7f8. to be raised should
still work.

     def f():
         print "i=",i
         i = i + 1
     f()

Two new exceptions, *note TabError: 90a. and *note IndentationError:
90b, have been introduced.  They’re both subclasses of *note
SyntaxError: 319, and are raised when Python code is found to be
improperly indented.


File: python.info,  Node: Changes to Built-in Functions,  Prev: Minor Language Changes,  Up: Other Core Changes

1.13.9.2 Changes to Built-in Functions
......................................

A new built-in, ‘zip(seq1, seq2, ...)’, has been added.  *note zip():
68a. returns a list of tuples where each tuple contains the i-th element
from each of the argument sequences.  The difference between *note
zip(): 68a. and ‘map(None, seq1, seq2)’ is that *note map(): 685. pads
the sequences with ‘None’ if the sequences aren’t all of the same
length, while *note zip(): 68a. truncates the returned list to the
length of the shortest argument sequence.

The *note int(): 185. and ‘long()’ functions now accept an optional
"base" parameter when the first argument is a string.  ‘int('123', 10)’
returns 123, while ‘int('123', 16)’ returns 291.  ‘int(123, 16)’ raises
a *note TypeError: 309. exception with the message "can’t convert
non-string with explicit base".

A new variable holding more detailed version information has been added
to the *note sys: f8. module.  ‘sys.version_info’ is a tuple ‘(major,
minor, micro, level, serial)’ For example, in a hypothetical 2.0.1beta1,
‘sys.version_info’ would be ‘(2, 0, 1, 'beta', 1)’.  `level' is a string
such as ‘"alpha"’, ‘"beta"’, or ‘"final"’ for a final release.

Dictionaries have an odd new method, ‘setdefault(key, default)’, which
behaves similarly to the existing ‘get()’ method.  However, if the key
is missing, ‘setdefault()’ both returns the value of `default' as
‘get()’ would do, and also inserts it into the dictionary as the value
for `key'.  Thus, the following lines of code:

     if dict.has_key( key ): return dict[key]
     else:
         dict[key] = []
         return dict[key]

can be reduced to a single ‘return dict.setdefault(key, [])’ statement.

The interpreter sets a maximum recursion depth in order to catch runaway
recursion before filling the C stack and causing a core dump or GPF..
Previously this limit was fixed when you compiled Python, but in 2.0 the
maximum recursion depth can be read and modified using *note
sys.getrecursionlimit(): 90d. and *note sys.setrecursionlimit(): 90e.
The default value is 1000, and a rough maximum value for a given
platform can be found by running a new script,
‘Misc/find_recursionlimit.py’.


File: python.info,  Node: Porting to 2 0,  Next: Extending/Embedding Changes,  Prev: Other Core Changes,  Up: What's New in Python 2 0

1.13.10 Porting to 2.0
----------------------

New Python releases try hard to be compatible with previous releases,
and the record has been pretty good.  However, some changes are
considered useful enough, usually because they fix initial design
decisions that turned out to be actively mistaken, that breaking
backward compatibility can’t always be avoided.  This section lists the
changes in Python 2.0 that may cause old Python code to break.

The change which will probably break the most code is tightening up the
arguments accepted by some methods.  Some methods would take multiple
arguments and treat them as a tuple, particularly various list methods
such as ‘append()’ and ‘insert()’.  In earlier versions of Python, if
‘L’ is a list, ‘L.append( 1,2 )’ appends the tuple ‘(1,2)’ to the list.
In Python 2.0 this causes a *note TypeError: 309. exception to be
raised, with the message: ’append requires exactly 1 argument; 2 given’.
The fix is to simply add an extra set of parentheses to pass both values
as a tuple: ‘L.append( (1,2) )’.

The earlier versions of these methods were more forgiving because they
used an old function in Python’s C interface to parse their arguments;
2.0 modernizes them to use ‘PyArg_ParseTuple()’, the current argument
parsing function, which provides more helpful error messages and treats
multi-argument calls as errors.  If you absolutely must use 2.0 but
can’t fix your code, you can edit ‘Objects/listobject.c’ and define the
preprocessor symbol ‘NO_STRICT_LIST_APPEND’ to preserve the old
behaviour; this isn’t recommended.

Some of the functions in the *note socket: ea. module are still
forgiving in this way.  For example, ‘socket.connect( ('hostname', 25)
)()’ is the correct form, passing a tuple representing an IP address,
but ‘socket.connect( 'hostname', 25 )()’ also works.
‘socket.connect_ex()’ and ‘socket.bind()’ are similarly easy-going.
2.0alpha1 tightened these functions up, but because the documentation
actually used the erroneous multiple argument form, many people wrote
code which would break with the stricter checking.  GvR backed out the
changes in the face of public reaction, so for the *note socket: ea.
module, the documentation was fixed and the multiple argument form is
simply marked as deprecated; it `will' be tightened up again in a future
Python version.

The ‘\x’ escape in string literals now takes exactly 2 hex digits.
Previously it would consume all the hex digits following the ’x’ and
take the lowest 8 bits of the result, so ‘\x123456’ was equivalent to
‘\x56’.

The *note AttributeError: 320. and *note NameError: 7f8. exceptions have
a more friendly error message, whose text will be something like ‘'Spam'
instance has no attribute 'eggs'’ or ‘name 'eggs' is not defined’.
Previously the error message was just the missing attribute name ‘eggs’,
and code written to take advantage of this fact will break in 2.0.

Some work has been done to make integers and long integers a bit more
interchangeable.  In 1.5.2, large-file support was added for Solaris, to
allow reading files larger than 2 GiB; this made the ‘tell()’ method of
file objects return a long integer instead of a regular integer.  Some
code would subtract two file offsets and attempt to use the result to
multiply a sequence or slice a string, but this raised a *note
TypeError: 309.  In 2.0, long integers can be used to multiply or slice
a sequence, and it’ll behave as you’d intuitively expect it to; ‘3L *
'abc'’ produces ’abcabcabc’, and ‘(0,1,2,3)[2L:4L]’ produces (2,3).
Long integers can also be used in various contexts where previously only
integers were accepted, such as in the ‘seek()’ method of file objects,
and in the formats supported by the ‘%’ operator (‘%d’, ‘%i’, ‘%x’,
etc.).  For example, ‘"%d" % 2L**64’ will produce the string
‘18446744073709551616’.

The subtlest long integer change of all is that the *note str(): 178. of
a long integer no longer has a trailing ’L’ character, though *note
repr(): 3db. still includes it.  The ’L’ annoyed many people who wanted
to print long integers that looked just like regular integers, since
they had to go out of their way to chop off the character.  This is no
longer a problem in 2.0, but code which does ‘str(longval)[:-1]’ and
assumes the ’L’ is there, will now lose the final digit.

Taking the *note repr(): 3db. of a float now uses a different formatting
precision than *note str(): 178.  *note repr(): 3db. uses ‘%.17g’ format
string for C’s ‘sprintf()’, while *note str(): 178. uses ‘%.12g’ as
before.  The effect is that *note repr(): 3db. may occasionally show
more decimal places than *note str(): 178, for certain numbers.  For
example, the number 8.1 can’t be represented exactly in binary, so
‘repr(8.1)’ is ‘'8.0999999999999996'’, while str(8.1) is ‘'8.1'’.

The ‘-X’ command-line option, which turned all standard exceptions into
strings instead of classes, has been removed; the standard exceptions
will now always be classes.  The ‘exceptions’ module containing the
standard exceptions was translated from Python to a built-in C module,
written by Barry Warsaw and Fredrik Lundh.


File: python.info,  Node: Extending/Embedding Changes,  Next: Distutils Making Modules Easy to Install,  Prev: Porting to 2 0,  Up: What's New in Python 2 0

1.13.11 Extending/Embedding Changes
-----------------------------------

Some of the changes are under the covers, and will only be apparent to
people writing C extension modules or embedding a Python interpreter in
a larger application.  If you aren’t dealing with Python’s C API, you
can safely skip this section.

The version number of the Python C API was incremented, so C extensions
compiled for 1.5.2 must be recompiled in order to work with 2.0.  On
Windows, it’s not possible for Python 2.0 to import a third party
extension built for Python 1.5.x due to how Windows DLLs work, so Python
will raise an exception and the import will fail.

Users of Jim Fulton’s ExtensionClass module will be pleased to find out
that hooks have been added so that ExtensionClasses are now supported by
*note isinstance(): 798. and *note issubclass(): 799.  This means you no
longer have to remember to write code such as ‘if type(obj) ==
myExtensionClass’, but can use the more natural ‘if isinstance(obj,
myExtensionClass)’.

The ‘Python/importdl.c’ file, which was a mass of #ifdefs to support
dynamic loading on many different platforms, was cleaned up and
reorganised by Greg Stein.  ‘importdl.c’ is now quite small, and
platform-specific code has been moved into a bunch of
‘Python/dynload_*.c’ files.  Another cleanup: there were also a number
of ‘my*.h’ files in the Include/ directory that held various portability
hacks; they’ve been merged into a single file, ‘Include/pyport.h’.

Vladimir Marangozov’s long-awaited malloc restructuring was completed,
to make it easy to have the Python interpreter use a custom allocator
instead of C’s standard ‘malloc()’.  For documentation, read the
comments in ‘Include/pymem.h’ and ‘Include/objimpl.h’.  For the lengthy
discussions during which the interface was hammered out, see the Web
archives of the ’patches’ and ’python-dev’ lists at python.org.

Recent versions of the GUSI development environment for MacOS support
POSIX threads.  Therefore, Python’s POSIX threading support now works on
the Macintosh.  Threading support using the user-space GNU ‘pth’ library
was also contributed.

Threading support on Windows was enhanced, too.  Windows supports thread
locks that use kernel objects only in case of contention; in the common
case when there’s no contention, they use simpler functions which are an
order of magnitude faster.  A threaded version of Python 1.5.2 on NT is
twice as slow as an unthreaded version; with the 2.0 changes, the
difference is only 10%.  These improvements were contributed by Yakov
Markovitch.

Python 2.0’s source now uses only ANSI C prototypes, so compiling Python
now requires an ANSI C compiler, and can no longer be done using a
compiler that only supports K&R C.

Previously the Python virtual machine used 16-bit numbers in its
bytecode, limiting the size of source files.  In particular, this
affected the maximum size of literal lists and dictionaries in Python
source; occasionally people who are generating Python code would run
into this limit.  A patch by Charles G. Waldman raises the limit from
‘2^16’ to ‘2^{32}’.

Three new convenience functions intended for adding constants to a
module’s dictionary at module initialization time were added:
‘PyModule_AddObject()’, ‘PyModule_AddIntConstant()’, and
‘PyModule_AddStringConstant()’.  Each of these functions takes a module
object, a null-terminated C string containing the name to be added, and
a third argument for the value to be assigned to the name.  This third
argument is, respectively, a Python object, a C long, or a C string.

A wrapper API was added for Unix-style signal handlers.  ‘PyOS_getsig()’
gets a signal handler and ‘PyOS_setsig()’ will set a new handler.


File: python.info,  Node: Distutils Making Modules Easy to Install,  Next: XML Modules,  Prev: Extending/Embedding Changes,  Up: What's New in Python 2 0

1.13.12 Distutils: Making Modules Easy to Install
-------------------------------------------------

Before Python 2.0, installing modules was a tedious affair – there was
no way to figure out automatically where Python is installed, or what
compiler options to use for extension modules.  Software authors had to
go through an arduous ritual of editing Makefiles and configuration
files, which only really work on Unix and leave Windows and MacOS
unsupported.  Python users faced wildly differing installation
instructions which varied between different extension packages, which
made administering a Python installation something of a chore.

The SIG for distribution utilities, shepherded by Greg Ward, has created
the Distutils, a system to make package installation much easier.  They
form the *note distutils: 37. package, a new part of Python’s standard
library.  In the best case, installing a Python module from source will
require the same steps: first you simply mean unpack the tarball or zip
archive, and the run "‘python setup.py install’".  The platform will be
automatically detected, the compiler will be recognized, C extension
modules will be compiled, and the distribution installed into the proper
directory.  Optional command-line arguments provide more control over
the installation process, the distutils package offers many places to
override defaults – separating the build from the install, building or
installing in non-default directories, and more.

In order to use the Distutils, you need to write a ‘setup.py’ script.
For the simple case, when the software contains only .py files, a
minimal ‘setup.py’ can be just a few lines long:

     from distutils.core import setup
     setup (name = "foo", version = "1.0",
            py_modules = ["module1", "module2"])

The ‘setup.py’ file isn’t much more complicated if the software consists
of a few packages:

     from distutils.core import setup
     setup (name = "foo", version = "1.0",
            packages = ["package", "package.subpackage"])

A C extension can be the most complicated case; here’s an example taken
from the PyXML package:

     from distutils.core import setup, Extension

     expat_extension = Extension('xml.parsers.pyexpat',
          define_macros = [('XML_NS', None)],
          include_dirs = [ 'extensions/expat/xmltok',
                           'extensions/expat/xmlparse' ],
          sources = [ 'extensions/pyexpat.c',
                      'extensions/expat/xmltok/xmltok.c',
                      'extensions/expat/xmltok/xmlrole.c', ]
            )
     setup (name = "PyXML", version = "0.5.4",
            ext_modules =[ expat_extension ] )

The Distutils can also take care of creating source and binary
distributions.  The "sdist" command, run by "‘python setup.py sdist’’,
builds a source distribution such as ‘foo-1.0.tar.gz’.  Adding new
commands isn’t difficult, "bdist_rpm" and "bdist_wininst" commands have
already been contributed to create an RPM distribution and a Windows
installer for the software, respectively.  Commands to create other
distribution formats such as Debian packages and Solaris ‘.pkg’ files
are in various stages of development.

All this is documented in a new manual, `Distributing Python Modules',
that joins the basic set of Python documentation.


File: python.info,  Node: XML Modules,  Next: Module changes,  Prev: Distutils Making Modules Easy to Install,  Up: What's New in Python 2 0

1.13.13 XML Modules
-------------------

Python 1.5.2 included a simple XML parser in the form of the ‘xmllib’
module, contributed by Sjoerd Mullender.  Since 1.5.2’s release, two
different interfaces for processing XML have become common: SAX2
(version 2 of the Simple API for XML) provides an event-driven interface
with some similarities to ‘xmllib’, and the DOM (Document Object Model)
provides a tree-based interface, transforming an XML document into a
tree of nodes that can be traversed and modified.  Python 2.0 includes a
SAX2 interface and a stripped- down DOM interface as part of the *note
xml: 12c. package.  Here we will give a brief overview of these new
interfaces; consult the Python documentation or the source code for
complete details.  The Python XML SIG is also working on improved
documentation.

* Menu:

* SAX2 Support:: 
* DOM Support:: 
* Relationship to PyXML:: 


File: python.info,  Node: SAX2 Support,  Next: DOM Support,  Up: XML Modules

1.13.13.1 SAX2 Support
......................

SAX defines an event-driven interface for parsing XML. To use SAX, you
must write a SAX handler class.  Handler classes inherit from various
classes provided by SAX, and override various methods that will then be
called by the XML parser.  For example, the ‘startElement()’ and
‘endElement()’ methods are called for every starting and end tag
encountered by the parser, the ‘characters()’ method is called for every
chunk of character data, and so forth.

The advantage of the event-driven approach is that the whole document
doesn’t have to be resident in memory at any one time, which matters if
you are processing really huge documents.  However, writing the SAX
handler class can get very complicated if you’re trying to modify the
document structure in some elaborate way.

For example, this little example program defines a handler that prints a
message for every starting and ending tag, and then parses the file
‘hamlet.xml’ using it:

     from xml import sax

     class SimpleHandler(sax.ContentHandler):
         def startElement(self, name, attrs):
             print 'Start of element:', name, attrs.keys()

         def endElement(self, name):
             print 'End of element:', name

     # Create a parser object
     parser = sax.make_parser()

     # Tell it what handler to use
     handler = SimpleHandler()
     parser.setContentHandler( handler )

     # Parse a file!
     parser.parse( 'hamlet.xml' )

For more information, consult the Python documentation, or the XML HOWTO
at ‘http://pyxml.sourceforge.net/topics/howto/xml-howto.html’.


File: python.info,  Node: DOM Support,  Next: Relationship to PyXML,  Prev: SAX2 Support,  Up: XML Modules

1.13.13.2 DOM Support
.....................

The Document Object Model is a tree-based representation for an XML
document.  A top-level ‘Document’ instance is the root of the tree, and
has a single child which is the top-level ‘Element’ instance.  This
‘Element’ has children nodes representing character data and any
sub-elements, which may have further children of their own, and so
forth.  Using the DOM you can traverse the resulting tree any way you
like, access element and attribute values, insert and delete nodes, and
convert the tree back into XML.

The DOM is useful for modifying XML documents, because you can create a
DOM tree, modify it by adding new nodes or rearranging subtrees, and
then produce a new XML document as output.  You can also construct a DOM
tree manually and convert it to XML, which can be a more flexible way of
producing XML output than simply writing ‘<tag1>’...‘</tag1>’ to a file.

The DOM implementation included with Python lives in the *note
xml.dom.minidom: 12e. module.  It’s a lightweight implementation of the
Level 1 DOM with support for XML namespaces.  The ‘parse()’ and
‘parseString()’ convenience functions are provided for generating a DOM
tree:

     from xml.dom import minidom
     doc = minidom.parse('hamlet.xml')

‘doc’ is a ‘Document’ instance.  ‘Document’, like all the other DOM
classes such as ‘Element’ and ‘Text’, is a subclass of the ‘Node’ base
class.  All the nodes in a DOM tree therefore support certain common
methods, such as ‘toxml()’ which returns a string containing the XML
representation of the node and its children.  Each class also has
special methods of its own; for example, ‘Element’ and ‘Document’
instances have a method to find all child elements with a given tag
name.  Continuing from the previous 2-line example:

     perslist = doc.getElementsByTagName( 'PERSONA' )
     print perslist[0].toxml()
     print perslist[1].toxml()

For the `Hamlet' XML file, the above few lines output:

     <PERSONA>CLAUDIUS, king of Denmark. </PERSONA>
     <PERSONA>HAMLET, son to the late, and nephew to the present king.</PERSONA>

The root element of the document is available as ‘doc.documentElement’,
and its children can be easily modified by deleting, adding, or removing
nodes:

     root = doc.documentElement

     # Remove the first child
     root.removeChild( root.childNodes[0] )

     # Move the new first child to the end
     root.appendChild( root.childNodes[0] )

     # Insert the new first child (originally,
     # the third child) before the 20th child.
     root.insertBefore( root.childNodes[0], root.childNodes[20] )

Again, I will refer you to the Python documentation for a complete
listing of the different ‘Node’ classes and their various methods.


File: python.info,  Node: Relationship to PyXML,  Prev: DOM Support,  Up: XML Modules

1.13.13.3 Relationship to PyXML
...............................

The XML Special Interest Group has been working on XML-related Python
code for a while.  Its code distribution, called PyXML, is available
from the SIG’s Web pages at
‘https://www.python.org/community/sigs/current/xml-sig’.  The PyXML
distribution also used the package name ‘xml’.  If you’ve written
programs that used PyXML, you’re probably wondering about its
compatibility with the 2.0 *note xml: 12c. package.

The answer is that Python 2.0’s *note xml: 12c. package isn’t compatible
with PyXML, but can be made compatible by installing a recent version
PyXML. Many applications can get by with the XML support that is
included with Python 2.0, but more complicated applications will require
that the full PyXML package will be installed.  When installed, PyXML
versions 0.6.0 or greater will replace the *note xml: 12c. package
shipped with Python, and will be a strict superset of the standard
package, adding a bunch of additional features.  Some of the additional
features in PyXML include:

   * 4DOM, a full DOM implementation from FourThought, Inc.

   * The xmlproc validating parser, written by Lars Marius Garshol.

   * The ‘sgmlop’ parser accelerator module, written by Fredrik Lundh.


File: python.info,  Node: Module changes,  Next: New modules,  Prev: XML Modules,  Up: What's New in Python 2 0

1.13.14 Module changes
----------------------

Lots of improvements and bugfixes were made to Python’s extensive
standard library; some of the affected modules include *note readline:
da, ‘ConfigParser’, *note cgi: 16, *note calendar: 15, *note posix: cd,
*note readline: da, ‘xmllib’, *note aifc: 5, ‘chunk, wave’, *note
random: d8, *note shelve: e2, and *note nntplib: bc.  Consult the CVS
logs for the exact patch-by-patch details.

Brian Gallew contributed OpenSSL support for the *note socket: ea.
module.  OpenSSL is an implementation of the Secure Socket Layer, which
encrypts the data being sent over a socket.  When compiling Python, you
can edit ‘Modules/Setup’ to include SSL support, which adds an
additional function to the *note socket: ea. module: ‘socket.ssl(socket,
keyfile, certfile)’, which takes a socket object and returns an SSL
socket.  The ‘httplib’ and *note urllib: 116. modules were also changed
to support ‘https://’ URLs, though no one has implemented FTP or SMTP
over SSL.

The ‘httplib’ module has been rewritten by Greg Stein to support
HTTP/1.1.  Backward compatibility with the 1.5 version of ‘httplib’ is
provided, though using HTTP/1.1 features such as pipelining will require
rewriting code to use a different set of interfaces.

The ‘Tkinter’ module now supports Tcl/Tk version 8.1, 8.2, or 8.3, and
support for the older 7.x versions has been dropped.  The Tkinter module
now supports displaying Unicode strings in Tk widgets.  Also, Fredrik
Lundh contributed an optimization which makes operations like
‘create_line’ and ‘create_polygon’ much faster, especially when using
lots of coordinates.

The *note curses: 2b. module has been greatly extended, starting from
Oliver Andrich’s enhanced version, to provide many additional functions
from ncurses and SYSV curses, such as colour, alternative character set
support, pads, and mouse support.  This means the module is no longer
compatible with operating systems that only have BSD curses, but there
don’t seem to be any currently maintained OSes that fall into this
category.

As mentioned in the earlier discussion of 2.0’s Unicode support, the
underlying implementation of the regular expressions provided by the
*note re: d9. module has been changed.  SRE, a new regular expression
engine written by Fredrik Lundh and partially funded by Hewlett Packard,
supports matching against both 8-bit strings and Unicode strings.


File: python.info,  Node: New modules,  Next: IDLE Improvements,  Prev: Module changes,  Up: What's New in Python 2 0

1.13.15 New modules
-------------------

A number of new modules were added.  We’ll simply list them with brief
descriptions; consult the 2.0 documentation for the details of a
particular module.

   * *note atexit: c.: For registering functions to be called before the
     Python interpreter exits.  Code that currently sets ‘sys.exitfunc’
     directly should be changed to use the *note atexit: c. module
     instead, importing *note atexit: c. and calling *note
     atexit.register(): 918. with the function to be called on exit.
     (Contributed by Skip Montanaro.)

   * *note codecs: 1c, ‘encodings’, *note unicodedata: 113.: Added as
     part of the new Unicode support.

   * *note filecmp: 7d.: Supersedes the old ‘cmp’, ‘cmpcache’ and
     ‘dircmp’ modules, which have now become deprecated.  (Contributed
     by Gordon MacMillan and Moshe Zadka.)

   * *note gettext: 88.: This module provides internationalization
     (I18N) and localization (L10N) support for Python programs by
     providing an interface to the GNU gettext message catalog library.
     (Integrated by Barry Warsaw, from separate contributions by Martin
     von Löwis, Peter Funk, and James Henstridge.)

   * ‘linuxaudiodev’: Support for the ‘/dev/audio’ device on Linux, a
     twin to the existing ‘sunaudiodev’ module.  (Contributed by Peter
     Bosch, with fixes by Jeremy Hylton.)

   * *note mmap: b0.: An interface to memory-mapped files on both
     Windows and Unix.  A file’s contents can be mapped directly into
     memory, at which point it behaves like a mutable string, so its
     contents can be read and modified.  They can even be passed to
     functions that expect ordinary strings, such as the *note re: d9.
     module.  (Contributed by Sam Rushing, with some extensions by A.M.
     Kuchling.)

   * ‘pyexpat’: An interface to the Expat XML parser.  (Contributed by
     Paul Prescod.)

   * ‘robotparser’: Parse a ‘robots.txt’ file, which is used for writing
     Web spiders that politely avoid certain areas of a Web site.  The
     parser accepts the contents of a ‘robots.txt’ file, builds a set of
     rules from it, and can then answer questions about the fetchability
     of a given URL. (Contributed by Skip Montanaro.)

   * *note tabnanny: fb.: A module/script to check Python source code
     for ambiguous indentation.  (Contributed by Tim Peters.)

   * ‘UserString’: A base class useful for deriving objects that behave
     like strings.

   * *note webbrowser: 122.: A module that provides a platform
     independent way to launch a web browser on a specific URL. For each
     platform, various browsers are tried in a specific order.  The user
     can alter which browser is launched by setting the `BROWSER'
     environment variable.  (Originally inspired by Eric S. Raymond’s
     patch to *note urllib: 116. which added similar functionality, but
     the final module comes from code originally implemented by Fred
     Drake as ‘Tools/idle/BrowserControl.py’, and adapted for the
     standard library by Fred.)

   * ‘_winreg’: An interface to the Windows registry.  ‘_winreg’ is an
     adaptation of functions that have been part of PythonWin since
     1995, but has now been added to the core distribution, and enhanced
     to support Unicode.  ‘_winreg’ was written by Bill Tutt and Mark
     Hammond.

   * *note zipfile: 13a.: A module for reading and writing ZIP-format
     archives.  These are archives produced by ‘PKZIP’ on DOS/Windows or
     ‘zip’ on Unix, not to be confused with ‘gzip’-format files (which
     are supported by the *note gzip: 8b. module) (Contributed by James
     C. Ahlstrom.)

   * ‘imputil’: A module that provides a simpler way for writing
     customised import hooks, in comparison to the existing ‘ihooks’
     module.  (Implemented by Greg Stein, with much discussion on
     python-dev along the way.)


File: python.info,  Node: IDLE Improvements,  Next: Deleted and Deprecated Modules,  Prev: New modules,  Up: What's New in Python 2 0

1.13.16 IDLE Improvements
-------------------------

IDLE is the official Python cross-platform IDE, written using Tkinter.
Python 2.0 includes IDLE 0.6, which adds a number of new features and
improvements.  A partial list:

   * UI improvements and optimizations, especially in the area of syntax
     highlighting and auto-indentation.

   * The class browser now shows more information, such as the top level
     functions in a module.

   * Tab width is now a user settable option.  When opening an existing
     Python file, IDLE automatically detects the indentation
     conventions, and adapts.

   * There is now support for calling browsers on various platforms,
     used to open the Python documentation in a browser.

   * IDLE now has a command line, which is largely similar to the
     vanilla Python interpreter.

   * Call tips were added in many places.

   * IDLE can now be installed as a package.

   * In the editor window, there is now a line/column bar at the bottom.

   * Three new keystroke commands: Check module (Alt-F5), Import module
     (F5) and Run script (Ctrl-F5).


File: python.info,  Node: Deleted and Deprecated Modules,  Next: Acknowledgements<8>,  Prev: IDLE Improvements,  Up: What's New in Python 2 0

1.13.17 Deleted and Deprecated Modules
--------------------------------------

A few modules have been dropped because they’re obsolete, or because
there are now better ways to do the same thing.  The ‘stdwin’ module is
gone; it was for a platform-independent windowing toolkit that’s no
longer developed.

A number of modules have been moved to the ‘lib-old’ subdirectory:
‘cmp’, ‘cmpcache’, ‘dircmp’, ‘dump’, ‘find’, ‘grep’, ‘packmail’, ‘poly’,
‘util’, ‘whatsound’, ‘zmod’.  If you have code which relies on a module
that’s been moved to ‘lib-old’, you can simply add that directory to
‘sys.path’ to get them back, but you’re encouraged to update any code
that uses these modules.


File: python.info,  Node: Acknowledgements<8>,  Prev: Deleted and Deprecated Modules,  Up: What's New in Python 2 0

1.13.18 Acknowledgements
------------------------

The authors would like to thank the following people for offering
suggestions on various drafts of this article: David Bolen, Mark
Hammond, Gregg Hauser, Jeremy Hylton, Fredrik Lundh, Detlef Lannert,
Aahz Maruch, Skip Montanaro, Vladimir Marangozov, Tobias Polzin, Guido
van Rossum, Neil Schemenauer, and Russ Schmidt.

The "Changelog" is a HTML version of the file Misc/NEWS(1) which
contains `all' nontrivial changes to Python for the current version.

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/3.4/Misc/NEWS


File: python.info,  Node: Changelog,  Prev: What's New in Python 2 0,  Up: What's New in Python

1.14 Changelog
==============

* Menu:

* Python 3.4.3: Python 3 4 3. 
* Python 3.4.2: Python 3 4 2. 
* Python 3.4.2rc1: Python 3 4 2rc1. 
* Python 3.4.1: Python 3 4 1. 
* Python 3.4.1rc1: Python 3 4 1rc1. 
* Python 3.4.0: Python 3 4 0. 
* Python 3.4.0 release candidate 3: Python 3 4 0 release candidate 3. 
* Python 3.4.0 release candidate 2: Python 3 4 0 release candidate 2. 
* Python 3.4.0 release candidate 1: Python 3 4 0 release candidate 1. 
* Python 3.4.0 Beta 3: Python 3 4 0 Beta 3. 
* Python 3.4.0 Beta 2: Python 3 4 0 Beta 2. 
* Python 3.4.0 Beta 1: Python 3 4 0 Beta 1. 
* Python 3.4.0 Alpha 4: Python 3 4 0 Alpha 4. 
* Python 3.4.0 Alpha 3: Python 3 4 0 Alpha 3. 
* Python 3.4.0 Alpha 2: Python 3 4 0 Alpha 2. 
* Python 3.4.0 Alpha 1: Python 3 4 0 Alpha 1. 
* Python 3.3.0: Python 3 3 0. 
* Python 3.3.0 Release Candidate 3: Python 3 3 0 Release Candidate 3. 
* Python 3.3.0 Release Candidate 2: Python 3 3 0 Release Candidate 2. 
* Python 3.3.0 Release Candidate 1: Python 3 3 0 Release Candidate 1. 
* Python 3.3.0 Beta 2: Python 3 3 0 Beta 2. 
* Python 3.3.0 Beta 1: Python 3 3 0 Beta 1. 
* Python 3.3.0 Alpha 4: Python 3 3 0 Alpha 4. 
* Python 3.3.0 Alpha 3: Python 3 3 0 Alpha 3. 
* Python 3.3.0 Alpha 2: Python 3 3 0 Alpha 2. 
* Python 3.3.0 Alpha 1: Python 3 3 0 Alpha 1. 


File: python.info,  Node: Python 3 4 3,  Next: Python 3 4 2,  Up: Changelog

1.14.1 Python 3.4.3
-------------------

Release date: 2015-02-23

* Menu:

* Core and Builtins:: 
* Library:: 
* IDLE: IDLE<3>. 
* Tests:: 
* Build:: 
* C API:: 
* Documentation: Documentation<2>. 
* Tools/Demos:: 
* Windows:: 


File: python.info,  Node: Core and Builtins,  Next: Library,  Up: Python 3 4 3

1.14.1.1 Core and Builtins
..........................

   - Issue #22735(1): Fix many edge cases (including crashes) involving
     custom mro() implementations.

   - Issue #22896(2): Avoid using PyObject_AsCharBuffer(),
     PyObject_AsReadBuffer() and PyObject_AsWriteBuffer().

   - Issue #21295(3): Revert some changes (issue #16795(4)) to AST line
     numbers and column offsets that constituted a regression.

   - Issue #21408(5): The default __ne__() now returns NotImplemented if
     __eq__() returned NotImplemented.  Original patch by Martin Panter.

   - Issue #23321(6): Fixed a crash in str.decode() when error handler
     returned replacment string longer than mailformed input data.

   - Issue #23048(7): Fix jumping out of an infinite while loop in the
     pdb.

   - Issue #20335(8): bytes constructor now raises TypeError when
     encoding or errors is specified with non-string argument.  Based on
     patch by Renaud Blanch.

   - Issue #22335(9): Fix crash when trying to enlarge a bytearray to
     0x7fffffff bytes on a 32-bit platform.

   - Issue #22653(10): Fix an assertion failure in debug mode when doing
     a reentrant dict insertion in debug mode.

   - Issue #22643(11): Fix integer overflow in Unicode case operations
     (upper, lower, title, swapcase, casefold).

   - Issue #22604(12): Fix assertion error in debug mode when dividing a
     complex number by (nan+0j).

   - Issue #22470(13): Fixed integer overflow issues in
     "backslashreplace", "xmlcharrefreplace", and "surrogatepass" error
     handlers.

   - Issue #22520(14): Fix overflow checking when generating the repr of
     a unicode object.

   - Issue #22519(15): Fix overflow checking in PyBytes_Repr.

   - Issue #22518(16): Fix integer overflow issues in latin-1 encoding.

   - Issue #23165(17): Perform overflow checks before allocating memory
     in the _Py_char2wchar function.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/22735

   (2) https://bugs.python.org/22896

   (3) https://bugs.python.org/21295

   (4) https://bugs.python.org/16795

   (5) https://bugs.python.org/21408

   (6) https://bugs.python.org/23321

   (7) https://bugs.python.org/23048

   (8) https://bugs.python.org/20335

   (9) https://bugs.python.org/22335

   (10) https://bugs.python.org/22653

   (11) https://bugs.python.org/22643

   (12) https://bugs.python.org/22604

   (13) https://bugs.python.org/22470

   (14) https://bugs.python.org/22520

   (15) https://bugs.python.org/22519

   (16) https://bugs.python.org/22518

   (17) https://bugs.python.org/23165


File: python.info,  Node: Library,  Next: IDLE<3>,  Prev: Core and Builtins,  Up: Python 3 4 3

1.14.1.2 Library
................

   - Issue #23399(1): pyvenv creates relative symlinks where possible.

   - Issue #23099(2): Closing io.BytesIO with exported buffer is
     rejected now to prevent corrupting exported buffer.

   - Issue #23363(3): Fix possible overflow in itertools.permutations.

   - Issue #23364(4): Fix possible overflow in itertools.product.

   - Issue #23366(5): Fixed possible integer overflow in
     itertools.combinations.

   - Issue #23366(6): Fixed possible integer overflow in
     itertools.combinations.

   - Issue #23369(7): Fixed possible integer overflow in
     _json.encode_basestring_ascii.

   - Issue #23353(8): Fix the exception handling of generators in
     PyEval_EvalFrameEx().  At entry, save or swap the exception state
     even if PyEval_EvalFrameEx() is called with throwflag=0.  At exit,
     the exception state is now always restored or swapped, not only if
     why is WHY_YIELD or WHY_RETURN. Patch co-written with Antoine
     Pitrou.

   - Issue #18518(9): timeit now rejects statements which can’t be
     compiled outside a function or a loop (e.g.  "return" or "break").

   - Issue #23094(10): Fixed readline with frames in Python
     implementation of pickle.

   - Issue #23268(11): Fixed bugs in the comparison of ipaddress
     classes.

   - Issue #21408(12): Removed incorrect implementations of __ne__()
     which didn’t returned NotImplemented if __eq__() returned
     NotImplemented.  The default __ne__() now works correctly.

   - Issue #19996(13): ‘email.feedparser.FeedParser’ now handles
     (malformed) headers with no key rather than amusing the body has
     started.

   - Issue #23248(14): Update ssl error codes from latest OpenSSL git
     master.

   - Issue #23098(15): 64-bit dev_t is now supported in the os module.

   - Issue #23250(16): In the http.cookies module, capitalize "HttpOnly"
     and "Secure" as they are written in the standard.

   - Issue #23063(17): In the disutils’ check command, fix parsing of
     reST with code or code-block directives.

   - Issue #23209(18), #23225: selectors.BaseSelector.close() now clears
     its internal reference to the selector mapping to break a reference
     cycle.  Initial patch written by Martin Richard.

   - Issue #21356(19): Make ssl.RAND_egd() optional to support LibreSSL.
     The availability of the function is checked during the compilation.
     Patch written by Bernard Spil.

   - Issue #20896(20), #22935: The *note ssl.get_server_certificate():
     4a9. function now uses the *note PROTOCOL_SSLv23: 921. protocol by
     default, not *note PROTOCOL_SSLv3: 922, for maximum compatibility
     and support platforms where *note PROTOCOL_SSLv3: 922. support is
     disabled.

   - Issue #23111(21): In the ftplib, make ssl.PROTOCOL_SSLv23 the
     default protocol version.

   - Issue #23132(22): Mitigate regression in speed and clarity in
     functools.total_ordering.

   - Issue #22585(23): On OpenBSD 5.6 and newer, os.urandom() now calls
     getentropy(), instead of reading /dev/urandom, to get pseudo-random
     bytes.

   - Issue #23112(24): Fix SimpleHTTPServer to correctly carry the query
     string and fragment when it redirects to add a trailing slash.

   - Issue #23093(25): In the io, module allow more operations to work
     on detached streams.

   - Issue #19104(26): pprint now produces evaluable output for wrapped
     strings.

   - Issue #23071(27): Added missing names to codecs.__all__.  Patch by
     Martin Panter.

   - Issue #15513(28): Added a __sizeof__ implementation for pickle
     classes.

   - Issue #19858(29): pickletools.optimize() now aware of the MEMOIZE
     opcode, can produce more compact result and no longer produces
     invalid output if input data contains MEMOIZE opcodes together with
     PUT or BINPUT opcodes.

   - Issue #22095(30): Fixed HTTPConnection.set_tunnel with default
     port.  The port value in the host header was set to "None".  Patch
     by Demian Brecht.

   - Issue #23016(31): A warning no longer produces an AttributeError
     when the program is run with pythonw.exe.

   - Issue #21775(32): shutil.copytree(): fix crash when copying to
     VFAT. An exception handler assumed that that OSError objects always
     have a ’winerror’ attribute.  That is not the case, so the
     exception handler itself raised AttributeError when run on Linux
     (and, presumably, any other non-Windows OS). Patch by Greg Ward.

   - Issue #1218234(33): Fix inspect.getsource() to load updated source
     of reloaded module.  Initial patch by Berker Peksag.

   - Issue #22959(34): In the constructor of
     http.client.HTTPSConnection, prefer the context’s check_hostname
     attribute over the `check_hostname' parameter.

   - Issue #16043(35): Add a default limit for the amount of data
     xmlrpclib.gzip_decode will return.  This resolves CVE-2013-1753.

   - Issue #22966(36): Fix __pycache__ pyc file name clobber when
     pyc_compile is asked to compile a source file containing multiple
     dots in the source file name.

   - Issue #21971(37): Update turtledemo doc and add module to the
     index.

   - Issue #21032(38).  Fixed socket leak if
     HTTPConnection.getresponse() fails.  Original patch by Martin
     Panter.

   - Issue #22960(39): Add a context argument to xmlrpclib.ServerProxy
     constructor.

   - Issue #22915(40): SAX parser now supports files opened with file
     descriptor or bytes path.

   - Issue #22609(41): Constructors and update methods of mapping
     classes in the collections module now accept the self keyword
     argument.

   - Issue #22788(42): Add `context' parameter to
     logging.handlers.HTTPHandler.

   - Issue #22921(43): Allow SSLContext to take the `hostname' parameter
     even if OpenSSL doesn’t support SNI.

   - Issue #22894(44): TestCase.subTest() would cause the test suite to
     be stopped when in failfast mode, even in the absence of failures.

   - Issue #22638(45): SSLv3 is now disabled throughout the standard
     library.  It can still be enabled by instantiating a SSLContext
     manually.

   - Issue #22370(46): Windows detection in pathlib is now more robust.

   - Issue #22841(47): Reject coroutines in asyncio
     add_signal_handler().  Patch by Ludovic.Gasc.

   - Issue #22849(48): Fix possible double free in the io.TextIOWrapper
     constructor.

   - Issue #12728(49): Different Unicode characters having the same
     uppercase but different lowercase are now matched in
     case-insensitive regular expressions.

   - Issue #22821(50): Fixed fcntl() with integer argument on 64-bit
     big-endian platforms.

   - Issue #22406(51): Fixed the uu_codec codec incorrectly ported to
     3.x.  Based on patch by Martin Panter.

   - Issue #17293(52): uuid.getnode() now determines MAC address on AIX
     using netstat.  Based on patch by Aivars Kalvāns.

   - Issue #22769(53): Fixed ttk.Treeview.tag_has() when called without
     arguments.

   - Issue #22417(54): Verify certificates by default in httplib (PEP
     476).

   - Issue #22775(55): Fixed unpickling of http.cookies.SimpleCookie
     with protocol 2 and above.  Patch by Tim Graham.

   - Issue #22366(56): urllib.request.urlopen will accept a context
     object (SSLContext) as an argument which will then used be for
     HTTPS connection.  Patch by Alex Gaynor.

   - Issue #22776(57): Brought excluded code into the scope of a try
     block in SysLogHandler.emit().

   - Issue #22665(58): Add missing get_terminal_size and SameFileError
     to shutil.__all__.

   - Issue #17381(59): Fixed handling of case-insensitive ranges in
     regular expressions.

   - Issue #22410(60): Module level functions in the re module now cache
     compiled locale-dependent regular expressions taking into account
     the locale.

   - Issue #22759(61): Query methods on pathlib.Path() (exists(),
     is_dir(), etc.)  now return False when the underlying stat call
     raises NotADirectoryError.

   - Issue #8876(62): distutils now falls back to copying files when
     hard linking doesn’t work.  This allows use with special
     filesystems such as VirtualBox shared folders.

   - Issue #18853(63): Fixed ResourceWarning in shlex.__nain__.

   - Issue #9351(64): Defaults set with set_defaults on an argparse
     subparser are no longer ignored when also set on the parent parser.

   - Issue #21991(65): Make email.headerregistry’s header ’params’
     attributes be read-only (MappingProxyType).  Previously the
     dictionary was modifiable but a new one was created on each access
     of the attribute.

   - Issue #22641(66): In asyncio, the default SSL context for client
     connections is now created using ssl.create_default_context(), for
     stronger security.

   - Issue #22435(67): Fix a file descriptor leak when SocketServer bind
     fails.

   - Issue #13096(68): Fixed segfault in CTypes POINTER handling of
     large values.

   - Issue #11694(69): Raise ConversionError in xdrlib as documented.
     Patch by Filip Gruszczyński and Claudiu Popa.

   - Issue #22462(70): Fix pyexpat’s creation of a dummy frame to make
     it appear in exception tracebacks.

   - Issue #21173(71): Fix len() on a WeakKeyDictionary when .clear()
     was called with an iterator alive.

   - Issue #11866(72): Eliminated race condition in the computation of
     names for new threads.

   - Issue #21905(73): Avoid RuntimeError in pickle.whichmodule() when
     sys.modules is mutated while iterating.  Patch by Olivier Grisel.

   - Issue #22219(74): The zipfile module CLI now adds entries for
     directories (including empty directories) in ZIP file.

   - Issue #22449(75): In the ssl.SSLContext.load_default_certs, consult
     the enviromental variables SSL_CERT_DIR and SSL_CERT_FILE on
     Windows.

   - Issue #20076(76): Added non derived UTF-8 aliases to locale aliases
     table.

   - Issue #20079(77): Added locales supported in glibc 2.18 to locale
     alias table.

   - Issue #22396(78): On 32-bit AIX platform, don’t expose
     os.posix_fadvise() nor os.posix_fallocate() because their
     prototypes in system headers are wrong.

   - Issue #22517(79): When a io.BufferedRWPair object is deallocated,
     clear its weakrefs.

   - Issue #22448(80): Improve canceled timer handles cleanup to prevent
     unbound memory usage.  Patch by Joshua Moore-Oliva.

   - Issue #23009(81): Make sure selectors.EpollSelecrtor.select() works
     when no FD is registered.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23399

   (2) https://bugs.python.org/23099

   (3) https://bugs.python.org/23363

   (4) https://bugs.python.org/23364

   (5) https://bugs.python.org/23366

   (6) https://bugs.python.org/23366

   (7) https://bugs.python.org/23369

   (8) https://bugs.python.org/23353

   (9) https://bugs.python.org/18518

   (10) https://bugs.python.org/23094

   (11) https://bugs.python.org/23268

   (12) https://bugs.python.org/21408

   (13) https://bugs.python.org/19996

   (14) https://bugs.python.org/23248

   (15) https://bugs.python.org/23098

   (16) https://bugs.python.org/23250

   (17) https://bugs.python.org/23063

   (18) https://bugs.python.org/23209

   (19) https://bugs.python.org/21356

   (20) https://bugs.python.org/20896

   (21) https://bugs.python.org/23111

   (22) https://bugs.python.org/23132

   (23) https://bugs.python.org/22585

   (24) https://bugs.python.org/23112

   (25) https://bugs.python.org/23093

   (26) https://bugs.python.org/19104

   (27) https://bugs.python.org/23071

   (28) https://bugs.python.org/15513

   (29) https://bugs.python.org/19858

   (30) https://bugs.python.org/22095

   (31) https://bugs.python.org/23016

   (32) https://bugs.python.org/21775

   (33) https://bugs.python.org/1218234

   (34) https://bugs.python.org/22959

   (35) https://bugs.python.org/16043

   (36) https://bugs.python.org/22966

   (37) https://bugs.python.org/21971

   (38) https://bugs.python.org/21032

   (39) https://bugs.python.org/22960

   (40) https://bugs.python.org/22915

   (41) https://bugs.python.org/22609

   (42) https://bugs.python.org/22788

   (43) https://bugs.python.org/22921

   (44) https://bugs.python.org/22894

   (45) https://bugs.python.org/22638

   (46) https://bugs.python.org/22370

   (47) https://bugs.python.org/22841

   (48) https://bugs.python.org/22849

   (49) https://bugs.python.org/12728

   (50) https://bugs.python.org/22821

   (51) https://bugs.python.org/22406

   (52) https://bugs.python.org/17293

   (53) https://bugs.python.org/22769

   (54) https://bugs.python.org/22417

   (55) https://bugs.python.org/22775

   (56) https://bugs.python.org/22366

   (57) https://bugs.python.org/22776

   (58) https://bugs.python.org/22665

   (59) https://bugs.python.org/17381

   (60) https://bugs.python.org/22410

   (61) https://bugs.python.org/22759

   (62) https://bugs.python.org/8876

   (63) https://bugs.python.org/18853

   (64) https://bugs.python.org/9351

   (65) https://bugs.python.org/21991

   (66) https://bugs.python.org/22641

   (67) https://bugs.python.org/22435

   (68) https://bugs.python.org/13096

   (69) https://bugs.python.org/11694

   (70) https://bugs.python.org/22462

   (71) https://bugs.python.org/21173

   (72) https://bugs.python.org/11866

   (73) https://bugs.python.org/21905

   (74) https://bugs.python.org/22219

   (75) https://bugs.python.org/22449

   (76) https://bugs.python.org/20076

   (77) https://bugs.python.org/20079

   (78) https://bugs.python.org/22396

   (79) https://bugs.python.org/22517

   (80) https://bugs.python.org/22448

   (81) https://bugs.python.org/23009


File: python.info,  Node: IDLE<3>,  Next: Tests,  Prev: Library,  Up: Python 3 4 3

1.14.1.3 IDLE
.............

   - Issue #20577(1): Configuration of the max line length for the
     FormatParagraph extension has been moved from the General tab of
     the Idle preferences dialog to the FormatParagraph tab of the
     Config Extensions dialog.  Patch by Tal Einat.

   - Issue #16893(2): Update Idle doc chapter to match current Idle and
     add new information.

   - Issue #3068(3): Add Idle extension configuration dialog to Options
     menu.  Changes are written to HOME/.idlerc/config-extensions.cfg.
     Original patch by Tal Einat.

   - Issue #16233(4): A module browser (File : Class Browser, Alt+C)
     requires a editor window with a filename.  When Class Browser is
     requested otherwise, from a shell, output window, or ’Untitled’
     editor, Idle no longer displays an error box.  It now pops up an
     Open Module box (Alt+M). If a valid name is entered and a module is
     opened, a corresponding browser is also opened.

   - Issue #4832(5): Save As to type Python files automatically adds .py
     to the name you enter (even if your system does not display it).
     Some systems automatically add .txt when type is Text files.

   - Issue #21986(6): Code objects are not normally pickled by the
     pickle module.  To match this, they are no longer pickled when
     running under Idle.

   - Issue #23180(7): Rename IDLE "Windows" menu item to "Window".
     Patch by Al Sweigart.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20577

   (2) https://bugs.python.org/16893

   (3) https://bugs.python.org/3068

   (4) https://bugs.python.org/16233

   (5) https://bugs.python.org/4832

   (6) https://bugs.python.org/21986

   (7) https://bugs.python.org/23180


File: python.info,  Node: Tests,  Next: Build,  Prev: IDLE<3>,  Up: Python 3 4 3

1.14.1.4 Tests
..............

   - Issue #23392(1): Added tests for marshal C API that works with
     FILE*.

   - Issue #18982(2): Add tests for CLI of the calendar module.

   - Issue #19548(3): Added some additional checks to test_codecs to
     ensure that statements in the updated documentation remain
     accurate.  Patch by Martin Panter.

   - Issue #22838(4): All test_re tests now work with unittest test
     discovery.

   - Issue #22173(5): Update lib2to3 tests to use unittest test
     discovery.

   - Issue #16000(6): Convert test_curses to use unittest.

   - Issue #21456(7): Skip two tests in test_urllib2net.py if _ssl
     module not present.  Patch by Remi Pointel.

   - Issue #22770(8): Prevent some Tk segfaults on OS X when running gui
     tests.

   - Issue #23211(9): Workaround test_logging failure on some OS X 10.6
     systems.

   - Issue #23345(10): Prevent test_ssl failures with large OpenSSL
     patch level values (like 0.9.8zc).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/23392

   (2) https://bugs.python.org/18982

   (3) https://bugs.python.org/19548

   (4) https://bugs.python.org/22838

   (5) https://bugs.python.org/22173

   (6) https://bugs.python.org/16000

   (7) https://bugs.python.org/21456

   (8) https://bugs.python.org/22770

   (9) https://bugs.python.org/23211

   (10) https://bugs.python.org/23345


File: python.info,  Node: Build,  Next: C API,  Prev: Tests,  Up: Python 3 4 3

1.14.1.5 Build
..............

   - Issue #15506(1): Use standard PKG_PROG_PKG_CONFIG autoconf macro in
     the configure script.

   - Issue #22935(2): Allow the ssl module to be compiled if openssl
     doesn’t support SSL 3.

   - Issue #16537(3): Check whether self.extensions is empty in
     setup.py.  Patch by Jonathan Hosmer.

   - Issue #18096(4): Fix library order returned by python-config.

   - Issue #17219(5): Add library build dir for Python extension
     cross-builds.

   - Issue #17128(6): Use private version of OpenSSL for 3.4.3 OS X
     10.5+ installer.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15506

   (2) https://bugs.python.org/22935

   (3) https://bugs.python.org/16537

   (4) https://bugs.python.org/18096

   (5) https://bugs.python.org/17219

   (6) https://bugs.python.org/17128


File: python.info,  Node: C API,  Next: Documentation<2>,  Prev: Build,  Up: Python 3 4 3

1.14.1.6 C API
..............

   - Issue #22079(1): PyType_Ready() now checks that statically
     allocated type has no dynamically allocated bases.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/22079


File: python.info,  Node: Documentation<2>,  Next: Tools/Demos,  Prev: C API,  Up: Python 3 4 3

1.14.1.7 Documentation
......................

   - Issue #19548(1): Update the codecs module documentation to better
     cover the distinction between text encodings and other codecs,
     together with other clarifications.  Patch by Martin Panter.

   - Issue #22914(2): Update the Python 2/3 porting HOWTO to describe a
     more automated approach.

   - Issue #21514(3): The documentation of the json module now refers to
     new JSON RFC 7159 instead of obsoleted RFC 4627.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19548

   (2) https://bugs.python.org/22914

   (3) https://bugs.python.org/21514


File: python.info,  Node: Tools/Demos,  Next: Windows,  Prev: Documentation<2>,  Up: Python 3 4 3

1.14.1.8 Tools/Demos
....................

   - Issue #22314(1): pydoc now works when the LINES environment
     variable is set.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/22314


File: python.info,  Node: Windows,  Prev: Tools/Demos,  Up: Python 3 4 3

1.14.1.9 Windows
................

   - Issue #17896(1): The Windows build scripts now expect external
     library sources to be in ‘PCbuild\..\externals’ rather than
     ‘PCbuild\..\..’.

   - Issue #17717(2): The Windows build scripts now use a copy of NASM
     pulled from svn.python.org to build OpenSSL.

   - Issue #22644(3): The bundled version of OpenSSL has been updated to
     1.0.1j.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17896

   (2) https://bugs.python.org/17717

   (3) https://bugs.python.org/22644


File: python.info,  Node: Python 3 4 2,  Next: Python 3 4 2rc1,  Prev: Python 3 4 3,  Up: Changelog

1.14.2 Python 3.4.2
-------------------

Release date: 2014-10-06

* Menu:

* Core and Builtins: Core and Builtins<2>. 
* Library: Library<2>. 


File: python.info,  Node: Core and Builtins<2>,  Next: Library<2>,  Up: Python 3 4 2

1.14.2.1 Core and Builtins
..........................


File: python.info,  Node: Library<2>,  Prev: Core and Builtins<2>,  Up: Python 3 4 2

1.14.2.2 Library
................

   - Issue #10510(1): distutils register and upload methods now use HTML
     standards compliant CRLF line endings.

   - Issue #9850(2): Fixed macpath.join() for empty first component.
     Patch by Oleg Oshmyan.

   - Issue #22427(3): TemporaryDirectory no longer attempts to clean up
     twice when used in the with statement in generator.

   - Issue #20912(4): Now directories added to ZIP file have correct
     Unix and MS-DOS directory attributes.

   - Issue #21866(5): ZipFile.close() no longer writes ZIP64 central
     directory records if allowZip64 is false.

   - Issue #22415(6): Fixed debugging output of the GROUPREF_EXISTS
     opcode in the re module.  Removed trailing spaces in debugging
     output.

   - Issue #22423(7): Unhandled exception in thread no longer causes
     unhandled AttributeError when sys.stderr is None.

   - Issue #21332(8): Ensure that ‘bufsize=1’ in subprocess.Popen()
     selects line buffering, rather than block buffering.  Patch by
     Akira Li.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/10510

   (2) https://bugs.python.org/9850

   (3) https://bugs.python.org/22427

   (4) https://bugs.python.org/20912

   (5) https://bugs.python.org/21866

   (6) https://bugs.python.org/22415

   (7) https://bugs.python.org/22423

   (8) https://bugs.python.org/21332


File: python.info,  Node: Python 3 4 2rc1,  Next: Python 3 4 1,  Prev: Python 3 4 2,  Up: Changelog

1.14.3 Python 3.4.2rc1
----------------------

Release date: 2014-09-22

* Menu:

* Core and Builtins: Core and Builtins<3>. 
* Library: Library<3>. 
* Extension Modules:: 
* Build: Build<2>. 
* IDLE: IDLE<4>. 
* Tests: Tests<2>. 
* Documentation: Documentation<3>. 
* Windows: Windows<2>. 
* Tools/Demos: Tools/Demos<2>. 


File: python.info,  Node: Core and Builtins<3>,  Next: Library<3>,  Up: Python 3 4 2rc1

1.14.3.1 Core and Builtins
..........................

   - Issue #22258(1): Fix the the internal function set_inheritable() on
     Illumos.  This platform exposes the function ‘ioctl(FIOCLEX)’, but
     calling it fails with errno is ENOTTY: "Inappropriate ioctl for
     device".  set_inheritable() now falls back to the slower ‘fcntl()’
     (‘F_GETFD’ and then ‘F_SETFD’).

   - Issue #21669(2): With the aid of heuristics in
     SyntaxError.__init__, the parser now attempts to generate more
     meaningful (or at least more search engine friendly) error messages
     when "exec" and "print" are used as statements.

   - Issue #21642(3): If the conditional if-else expression, allow an
     integer written with no space between itself and the ‘else’ keyword
     (e.g.  ‘True if 42else False’) to be valid syntax.

   - Issue #21523(4): Fix over-pessimistic computation of the stack
     effect of some opcodes in the compiler.  This also fixes a
     quadratic compilation time issue noticeable when compiling code
     with a large number of "and" and "or" operators.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/22258

   (2) https://bugs.python.org/21669

   (3) https://bugs.python.org/21642

   (4) https://bugs.python.org/21523


File: python.info,  Node: Library<3>,  Next: Extension Modules,  Prev: Core and Builtins<3>,  Up: Python 3 4 2rc1

1.14.3.2 Library
................

   - Issue #21091(1): Fix API bug:
     email.message.EmailMessage.is_attachment is now a method.  Since
     EmailMessage is provisional, we can change the API in a maintenance
     release, but we use a trick to remain backward compatible with
     3.4.0/1.

   - Issue #21079(2): Fix email.message.EmailMessage.is_attachment to
     return the correct result when the header has parameters as well as
     a value.

   - Issue #22247(3): Add NNTPError to nntplib.__all__.

   - Issue #4180(4): The warnings registries are now reset when the
     filters are modified.

   - Issue #22419(5): Limit the length of incoming HTTP request in
     wsgiref server to 65536 bytes and send a 414 error code for higher
     lengths.  Patch contributed by Devin Cook.

   - Lax cookie parsing in http.cookies could be a security issue when
     combined with non-standard cookie handling in some Web browsers.
     Reported by Sergey Bobrov.

   - Issue #22384(6): An exception in Tkinter callback no longer crashes
     the program when it is run with pythonw.exe.

   - Issue #22168(7): Prevent turtle AttributeError with non-default
     Canvas on OS X.

   - Issue #21147(8): sqlite3 now raises an exception if the request
     contains a null character instead of truncate it.  Based on patch
     by Victor Stinner.

   - Issue #21951(9): Fixed a crash in Tkinter on AIX when called Tcl
     command with empty string or tuple argument.

   - Issue #21951(10): Tkinter now most likely raises MemoryError
     instead of crash if the memory allocation fails.

   - Issue #22338(11): Fix a crash in the json module on memory
     allocation failure.

   - Issue #22226(12): First letter no longer is stripped from the
     "status" key in the result of Treeview.heading().

   - Issue #19524(13): Fixed resource leak in the HTTP connection when
     an invalid response is received.  Patch by Martin Panter.

   - Issue #22051(14): turtledemo no longer reloads examples to re-run
     them.  Initialization of variables and gui setup should be done in
     main(), which is called each time a demo is run, but not on import.

   - Issue #21933(15): Turtledemo users can change the code font size
     with a menu selection or control(command) ’-’ or ’+’ or
     control-mousewheel.  Original patch by Lita Cho.

   - Issue #21597(16): The separator between the turtledemo text pane
     and the drawing canvas can now be grabbed and dragged with a mouse.
     The code text pane can be widened to easily view or copy the full
     width of the text.  The canvas can be widened on small screens.
     Original patches by Jan Kanis and Lita Cho.

   - Issue #18132(17): Turtledemo buttons no longer disappear when the
     window is shrunk.  Original patches by Jan Kanis and Lita Cho.

   - Issue #22216(18): smtplib now resets its state more completely
     after a quit.  The most obvious consequence of the previous
     behavior was a STARTTLS failure during a
     connect/starttls/quit/connect/starttls sequence.

   - Issue #22185(19): Fix an occasional RuntimeError in
     threading.Condition.wait() caused by mutation of the waiters queue
     without holding the lock.  Patch by Doug Zongker.

   - Issue #22182(20): Use e.args to unpack exceptions correctly in
     distutils.file_util.move_file.  Patch by Claudiu Popa.

   - The webbrowser module now uses subprocess’s start_new_session=True
     rather than a potentially risky preexec_fn=os.setsid call.

   - Issue #22236(21): Fixed Tkinter images copying operations in
     NoDefaultRoot mode.

   - Issue #22191(22): Fix warnings.__all__.

   - Issue #15696(23): Add a __sizeof__ implementation for mmap objects
     on Windows.

   - Issue #22068(24): Avoided reference loops with Variables and Fonts
     in Tkinter.

   - Issue #22165(25): SimpleHTTPRequestHandler now supports undecodable
     file names.

   - Issue #8797(26): Raise HTTPError on failed Basic Authentication
     immediately.  Initial patch by Sam Bull.

   - Issue #20729(27): Restored the use of lazy
     iterkeys()/itervalues()/iteritems() in the mailbox module.

   - Issue #21448(28): Changed FeedParser feed() to avoid O(N**2)
     behavior when parsing long line.  Original patch by Raymond
     Hettinger.

   - Issue #22184(29): The functools LRU Cache decorator factory now
     gives an earlier and clearer error message when the user forgets
     the required parameters.

   - Issue #17923(30): glob() patterns ending with a slash no longer
     match non-dirs on AIX. Based on patch by Delhallt.

   - Issue #21121(31): Don’t force 3rd party C extensions to be built
     with -Werror=declaration-after-statement.

   - Issue #21975(32): Fixed crash when using uninitialized sqlite3.Row
     (in particular when unpickling pickled sqlite3.Row).  sqlite3.Row
     is now initialized in the __new__() method.

   - Issue #21580(33): Now Tkinter correctly handles bytes arguments
     passed to Tk.  In particular this allows to initialize images from
     binary data.

   - Issue #17172(34): Make turtledemo start as active on OS X even when
     run with subprocess.  Patch by Lita Cho.

   - Issue #21704(35): Fix build error for _multiprocessing when
     semaphores are not available.  Patch by Arfrever Frehtes Taifersar
     Arahesis.

   - Fix repr(_socket.socket) on Windows 64-bit: don’t fail with
     OverflowError on closed socket.  repr(socket.socket) already works
     fine.

   - Issue #16133(36): The asynchat.async_chat.handle_read() method now
     ignores BlockingIOError exceptions.

   - Issue #22044(37): Fixed premature DECREF in call_tzinfo_method.
     Patch by Tom Flanagan.

   - Issue #19884(38): readline: Disable the meta modifier key if stdout
     is not a terminal to not write the ANSI sequence "033[1034h" into
     stdout.  This sequence is used on some terminal (ex:
     TERM=xterm-256color") to enable support of 8 bit characters.

   - Issue #21888(39): plistlib’s load() and loads() now work if the fmt
     parameter is specified.

   - Issue #21044(40): tarfile.open() now handles fileobj with an
     integer ’name’ attribute.  Based on patch by Antoine Pietri.

   - Issue #21867(41): Prevent turtle crash due to invalid undo buffer
     size.

   - Issue #19076(42): Don’t pass the redundant ’file’ argument to
     self.error().

   - Issue #21942(43): Fixed source file viewing in pydoc’s server mode
     on Windows.

   - Issue #11259(44): asynchat.async_chat().set_terminator() now raises
     a ValueError if the number of received bytes is negative.

   - Issue #12523(45): asynchat.async_chat.push() now raises a TypeError
     if it doesn’t get a bytes string

   - Issue #21707(46): Add missing kwonlyargcount argument to
     ModuleFinder.replace_paths_in_code().

   - Issue #20639(47): calling Path.with_suffix(’’) allows removing the
     suffix again.  Patch by July Tikhonov.

   - Issue #21714(48): Disallow the construction of invalid paths using
     Path.with_name().  Original patch by Antony Lee.

   - Issue #21897(49): Fix a crash with the f_locals attribute with
     closure variables when frame.clear() has been called.

   - Issue #21151(50): Fixed a segfault in the winreg module when ‘None’
     is passed as a ‘REG_BINARY’ value to SetValueEx.  Patch by John
     Ehresman.

   - Issue #21090(51): io.FileIO.readall() does not ignore I/O errors
     anymore.  Before, it ignored I/O errors if at least the first C
     call read() succeed.

   - Issue #21781(52): ssl.RAND_add() now supports strings longer than 2
     GB.

   - Issue #11453(53): asyncore: emit a ResourceWarning when an unclosed
     file_wrapper object is destroyed.  The destructor now closes the
     file if needed.  The close() method can now be called twice: the
     second call does nothing.

   - Issue #21858(54): Better handling of Python exceptions in the
     sqlite3 module.

   - Issue #21476(55): Make sure the email.parser.BytesParser
     TextIOWrapper is discarded after parsing, so the input file isn’t
     unexpectedly closed.

   - Issue #21729(56): Used the "with" statement in the dbm.dumb module
     to ensure files closing.  Patch by Claudiu Popa.

   - Issue #21491(57): socketserver: Fix a race condition in child
     processes reaping.

   - Issue #21832(58): Require named tuple inputs to be exact strings.

   - Issue #19145(59): The times argument for itertools.repeat now
     handles negative values the same way for keyword arguments as it
     does for positional arguments.

   - Issue #21812(60): turtle.shapetransform did not tranform the turtle
     on the first call.  (Issue identified and fixed by Lita Cho.)

   - Issue #21635(61): The difflib SequenceMatcher.get_matching_blocks()
     method cache didn’t match the actual result.  The former was a list
     of tuples and the latter was a list of named tuples.

   - Issue #21722(62): The distutils "upload" command now exits with a
     non-zero return code when uploading fails.  Patch by Martin
     Dengler.

   - Issue #21723(63): asyncio.Queue: support any type of number (ex:
     float) for the maximum size.  Patch written by Vajrasky Kok.

   - Issue #21326(64): Add a new is_closed() method to
     asyncio.BaseEventLoop.  run_forever() and run_until_complete()
     methods of asyncio.BaseEventLoop now raise an exception if the
     event loop was closed.

   - Issue #21774(65): Fixed NameError for an incorrect variable
     reference in the XML Minidom code for creating processing
     instructions.  (Found and fixed by Claudiu Popa.)

   - Issue #21766(66): Prevent a security hole in CGIHTTPServer by URL
     unquoting paths before checking for a CGI script at that path.

   - Issue #21310(67): Fixed possible resource leak in failed open().

   - Issue #21677(68): Fixed chaining nonnormalized exceptions in io
     close() methods.

   - Issue #11709(69): Fix the pydoc.help function to not fail when
     sys.stdin is not a valid file.

   - Issue #13223(70): Fix pydoc.writedoc so that the HTML documentation
     for methods that use ’self’ in the example code is generated
     correctly.

   - Issue #21463(71): In urllib.request, fix pruning of the FTP cache.

   - Issue #21618(72): The subprocess module could fail to close open
     fds that were inherited by the calling process and already higher
     than POSIX resource limits would otherwise allow.  On systems with
     a functioning /proc/self/fd or /dev/fd interface the max is now
     ignored and all fds are closed.

   - Issue #21552(73): Fixed possible integer overflow of too long
     string lengths in the tkinter module on 64-bit platforms.

   - Issue #14315(74): The zipfile module now ignores extra fields in
     the central directory that are too short to be parsed instead of
     letting a struct.unpack error bubble up as this "bad data" appears
     in many real world zip files in the wild and is ignored by other
     zip tools.

   - Issue #21402(75): tkinter.ttk now works when default root window is
     not set.

   - Issue #10203(76): sqlite3.Row now truly supports sequence protocol.
     In particulr it supports reverse() and negative indices.  Original
     patch by Claudiu Popa.

   - Issue #18807(77): If copying (no symlinks) specified for a venv,
     then the python interpreter aliases (python, python3) are now
     created by copying rather than symlinking.

   - Issue #14710(78): pkgutil.get_loader() no longer raises an
     exception when None is found in sys.modules.

   - Issue #14710(79): pkgutil.find_loader() no longer raises an
     exception when a module doesn’t exist.

   - Issue #21481(80): Argparse equality and inequality tests now return
     NotImplemented when comparing to an unknown type.

   - Issue #8743(81): Fix interoperability between set objects and the
     collections.Set() abstract base class.

   - Issue #13355(82): random.triangular() no longer fails with a
     ZeroDivisionError when low equals high.

   - Issue #21538(83): The plistlib module now supports loading of
     binary plist files when reference or offset size is not a power of
     two.

   - Issue #21801(84): Validate that __signature__ is None or an
     instance of Signature.

   - Issue #21923(85): Prevent AttributeError in
     distutils.sysconfig.customize_compiler due to possible
     uninitialized _config_vars.

   - Issue #21323(86): Fix http.server to again handle scripts in CGI
     subdirectories, broken by the fix for security issue #19435(87).
     Patch by Zach Byrne.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/21091

   (2) https://bugs.python.org/21079

   (3) https://bugs.python.org/22247

   (4) https://bugs.python.org/4180

   (5) https://bugs.python.org/22419

   (6) https://bugs.python.org/22384

   (7) https://bugs.python.org/22168

   (8) https://bugs.python.org/21147

   (9) https://bugs.python.org/21951

   (10) https://bugs.python.org/21951

   (11) https://bugs.python.org/22338

   (12) https://bugs.python.org/22226

   (13) https://bugs.python.org/19524

   (14) https://bugs.python.org/22051

   (15) https://bugs.python.org/21933

   (16) https://bugs.python.org/21597

   (17) https://bugs.python.org/18132

   (18) https://bugs.python.org/22216

   (19) https://bugs.python.org/22185

   (20) https://bugs.python.org/22182

   (21) https://bugs.python.org/22236

   (22) https://bugs.python.org/22191

   (23) https://bugs.python.org/15696

   (24) https://bugs.python.org/22068

   (25) https://bugs.python.org/22165

   (26) https://bugs.python.org/8797

   (27) https://bugs.python.org/20729

   (28) https://bugs.python.org/21448

   (29) https://bugs.python.org/22184

   (30) https://bugs.python.org/17923

   (31) https://bugs.python.org/21121

   (32) https://bugs.python.org/21975

   (33) https://bugs.python.org/21580

   (34) https://bugs.python.org/17172

   (35) https://bugs.python.org/21704

   (36) https://bugs.python.org/16133

   (37) https://bugs.python.org/22044

   (38) https://bugs.python.org/19884

   (39) https://bugs.python.org/21888

   (40) https://bugs.python.org/21044

   (41) https://bugs.python.org/21867

   (42) https://bugs.python.org/19076

   (43) https://bugs.python.org/21942

   (44) https://bugs.python.org/11259

   (45) https://bugs.python.org/12523

   (46) https://bugs.python.org/21707

   (47) https://bugs.python.org/20639

   (48) https://bugs.python.org/21714

   (49) https://bugs.python.org/21897

   (50) https://bugs.python.org/21151

   (51) https://bugs.python.org/21090

   (52) https://bugs.python.org/21781

   (53) https://bugs.python.org/11453

   (54) https://bugs.python.org/21858

   (55) https://bugs.python.org/21476

   (56) https://bugs.python.org/21729

   (57) https://bugs.python.org/21491

   (58) https://bugs.python.org/21832

   (59) https://bugs.python.org/19145

   (60) https://bugs.python.org/21812

   (61) https://bugs.python.org/21635

   (62) https://bugs.python.org/21722

   (63) https://bugs.python.org/21723

   (64) https://bugs.python.org/21326

   (65) https://bugs.python.org/21774

   (66) https://bugs.python.org/21766

   (67) https://bugs.python.org/21310

   (68) https://bugs.python.org/21677

   (69) https://bugs.python.org/11709

   (70) https://bugs.python.org/13223

   (71) https://bugs.python.org/21463

   (72) https://bugs.python.org/21618

   (73) https://bugs.python.org/21552

   (74) https://bugs.python.org/14315

   (75) https://bugs.python.org/21402

   (76) https://bugs.python.org/10203

   (77) https://bugs.python.org/18807

   (78) https://bugs.python.org/14710

   (79) https://bugs.python.org/14710

   (80) https://bugs.python.org/21481

   (81) https://bugs.python.org/8743

   (82) https://bugs.python.org/13355

   (83) https://bugs.python.org/21538

   (84) https://bugs.python.org/21801

   (85) https://bugs.python.org/21923

   (86) https://bugs.python.org/21323

   (87) https://bugs.python.org/19435


File: python.info,  Node: Extension Modules,  Next: Build<2>,  Prev: Library<3>,  Up: Python 3 4 2rc1

1.14.3.3 Extension Modules
..........................

   - Issue #22176(1): Update the ctypes module’s libffi to v3.1.  This
     release adds support for the Linux AArch64 and POWERPC ELF ABIv2
     little endian architectures.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/22176


File: python.info,  Node: Build<2>,  Next: IDLE<4>,  Prev: Extension Modules,  Up: Python 3 4 2rc1

1.14.3.4 Build
..............

   - Issue #15661(1): python.org OS X installers are now distributed as
     signed installer packages compatible with the Gatekeeper security
     feature.

   - Issue #21958(2): Define HAVE_ROUND when building with Visual Studio
     2013 and above.  Patch by Zachary Turner.

   - Issue #15759(3): "make suspicious", "make linkcheck" and "make
     doctest" in Doc/ now display special message when and only when
     there are failures.

   - Issue #17095(4): Fix Modules/Setup `shared' support.

   - Issue #21811(5): Anticipated fixes to support OS X versions > 10.9.

   - Issue #21166(6): Prevent possible segfaults and other random
     failures of python –generate-posix-vars in pybuilddir.txt build
     target.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/15661

   (2) https://bugs.python.org/21958

   (3) https://bugs.python.org/15759

   (4) https://bugs.python.org/17095

   (5) https://bugs.python.org/21811

   (6) https://bugs.python.org/21166


File: python.info,  Node: IDLE<4>,  Next: Tests<2>,  Prev: Build<2>,  Up: Python 3 4 2rc1

1.14.3.5 IDLE
.............

   - Issue #17390(1): Adjust Editor window title; remove ’Python’, move
     version to end.

   - Issue #14105(2): Idle debugger breakpoints no longer disappear when
     inseting or deleting lines.

   - Issue #17172(3): Turtledemo can now be run from Idle.  Currently,
     the entry is on the Help menu, but it may move to Run.  Patch by
     Ramchandra Apt and Lita Cho.

   - Issue #21765(4): Add support for non-ascii identifiers to
     HyperParser.

   - Issue #21940(5): Add unittest for WidgetRedirector.  Initial patch
     by Saimadhav Heblikar.

   - Issue #18592(6): Add unittest for SearchDialogBase.  Patch by Phil
     Webster.

   - Issue #21694(7): Add unittest for ParenMatch.  Patch by Saimadhav
     Heblikar.

   - Issue #21686(8): add unittest for HyperParser.  Original patch by
     Saimadhav Heblikar.

   - Issue #12387(9): Add missing upper(lower)case versions of default
     Windows key bindings for Idle so Caps Lock does not disable them.
     Patch by Roger Serwy.

   - Issue #21695(10): Closing a Find-in-files output window while the
     search is still in progress no longer closes Idle.

   - Issue #18910(11): Add unittest for textView.  Patch by Phil
     Webster.

   - Issue #18292(12): Add unittest for AutoExpand.  Patch by Saihadhav
     Heblikar.

   - Issue #18409(13): Add unittest for AutoComplete.  Patch by Phil
     Webster.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17390

   (2) https://bugs.python.org/14105

   (3) https://bugs.python.org/17172

   (4) https://bugs.python.org/21765

   (5) https://bugs.python.org/21940

   (6) https://bugs.python.org/18592

   (7) https://bugs.python.org/21694

   (8) https://bugs.python.org/21686

   (9) https://bugs.python.org/12387

   (10) https://bugs.python.org/21695

   (11) https://bugs.python.org/18910

   (12) https://bugs.python.org/18292

   (13) https://bugs.python.org/18409


File: python.info,  Node: Tests<2>,  Next: Documentation<3>,  Prev: IDLE<4>,  Up: Python 3 4 2rc1

1.14.3.6 Tests
..............

   - Issue #22166(1): with the assistance of a new internal
     _codecs._forget_codec helping function, test_codecs now clears the
     encoding caches to avoid the appearance of a reference leak

   - Issue #22236(2): Tkinter tests now don’t reuse default root window.
     New root window is created for every test class.

   - Issue #20746(3): Fix test_pdb to run in refleak mode (-R). Patch by
     Xavier de Gaye.

   - Issue #22060(4): test_ctypes has been somewhat cleaned up and
     simplified; it now uses unittest test discovery to find its tests.

   - Issue #22104(5): regrtest.py no longer holds a reference to the
     suite of tests loaded from test modules that don’t define
     test_main().

   - Issue #22002(6): Added ‘load_package_tests’ function to
     test.support and used it to implement/augment test discovery in
     test_asyncio, test_email, test_importlib, test_json, and
     test_tools.

   - Issue #21976(7): Fix test_ssl to accept LibreSSL version strings.
     Thanks to William Orr.

   - Issue #21918(8): Converted test_tools from a module to a package
     containing separate test files for each tested script.

   - Issue #20155(9): Changed HTTP method names in failing tests in
     test_httpservers so that packet filtering software (specifically
     Windows Base Filtering Engine) does not interfere with the
     transaction semantics expected by the tests.

   - Issue #19493(10): Refactored the ctypes test package to skip tests
     explicitly rather than silently.

   - Issue #18492(11): All resources are now allowed when tests are not
     run by regrtest.py.

   - Issue #21634(12): Fix pystone micro-benchmark: use floor division
     instead of true division to benchmark integers instead of floating
     point numbers.  Set pystone version to 1.2.  Patch written by
     Lennart Regebro.

   - Issue #21605(13): Added tests for Tkinter images.

   - Issue #21493(14): Added test for ntpath.expanduser().  Original
     patch by Claudiu Popa.

   - Issue #19925(15): Added tests for the spwd module.  Original patch
     by Vajrasky Kok.

   - Issue #21522(16): Added Tkinter tests for Listbox.itemconfigure(),
     PanedWindow.paneconfigure(), and Menu.entryconfigure().

   ---------- Footnotes ----------

   (1) https://bugs.python.org/22166

   (2) https://bugs.python.org/22236

   (3) https://bugs.python.org/20746

   (4) https://bugs.python.org/22060

   (5) https://bugs.python.org/22104

   (6) https://bugs.python.org/22002

   (7) https://bugs.python.org/21976

   (8) https://bugs.python.org/21918

   (9) https://bugs.python.org/20155

   (10) https://bugs.python.org/19493

   (11) https://bugs.python.org/18492

   (12) https://bugs.python.org/21634

   (13) https://bugs.python.org/21605

   (14) https://bugs.python.org/21493

   (15) https://bugs.python.org/19925

   (16) https://bugs.python.org/21522


File: python.info,  Node: Documentation<3>,  Next: Windows<2>,  Prev: Tests<2>,  Up: Python 3 4 2rc1

1.14.3.7 Documentation
......................

   - Issue #21777(1): The binary sequence methods on bytes and bytearray
     are now documented explicitly, rather than assuming users will be
     able to derive the expected behaviour from the behaviour of the
     corresponding str methods.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/21777


File: python.info,  Node: Windows<2>,  Next: Tools/Demos<2>,  Prev: Documentation<3>,  Up: Python 3 4 2rc1

1.14.3.8 Windows
................

   - Issue #21671(1), #22160, CVE-2014-0224: The bundled version of
     OpenSSL has been updated to 1.0.1i.

   - Issue #10747(2): Use versioned labels in the Windows start menu.
     Patch by Olive Kilburn.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/21671

   (2) https://bugs.python.org/10747


File: python.info,  Node: Tools/Demos<2>,  Prev: Windows<2>,  Up: Python 3 4 2rc1

1.14.3.9 Tools/Demos
....................

   - Issue #22201(1): Command-line interface of the zipfile module now
     correctly extracts ZIP files with directory entries.  Patch by Ryan
     Wilson.

   - Issue #21906(2): Make Tools/scripts/md5sum.py work in Python 3.
     Patch by Zachary Ware.

   - Issue #21629(3): Fix Argument Clinic’s "–converters" feature.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/22201

   (2) https://bugs.python.org/21906

   (3) https://bugs.python.org/21629


File: python.info,  Node: Python 3 4 1,  Next: Python 3 4 1rc1,  Prev: Python 3 4 2rc1,  Up: Changelog

1.14.4 Python 3.4.1
-------------------

Release date: 2014-05-18

* Menu:

* Core and Builtins: Core and Builtins<4>. 
* Library: Library<4>. 
* Tests: Tests<3>. 
* IDLE: IDLE<5>. 


File: python.info,  Node: Core and Builtins<4>,  Next: Library<4>,  Up: Python 3 4 1

1.14.4.1 Core and Builtins
..........................

   - Issue #21418(1): Fix a crash in the builtin function super() when
     called without argument and without current frame (ex: embedded
     Python).

   - Issue #21425(2): Fix flushing of standard streams in the
     interactive interpreter.

   - Issue #21435(3): In rare cases, when running finalizers on objects
     in cyclic trash a bad pointer dereference could occur due to a
     subtle flaw in internal iteration logic.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/21418

   (2) https://bugs.python.org/21425

   (3) https://bugs.python.org/21435


File: python.info,  Node: Library<4>,  Next: Tests<3>,  Prev: Core and Builtins<4>,  Up: Python 3 4 1

1.14.4.2 Library
................

   - Issue #10744(1): Fix PEP 3118 format strings on ctypes objects with
     a nontrivial shape.

   - Issue #20998(2): Fixed re.fullmatch() of repeated single character
     pattern with ignore case.  Original patch by Matthew Barnett.

   - Issue #21075(3): fileinput.FileInput now reads bytes from standard
     stream if binary mode is specified.  Patch by Sam Kimbrel.

   - Issue #21396(4): Fix TextIOWrapper(..., write_through=True) to not
     force a flush() on the underlying binary stream.  Patch by akira.

   - Issue #21470(5): Do a better job seeding the random number
     generator by using enough bytes to span the full state space of the
     Mersenne Twister.

   - Issue #21398(6): Fix an unicode error in the pydoc pager when the
     documentation contains characters not encodable to the stdout
     encoding.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/10744

   (2) https://bugs.python.org/20998

   (3) https://bugs.python.org/21075

   (4) https://bugs.python.org/21396

   (5) https://bugs.python.org/21470

   (6) https://bugs.python.org/21398


File: python.info,  Node: Tests<3>,  Next: IDLE<5>,  Prev: Library<4>,  Up: Python 3 4 1

1.14.4.3 Tests
..............

   - Issue #17756(1): Fix test_code test when run from the installed
     location.

   - Issue #17752(2): Fix distutils tests when run from the installed
     location.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17756

   (2) https://bugs.python.org/17752


File: python.info,  Node: IDLE<5>,  Prev: Tests<3>,  Up: Python 3 4 1

1.14.4.4 IDLE
.............

   - Issue #18104(1): Add idlelib/idle_test/htest.py with a few sample
     tests to begin consolidating and improving human-validated tests of
     Idle.  Change other files as needed to work with htest.  Running
     the module as __main__ runs all tests.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18104


File: python.info,  Node: Python 3 4 1rc1,  Next: Python 3 4 0,  Prev: Python 3 4 1,  Up: Changelog

1.14.5 Python 3.4.1rc1
----------------------

Release date: 2014-05-05

* Menu:

* Core and Builtins: Core and Builtins<5>. 
* Library: Library<5>. 
* Extension Modules: Extension Modules<2>. 
* IDLE: IDLE<6>. 
* Build: Build<3>. 
* C API: C API<2>. 
* Documentation: Documentation<4>. 
* Tests: Tests<4>. 
* Tools/Demos: Tools/Demos<3>. 


File: python.info,  Node: Core and Builtins<5>,  Next: Library<5>,  Up: Python 3 4 1rc1

1.14.5.1 Core and Builtins
..........................

   - Issue #21274(1): Define PATH_MAX for GNU/Hurd in
     Python/pythonrun.c.

   - Issue #21209(2): Fix sending tuples to custom generator objects
     with the yield from syntax.

   - Issue #21134(3): Fix segfault when str is called on an
     uninitialized UnicodeEncodeError, UnicodeDecodeError, or
     UnicodeTranslateError object.

   - Issue #19537(4): Fix PyUnicode_DATA() alignment under m68k.  Patch
     by Andreas Schwab.

   - Issue #20929(5): Add a type cast to avoid shifting a negative
     number.

   - Issue #20731(6): Properly position in source code files even if
     they are opened in text mode.  Patch by Serhiy Storchaka.

   - Issue #20637(7): Key-sharing now also works for instance
     dictionaries of subclasses.  Patch by Peter Ingebretson.

   - Issue #12546(8): Allow x00 to be used as a fill character when
     using str, int, float, and complex __format__ methods.

   - Issue #13598(9): Modify string.Formatter to support auto-numbering
     of replacement fields.  It now matches the behavior of str.format()
     in this regard.  Patches by Phil Elson and Ramchandra Apte.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/21274

   (2) https://bugs.python.org/21209

   (3) https://bugs.python.org/21134

   (4) https://bugs.python.org/19537

   (5) https://bugs.python.org/20929

   (6) https://bugs.python.org/20731

   (7) https://bugs.python.org/20637

   (8) https://bugs.python.org/12546

   (9) https://bugs.python.org/13598


File: python.info,  Node: Library<5>,  Next: Extension Modules<2>,  Prev: Core and Builtins<5>,  Up: Python 3 4 1rc1

1.14.5.2 Library
................

   - Issue #21088(1): Bugfix for curses.window.addch() regression in
     3.4.0.  In porting to Argument Clinic, the first two arguments were
     reversed.

   - Issue #21469(2): Reduced the risk of false positives in robotparser
     by checking to make sure that robots.txt has been read or does not
     exist prior to returning True in can_fetch().

   - Issue #21321(3): itertools.islice() now releases the reference to
     the source iterator when the slice is exhausted.  Patch by Anton
     Afanasyev.

   - Issue #9815(4): assertRaises now tries to clear references to local
     variables in the exception’s traceback.

   - Issue #13204(5): Calling sys.flags.__new__ would crash the
     interpreter, now it raises a TypeError.

   - Issue #19385(6): Make operations on a closed dbm.dumb database
     always raise the same exception.

   - Issue #21207(7): Detect when the os.urandom cached fd has been
     closed or replaced, and open it anew.

   - Issue #21291(8): subprocess’s Popen.wait() is now thread safe so
     that multiple threads may be calling wait() or poll() on a Popen
     instance at the same time without losing the Popen.returncode
     value.

   - Issue #21127(9): Path objects can now be instantiated from str
     subclass instances (such as ‘numpy.str_’).

   - Issue #15002(10): urllib.response object to use
     _TemporaryFileWrapper (and _TemporaryFileCloser) facility.
     Provides a better way to handle file descriptor close.  Patch
     contributed by Christian Theune.

   - Issue #12220(11): mindom now raises a custom ValueError indicating
     it doesn’t support spaces in URIs instead of letting a ’split’
     ValueError bubble up.

   - Issue #21239(12): patch.stopall() didn’t work deterministically
     when the same name was patched more than once.

   - Issue #21222(13): Passing name keyword argument to
     mock.create_autospec now works.

   - Issue #21197(14): Add lib64 -> lib symlink in venvs on 64-bit
     non-OS X POSIX.

   - Issue #17498(15): Some SMTP servers disconnect after certain
     errors, violating strict RFC conformance.  Instead of losing the
     error code when we issue the subsequent RSET, smtplib now returns
     the error code and defers raising the SMTPServerDisconnected error
     until the next command is issued.

   - Issue #17826(16): setting an iterable side_effect on a mock
     function created by create_autospec now works.  Patch by Kushal
     Das.

   - Issue #7776(17): Fix ‘Host:’ header and reconnection when using
     http.client.HTTPConnection.set_tunnel().  Patch by Nikolaus Rath.

   - Issue #20968(18): unittest.mock.MagicMock now supports division.
     Patch by Johannes Baiter.

   - Fix arbitrary memory access in JSONDecoder.raw_decode with a
     negative second parameter.  Bug reported by Guido Vranken.

   - Issue #21169(19): getpass now handles non-ascii characters that the
     input stream encoding cannot encode by re-encoding using the
     replace error handler.

   - Issue #21171(20): Fixed undocumented filter API of the rot13 codec.
     Patch by Berker Peksag.

   - Issue #21172(21): isinstance check relaxed from dict to
     collections.Mapping.

   - Issue #21155(22): asyncio.EventLoop.create_unix_server() now raises
     a ValueError if path and sock are specified at the same time.

   - Issue #21149(23): Improved thread-safety in logging cleanup during
     interpreter shutdown.  Thanks to Devin Jeanpierre for the patch.

   - Issue #20145(24): ‘assertRaisesRegex’ and ‘assertWarnsRegex’ now
     raise a TypeError if the second argument is not a string or
     compiled regex.

   - Issue #21058(25): Fix a leak of file descriptor in *note
     tempfile.NamedTemporaryFile(): 7c3, close the file descriptor if
     *note io.open(): 408. fails

   - Issue #21200(26): Return None from pkgutil.get_loader() when
     __spec__ is missing.

   - Issue #21013(27): Enhance ssl.create_default_context() when used
     for server side sockets to provide better security by default.

   - Issue #20633(28): Replace relative import by absolute import.

   - Issue #20980(29): Stop wrapping exception when using ThreadPool.

   - Issue #21082(30): In os.makedirs, do not set the process-wide
     umask.  Note this changes behavior of makedirs when exist_ok=True.

   - Issue #20990(31): Fix issues found by pyflakes for multiprocessing.

   - Issue #21015(32): SSL contexts will now automatically select an
     elliptic curve for ECDH key exchange on OpenSSL 1.0.2 and later,
     and otherwise default to "prime256v1".

   - Issue #20995(33): Enhance default ciphers used by the ssl module to
     enable better security an prioritize perfect forward secrecy.

   - Issue #20884(34): Don’t assume that __file__ is defined on
     importlib.__init__.

   - Issue #21499(35): Ignore __builtins__ in several
     test_importlib.test_api tests.

   - Issue #20879(36): Delay the initialization of encoding and decoding
     tables for base32, ascii85 and base85 codecs in the base64 module,
     and delay the initialization of the unquote_to_bytes() table of the
     urllib.parse module, to not waste memory if these modules are not
     used.

   - Issue #19157(37): Include the broadcast address in the usuable
     hosts for IPv6 in ipaddress.

   - Issue #11599(38): When an external command (e.g.  compiler) fails,
     distutils now prints out the whole command line (instead of just
     the command name) if the environment variable DISTUTILS_DEBUG is
     set.

   - Issue #4931(39): distutils should not produce unhelpful "error:
     None" messages anymore.  distutils.util.grok_environment_error is
     kept but doc-deprecated.

   - Issue #20875(40): Prevent possible gzip "’read’ is not defined"
     NameError.  Patch by Claudiu Popa.

   - Issue #11558(41): ‘email.message.Message.attach’ now returns a more
     useful error message if ‘attach’ is called on a message for which
     ‘is_multipart’ is False.

   - Issue #20283(42): RE pattern methods now accept the string keyword
     parameters as documented.  The pattern and source keyword
     parameters are left as deprecated aliases.

   - Issue #20778(43): Fix modulefinder to work with bytecode-only
     modules.

   - Issue #20791(44): copy.copy() now doesn’t make a copy when the
     input is a bytes object.  Initial patch by Peter Otten.

   - Issue #19748(45): On AIX, time.mktime() now raises an OverflowError
     for year outsize range [1902; 2037].

   - Issue #20816(46): Fix inspect.getcallargs() to raise correct
     TypeError for missing keyword-only arguments.  Patch by Jeremiah
     Lowin.

   - Issue #20817(47): Fix inspect.getcallargs() to fail correctly if
     more than 3 arguments are missing.  Patch by Jeremiah Lowin.

   - Issue #6676(48): Ensure a meaningful exception is raised when
     attempting to parse more than one XML document per pyexpat
     xmlparser instance.  (Original patches by Hirokazu Yamamoto and
     Amaury Forgeot d’Arc, with suggested wording by David Gutteridge)

   - Issue #21117(49): Fix inspect.signature to better support
     functools.partial.  Due to the specifics of functools.partial
     implementation, positional-or-keyword arguments passed as keyword
     arguments become keyword-only.

   - Issue #21209(50): Fix asyncio.tasks.CoroWrapper to workaround a bug
     in yield-from implementation in CPythons prior to 3.4.1.

   - asyncio: Add gi_{frame,running,code} properties to CoroWrapper
     (upstream issue #163(51)).

   - Issue #21311(52): Avoid exception in _osx_support with non-standard
     compiler configurations.  Patch by John Szakmeister.

   - Issue #11571(53): Ensure that the turtle window becomes the topmost
     window when launched on OS X.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/21088

   (2) https://bugs.python.org/21469

   (3) https://bugs.python.org/21321

   (4) https://bugs.python.org/9815

   (5) https://bugs.python.org/13204

   (6) https://bugs.python.org/19385

   (7) https://bugs.python.org/21207

   (8) https://bugs.python.org/21291

   (9) https://bugs.python.org/21127

   (10) https://bugs.python.org/15002

   (11) https://bugs.python.org/12220

   (12) https://bugs.python.org/21239

   (13) https://bugs.python.org/21222

   (14) https://bugs.python.org/21197

   (15) https://bugs.python.org/17498

   (16) https://bugs.python.org/17826

   (17) https://bugs.python.org/7776

   (18) https://bugs.python.org/20968

   (19) https://bugs.python.org/21169

   (20) https://bugs.python.org/21171

   (21) https://bugs.python.org/21172

   (22) https://bugs.python.org/21155

   (23) https://bugs.python.org/21149

   (24) https://bugs.python.org/20145

   (25) https://bugs.python.org/21058

   (26) https://bugs.python.org/21200

   (27) https://bugs.python.org/21013

   (28) https://bugs.python.org/20633

   (29) https://bugs.python.org/20980

   (30) https://bugs.python.org/21082

   (31) https://bugs.python.org/20990

   (32) https://bugs.python.org/21015

   (33) https://bugs.python.org/20995

   (34) https://bugs.python.org/20884

   (35) https://bugs.python.org/21499

   (36) https://bugs.python.org/20879

   (37) https://bugs.python.org/19157

   (38) https://bugs.python.org/11599

   (39) https://bugs.python.org/4931

   (40) https://bugs.python.org/20875

   (41) https://bugs.python.org/11558

   (42) https://bugs.python.org/20283

   (43) https://bugs.python.org/20778

   (44) https://bugs.python.org/20791

   (45) https://bugs.python.org/19748

   (46) https://bugs.python.org/20816

   (47) https://bugs.python.org/20817

   (48) https://bugs.python.org/6676

   (49) https://bugs.python.org/21117

   (50) https://bugs.python.org/21209

   (51) https://bugs.python.org/163

   (52) https://bugs.python.org/21311

   (53) https://bugs.python.org/11571


File: python.info,  Node: Extension Modules<2>,  Next: IDLE<6>,  Prev: Library<5>,  Up: Python 3 4 1rc1

1.14.5.3 Extension Modules
..........................

   - Issue #21276(1): posixmodule: Don’t define USE_XATTRS on KFreeBSD
     and the Hurd.

   - Issue #21226(2): Set up modules properly in
     PyImport_ExecCodeModuleObject (and friends).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/21276

   (2) https://bugs.python.org/21226


File: python.info,  Node: IDLE<6>,  Next: Build<3>,  Prev: Extension Modules<2>,  Up: Python 3 4 1rc1

1.14.5.4 IDLE
.............

   - Issue #21139(1): Change default paragraph width to 72, the PEP 8
     recommendation.

   - Issue #21284(2): Paragraph reformat test passes after user changes
     reformat width.

   - Issue #17654(3): Ensure IDLE menus are customized properly on OS X
     for non-framework builds and for all variants of Tk.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/21139

   (2) https://bugs.python.org/21284

   (3) https://bugs.python.org/17654


File: python.info,  Node: Build<3>,  Next: C API<2>,  Prev: IDLE<6>,  Up: Python 3 4 1rc1

1.14.5.5 Build
..............

   - The Windows build now includes OpenSSL 1.0.1g

   - Issue #21285(1): Refactor and fix curses configure check to always
     search in a ncursesw directory.

   - Issue #15234(2): For BerkelyDB and Sqlite, only add the found
     library and include directories if they aren’t already being
     searched.  This avoids an explicit runtime library dependency.

   - Issue #20644(3): OS X installer build support for documentation
     build changes in 3.4.1: assume externally supplied sphinx-build is
     available in /usr/bin.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/21285

   (2) https://bugs.python.org/15234

   (3) https://bugs.python.org/20644


File: python.info,  Node: C API<2>,  Next: Documentation<4>,  Prev: Build<3>,  Up: Python 3 4 1rc1

1.14.5.6 C API
..............

   - Issue #20942(1): PyImport_ImportFrozenModuleObject() no longer sets
     __file__ to match what importlib does; this affects
     _frozen_importlib as well as any module loaded using
     imp.init_frozen().

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20942


File: python.info,  Node: Documentation<4>,  Next: Tests<4>,  Prev: C API<2>,  Up: Python 3 4 1rc1

1.14.5.7 Documentation
......................

   - Issue #17386(1): Expanded functionality of the ‘Doc/make.bat’
     script to make it much more comparable to ‘Doc/Makefile’.

   - Issue #21043(2): Remove the recommendation for specific CA
     organizations and to mention the ability to load the OS
     certificates.

   - Issue #20765(3): Add missing documentation for PurePath.with_name()
     and PurePath.with_suffix().

   - Issue #19407(4): New package installation and distribution guides
     based on the Python Packaging Authority tools.  Existing guides
     have been retained as legacy links from the distutils docs, as they
     still contain some required reference material for tool developers
     that isn’t recorded anywhere else.

   - Issue #19697(5): Document cases where __main__.__spec__ is None.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17386

   (2) https://bugs.python.org/21043

   (3) https://bugs.python.org/20765

   (4) https://bugs.python.org/19407

   (5) https://bugs.python.org/19697


File: python.info,  Node: Tests<4>,  Next: Tools/Demos<3>,  Prev: Documentation<4>,  Up: Python 3 4 1rc1

1.14.5.8 Tests
..............

   - Issue #18604(1): Consolidated checks for GUI availability.  All
     platforms now at least check whether Tk can be instantiated when
     the GUI resource is requested.

   - Issue #21275(2): Fix a socket test on KFreeBSD.

   - Issue #21223(3): Pass test_site/test_startup_imports when some of
     the extensions are built as builtins.

   - Issue #20635(4): Added tests for Tk geometry managers.

   - Add test case for freeze.

   - Issue #20743(5): Fix a reference leak in test_tcl.

   - Issue #21097(6): Move test_namespace_pkgs into test_importlib.

   - Issue #20939(7): Avoid various network test failures due to new
     redirect of ‘http://www.python.org/’ to ‘https://www.python.org’:
     use ‘http://www.example.com’ instead.

   - Issue #20668(8): asyncio tests no longer rely on tests.txt file.
     (Patch by Vajrasky Kok)

   - Issue #21093(9): Prevent failures of ctypes test_macholib on OS X
     if a copy of libz exists in $HOME/lib or /usr/local/lib.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/18604

   (2) https://bugs.python.org/21275

   (3) https://bugs.python.org/21223

   (4) https://bugs.python.org/20635

   (5) https://bugs.python.org/20743

   (6) https://bugs.python.org/21097

   (7) https://bugs.python.org/20939

   (8) https://bugs.python.org/20668

   (9) https://bugs.python.org/21093


File: python.info,  Node: Tools/Demos<3>,  Prev: Tests<4>,  Up: Python 3 4 1rc1

1.14.5.9 Tools/Demos
....................

   - Add support for ‘yield from’ to 2to3.

   - Add support for the PEP 465 matrix multiplication operator to 2to3.

   - Issue #16047(1): Fix module exception list and __file__ handling in
     freeze.  Patch by Meador Inge.

   - Issue #11824(2): Consider ABI tags in freeze.  Patch by Meador
     Inge.

   - Issue #20535(3): PYTHONWARNING no longer affects the run_tests.py
     script.  Patch by Arfrever Frehtes Taifersar Arahesis.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/16047

   (2) https://bugs.python.org/11824

   (3) https://bugs.python.org/20535


File: python.info,  Node: Python 3 4 0,  Next: Python 3 4 0 release candidate 3,  Prev: Python 3 4 1rc1,  Up: Changelog

1.14.6 Python 3.4.0
-------------------

Release date: 2014-03-16

* Menu:

* Library: Library<6>. 
* Documentation: Documentation<5>. 


File: python.info,  Node: Library<6>,  Next: Documentation<5>,  Up: Python 3 4 0

1.14.6.1 Library
................

   - Issue #20939(1): Fix test_geturl failure in test_urllibnet due to
     new redirect of ‘http://www.python.org/’ to
     ‘https://www.python.org’.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20939


File: python.info,  Node: Documentation<5>,  Prev: Library<6>,  Up: Python 3 4 0

1.14.6.2 Documentation
......................

   - Merge in all documentation changes since branching 3.4.0rc1.


File: python.info,  Node: Python 3 4 0 release candidate 3,  Next: Python 3 4 0 release candidate 2,  Prev: Python 3 4 0,  Up: Changelog

1.14.7 Python 3.4.0 release candidate 3
---------------------------------------

Release date: 2014-03-09

* Menu:

* Core and Builtins: Core and Builtins<6>. 
* Library: Library<7>. 
* Build: Build<4>. 


File: python.info,  Node: Core and Builtins<6>,  Next: Library<7>,  Up: Python 3 4 0 release candidate 3

1.14.7.1 Core and Builtins
..........................

   - Issue #20786(1): Fix signatures for dict.__delitem__ and
     property.__delete__ builtins.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20786


File: python.info,  Node: Library<7>,  Next: Build<4>,  Prev: Core and Builtins<6>,  Up: Python 3 4 0 release candidate 3

1.14.7.2 Library
................

   - Issue #20839(1): Don’t trigger a DeprecationWarning in the still
     supported pkgutil.get_loader() API when __loader__ isn’t set on a
     module (nor when pkgutil.find_loader() is called directly).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20839


File: python.info,  Node: Build<4>,  Prev: Library<7>,  Up: Python 3 4 0 release candidate 3

1.14.7.3 Build
..............

   - Issue #14512(1): Launch pydoc -b instead of pydocgui.pyw on
     Windows.

   - Issue #20748(2): Uninstalling pip does not leave behind the pyc of
     the uninstaller anymore.

   - Issue #20568(3): The Windows installer now installs the unversioned
     ‘pip’ command in addition to the versioned ‘pip3’ and ‘pip3.4’
     commands.

   - Issue #20757(4): The ensurepip helper for the Windows uninstaller
     now skips uninstalling pip (rather than failing) if the user has
     updated pip to a different version from the one bundled with
     ensurepip.

   - Issue #20465(5): Update OS X and Windows installer builds to use
     SQLite 3.8.3.1.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/14512

   (2) https://bugs.python.org/20748

   (3) https://bugs.python.org/20568

   (4) https://bugs.python.org/20757

   (5) https://bugs.python.org/20465


File: python.info,  Node: Python 3 4 0 release candidate 2,  Next: Python 3 4 0 release candidate 1,  Prev: Python 3 4 0 release candidate 3,  Up: Changelog

1.14.8 Python 3.4.0 release candidate 2
---------------------------------------

Release date: 2014-02-23

* Menu:

* Core and Builtins: Core and Builtins<7>. 
* Library: Library<8>. 
* Build: Build<5>. 


File: python.info,  Node: Core and Builtins<7>,  Next: Library<8>,  Up: Python 3 4 0 release candidate 2

1.14.8.1 Core and Builtins
..........................

   - Issue #20625(1): Parameter names in __annotations__ were not
     mangled properly.  Discovered by Jonas Wielicki, patch by Yury
     Selivanov.

   - Issue #20261(2): In pickle, lookup __getnewargs__ and
     __getnewargs_ex__ on the type of the object.

   - Issue #20619(3): Give the AST nodes of keyword-only arguments a
     column and line number.

   - Issue #20526(4): Revert changes of issue #19466(5) which introduces
     a regression: don’t clear anymore the state of Python threads early
     during the Python shutdown.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20625

   (2) https://bugs.python.org/20261

   (3) https://bugs.python.org/20619

   (4) https://bugs.python.org/20526

   (5) https://bugs.python.org/19466


File: python.info,  Node: Library<8>,  Next: Build<5>,  Prev: Core and Builtins<7>,  Up: Python 3 4 0 release candidate 2

1.14.8.2 Library
................

   - Issue #20710(1): The pydoc summary line no longer displays the
     "self" parameter for bound methods.

   - Issue #20566(2): Change asyncio.as_completed() to use a Queue, to
     avoid O(N**2) behavior.

   - Issue #20704(3): Implement new debug API in asyncio.  Add new
     methods BaseEventLoop.set_debug() and BaseEventLoop.get_debug().
     Add support for setting ’asyncio.tasks._DEBUG’ variable with
     ’PYTHONASYNCIODEBUG’ environment variable.

   - asyncio: Refactoring and fixes: BaseEventLoop.sock_connect() raises
     an error if the address is not resolved; use __slots__ in Handle
     and TimerHandle; as_completed() and wait() raise TypeError if the
     passed list of Futures is a single Future; call_soon() and other
     ’call_*()’ functions raise TypeError if the passed callback is a
     coroutine function; _ProactorBasePipeTransport uses
     _FlowControlMixin; WriteTransport.set_write_buffer_size() calls
     _maybe_pause_protocol() to consider pausing receiving if the
     watermark limits have changed; fix _check_resolved_address() for
     IPv6 address; and other minor improvements, along with multiple
     documentation updates.

   - Issue #20684(4): Fix inspect.getfullargspec() to not to follow
     __wrapped__ chains.  Make its behaviour consistent with bound
     methods first argument.  Patch by Nick Coghlan and Yury Selivanov.

   - Issue #20681(5): Add new error handling API in asyncio.  New APIs:
     loop.set_exception_handler(), loop.default_exception_handler(), and
     loop.call_exception_handler().

   - Issue #20673(6): Implement support for UNIX Domain Sockets in
     asyncio.  New APIs: loop.create_unix_connection(),
     loop.create_unix_server(), streams.open_unix_connection(), and
     streams.start_unix_server().

   - Issue #20616(7): Add a format() method to tracemalloc.Traceback.

   - Issue #19744(8): the ensurepip installation step now just prints a
     warning to stderr rather than failing outright if SSL/TLS is
     unavailable.  This allows local installation of POSIX builds
     without SSL/TLS support.

   - Issue #20594(9): Avoid name clash with the libc function
     posix_close.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20710

   (2) https://bugs.python.org/20566

   (3) https://bugs.python.org/20704

   (4) https://bugs.python.org/20684

   (5) https://bugs.python.org/20681

   (6) https://bugs.python.org/20673

   (7) https://bugs.python.org/20616

   (8) https://bugs.python.org/19744

   (9) https://bugs.python.org/20594


File: python.info,  Node: Build<5>,  Prev: Library<8>,  Up: Python 3 4 0 release candidate 2

1.14.8.3 Build
..............

   - Issue #20641(1): Run MSI custom actions (pip installation, pyc
     compilation) with the NoImpersonate flag, to support elevated
     execution (UAC).

   - Issue #20221(2): Removed conflicting (or circular) hypot definition
     when compiled with VS 2010 or above.  Initial patch by Tabrez
     Mohammed.

   - Issue #20609(3): Restored the ability to build 64-bit Windows
     binaries on 32-bit Windows, which was broken by the change in issue
     #19788(4).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20641

   (2) https://bugs.python.org/20221

   (3) https://bugs.python.org/20609

   (4) https://bugs.python.org/19788


File: python.info,  Node: Python 3 4 0 release candidate 1,  Next: Python 3 4 0 Beta 3,  Prev: Python 3 4 0 release candidate 2,  Up: Changelog

1.14.9 Python 3.4.0 release candidate 1
---------------------------------------

Release date: 2014-02-10

* Menu:

* Core and Builtins: Core and Builtins<8>. 
* Library: Library<9>. 
* IDLE: IDLE<7>. 
* Tests: Tests<5>. 
* Tools/Demos: Tools/Demos<4>. 
* Build: Build<6>. 
* C-API:: 
* Documentation: Documentation<6>. 


File: python.info,  Node: Core and Builtins<8>,  Next: Library<9>,  Up: Python 3 4 0 release candidate 1

1.14.9.1 Core and Builtins
..........................

   - Issue #19255(1): The builtins module is restored to initial value
     before cleaning other modules.  The sys and builtins modules are
     cleaned last.

   - Issue #20588(2): Make Python-ast.c C89 compliant.

   - Issue #20437(3): Fixed 22 potential bugs when deleting objects
     references.

   - Issue #20500(4): Displaying an exception at interpreter shutdown no
     longer risks triggering an assertion failure in PyObject_Str.

   - Issue #20538(5): UTF-7 incremental decoder produced inconsistent
     string when input was truncated in BASE64 section.

   - Issue #20404(6): io.TextIOWrapper (and hence the open() builtin)
     now uses the internal codec marking system added for issue
     #19619(7) to throw LookupError for known non-text encodings at
     stream construction time.  The existing output type checks remain
     in place to deal with unmarked third party codecs.

   - Issue #17162(8): Add PyType_GetSlot.

   - Issue #20162(9): Fix an alignment issue in the siphash24() hash
     function which caused a crash on PowerPC 64-bit (ppc64).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19255

   (2) https://bugs.python.org/20588

   (3) https://bugs.python.org/20437

   (4) https://bugs.python.org/20500

   (5) https://bugs.python.org/20538

   (6) https://bugs.python.org/20404

   (7) https://bugs.python.org/19619

   (8) https://bugs.python.org/17162

   (9) https://bugs.python.org/20162


File: python.info,  Node: Library<9>,  Next: IDLE<7>,  Prev: Core and Builtins<8>,  Up: Python 3 4 0 release candidate 1

1.14.9.2 Library
................

   - Issue #20530(1): The signatures for slot builtins have been updated
     to reflect the fact that they only accept positional-only
     arguments.

   - Issue #20517(2): Functions in the os module that accept two
     filenames now register both filenames in the exception on failure.

   - Issue #20563(3): The ipaddress module API is now considered stable.

   - Issue #14983(4): email.generator now always adds a line end after
     each MIME boundary marker, instead of doing so only when there is
     an epilogue.  This fixes an RFC compliance bug and solves an issue
     with signed MIME parts.

   - Issue #20540(5): Fix a performance regression (vs.  Python 3.2)
     when layering a multiprocessing Connection over a TCP socket.  For
     small payloads, Nagle’s algorithm would introduce idle delays
     before the entire transmission of a message.

   - Issue #16983(6): the new email header parsing code will now decode
     encoded words that are (incorrectly) surrounded by quotes, and
     register a defect.

   - Issue #19772(7): email.generator no longer mutates the message
     object when doing a down-transform from 8bit to 7bit CTEs.

   - Issue #20536(8): the statistics module now correctly handle Decimal
     instances with positive exponents

   - Issue #18805(9): the netmask/hostmask parsing in ipaddress now more
     reliably filters out illegal values and correctly allows any valid
     prefix length.

   - Issue #20481(10): For at least Python 3.4, the statistics module
     will require that all inputs for a single operation be of a single
     consistent type, or else a mixed of ints and a single other
     consistent type.  This avoids some interoperability issues that
     arose with the previous approach of coercing to a suitable common
     type.

   - Issue #20478(11): the statistics module now treats
     collections.Counter inputs like any other iterable.

   - Issue #17369(12): get_filename was raising an exception if the
     filename parameter’s RFC2231 encoding was broken in certain ways.
     This was a regression relative to python2.

   - Issue #20013(13): Some imap servers disconnect if the current
     mailbox is deleted, and imaplib did not handle that case
     gracefully.  Now it handles the ’bye’ correctly.

   - Issue #20531(14): Revert 3.4 version of fix for #19063, and apply
     the 3.3 version.  That is, do `not' raise an error if unicode is
     passed to email.message.Message.set_payload.

   - Issue #20476(15): If a non-compat32 policy is used with any of the
     email parsers, EmailMessage is now used as the factory class.  The
     factory class should really come from the policy; that will get
     fixed in 3.5.

   - Issue #19920(16): TarFile.list() no longer fails when outputs a
     listing containing non-encodable characters.  Based on patch by
     Vajrasky Kok.

   - Issue #20515(17): Fix NULL pointer dereference introduced by issue
     #20368(18).

   - Issue #19186(19): Restore namespacing of expat symbols inside the
     pyexpat module.

   - Issue #20053(20): ensurepip (and hence venv) are no longer affected
     by the settings in the default pip configuration file.

   - Issue #20426(21): When passing the re.DEBUG flag, re.compile()
     displays the debug output every time it is called, regardless of
     the compilation cache.

   - Issue #20368(22): The null character now correctly passed from Tcl
     to Python.  Improved error handling in variables-related commands.

   - Issue #20435(23): Fix _pyio.StringIO.getvalue() to take into
     account newline translation settings.

   - tracemalloc: Fix slicing traces and fix slicing a traceback.

   - Issue #20354(24): Fix an alignment issue in the tracemalloc module
     on 64-bit platforms.  Bug seen on 64-bit Linux when using "make
     profile-opt".

   - Issue #17159(25): inspect.signature now accepts duck types of
     functions, which adds support for Cython functions.  Initial patch
     by Stefan Behnel.

   - Issue #18801(26): Fix inspect.classify_class_attrs to correctly
     classify object.__new__ and object.__init__.

   - Fixed cmath.isinf’s name in its argument parsing code.

   - Issue #20311(27), #20452: poll and epoll now round the timeout away
     from zero, instead of rounding towards zero, in select and
     selectors modules: select.epoll.poll(),
     selectors.PollSelector.poll() and selectors.EpollSelector.poll().
     For example, a timeout of one microsecond (1e-6) is now rounded to
     one millisecondi (1e-3), instead of being rounded to zero.
     However, the granularity property and asyncio’s resolution feature
     were removed again.

   - asyncio: Some refactoring; various fixes; add write flow control to
     unix pipes; Future.set_exception() instantiates the exception
     argument if it is a class; improved proactor pipe transport;
     support wait_for(f, None); don’t log broken/disconnected pipes; use
     ValueError instead of assert for forbidden subprocess_{shell,exec}
     arguments; added a convenience API for subprocess management; added
     StreamReader.at_eof(); properly handle duplicate coroutines/futures
     in gather(), wait(), as_completed(); use a bytearray for buffering
     in StreamReader; and more.

   - Issue #20288(28): fix handling of invalid numeric charrefs in
     HTMLParser.

   - Issue #20424(29): Python implementation of io.StringIO now supports
     lone surrogates.

   - Issue #20308(30): inspect.signature now works on classes without
     user-defined __init__ or __new__ methods.

   - Issue #20372(31): inspect.getfile (and a bunch of other inspect
     functions that use it) doesn’t crash with unexpected AttributeError
     on classes defined in C without __module__.

   - Issue #20356(32): inspect.signature formatting uses ’/’ to separate
     positional-only parameters from others.

   - Issue #20223(33): inspect.signature now supports methods defined
     with functools.partialmethods.

   - Issue #19456(34): ntpath.join() now joins relative paths correctly
     when a drive is present.

   - Issue #19077(35): tempfile.TemporaryDirectory cleanup no longer
     fails when called during shutdown.  Emitting resource warning in
     __del__ no longer fails.  Original patch by Antoine Pitrou.

   - Issue #20394(36): Silence Coverity warning in audioop module.

   - Issue #20367(37): Fix behavior of concurrent.futures.as_completed()
     for duplicate arguments.  Patch by Glenn Langford.

   - Issue #8260(38): The read(), readline() and readlines() methods of
     codecs.StreamReader returned incomplete data when were called after
     readline() or read(size).  Based on patch by Amaury Forgeot d’Arc.

   - Issue #20105(39): the codec exception chaining now correctly sets
     the traceback of the original exception as its __traceback__
     attribute.

   - Issue #17481(40): inspect.getfullargspec() now uses
     inspect.signature() API.

   - Issue #15304(41): concurrent.futures.wait() can block forever even
     if Futures have completed.  Patch by Glenn Langford.

   - Issue #14455(42): plistlib: fix serializing integers in the range
     of an unsigned long long but outside of the range of signed long
     long for binary plist files.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20530

   (2) https://bugs.python.org/20517

   (3) https://bugs.python.org/20563

   (4) https://bugs.python.org/14983

   (5) https://bugs.python.org/20540

   (6) https://bugs.python.org/16983

   (7) https://bugs.python.org/19772

   (8) https://bugs.python.org/20536

   (9) https://bugs.python.org/18805

   (10) https://bugs.python.org/20481

   (11) https://bugs.python.org/20478

   (12) https://bugs.python.org/17369

   (13) https://bugs.python.org/20013

   (14) https://bugs.python.org/20531

   (15) https://bugs.python.org/20476

   (16) https://bugs.python.org/19920

   (17) https://bugs.python.org/20515

   (18) https://bugs.python.org/20368

   (19) https://bugs.python.org/19186

   (20) https://bugs.python.org/20053

   (21) https://bugs.python.org/20426

   (22) https://bugs.python.org/20368

   (23) https://bugs.python.org/20435

   (24) https://bugs.python.org/20354

   (25) https://bugs.python.org/17159

   (26) https://bugs.python.org/18801

   (27) https://bugs.python.org/20311

   (28) https://bugs.python.org/20288

   (29) https://bugs.python.org/20424

   (30) https://bugs.python.org/20308

   (31) https://bugs.python.org/20372

   (32) https://bugs.python.org/20356

   (33) https://bugs.python.org/20223

   (34) https://bugs.python.org/19456

   (35) https://bugs.python.org/19077

   (36) https://bugs.python.org/20394

   (37) https://bugs.python.org/20367

   (38) https://bugs.python.org/8260

   (39) https://bugs.python.org/20105

   (40) https://bugs.python.org/17481

   (41) https://bugs.python.org/15304

   (42) https://bugs.python.org/14455


File: python.info,  Node: IDLE<7>,  Next: Tests<5>,  Prev: Library<9>,  Up: Python 3 4 0 release candidate 1

1.14.9.3 IDLE
.............

   - Issue #20406(1): Use Python application icons for Idle window title
     bars.  Patch mostly by Serhiy Storchaka.

   - Update the python.gif icon for the Idle classbrowser and pathbowser
     from the old green snake to the new blue and yellow snakes.

   - Issue #17721(2): Remove non-functional configuration dialog help
     button until we make it actually gives some help when clicked.
     Patch by Guilherme Simões.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20406

   (2) https://bugs.python.org/17721


File: python.info,  Node: Tests<5>,  Next: Tools/Demos<4>,  Prev: IDLE<7>,  Up: Python 3 4 0 release candidate 1

1.14.9.4 Tests
..............

   - Issue #20532(1): Tests which use _testcapi now are marked as
     CPython only.

   - Issue #19920(2): Added tests for TarFile.list().  Based on patch by
     Vajrasky Kok.

   - Issue #19990(3): Added tests for the imghdr module.  Based on patch
     by Claudiu Popa.

   - Issue #20474(4): Fix test_socket "unexpected success" failures on
     OS X 10.7+.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20532

   (2) https://bugs.python.org/19920

   (3) https://bugs.python.org/19990

   (4) https://bugs.python.org/20474


File: python.info,  Node: Tools/Demos<4>,  Next: Build<6>,  Prev: Tests<5>,  Up: Python 3 4 0 release candidate 1

1.14.9.5 Tools/Demos
....................

   - Issue #20530(1): Argument Clinic’s signature format has been
     revised again.  The new syntax is highly human readable while still
     preventing false positives.  The syntax also extends Python syntax
     to denote "self" and positional-only parameters, allowing
     inspect.Signature objects to be totally accurate for all supported
     builtins in Python 3.4.

   - Issue #20456(2): Argument Clinic now observes the C preprocessor
     conditional compilation statements of the C files it parses.  When
     a Clinic block is inside a conditional code, it adjusts its output
     to match, including automatically generating an empty methoddef
     macro.

   - Issue #20456(3): Cloned functions in Argument Clinic now use the
     correct name, not the name of the function they were cloned from,
     for text strings inside generated code.

   - Issue #20456(4): Fixed Argument Clinic’s test suite and
     "–converters" feature.

   - Issue #20456(5): Argument Clinic now allows specifying different
     names for a parameter in Python and C, using "as" on the parameter
     line.

   - Issue #20326(6): Argument Clinic now uses a simple, unique
     signature to annotate text signatures in docstrings, resulting in
     fewer false positives.  "self" parameters are also explicitly
     marked, allowing inspect.Signature() to authoritatively detect (and
     skip) said parameters.

   - Issue #20326(7): Argument Clinic now generates separate checksums
     for the input and output sections of the block, allowing external
     tools to verify that the input has not changed (and thus the output
     is not out-of-date).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20530

   (2) https://bugs.python.org/20456

   (3) https://bugs.python.org/20456

   (4) https://bugs.python.org/20456

   (5) https://bugs.python.org/20456

   (6) https://bugs.python.org/20326

   (7) https://bugs.python.org/20326


File: python.info,  Node: Build<6>,  Next: C-API,  Prev: Tools/Demos<4>,  Up: Python 3 4 0 release candidate 1

1.14.9.6 Build
..............

   - Issue #20465(1): Update SQLite shipped with OS X installer to
     3.8.3.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20465


File: python.info,  Node: C-API,  Next: Documentation<6>,  Prev: Build<6>,  Up: Python 3 4 0 release candidate 1

1.14.9.7 C-API
..............

   - Issue #20517(1): Added new functions allowing OSError exceptions to
     reference two filenames instead of one:
     PyErr_SetFromErrnoWithFilenameObjects() and
     PyErr_SetExcFromWindowsErrWithFilenameObjects().

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20517


File: python.info,  Node: Documentation<6>,  Prev: C-API,  Up: Python 3 4 0 release candidate 1

1.14.9.8 Documentation
......................

   - Issue #20488(1): Change wording to say importlib is `the'
     implementation of import instead of just `an' implementation.

   - Issue #6386(2): Clarify in the tutorial that specifying a symlink
     to execute means the directory containing the executed script and
     not the symlink is added to sys.path.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20488

   (2) https://bugs.python.org/6386


File: python.info,  Node: Python 3 4 0 Beta 3,  Next: Python 3 4 0 Beta 2,  Prev: Python 3 4 0 release candidate 1,  Up: Changelog

1.14.10 Python 3.4.0 Beta 3
---------------------------

Release date: 2014-01-26

* Menu:

* Core and Builtins: Core and Builtins<9>. 
* Library: Library<10>. 
* IDLE: IDLE<8>. 
* Tests: Tests<6>. 
* Tools/Demos: Tools/Demos<5>. 
* Build: Build<7>. 


File: python.info,  Node: Core and Builtins<9>,  Next: Library<10>,  Up: Python 3 4 0 Beta 3

1.14.10.1 Core and Builtins
...........................

   - Issue #20189(1): Four additional builtin types (PyTypeObject,
     PyMethodDescr_Type, _PyMethodWrapper_Type, and PyWrapperDescr_Type)
     have been modified to provide introspection information for
     builtins.

   - Issue #17825(2): Cursor "^" is correctly positioned for SyntaxError
     and IndentationError.

   - Issue #2382(3): SyntaxError cursor "^" is now written at correct
     position in most cases when multibyte characters are in line
     (before "^").  This still not works correctly with wide East Asian
     characters.

   - Issue #18960(4): The first line of Python script could be executed
     twice when the source encoding was specified on the second line.
     Now the source encoding declaration on the second line isn’t
     effective if the first line contains anything except a comment.
     ’python -x’ works now again with files with the source encoding
     declarations, and can be used to make Python batch files on
     Windows.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20189

   (2) https://bugs.python.org/17825

   (3) https://bugs.python.org/2382

   (4) https://bugs.python.org/18960


File: python.info,  Node: Library<10>,  Next: IDLE<8>,  Prev: Core and Builtins<9>,  Up: Python 3 4 0 Beta 3

1.14.10.2 Library
.................

   - asyncio: Various improvements and small changes not all covered by
     issues listed below.  E.g.  wait_for() now cancels the inner task
     if the timeout occcurs; tweaked the set of exported symbols;
     renamed Empty/Full to QueueEmpty/QueueFull; "with (yield from
     lock)" now uses a separate context manager; readexactly() raises if
     not enough data was read; PTY support tweaks.

   - Issue #20311(1): asyncio: Add a granularity attribute to
     BaseEventLoop: maximum between the resolution of the
     BaseEventLoop.time() method and the resolution of the selector.
     The granuarility is used in the scheduler to round time and
     deadline.

   - Issue #20311(2): selectors: Add a resolution attribute to
     BaseSelector.

   - Issue #20189(3): unittest.mock now no longer assumes that any
     object for which it could get an inspect.Signature is a callable
     written in Python.  Fix courtesy of Michael Foord.

   - Issue #20317(4): ExitStack.__exit__ could create a self-referential
     loop if an exception raised by a cleanup operation already had its
     context set correctly (for example, by the @contextmanager
     decorator).  The infinite loop this caused is now avoided by
     checking if the expected context is already set before trying to
     fix it.

   - Issue #20374(5): Fix build with GNU readline >= 6.3.

   - Issue #20262(6): Warnings are raised now when duplicate names are
     added in the ZIP file or too long ZIP file comment is truncated.

   - Issue #20165(7): The unittest module no longer considers tests
     marked with @expectedFailure successful if they pass.

   - Issue #18574(8): Added missing newline in 100-Continue reply from
     http.server.BaseHTTPRequestHandler.  Patch by Nikolaus Rath.

   - Issue #20270(9): urllib.urlparse now supports empty ports.

   - Issue #20243(10): TarFile no longer raise ReadError when opened in
     write mode.

   - Issue #20238(11): TarFile opened with external fileobj and "w:gz"
     mode didn’t write complete output on close.

   - Issue #20245(12): The open functions in the tarfile module now
     correctly handle empty mode.

   - Issue #20242(13): Fixed basicConfig() format strings for the
     alternative formatting styles.  Thanks to kespindler for the bug
     report and patch.

   - Issue #20246(14): Fix buffer overflow in socket.recvfrom_into.

   - Issues #20206 and #5803: Fix edge case in email.quoprimime.encode
     where it truncated lines ending in a character needing encoding but
     no newline by using a more efficient algorithm that doesn’t have
     the bug.

   - Issue #19082(15): Working xmlrpc.server and xmlrpc.client examples.
     Both in modules and in documentation.  Initial patch contributed by
     Vajrasky Kok.

   - Issue #20138(16): The wsgiref.application_uri() and
     wsgiref.request_uri() functions now conform to PEP 3333 when handle
     non-ASCII URLs.

   - Issue #19097(17): Raise the correct Exception when cgi.FieldStorage
     is given an invalid fileobj.

   - Issue #20152(18): Ported Python/import.c over to Argument Clinic.

   - Issue #13107(19): argparse and optparse no longer raises an
     exception when output a help on environment with too small COLUMNS.
     Based on patch by Elazar Gershuni.

   - Issue #20207(20): Always disable SSLv2 except when PROTOCOL_SSLv2
     is explicitly asked for.

   - Issue #18960(21): The tokenize module now ignore the source
     encoding declaration on the second line if the first line contains
     anything except a comment.

   - Issue #20078(22): Reading malformed zipfiles no longer hangs with
     100% CPU consumption.

   - Issue #20113(23): os.readv() and os.writev() now raise an OSError
     exception on error instead of returning -1.

   - Issue #19719(24): Make importlib.abc.MetaPathFinder.find_module(),
     PathEntryFinder.find_loader(), and Loader.load_module() use PEP 451
     APIs to help with backwards-compatibility.

   - Issue #20144(25): inspect.Signature now supports parsing simple
     symbolic constants as parameter default values in
     __text_signature__.

   - Issue #20072(26): Fixed multiple errors in tkinter with wantobjects
     is False.

   - Issue #20229(27): Avoid plistlib deprecation warning in
     platform.mac_ver().

   - Issue #14455(28): Fix some problems with the new binary plist
     support in plistlib.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20311

   (2) https://bugs.python.org/20311

   (3) https://bugs.python.org/20189

   (4) https://bugs.python.org/20317

   (5) https://bugs.python.org/20374

   (6) https://bugs.python.org/20262

   (7) https://bugs.python.org/20165

   (8) https://bugs.python.org/18574

   (9) https://bugs.python.org/20270

   (10) https://bugs.python.org/20243

   (11) https://bugs.python.org/20238

   (12) https://bugs.python.org/20245

   (13) https://bugs.python.org/20242

   (14) https://bugs.python.org/20246

   (15) https://bugs.python.org/19082

   (16) https://bugs.python.org/20138

   (17) https://bugs.python.org/19097

   (18) https://bugs.python.org/20152

   (19) https://bugs.python.org/13107

   (20) https://bugs.python.org/20207

   (21) https://bugs.python.org/18960

   (22) https://bugs.python.org/20078

   (23) https://bugs.python.org/20113

   (24) https://bugs.python.org/19719

   (25) https://bugs.python.org/20144

   (26) https://bugs.python.org/20072

   (27) https://bugs.python.org/20229

   (28) https://bugs.python.org/14455


File: python.info,  Node: IDLE<8>,  Next: Tests<6>,  Prev: Library<10>,  Up: Python 3 4 0 Beta 3

1.14.10.3 IDLE
..............

   - Issue #17390(1): Add Python version to Idle editor window title
     bar.  Original patches by Edmond Burnett and Kent Johnson.

   - Issue #18960(2): IDLE now ignores the source encoding declaration
     on the second line if the first line contains anything except a
     comment.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17390

   (2) https://bugs.python.org/18960


File: python.info,  Node: Tests<6>,  Next: Tools/Demos<5>,  Prev: IDLE<8>,  Up: Python 3 4 0 Beta 3

1.14.10.4 Tests
...............

   - Issue #20358(1): Tests for curses.window.overlay and
     curses.window.overwrite no longer specify min{row,col} >
     max{row,col}.

   - Issue #19804(2): The test_find_mac test in test_uuid is now skipped
     if the ifconfig executable is not available.

   - Issue #19886(3): Use better estimated memory requirements for
     bigmem tests.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20358

   (2) https://bugs.python.org/19804

   (3) https://bugs.python.org/19886


File: python.info,  Node: Tools/Demos<5>,  Next: Build<7>,  Prev: Tests<6>,  Up: Python 3 4 0 Beta 3

1.14.10.5 Tools/Demos
.....................

   - Issue #20390(1): Argument Clinic’s "file" output preset now
     defaults to "{dirname}/clinic/{basename}.h".

   - Issue #20390(2): Argument Clinic’s "class" directive syntax has
     been extended with two new required arguments: "typedef" and
     "type_object".

   - Issue #20390(3): Argument Clinic: If __new__ or __init__ functions
     didn’t use kwargs (or args), the PyArg_NoKeywords (or
     PyArg_NoPositional) calls generated are only run when the type
     object is an exact match.

   - Issue #20390(4): Argument Clinic now fails if you have required
     parameters after optional parameters.

   - Issue #20390(5): Argument Clinic converters now have a new template
     they can inject code into: "modifiers".  Code put there is run in
     the parsing function after argument parsing but before the call to
     the impl.

   - Issue #20376(6): Argument Clinic now escapes backslashes in
     docstrings.

   - Issue #20381(7): Argument Clinic now sanity checks the default
     argument when c_default is also specified, providing a nice failure
     message for disallowed values.

   - Issue #20189(8): Argument Clinic now ensures that parser functions
     for __new__ are always of type newfunc, the type of the tp_new
     slot.  Similarly, parser functions for __init__ are now always of
     type initproc, the type of tp_init.

   - Issue #20189(9): Argument Clinic now suppresses the docstring for
     __new__ and __init__ functions if no docstring is provided in the
     input.

   - Issue #20189(10): Argument Clinic now suppresses the "self"
     parameter in the impl for @staticmethod functions.

   - Issue #20294(11): Argument Clinic now supports argument parsing for
     __new__ and __init__ functions.

   - Issue #20299(12): Argument Clinic custom converters may now change
     the default value of c_default and py_default with a class member.

   - Issue #20287(13): Argument Clinic’s output is now configurable,
     allowing delaying its output or even redirecting it to a separate
     file.

   - Issue #20226(14): Argument Clinic now permits simple expressions
     (e.g.  "sys.maxsize - 1") as default values for parameters.

   - Issue #19936(15): Added executable bits or shebang lines to Python
     scripts which requires them.  Disable executable bits and shebang
     lines in test and benchmark files in order to prevent using a
     random system python, and in source files of modules which don’t
     provide command line interface.  Fixed shebang lines in the
     unittestgui and checkpip scripts.

   - Issue #20268(16): Argument Clinic now supports cloning the
     parameters and return converter of existing functions.

   - Issue #20228(17): Argument Clinic now has special support for class
     special methods.

   - Issue #20214(18): Fixed a number of small issues and documentation
     errors in Argument Clinic (see issue for details).

   - Issue #20196(19): Fixed a bug where Argument Clinic did not
     generate correct parsing code for functions with positional-only
     parameters where all arguments are optional.

   - Issue #18960(20): 2to3 and the findnocoding.py script now ignore
     the source encoding declaration on the second line if the first
     line contains anything except a comment.

   - Issue #19723(21): The marker comments Argument Clinic uses have
     been changed to improve readability.

   - Issue #20157(22): When Argument Clinic renames a parameter because
     its name collides with a C keyword, it no longer exposes that
     rename to PyArg_Parse.

   - Issue #20141(23): Improved Argument Clinic’s support for the
     PyArg_Parse "O!" format unit.

   - Issue #20144(24): Argument Clinic now supports simple symbolic
     constants as parameter default values.

   - Issue #20143(25): The line numbers reported in Argument Clinic
     errors are now more accurate.

   - Issue #20142(26): Py_buffer variables generated by Argument Clinic
     are now initialized with a default value.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20390

   (2) https://bugs.python.org/20390

   (3) https://bugs.python.org/20390

   (4) https://bugs.python.org/20390

   (5) https://bugs.python.org/20390

   (6) https://bugs.python.org/20376

   (7) https://bugs.python.org/20381

   (8) https://bugs.python.org/20189

   (9) https://bugs.python.org/20189

   (10) https://bugs.python.org/20189

   (11) https://bugs.python.org/20294

   (12) https://bugs.python.org/20299

   (13) https://bugs.python.org/20287

   (14) https://bugs.python.org/20226

   (15) https://bugs.python.org/19936

   (16) https://bugs.python.org/20268

   (17) https://bugs.python.org/20228

   (18) https://bugs.python.org/20214

   (19) https://bugs.python.org/20196

   (20) https://bugs.python.org/18960

   (21) https://bugs.python.org/19723

   (22) https://bugs.python.org/20157

   (23) https://bugs.python.org/20141

   (24) https://bugs.python.org/20144

   (25) https://bugs.python.org/20143

   (26) https://bugs.python.org/20142


File: python.info,  Node: Build<7>,  Prev: Tools/Demos<5>,  Up: Python 3 4 0 Beta 3

1.14.10.6 Build
...............

   - Issue #12837(1): Silence a tautological comparison warning on OS X
     under Clang in socketmodule.c.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/12837


File: python.info,  Node: Python 3 4 0 Beta 2,  Next: Python 3 4 0 Beta 1,  Prev: Python 3 4 0 Beta 3,  Up: Changelog

1.14.11 Python 3.4.0 Beta 2
---------------------------

Release date: 2014-01-05

* Menu:

* Core and Builtins: Core and Builtins<10>. 
* Library: Library<11>. 
* IDLE: IDLE<9>. 
* Tests: Tests<7>. 
* Build: Build<8>. 
* Documentation: Documentation<7>. 
* Tools/Demos: Tools/Demos<6>. 


File: python.info,  Node: Core and Builtins<10>,  Next: Library<11>,  Up: Python 3 4 0 Beta 2

1.14.11.1 Core and Builtins
...........................

   - Issue #17432(1): Drop UCS2 from names of Unicode functions in
     python3.def.

   - Issue #19526(2): Exclude all new API from the stable ABI.
     Exceptions can be made if a need is demonstrated.

   - Issue #19969(3): PyBytes_FromFormatV() now raises an OverflowError
     if "%c" argument is not in range [0; 255].

   - Issue #19995(4): %c, %o, %x, and %X now issue a DeprecationWarning
     on non-integer input; reworded docs to clarify that an integer type
     should define both __int__ and __index__.

   - Issue #19787(5): PyThread_set_key_value() now always set the value.
     In Python 3.3, the function did nothing if the key already exists
     (if the current value is a non-NULL pointer).

   - Issue #14432(6): Remove the thread state field from the frame
     structure.  Fix a crash when a generator is created in a C thread
     that is destroyed while the generator is still used.  The issue was
     that a generator contains a frame, and the frame kept a reference
     to the Python state of the destroyed C thread.  The crash occurs
     when a trace function is setup.

   - Issue #19576(7): PyGILState_Ensure() now initializes threads.  At
     startup, Python has no concrete GIL. If PyGILState_Ensure() is
     called from a new thread for the first time and
     PyEval_InitThreads() was not called yet, a GIL needs to be created.

   - Issue #17576(8): Deprecation warning emitted now when __int__() or
     __index__() return not int instance.

   - Issue #19932(9): Fix typo in import.h, missing whitespaces in
     function prototypes.

   - Issue #19736(10): Add module-level statvfs constants defined for
     GNU/glibc based systems.

   - Issue #20097(11): Fix bad use of "self" in importlib’s
     WindowsRegistryFinder.

   - Issue #19729(12): In str.format(), fix recursive expansion in
     format spec.

   - Issue #19638(13): Fix possible crash / undefined behaviour from
     huge (more than 2 billion characters) input strings in
     _Py_dg_strtod.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/17432

   (2) https://bugs.python.org/19526

   (3) https://bugs.python.org/19969

   (4) https://bugs.python.org/19995

   (5) https://bugs.python.org/19787

   (6) https://bugs.python.org/14432

   (7) https://bugs.python.org/19576

   (8) https://bugs.python.org/17576

   (9) https://bugs.python.org/19932

   (10) https://bugs.python.org/19736

   (11) https://bugs.python.org/20097

   (12) https://bugs.python.org/19729

   (13) https://bugs.python.org/19638


File: python.info,  Node: Library<11>,  Next: IDLE<9>,  Prev: Core and Builtins<10>,  Up: Python 3 4 0 Beta 2

1.14.11.2 Library
.................

   - Issue #20154(1): Deadlock in asyncio.StreamReader.readexactly().

   - Issue #16113(2): Remove sha3 module again.

   - Issue #20111(3): pathlib.Path.with_suffix() now sanity checks the
     given suffix.

   - Fix breakage in TestSuite.countTestCases() introduced by issue
     #11798(4).

   - Issue #20108(5): Avoid parameter name clash in
     inspect.getcallargs().

   - Issue #19918(6): Fix PurePath.relative_to() under Windows.

   - Issue #19422(7): Explicitly disallow non-SOCK_STREAM sockets in the
     ssl module, rather than silently let them emit clear text data.

   - Issue #20046(8): Locale alias table no longer contains entities
     which can be calculated.  Generalized support of the euro modifier.

   - Issue #20027(9): Fixed locale aliases for devanagari locales.

   - Issue #20067(10): Tkinter variables now work when wantobjects is
     false.

   - Issue #19020(11): Tkinter now uses splitlist() instead of split()
     in configure methods.

   - Issue #19744(12): ensurepip now provides a better error message
     when Python is built without SSL/TLS support (pip currently
     requires that support to run, even if only operating with local
     wheel files)

   - Issue #19734(13): ensurepip now ignores all pip environment
     variables to avoid odd behaviour based on user configuration
     settings

   - Fix TypeError on "setup.py upload –show-response".

   - Issue #20045(14): Fix "setup.py register –list-classifiers".

   - Issue #18879(15): When a method is looked up on a temporary file,
     avoid closing the file before the method is possibly called.

   - Issue #20037(16): Avoid crashes when opening a text file late at
     interpreter shutdown.

   - Issue #19967(17): Thanks to the PEP 442, asyncio.Future now uses a
     destructor to log uncaught exceptions, instead of the dedicated
     _TracebackLogger class.

   - Added a Task.current_task() class method to asyncio.

   - Issue #19850(18): Set SA_RESTART in asyncio when registering a
     signal handler to limit EINTR occurrences.

   - Implemented write flow control in asyncio for proactor event loop
     (Windows).

   - Change write buffer in asyncio use to avoid O(N**2) behavior.  Make
     write()/sendto() accept bytearray/memoryview.

   - Issue #20034(19): Updated alias mapping to most recent locale.alias
     file from X.org distribution using makelocalealias.py.

   - Issue #5815(20): Fixed support for locales with modifiers.  Fixed
     support for locale encodings with hyphens.

   - Issue #20026(21): Fix the sqlite module to handle correctly invalid
     isolation level (wrong type).

   - Issue #18829(22): csv.Dialect() now checks type for delimiter,
     escapechar and quotechar fields.  Original patch by Vajrasky Kok.

   - Issue #19855(23): uuid.getnode() on Unix now looks on the PATH for
     the executables used to find the mac address, with /sbin and
     /usr/sbin as fallbacks.

   - Issue #20007(24): HTTPResponse.read(0) no more prematurely closes
     connection.  Original patch by Simon Sapin.

   - Issue #19946(25): multiprocessing now uses runpy to initialize
     __main__ in child processes when necessary, allowing it to
     correctly handle scripts without suffixes and submodules that use
     explicit relative imports or otherwise rely on parent modules being
     correctly imported prior to execution.

   - Issue #19921(26): When Path.mkdir() is called with parents=True,
     any missing parent is created with the default permissions,
     ignoring the mode argument (mimicking the POSIX "mkdir -p"
     command).

   - Issue #19887(27): Improve the Path.resolve() algorithm to support
     certain symlink chains.

   - Issue #19912(28): Fixed numerous bugs in ntpath.splitunc().

   - Issue #19911(29): ntpath.splitdrive() now correctly processes the
     ’İ’ character (U+0130, LATIN CAPITAL LETTER I WITH DOT ABOVE).

   - Issue #19532(30): python -m compileall with no filename/directory
     arguments now respects the -f and -q flags instead of ignoring
     them.

   - Issue #19623(31): Fixed writing to unseekable files in the aifc
     module.

   - Issue #19946(32): multiprocessing.spawn now raises ImportError when
     the module to be used as the main module cannot be imported.

   - Issue #17919(33): select.poll.register() again works with
     poll.POLLNVAL on AIX. Fixed integer overflow in the eventmask
     parameter.

   - Issue #19063(34): if a Charset’s body_encoding was set to None, the
     email package would generate a message claiming the
     Content-Transfer-Encoding was 7bit, and produce garbage output for
     the content.  This now works.  A couple of other set_payload
     mishandlings of non-ASCII are also fixed.  In addition, calling
     set_payload with a string argument without specifying a charset now
     raises an error (this is a new error in 3.4).

   - Issue #15475(35): Add __sizeof__ implementations for itertools
     objects.

   - Issue #19944(36): Fix importlib.find_spec() so it imports parents
     as needed and move the function to importlib.util.

   - Issue #19880(37): Fix a reference leak in unittest.TestCase.
     Explicitly break reference cycles between frames and the _Outcome
     instance.

   - Issue #17429(38): platform.linux_distribution() now decodes files
     from the UTF-8 encoding with the surrogateescape error handler,
     instead of decoding from the locale encoding in strict mode.  It
     fixes the function on Fedora 19 which is probably the first major
     distribution release with a non-ASCII name.  Patch written by
     Toshio Kuratomi.

   - Issue #19343(39): Expose FreeBSD-specific APIs in resource module.
     Original patch by Koobs.

   - Issue #19929(40): Call os.read with 32768 within
     subprocess.Popen.communicate rather than 4096 for efficiency.  A
     microbenchmark shows Linux and OS X both using ~50% less cpu time
     this way.

   - Issue #19506(41): Use a memoryview to avoid a data copy when piping
     data to stdin within subprocess.Popen.communicate.  5-10% less cpu
     usage.

   - Issue #19876(42): selectors unregister() no longer raises
     ValueError or OSError if the FD is closed (as long as it was
     registered).

   - Issue #19908(43): pathlib now joins relative Windows paths
     correctly when a drive is present.  Original patch by Antoine
     Pitrou.

   - Issue #19296(44): Silence compiler warning in dbm_open

   - Issue #6784(45): Strings from Python 2 can now be unpickled as
     bytes objects by setting the encoding argument of Unpickler to be
     ’bytes’.  Initial patch by Merlijn van Deen.

   - Issue #19839(46): Fix regression in bz2 module’s handling of
     non-bzip2 data at EOF, and analogous bug in lzma module.

   - Issue #19881(47): Fix pickling bug where cpickle would emit bad
     pickle data for large bytes string (i.e., with size greater than
     2**32-1).

   - Issue #19138(48): doctest’s IGNORE_EXCEPTION_DETAIL now allows a
     match when no exception detail exists (no colon following the
     exception’s name, or a colon does follow but no text follows the
     colon).

   - Issue #19927(49): Add __eq__ to path-based loaders in importlib.

   - Issue #19827(50): On UNIX, setblocking() and settimeout() methods
     of socket.socket can now avoid a second syscall if the ioctl()
     function can be used, or if the non-blocking flag of the socket is
     unchanged.

   - Issue #19785(51): smtplib now supports SSLContext.check_hostname
     and server name indication for TLS/SSL connections.

   - Issue #19784(52): poplib now supports SSLContext.check_hostname and
     server name indication for TLS/SSL connections.

   - Issue #19783(53): nntplib now supports SSLContext.check_hostname
     and server name indication for TLS/SSL connections.

   - Issue #19782(54): imaplib now supports SSLContext.check_hostname
     and server name indication for TLS/SSL connections.

   - Issue 20123: Fix pydoc.synopsis() for "binary" modules.

   - Issue #19834(55): Support unpickling of exceptions pickled by
     Python 2.

   - Issue #19781(56): ftplib now supports SSLContext.check_hostname and
     server name indication for TLS/SSL connections.

   - Issue #19509(57): Add SSLContext.check_hostname to match the peer’s
     certificate with server_hostname on handshake.

   - Issue #15798(58): Fixed subprocess.Popen() to no longer fail if
     file descriptor 0, 1 or 2 is closed.

   - Issue #17897(59): Optimized unpickle prefetching.

   - Issue #3693(60): Make the error message more helpful when the
     array.array() constructor is given a str.  Move the array module
     typecode documentation to the docstring of the constructor.

   - Issue #19088(61): Fixed incorrect caching of the copyreg module in
     object.__reduce__() and object.__reduce_ex__().

   - Issue #19698(62): Removed exec_module() methods from
     importlib.machinery.BuiltinImporter and ExtensionFileLoader.

   - Issue #18864(63): Added a setter for ModuleSpec.has_location.

   - Fixed _pickle.Unpickler to not fail when loading empty strings as
     persistent IDs.

   - Issue #11480(64): Fixed copy.copy to work with classes with custom
     metaclasses.  Patch by Daniel Urban.

   - Issue #6477(65): Added support for pickling the types of built-in
     singletons (i.e., Ellipsis, NotImplemented, None).

   - Issue #19713(66): Add remaining PEP 451-related deprecations and
     move away from using find_module/find_loaer/load_module.

   - Issue #19708(67): Update pkgutil to use the new importer APIs.

   - Issue #19703(68): Update pydoc to use the new importer APIs.

   - Issue #19851(69): Fixed a regression in reloading sub-modules.

   - ssl.create_default_context() sets OP_NO_COMPRESSION to prevent
     CRIME.

   - Issue #19802(70): Add socket.SO_PRIORITY.

   - Issue #11508(71): Fixed uuid.getnode() and uuid.uuid1() on
     environment with virtual interface.  Original patch by Kent
     Frazier.

   - Issue #11489(72): JSON decoder now accepts lone surrogates.

   - Issue #19545(73): Avoid chained exceptions while passing stray % to
     time.strptime().  Initial patch by Claudiu Popa.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20154

   (2) https://bugs.python.org/16113

   (3) https://bugs.python.org/20111

   (4) https://bugs.python.org/11798

   (5) https://bugs.python.org/20108

   (6) https://bugs.python.org/19918

   (7) https://bugs.python.org/19422

   (8) https://bugs.python.org/20046

   (9) https://bugs.python.org/20027

   (10) https://bugs.python.org/20067

   (11) https://bugs.python.org/19020

   (12) https://bugs.python.org/19744

   (13) https://bugs.python.org/19734

   (14) https://bugs.python.org/20045

   (15) https://bugs.python.org/18879

   (16) https://bugs.python.org/20037

   (17) https://bugs.python.org/19967

   (18) https://bugs.python.org/19850

   (19) https://bugs.python.org/20034

   (20) https://bugs.python.org/5815

   (21) https://bugs.python.org/20026

   (22) https://bugs.python.org/18829

   (23) https://bugs.python.org/19855

   (24) https://bugs.python.org/20007

   (25) https://bugs.python.org/19946

   (26) https://bugs.python.org/19921

   (27) https://bugs.python.org/19887

   (28) https://bugs.python.org/19912

   (29) https://bugs.python.org/19911

   (30) https://bugs.python.org/19532

   (31) https://bugs.python.org/19623

   (32) https://bugs.python.org/19946

   (33) https://bugs.python.org/17919

   (34) https://bugs.python.org/19063

   (35) https://bugs.python.org/15475

   (36) https://bugs.python.org/19944

   (37) https://bugs.python.org/19880

   (38) https://bugs.python.org/17429

   (39) https://bugs.python.org/19343

   (40) https://bugs.python.org/19929

   (41) https://bugs.python.org/19506

   (42) https://bugs.python.org/19876

   (43) https://bugs.python.org/19908

   (44) https://bugs.python.org/19296

   (45) https://bugs.python.org/6784

   (46) https://bugs.python.org/19839

   (47) https://bugs.python.org/19881

   (48) https://bugs.python.org/19138

   (49) https://bugs.python.org/19927

   (50) https://bugs.python.org/19827

   (51) https://bugs.python.org/19785

   (52) https://bugs.python.org/19784

   (53) https://bugs.python.org/19783

   (54) https://bugs.python.org/19782

   (55) https://bugs.python.org/19834

   (56) https://bugs.python.org/19781

   (57) https://bugs.python.org/19509

   (58) https://bugs.python.org/15798

   (59) https://bugs.python.org/17897

   (60) https://bugs.python.org/3693

   (61) https://bugs.python.org/19088

   (62) https://bugs.python.org/19698

   (63) https://bugs.python.org/18864

   (64) https://bugs.python.org/11480

   (65) https://bugs.python.org/6477

   (66) https://bugs.python.org/19713

   (67) https://bugs.python.org/19708

   (68) https://bugs.python.org/19703

   (69) https://bugs.python.org/19851

   (70) https://bugs.python.org/19802

   (71) https://bugs.python.org/11508

   (72) https://bugs.python.org/11489

   (73) https://bugs.python.org/19545


File: python.info,  Node: IDLE<9>,  Next: Tests<7>,  Prev: Library<11>,  Up: Python 3 4 0 Beta 2

1.14.11.3 IDLE
..............

   - Issue #20058(1): sys.stdin.readline() in IDLE now always returns
     only one line.

   - Issue #19481(2): print() of string subclass instance in IDLE no
     longer hangs.

   - Issue #18270(3): Prevent possible IDLE AttributeError on OS X when
     no initial shell window is present.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20058

   (2) https://bugs.python.org/19481

   (3) https://bugs.python.org/18270


File: python.info,  Node: Tests<7>,  Next: Build<8>,  Prev: IDLE<9>,  Up: Python 3 4 0 Beta 2

1.14.11.4 Tests
...............

   - Issue #20055(1): Fix test_shutil under Windows with symlink
     privileges held.  Patch by Vajrasky Kok.

   - Issue #20070(2): Don’t run test_urllib2net when network resources
     are not enabled.

   - Issue #19938(3): Re-enabled test_bug_1333982 in test_dis, which had
     been disabled since 3.0 due to the changes in listcomp handling.

   - Issue #19320(4): test_tcl no longer fails when wantobjects is
     false.

   - Issue #19919(5): Fix flaky SSL test.  connect_ex() sometimes
     returns EWOULDBLOCK on Windows or VMs hosted on Windows.

   - Issue #19912(6): Added tests for ntpath.splitunc().

   - Issue #19828(7): Fixed test_site when the whole suite is run with
     -S.

   - Issue #19928(8): Implemented a test for repr() of cell objects.

   - Issue #19535(9): Fixed test_docxmlrpc, test_functools,
     test_inspect, and test_statistics when python is run with -OO.

   - Issue #19926(10): Removed unneeded test_main from
     test_abstract_numbers.  Patch by Vajrasky Kok.

   - Issue #19572(11): More skipped tests explicitly marked as skipped.

   - Issue #19595(12), #19987: Re-enabled a long-disabled test in
     test_winsound.

   - Issue #19588(13): Fixed tests in test_random that were silently
     skipped most of the time.  Patch by Julian Gindi.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20055

   (2) https://bugs.python.org/20070

   (3) https://bugs.python.org/19938

   (4) https://bugs.python.org/19320

   (5) https://bugs.python.org/19919

   (6) https://bugs.python.org/19912

   (7) https://bugs.python.org/19828

   (8) https://bugs.python.org/19928

   (9) https://bugs.python.org/19535

   (10) https://bugs.python.org/19926

   (11) https://bugs.python.org/19572

   (12) https://bugs.python.org/19595

   (13) https://bugs.python.org/19588


File: python.info,  Node: Build<8>,  Next: Documentation<7>,  Prev: Tests<7>,  Up: Python 3 4 0 Beta 2

1.14.11.5 Build
...............

   - Issue #19728(1): Enable pip installation by default on Windows.

   - Issue #16136(2): Remove VMS support

   - Issue #18215(3): Add script Tools/ssl/test_multiple_versions.py to
     compile and run Python’s unit tests with multiple versions of
     OpenSSL.

   - Issue #19922(4): define _INCLUDE__STDC_A1_SOURCE in HP-UX to
     include mbstate_t for mbrtowc().

   - Issue #19788(5): kill_python(_d).exe is now run as a PreBuildEvent
     on the pythoncore sub-project.  This should prevent build errors
     due a previous build’s python(_d).exe still running.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19728

   (2) https://bugs.python.org/16136

   (3) https://bugs.python.org/18215

   (4) https://bugs.python.org/19922

   (5) https://bugs.python.org/19788


File: python.info,  Node: Documentation<7>,  Next: Tools/Demos<6>,  Prev: Build<8>,  Up: Python 3 4 0 Beta 2

1.14.11.6 Documentation
.......................

   - Issue #20265(1): Updated some parts of the Using Windows document.

   - Issue #20266(2): Updated some parts of the Windows FAQ.

   - Issue #20255(3): Updated the about and bugs pages.

   - Issue #20253(4): Fixed a typo in the ipaddress docs that advertised
     an illegal attribute name.  Found by INADA Naoki.

   - Issue #18840(5): Introduce the json module in the tutorial, and
     de-emphasize the pickle module.

   - Issue #19845(6): Updated the Compiling Python on Windows section.

   - Issue #19795(7): Improved markup of True/False constants.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/20265

   (2) https://bugs.python.org/20266

   (3) https://bugs.python.org/20255

   (4) https://bugs.python.org/20253

   (5) https://bugs.python.org/18840

   (6) https://bugs.python.org/19845

   (7) https://bugs.python.org/19795


File: python.info,  Node: Tools/Demos<6>,  Prev: Documentation<7>,  Up: Python 3 4 0 Beta 2

1.14.11.7 Tools/Demos
.....................

   - Issue #19659(1): Added documentation for Argument Clinic.

   - Issue #19976(2): Argument Clinic METH_NOARGS functions now always
     take two parameters.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19659

   (2) https://bugs.python.org/19976


File: python.info,  Node: Python 3 4 0 Beta 1,  Next: Python 3 4 0 Alpha 4,  Prev: Python 3 4 0 Beta 2,  Up: Changelog

1.14.12 Python 3.4.0 Beta 1
---------------------------

Release date: 2013-11-24

* Menu:

* Core and Builtins: Core and Builtins<11>. 
* Library: Library<12>. 
* Tests: Tests<8>. 
* Documentation: Documentation<8>. 
* Build: Build<9>. 
* Tools/Demos: Tools/Demos<7>. 


File: python.info,  Node: Core and Builtins<11>,  Next: Library<12>,  Up: Python 3 4 0 Beta 1

1.14.12.1 Core and Builtins
...........................

   - Use the repr of a module name in more places in import, especially
     exceptions.

   - Issue #19619(1): str.encode, bytes.decode and bytearray.decode now
     use an internal API to throw LookupError for known non-text
     encodings, rather than attempting the encoding or decoding
     operation and then throwing a TypeError for an unexpected output
     type.  (The latter mechanism remains in place for third party
     non-text encodings)

   - Issue #19183(2): Implement PEP 456 ’secure and interchangeable hash
     algorithm’.  Python now uses SipHash24 on all major platforms.

   - Issue #12892(3): The utf-16* and utf-32* encoders no longer allow
     surrogate code points (U+D800-U+DFFF) to be encoded.  The utf-32*
     decoders no longer decode byte sequences that correspond to
     surrogate code points.  The surrogatepass error handler now works
     with the utf-16* and utf-32* codecs.  Based on patches by Victor
     Stinner and Kang-Hao (Kenny) Lu.

   - Issue #17806(4): Added keyword-argument support for "tabsize" to
     str/bytes.expandtabs().

   - Issue #17828(5): Output type errors in str.encode(), bytes.decode()
     and bytearray.decode() now direct users to codecs.encode() or
     codecs.decode() as appropriate.

   - Issue #17828(6): The interpreter now attempts to chain errors that
     occur in codec processing with a replacement exception of the same
     type that includes the codec name in the error message.  It ensures
     it only does this when the creation of the replacement exception
     won’t lose any information.

   - Issue #19466(7): Clear the frames of daemon threads earlier during
     the Python shutdown to call objects destructors.  So "unclosed
     file" resource warnings are now corretly emitted for daemon
     threads.

   - Issue #19514(8): Deduplicate some _Py_IDENTIFIER declarations.
     Patch by Andrei Dorian Duma.

   - Issue #17936(9): Fix O(n**2) behaviour when adding or removing many
     subclasses of a given type.

   - Issue #19428(10): zipimport now handles errors when reading
     truncated or invalid ZIP archive.

   - Issue #18408(11): Add a new PyFrame_FastToLocalsWithError()
     function to handle exceptions when merging fast locals into
     f_locals of a frame.  PyEval_GetLocals() now raises an exception
     and return NULL on failure.

   - Issue #19369(12): Optimized the usage of __length_hint__().

   - Issue #18603(13): Ensure that PyOS_mystricmp and PyOS_mystrnicmp
     are in the Python executable and not removed by the linker’s
     optimizer.

   - Issue #19306(14): Add extra hints to the faulthandler module’s
     stack dumps that these are "upside down".

   ---------- Footnotes ----------

   (1) https://bugs.python.org/19619

   (2) https://bugs.python.org/19183

   (3) https://bugs.python.org/12892

   (4) https://bugs.python.org/17806

   (5) https://bugs.python.org/17828

   (6) https://bugs.python.org/17828

   (7) https://bugs.python.org/19466

   (8) https://bugs.python.org/19514

   (9) https://bugs.python.org/17936

   (10) https://bugs.python.org/19428

   (11) https://bugs.python.org/18408

   (12) https://bugs.python.org/19369

   (13) https://bugs.python.org/18603

   (14) https://bugs.python.org/19306

