This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 3.4.3, September 02, 2015

     Copyright © 1990-2015, Python Software Foundation

INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.3.1.


File: python.info,  Node: Summary -- Release highlights,  Next: PEP 405 Virtual Environments,  Up: What's New In Python 3 3

1.2.1 Summary – Release highlights
----------------------------------

New syntax features:

   * New ‘yield from’ expression for *note generator delegation: 345.

   * The ‘u'unicode'’ syntax is accepted again for *note str: 178.
     objects.

New library modules:

   * *note faulthandler: 7b. (helps debugging low-level crashes)

   * *note ipaddress: 9f. (high-level objects representing IP addresses
     and masks)

   * *note lzma: a9. (compress data using the XZ / LZMA algorithm)

   * *note unittest.mock: 115. (replace parts of your system under test
     with mock objects)

   * *note venv: 11e. (Python *note virtual environments: 346, as in the
     popular ‘virtualenv’ package)

New built-in features:

   * Reworked *note I/O exception hierarchy: 347.

Implementation improvements:

   * Rewritten *note import machinery: 348. based on *note importlib:
     99.

   * More compact *note unicode strings: 349.

   * More compact *note attribute dictionaries: 34a.

Significantly Improved Library Modules:

   * C Accelerator for the *note decimal: 34b. module.

   * Better unicode handling in the *note email: 34c. module (*note
     provisional: 34d.).

Security improvements:

   * Hash randomization is switched on by default.

Please read on for a comprehensive list of user-facing changes.


File: python.info,  Node: PEP 405 Virtual Environments,  Next: PEP 420 Implicit Namespace Packages,  Prev: Summary -- Release highlights,  Up: What's New In Python 3 3

1.2.2 PEP 405: Virtual Environments
-----------------------------------

Virtual environments help create separate Python setups while sharing a
system-wide base install, for ease of maintenance.  Virtual environments
have their own set of private site packages (i.e.  locally-installed
libraries), and are optionally segregated from the system-wide site
packages.  Their concept and implementation are inspired by the popular
‘virtualenv’ third-party package, but benefit from tighter integration
with the interpreter core.

This PEP adds the *note venv: 11e. module for programmatic access, and
the *note pyvenv: 167. script for command-line access and
administration.  The Python interpreter checks for a ‘pyvenv.cfg’, file
whose existence signals the base of a virtual environment’s directory
tree.

See also
........

PEP 405(1) - Python Virtual Environments

     PEP written by Carl Meyer; implementation by Carl Meyer and Vinay
     Sajip

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0405


File: python.info,  Node: PEP 420 Implicit Namespace Packages,  Next: PEP 3118 New memoryview implementation and buffer protocol documentation,  Prev: PEP 405 Virtual Environments,  Up: What's New In Python 3 3

1.2.3 PEP 420: Implicit Namespace Packages
------------------------------------------

Native support for package directories that don’t require ‘__init__.py’
marker files and can automatically span multiple path segments (inspired
by various third party approaches to namespace packages, as described in
PEP 420(1))

See also
........

PEP 420(2) - Implicit Namespace Packages

     PEP written by Eric V. Smith; implementation by Eric V. Smith and
     Barry Warsaw

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0420

   (2) https://www.python.org/dev/peps/pep-0420


File: python.info,  Node: PEP 3118 New memoryview implementation and buffer protocol documentation,  Next: PEP 393 Flexible String Representation,  Prev: PEP 420 Implicit Namespace Packages,  Up: What's New In Python 3 3

1.2.4 PEP 3118: New memoryview implementation and buffer protocol documentation
-------------------------------------------------------------------------------

The implementation of PEP 3118(1) has been significantly improved.

The new memoryview implementation comprehensively fixes all ownership
and lifetime issues of dynamically allocated fields in the Py_buffer
struct that led to multiple crash reports.  Additionally, several
functions that crashed or returned incorrect results for non-contiguous
or multi-dimensional input have been fixed.

The memoryview object now has a PEP-3118 compliant getbufferproc() that
checks the consumer’s request type.  Many new features have been added,
most of them work in full generality for non-contiguous arrays and
arrays with suboffsets.

The documentation has been updated, clearly spelling out
responsibilities for both exporters and consumers.  Buffer request flags
are grouped into basic and compound flags.  The memory layout of
non-contiguous and multi-dimensional NumPy-style arrays is explained.

* Menu:

* Features:: 
* API changes:: 

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3118


File: python.info,  Node: Features,  Next: API changes,  Up: PEP 3118 New memoryview implementation and buffer protocol documentation

1.2.4.1 Features
................

   * All native single character format specifiers in struct module
     syntax (optionally prefixed with ’@’) are now supported.

   * With some restrictions, the cast() method allows changing of format
     and shape of C-contiguous arrays.

   * Multi-dimensional list representations are supported for any array
     type.

   * Multi-dimensional comparisons are supported for any array type.

   * One-dimensional memoryviews of hashable (read-only) types with
     formats B, b or c are now hashable.  (Contributed by Antoine Pitrou
     in issue 13411(1).)

   * Arbitrary slicing of any 1-D arrays type is supported.  For
     example, it is now possible to reverse a memoryview in O(1) by
     using a negative step.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13411


File: python.info,  Node: API changes,  Prev: Features,  Up: PEP 3118 New memoryview implementation and buffer protocol documentation

1.2.4.2 API changes
...................

   * The maximum number of dimensions is officially limited to 64.

   * The representation of empty shape, strides and suboffsets is now an
     empty tuple instead of None.

   * Accessing a memoryview element with format ’B’ (unsigned bytes) now
     returns an integer (in accordance with the struct module syntax).
     For returning a bytes object the view must be cast to ’c’ first.

   * memoryview comparisons now use the logical structure of the
     operands and compare all array elements by value.  All format
     strings in struct module syntax are supported.  Views with
     unrecognised format strings are still permitted, but will always
     compare as unequal, regardless of view contents.

   * For further changes see *note Build and C API Changes: 354. and
     *note Porting C code: 355.

(Contributed by Stefan Krah in issue 10181(1).)

See also
........

PEP 3118(2) - Revising the Buffer Protocol

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10181

   (2) https://www.python.org/dev/peps/pep-3118


File: python.info,  Node: PEP 393 Flexible String Representation,  Next: PEP 397 Python Launcher for Windows,  Prev: PEP 3118 New memoryview implementation and buffer protocol documentation,  Up: What's New In Python 3 3

1.2.5 PEP 393: Flexible String Representation
---------------------------------------------

The Unicode string type is changed to support multiple internal
representations, depending on the character with the largest Unicode
ordinal (1, 2, or 4 bytes) in the represented string.  This allows a
space-efficient representation in common cases, but gives access to full
UCS-4 on all systems.  For compatibility with existing APIs, several
representations may exist in parallel; over time, this compatibility
should be phased out.

On the Python side, there should be no downside to this change.

On the C API side, PEP 393 is fully backward compatible.  The legacy API
should remain available at least five years.  Applications using the
legacy API will not fully benefit of the memory reduction, or - worse -
may use a bit more memory, because Python may have to maintain two
versions of each string (in the legacy format and in the new efficient
storage).

* Menu:

* Functionality:: 
* Performance and resource usage:: 


File: python.info,  Node: Functionality,  Next: Performance and resource usage,  Up: PEP 393 Flexible String Representation

1.2.5.1 Functionality
.....................

Changes introduced by PEP 393(1) are the following:

   * Python now always supports the full range of Unicode code points,
     including non-BMP ones (i.e.  from ‘U+0000’ to ‘U+10FFFF’).  The
     distinction between narrow and wide builds no longer exists and
     Python now behaves like a wide build, even under Windows.

   * With the death of narrow builds, the problems specific to narrow
     builds have also been fixed, for example:

        * *note len(): 358. now always returns 1 for non-BMP characters,
          so ‘len('\U0010FFFF') == 1’;

        * surrogate pairs are not recombined in string literals, so
          ‘'\uDBFF\uDFFF' != '\U0010FFFF'’;

        * indexing or slicing non-BMP characters returns the expected
          value, so ‘'\U0010FFFF'[0]’ now returns ‘'\U0010FFFF'’ and not
          ‘'\uDBFF'’;

        * all other functions in the standard library now correctly
          handle non-BMP code points.

   * The value of *note sys.maxunicode: 359. is now always ‘1114111’
     (‘0x10FFFF’ in hexadecimal).  The ‘PyUnicode_GetMax()’ function
     still returns either ‘0xFFFF’ or ‘0x10FFFF’ for backward
     compatibility, and it should not be used with the new Unicode API
     (see issue 13054(2)).

   * The ‘./configure’ flag ‘--with-wide-unicode’ has been removed.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0393

   (2) https://bugs.python.org/issue13054


File: python.info,  Node: Performance and resource usage,  Prev: Functionality,  Up: PEP 393 Flexible String Representation

1.2.5.2 Performance and resource usage
......................................

The storage of Unicode strings now depends on the highest code point in
the string:

   * pure ASCII and Latin1 strings (‘U+0000-U+00FF’) use 1 byte per code
     point;

   * BMP strings (‘U+0000-U+FFFF’) use 2 bytes per code point;

   * non-BMP strings (‘U+10000-U+10FFFF’) use 4 bytes per code point.

The net effect is that for most applications, memory usage of string
storage should decrease significantly - especially compared to former
wide unicode builds - as, in many cases, strings will be pure ASCII even
in international contexts (because many strings store non-human language
data, such as XML fragments, HTTP headers, JSON-encoded data, etc.).  We
also hope that it will, for the same reasons, increase CPU cache
efficiency on non-trivial applications.  The memory usage of Python 3.3
is two to three times smaller than Python 3.2, and a little bit better
than Python 2.7, on a Django benchmark (see the PEP for details).

See also
........

PEP 393(1) - Flexible String Representation

     PEP written by Martin von Löwis; implementation by Torsten Becker
     and Martin von Löwis.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0393


File: python.info,  Node: PEP 397 Python Launcher for Windows,  Next: PEP 3151 Reworking the OS and IO exception hierarchy,  Prev: PEP 393 Flexible String Representation,  Up: What's New In Python 3 3

1.2.6 PEP 397: Python Launcher for Windows
------------------------------------------

The Python 3.3 Windows installer now includes a ‘py’ launcher
application that can be used to launch Python applications in a version
independent fashion.

This launcher is invoked implicitly when double-clicking ‘*.py’ files.
If only a single Python version is installed on the system, that version
will be used to run the file.  If multiple versions are installed, the
most recent version is used by default, but this can be overridden by
including a Unix-style "shebang line" in the Python script.

The launcher can also be used explicitly from the command line as the
‘py’ application.  Running ‘py’ follows the same version selection rules
as implicitly launching scripts, but a more specific version can be
selected by passing appropriate arguments (such as ‘-3’ to request
Python 3 when Python 2 is also installed, or ‘-2.6’ to specifclly
request an earlier Python version when a more recent version is
installed).

In addition to the launcher, the Windows installer now includes an
option to add the newly installed Python to the system PATH.
(Contributed by Brian Curtin in issue 3561(1).)

See also
........

PEP 397(2) - Python Launcher for Windows

     PEP written by Mark Hammond and Martin v.  Löwis; implementation by
     Vinay Sajip.

Launcher documentation: *note Python Launcher for Windows: 35d.

Installer PATH modification: *note Finding the Python executable: 35e.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue3561

   (2) https://www.python.org/dev/peps/pep-0397


File: python.info,  Node: PEP 3151 Reworking the OS and IO exception hierarchy,  Next: PEP 380 Syntax for Delegating to a Subgenerator,  Prev: PEP 397 Python Launcher for Windows,  Up: What's New In Python 3 3

1.2.7 PEP 3151: Reworking the OS and IO exception hierarchy
-----------------------------------------------------------

The hierarchy of exceptions raised by operating system errors is now
both simplified and finer-grained.

You don’t have to worry anymore about choosing the appropriate exception
type between *note OSError: 254, *note IOError: 360, *note
EnvironmentError: 361, *note WindowsError: 362, ‘mmap.error’, *note
socket.error: 363. or *note select.error: 364.  All these exception
types are now only one: *note OSError: 254.  The other names are kept as
aliases for compatibility reasons.

Also, it is now easier to catch a specific error condition.  Instead of
inspecting the ‘errno’ attribute (or ‘args[0]’) for a particular
constant from the *note errno: 7a. module, you can catch the adequate
*note OSError: 254. subclass.  The available subclasses are the
following:

   * *note BlockingIOError: 365.

   * *note ChildProcessError: 366.

   * *note ConnectionError: 367.

   * *note FileExistsError: 316.

   * *note FileNotFoundError: 368.

   * *note InterruptedError: 369.

   * *note IsADirectoryError: 36a.

   * *note NotADirectoryError: 36b.

   * *note PermissionError: 36c.

   * *note ProcessLookupError: 36d.

   * *note TimeoutError: 36e.

And the *note ConnectionError: 367. itself has finer-grained subclasses:

   * *note BrokenPipeError: 36f.

   * *note ConnectionAbortedError: 370.

   * *note ConnectionRefusedError: 371.

   * *note ConnectionResetError: 372.

Thanks to the new exceptions, common usages of the *note errno: 7a. can
now be avoided.  For example, the following code written for Python 3.2:

     from errno import ENOENT, EACCES, EPERM

     try:
         with open("document.txt") as f:
             content = f.read()
     except IOError as err:
         if err.errno == ENOENT:
             print("document.txt file is missing")
         elif err.errno in (EACCES, EPERM):
             print("You are not allowed to read document.txt")
         else:
             raise

can now be written without the *note errno: 7a. import and without
manual inspection of exception attributes:

     try:
         with open("document.txt") as f:
             content = f.read()
     except FileNotFoundError:
         print("document.txt file is missing")
     except PermissionError:
         print("You are not allowed to read document.txt")

See also
........

PEP 3151(1) - Reworking the OS and IO Exception Hierarchy

     PEP written and implemented by Antoine Pitrou

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3151


File: python.info,  Node: PEP 380 Syntax for Delegating to a Subgenerator,  Next: PEP 409 Suppressing exception context,  Prev: PEP 3151 Reworking the OS and IO exception hierarchy,  Up: What's New In Python 3 3

1.2.8 PEP 380: Syntax for Delegating to a Subgenerator
------------------------------------------------------

PEP 380 adds the ‘yield from’ expression, allowing a *note generator:
374. to delegate part of its operations to another generator.  This
allows a section of code containing *note yield: 21b. to be factored out
and placed in another generator.  Additionally, the subgenerator is
allowed to return with a value, and the value is made available to the
delegating generator.

While designed primarily for use in delegating to a subgenerator, the
‘yield from’ expression actually allows delegation to arbitrary
subiterators.

For simple iterators, ‘yield from iterable’ is essentially just a
shortened form of ‘for item in iterable: yield item’:

     >>> def g(x):
     ...     yield from range(x, 0, -1)
     ...     yield from range(x)
     ...
     >>> list(g(5))
     [5, 4, 3, 2, 1, 0, 1, 2, 3, 4]

However, unlike an ordinary loop, ‘yield from’ allows subgenerators to
receive sent and thrown values directly from the calling scope, and
return a final value to the outer generator:

     >>> def accumulate():
     ...     tally = 0
     ...     while 1:
     ...         next = yield
     ...         if next is None:
     ...             return tally
     ...         tally += next
     ...
     >>> def gather_tallies(tallies):
     ...     while 1:
     ...         tally = yield from accumulate()
     ...         tallies.append(tally)
     ...
     >>> tallies = []
     >>> acc = gather_tallies(tallies)
     >>> next(acc) # Ensure the accumulator is ready to accept values
     >>> for i in range(4):
     ...     acc.send(i)
     ...
     >>> acc.send(None) # Finish the first tally
     >>> for i in range(5):
     ...     acc.send(i)
     ...
     >>> acc.send(None) # Finish the second tally
     >>> tallies
     [6, 10]

The main principle driving this change is to allow even generators that
are designed to be used with the ‘send’ and ‘throw’ methods to be split
into multiple subgenerators as easily as a single large function can be
split into multiple subfunctions.

See also
........

PEP 380(1) - Syntax for Delegating to a Subgenerator

     PEP written by Greg Ewing; implementation by Greg Ewing, integrated
     into 3.3 by Renaud Blanch, Ryan Kelly and Nick Coghlan;
     documentation by Zbigniew Jędrzejewski-Szmek and Nick Coghlan

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0380


File: python.info,  Node: PEP 409 Suppressing exception context,  Next: PEP 414 Explicit Unicode literals,  Prev: PEP 380 Syntax for Delegating to a Subgenerator,  Up: What's New In Python 3 3

1.2.9 PEP 409: Suppressing exception context
--------------------------------------------

PEP 409 introduces new syntax that allows the display of the chained
exception context to be disabled.  This allows cleaner error messages in
applications that convert between exception types:

     >>> class D:
     ...     def __init__(self, extra):
     ...         self._extra_attributes = extra
     ...     def __getattr__(self, attr):
     ...         try:
     ...             return self._extra_attributes[attr]
     ...         except KeyError:
     ...             raise AttributeError(attr) from None
     ...
     >>> D({}).x
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
       File "<stdin>", line 8, in __getattr__
     AttributeError: x

Without the ‘from None’ suffix to suppress the cause, the original
exception would be displayed by default:

     >>> class C:
     ...     def __init__(self, extra):
     ...         self._extra_attributes = extra
     ...     def __getattr__(self, attr):
     ...         try:
     ...             return self._extra_attributes[attr]
     ...         except KeyError:
     ...             raise AttributeError(attr)
     ...
     >>> C({}).x
     Traceback (most recent call last):
       File "<stdin>", line 6, in __getattr__
     KeyError: 'x'

     During handling of the above exception, another exception occurred:

     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
       File "<stdin>", line 8, in __getattr__
     AttributeError: x

No debugging capability is lost, as the original exception context
remains available if needed (for example, if an intervening library has
incorrectly suppressed valuable underlying details):

     >>> try:
     ...     D({}).x
     ... except AttributeError as exc:
     ...     print(repr(exc.__context__))
     ...
     KeyError('x',)

See also
........

PEP 409(1) - Suppressing exception context

     PEP written by Ethan Furman; implemented by Ethan Furman and Nick
     Coghlan.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0409


File: python.info,  Node: PEP 414 Explicit Unicode literals,  Next: PEP 3155 Qualified name for classes and functions,  Prev: PEP 409 Suppressing exception context,  Up: What's New In Python 3 3

1.2.10 PEP 414: Explicit Unicode literals
-----------------------------------------

To ease the transition from Python 2 for Unicode aware Python
applications that make heavy use of Unicode literals, Python 3.3 once
again supports the "‘u’" prefix for string literals.  This prefix has no
semantic significance in Python 3, it is provided solely to reduce the
number of purely mechanical changes in migrating to Python 3, making it
easier for developers to focus on the more significant semantic changes
(such as the stricter default separation of binary and text data).

See also
........

PEP 414(1) - Explicit Unicode literals

     PEP written by Armin Ronacher.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0414


File: python.info,  Node: PEP 3155 Qualified name for classes and functions,  Next: PEP 412 Key-Sharing Dictionary,  Prev: PEP 414 Explicit Unicode literals,  Up: What's New In Python 3 3

1.2.11 PEP 3155: Qualified name for classes and functions
---------------------------------------------------------

Functions and class objects have a new ‘__qualname__’ attribute
representing the "path" from the module top-level to their definition.
For global functions and classes, this is the same as ‘__name__’.  For
other functions and classes, it provides better information about where
they were actually defined, and how they might be accessible from the
global scope.

Example with (non-bound) methods:

     >>> class C:
     ...     def meth(self):
     ...         pass
     >>> C.meth.__name__
     'meth'
     >>> C.meth.__qualname__
     'C.meth'

Example with nested classes:

     >>> class C:
     ...     class D:
     ...         def meth(self):
     ...             pass
     ...
     >>> C.D.__name__
     'D'
     >>> C.D.__qualname__
     'C.D'
     >>> C.D.meth.__name__
     'meth'
     >>> C.D.meth.__qualname__
     'C.D.meth'

Example with nested functions:

     >>> def outer():
     ...     def inner():
     ...         pass
     ...     return inner
     ...
     >>> outer().__name__
     'inner'
     >>> outer().__qualname__
     'outer.<locals>.inner'

The string representation of those objects is also changed to include
the new, more precise information:

     >>> str(C.D)
     "<class '__main__.C.D'>"
     >>> str(C.D.meth)
     '<function C.D.meth at 0x7f46b9fe31e0>'

See also
........

PEP 3155(1) - Qualified name for classes and functions

     PEP written and implemented by Antoine Pitrou.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3155


File: python.info,  Node: PEP 412 Key-Sharing Dictionary,  Next: PEP 362 Function Signature Object,  Prev: PEP 3155 Qualified name for classes and functions,  Up: What's New In Python 3 3

1.2.12 PEP 412: Key-Sharing Dictionary
--------------------------------------

Dictionaries used for the storage of objects’ attributes are now able to
share part of their internal storage between each other (namely, the
part which stores the keys and their respective hashes).  This reduces
the memory consumption of programs creating many instances of
non-builtin types.

See also
........

PEP 412(1) - Key-Sharing Dictionary

     PEP written and implemented by Mark Shannon.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0412


File: python.info,  Node: PEP 362 Function Signature Object,  Next: PEP 421 Adding sys implementation,  Prev: PEP 412 Key-Sharing Dictionary,  Up: What's New In Python 3 3

1.2.13 PEP 362: Function Signature Object
-----------------------------------------

A new function *note inspect.signature(): 1fc. makes introspection of
python callables easy and straightforward.  A broad range of callables
is supported: python functions, decorated or not, classes, and *note
functools.partial(): 1d3. objects.  New classes *note inspect.Signature:
307, *note inspect.Parameter: 37a. and *note inspect.BoundArguments:
37b. hold information about the call signatures, such as, annotations,
default values, parameters kinds, and bound arguments, which
considerably simplifies writing decorators and any code that validates
or amends calling signatures or arguments.

See also
........

PEP 362(1): - Function Signature Object

     PEP written by Brett Cannon, Yury Selivanov, Larry Hastings, Jiwon
     Seo; implemented by Yury Selivanov.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0362


File: python.info,  Node: PEP 421 Adding sys implementation,  Next: Using importlib as the Implementation of Import,  Prev: PEP 362 Function Signature Object,  Up: What's New In Python 3 3

1.2.14 PEP 421: Adding sys.implementation
-----------------------------------------

A new attribute on the *note sys: f8. module exposes details specific to
the implementation of the currently running interpreter.  The initial
set of attributes on *note sys.implementation: 37d. are ‘name’,
‘version’, ‘hexversion’, and ‘cache_tag’.

The intention of ‘sys.implementation’ is to consolidate into one
namespace the implementation-specific data used by the standard library.
This allows different Python implementations to share a single standard
library code base much more easily.  In its initial state,
‘sys.implementation’ holds only a small portion of the
implementation-specific data.  Over time that ratio will shift in order
to make the standard library more portable.

One example of improved standard library portability is ‘cache_tag’.  As
of Python 3.3, ‘sys.implementation.cache_tag’ is used by *note
importlib: 99. to support PEP 3147(1) compliance.  Any Python
implementation that uses ‘importlib’ for its built-in import system may
use ‘cache_tag’ to control the caching behavior for modules.

* Menu:

* SimpleNamespace:: 

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3147


File: python.info,  Node: SimpleNamespace,  Up: PEP 421 Adding sys implementation

1.2.14.1 SimpleNamespace
........................

The implementation of ‘sys.implementation’ also introduces a new type to
Python: *note types.SimpleNamespace: 37f.  In contrast to a
mapping-based namespace, like *note dict: 380, ‘SimpleNamespace’ is
attribute-based, like *note object: 381.  However, unlike ‘object’,
‘SimpleNamespace’ instances are writable.  This means that you can add,
remove, and modify the namespace through normal attribute access.

See also
........

PEP 421(1) - Adding sys.implementation

     PEP written and implemented by Eric Snow.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0421


File: python.info,  Node: Using importlib as the Implementation of Import,  Next: Other Language Changes<2>,  Prev: PEP 421 Adding sys implementation,  Up: What's New In Python 3 3

1.2.15 Using importlib as the Implementation of Import
------------------------------------------------------

issue 2377(1) - Replace __import__ w/ importlib.__import__ issue
13959(2) - Re-implement parts of *note imp: 98. in pure Python issue
14605(3) - Make import machinery explicit issue 14646(4) - Require
loaders set __loader__ and __package__

The *note __import__(): 383. function is now powered by *note
importlib.__import__(): 384.  This work leads to the completion of
"phase 2" of PEP 302(5).  There are multiple benefits to this change.
First, it has allowed for more of the machinery powering import to be
exposed instead of being implicit and hidden within the C code.  It also
provides a single implementation for all Python VMs supporting Python
3.3 to use, helping to end any VM-specific deviations in import
semantics.  And finally it eases the maintenance of import, allowing for
future growth to occur.

For the common user, there should be no visible change in semantics.
For those whose code currently manipulates import or calls import
programmatically, the code changes that might possibly be required are
covered in the *note Porting Python code: 385. section of this document.

* Menu:

* New APIs:: 
* Visible Changes:: 

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2377

   (2) https://bugs.python.org/issue13959

   (3) https://bugs.python.org/issue14605

   (4) https://bugs.python.org/issue14646

   (5) https://www.python.org/dev/peps/pep-0302


File: python.info,  Node: New APIs,  Next: Visible Changes,  Up: Using importlib as the Implementation of Import

1.2.15.1 New APIs
.................

One of the large benefits of this work is the exposure of what goes into
making the import statement work.  That means the various importers that
were once implicit are now fully exposed as part of the *note importlib:
99. package.

The abstract base classes defined in *note importlib.abc: 9a. have been
expanded to properly delineate between *note meta path finders: 387. and
*note path entry finders: 388. by introducing *note
importlib.abc.MetaPathFinder: 389. and *note
importlib.abc.PathEntryFinder: 38a, respectively.  The old ABC of *note
importlib.abc.Finder: 38b. is now only provided for
backwards-compatibility and does not enforce any method requirements.

In terms of finders, *note importlib.machinery.FileFinder: 38c. exposes
the mechanism used to search for source and bytecode files of a module.
Previously this class was an implicit member of *note sys.path_hooks:
31d.

For loaders, the new abstract base class *note importlib.abc.FileLoader:
38d. helps write a loader that uses the file system as the storage
mechanism for a module’s code.  The loader for source files (*note
importlib.machinery.SourceFileLoader: 38e.), sourceless bytecode files
(*note importlib.machinery.SourcelessFileLoader: 38f.), and extension
modules (*note importlib.machinery.ExtensionFileLoader: 1f4.) are now
available for direct use.

*note ImportError: 318. now has ‘name’ and ‘path’ attributes which are
set when there is relevant data to provide.  The message for failed
imports will also provide the full name of the module now instead of
just the tail end of the module’s name.

The *note importlib.invalidate_caches(): 390. function will now call the
method with the same name on all finders cached in *note
sys.path_importer_cache: 31e. to help clean up any stored state as
necessary.


File: python.info,  Node: Visible Changes,  Prev: New APIs,  Up: Using importlib as the Implementation of Import

1.2.15.2 Visible Changes
........................

For potential required changes to code, see the *note Porting Python
code: 385. section.

Beyond the expanse of what *note importlib: 99. now exposes, there are
other visible changes to import.  The biggest is that *note
sys.meta_path: 392. and *note sys.path_hooks: 31d. now store all of the
meta path finders and path entry hooks used by import.  Previously the
finders were implicit and hidden within the C code of import instead of
being directly exposed.  This means that one can now easily remove or
change the order of the various finders to fit one’s needs.

Another change is that all modules have a ‘__loader__’ attribute,
storing the loader used to create the module.  PEP 302(1) has been
updated to make this attribute mandatory for loaders to implement, so in
the future once 3rd-party loaders have been updated people will be able
to rely on the existence of the attribute.  Until such time, though,
import is setting the module post-load.

Loaders are also now expected to set the ‘__package__’ attribute from
PEP 366(2).  Once again, import itself is already setting this on all
loaders from *note importlib: 99. and import itself is setting the
attribute post-load.

‘None’ is now inserted into *note sys.path_importer_cache: 31e. when no
finder can be found on *note sys.path_hooks: 31d.  Since *note
imp.NullImporter: 393. is not directly exposed on *note sys.path_hooks:
31d. it could no longer be relied upon to always be available to use as
a value representing no finder found.

All other changes relate to semantic changes which should be taken into
consideration when updating code for Python 3.3, and thus should be read
about in the *note Porting Python code: 385. section of this document.

(Implementation by Brett Cannon)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0302

   (2) https://www.python.org/dev/peps/pep-0366


File: python.info,  Node: Other Language Changes<2>,  Next: A Finer-Grained Import Lock,  Prev: Using importlib as the Implementation of Import,  Up: What's New In Python 3 3

1.2.16 Other Language Changes
-----------------------------

Some smaller changes made to the core Python language are:

   * Added support for Unicode name aliases and named sequences.  Both
     *note unicodedata.lookup(): 395. and ‘'\N{...}'’ now resolve name
     aliases, and *note unicodedata.lookup(): 395. resolves named
     sequences too.

     (Contributed by Ezio Melotti in issue 12753(1).)

   * Unicode database updated to UCD version 6.1.0

   * Equality comparisons on *note range(): 396. objects now return a
     result reflecting the equality of the underlying sequences
     generated by those range objects.  (issue 13201(2))

   * The ‘count()’, ‘find()’, ‘rfind()’, ‘index()’ and ‘rindex()’
     methods of *note bytes: 179. and *note bytearray: 17a. objects now
     accept an integer between 0 and 255 as their first argument.

     (Contributed by Petri Lehtinen in issue 12170(3).)

   * The ‘rjust()’, ‘ljust()’, and ‘center()’ methods of *note bytes:
     179. and *note bytearray: 17a. now accept a *note bytearray: 17a.
     for the ‘fill’ argument.  (Contributed by Petri Lehtinen in issue
     12380(4).)

   * New methods have been added to *note list: 397. and *note
     bytearray: 17a.: ‘copy()’ and ‘clear()’ (issue 10516(5)).
     Consequently, *note MutableSequence: 398. now also defines a
     ‘clear()’ method (issue 11388(6)).

   * Raw bytes literals can now be written ‘rb"..."’ as well as
     ‘br"..."’.

     (Contributed by Antoine Pitrou in issue 13748(7).)

   * *note dict.setdefault(): 399. now does only one lookup for the
     given key, making it atomic when used with built-in types.

     (Contributed by Filip Gruszczyński in issue 13521(8).)

   * The error messages produced when a function call does not match the
     function signature have been significantly improved.

     (Contributed by Benjamin Peterson.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12753

   (2) https://bugs.python.org/issue13201

   (3) https://bugs.python.org/issue12170

   (4) https://bugs.python.org/issue12380

   (5) https://bugs.python.org/issue10516

   (6) https://bugs.python.org/issue11388

   (7) https://bugs.python.org/issue13748

   (8) https://bugs.python.org/issue13521


File: python.info,  Node: A Finer-Grained Import Lock,  Next: Builtin functions and types,  Prev: Other Language Changes<2>,  Up: What's New In Python 3 3

1.2.17 A Finer-Grained Import Lock
----------------------------------

Previous versions of CPython have always relied on a global import lock.
This led to unexpected annoyances, such as deadlocks when importing a
module would trigger code execution in a different thread as a
side-effect.  Clumsy workarounds were sometimes employed, such as the
*note PyImport_ImportModuleNoBlock(): 39b. C API function.

In Python 3.3, importing a module takes a per-module lock.  This
correctly serializes importation of a given module from multiple threads
(preventing the exposure of incompletely initialized modules), while
eliminating the aforementioned annoyances.

(Contributed by Antoine Pitrou in issue 9260(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9260


File: python.info,  Node: Builtin functions and types,  Next: New Modules<2>,  Prev: A Finer-Grained Import Lock,  Up: What's New In Python 3 3

1.2.18 Builtin functions and types
----------------------------------

   * *note open(): 1a2. gets a new `opener' parameter: the underlying
     file descriptor for the file object is then obtained by calling
     `opener' with (`file', `flags').  It can be used to use custom
     flags like *note os.O_CLOEXEC: 39d. for example.  The ‘'x'’ mode
     was added: open for exclusive creation, failing if the file already
     exists.

   * *note print(): 21c.: added the `flush' keyword argument.  If the
     `flush' keyword argument is true, the stream is forcibly flushed.

   * *note hash(): 39e.: hash randomization is enabled by default, see
     *note object.__hash__(): 39f. and *note PYTHONHASHSEED: 3a0.

   * The *note str: 178. type gets a new *note casefold(): 3a1. method:
     return a casefolded copy of the string, casefolded strings may be
     used for caseless matching.  For example, ‘'ß'.casefold()’ returns
     ‘'ss'’.

   * The sequence documentation has been substantially rewritten to
     better explain the binary/text sequence distinction and to provide
     specific documentation sections for the individual builtin sequence
     types (issue 4966(1)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4966


File: python.info,  Node: New Modules<2>,  Next: Improved Modules<2>,  Prev: Builtin functions and types,  Up: What's New In Python 3 3

1.2.19 New Modules
------------------

* Menu:

* faulthandler:: 
* ipaddress: ipaddress<2>. 
* lzma:: 


File: python.info,  Node: faulthandler,  Next: ipaddress<2>,  Up: New Modules<2>

1.2.19.1 faulthandler
.....................

This new debug module *note faulthandler: 7b. contains functions to dump
Python tracebacks explicitly, on a fault (a crash like a segmentation
fault), after a timeout, or on a user signal.  Call *note
faulthandler.enable(): 3a4. to install fault handlers for the ‘SIGSEGV’,
‘SIGFPE’, ‘SIGABRT’, ‘SIGBUS’, and ‘SIGILL’ signals.  You can also
enable them at startup by setting the *note PYTHONFAULTHANDLER: 3a5.
environment variable or by using *note -X: 3a6. ‘faulthandler’ command
line option.

Example of a segmentation fault on Linux:

     $ python -q -X faulthandler
     >>> import ctypes
     >>> ctypes.string_at(0)
     Fatal Python error: Segmentation fault

     Current thread 0x00007fb899f39700:
       File "/home/python/cpython/Lib/ctypes/__init__.py", line 486 in string_at
       File "<stdin>", line 1 in <module>
     Segmentation fault


File: python.info,  Node: ipaddress<2>,  Next: lzma,  Prev: faulthandler,  Up: New Modules<2>

1.2.19.2 ipaddress
..................

The new *note ipaddress: 9f. module provides tools for creating and
manipulating objects representing IPv4 and IPv6 addresses, networks and
interfaces (i.e.  an IP address associated with a specific IP subnet).

(Contributed by Google and Peter Moody in PEP 3144(1).)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3144


File: python.info,  Node: lzma,  Prev: ipaddress<2>,  Up: New Modules<2>

1.2.19.3 lzma
.............

The newly-added *note lzma: a9. module provides data compression and
decompression using the LZMA algorithm, including support for the ‘.xz’
and ‘.lzma’ file formats.

(Contributed by Nadeem Vawda and Per Øyvind Karlsen in issue 6715(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6715


File: python.info,  Node: Improved Modules<2>,  Next: Optimizations,  Prev: New Modules<2>,  Up: What's New In Python 3 3

1.2.20 Improved Modules
-----------------------

* Menu:

* abc: abc<2>. 
* array:: 
* base64: base64<2>. 
* binascii:: 
* bz2:: 
* codecs:: 
* collections: collections<2>. 
* contextlib: contextlib<2>. 
* crypt:: 
* curses:: 
* datetime:: 
* decimal:: 
* email: email<2>. 
* ftplib:: 
* functools: functools<2>. 
* gc: gc<2>. 
* hmac: hmac<2>. 
* http: http<2>. 
* html: html<2>. 
* imaplib:: 
* inspect: inspect<2>. 
* io:: 
* itertools:: 
* logging: logging<2>. 
* math:: 
* mmap: mmap<2>. 
* multiprocessing: multiprocessing<2>. 
* nntplib:: 
* os: os<2>. 
* pdb: pdb<2>. 
* pickle: pickle<2>. 
* pydoc: pydoc<2>. 
* re: re<2>. 
* sched:: 
* select: select<2>. 
* shlex:: 
* shutil: shutil<2>. 
* signal:: 
* smtpd: smtpd<2>. 
* smtplib: smtplib<2>. 
* socket: socket<2>. 
* socketserver:: 
* sqlite3: sqlite3<2>. 
* ssl: ssl<2>. 
* stat: stat<2>. 
* struct: struct<2>. 
* subprocess: subprocess<2>. 
* sys: sys<2>. 
* tarfile: tarfile<2>. 
* tempfile:: 
* textwrap: textwrap<2>. 
* threading: threading<2>. 
* time:: 
* types: types<2>. 
* unittest: unittest<2>. 
* urllib: urllib<2>. 
* webbrowser:: 
* xml.etree.ElementTree: xml etree ElementTree. 
* zlib:: 


File: python.info,  Node: abc<2>,  Next: array,  Up: Improved Modules<2>

1.2.20.1 abc
............

Improved support for abstract base classes containing descriptors
composed with abstract methods.  The recommended approach to declaring
abstract descriptors is now to provide ‘__isabstractmethod__’ as a
dynamically updated property.  The built-in descriptors have been
updated accordingly.

        * *note abc.abstractproperty: 3ab. has been deprecated, use
          *note property: 3ac. with *note abc.abstractmethod(): 3ad.
          instead.

        * *note abc.abstractclassmethod: 3ae. has been deprecated, use
          *note classmethod: 3af. with *note abc.abstractmethod(): 3ad.
          instead.

        * *note abc.abstractstaticmethod: 3b0. has been deprecated, use
          *note staticmethod: 3b1. with *note abc.abstractmethod(): 3ad.
          instead.

(Contributed by Darren Dale in issue 11610(1).)

*note abc.ABCMeta.register(): 3b2. now returns the registered subclass,
which means it can now be used as a class decorator (issue 10868(2)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11610

   (2) https://bugs.python.org/issue10868


File: python.info,  Node: array,  Next: base64<2>,  Prev: abc<2>,  Up: Improved Modules<2>

1.2.20.2 array
..............

The *note array: 7. module supports the ‘long long’ type using ‘q’ and
‘Q’ type codes.

(Contributed by Oren Tirosh and Hirokazu Yamamoto in issue 1172711(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1172711


File: python.info,  Node: base64<2>,  Next: binascii,  Prev: array,  Up: Improved Modules<2>

1.2.20.3 base64
...............

ASCII-only Unicode strings are now accepted by the decoding functions of
the *note base64: e. modern interface.  For example,
‘base64.b64decode('YWJj')’ returns ‘b'abc'’.  (Contributed by Catalin
Iacob in issue 13641(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13641


File: python.info,  Node: binascii,  Next: bz2,  Prev: base64<2>,  Up: Improved Modules<2>

1.2.20.4 binascii
.................

In addition to the binary objects they normally accept, the ‘a2b_’
functions now all also accept ASCII-only strings as input.  (Contributed
by Antoine Pitrou in issue 13637(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13637


File: python.info,  Node: bz2,  Next: codecs,  Prev: binascii,  Up: Improved Modules<2>

1.2.20.5 bz2
............

The *note bz2: 14. module has been rewritten from scratch.  In the
process, several new features have been added:

   * New *note bz2.open(): 3b7. function: open a bzip2-compressed file
     in binary or text mode.

   * *note bz2.BZ2File: 2db. can now read from and write to arbitrary
     file-like objects, by means of its constructor’s `fileobj'
     argument.

     (Contributed by Nadeem Vawda in issue 5863(1).)

   * *note bz2.BZ2File: 2db. and *note bz2.decompress(): 3b8. can now
     decompress multi-stream inputs (such as those produced by the
     ‘pbzip2’ tool).  *note bz2.BZ2File: 2db. can now also be used to
     create this type of file, using the ‘'a'’ (append) mode.

     (Contributed by Nir Aides in issue 1625(2).)

   * *note bz2.BZ2File: 2db. now implements all of the *note
     io.BufferedIOBase: 3b9. API, except for the ‘detach()’ and
     ‘truncate()’ methods.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5863

   (2) https://bugs.python.org/issue1625


File: python.info,  Node: codecs,  Next: collections<2>,  Prev: bz2,  Up: Improved Modules<2>

1.2.20.6 codecs
...............

The *note mbcs: 76. codec has been rewritten to handle correctly
‘replace’ and ‘ignore’ error handlers on all Windows versions.  The
*note mbcs: 76. codec now supports all error handlers, instead of only
‘replace’ to encode and ‘ignore’ to decode.

A new Windows-only codec has been added: ‘cp65001’ (issue 13216(1)).  It
is the Windows code page 65001 (Windows UTF-8, ‘CP_UTF8’).  For example,
it is used by ‘sys.stdout’ if the console output code page is set to
cp65001 (e.g., using ‘chcp 65001’ command).

Multibyte CJK decoders now resynchronize faster.  They only ignore the
first byte of an invalid byte sequence.  For example,
‘b'\xff\n'.decode('gb2312', 'replace')’ now returns a ‘\n’ after the
replacement character.

(issue 12016(2))

Incremental CJK codec encoders are no longer reset at each call to their
encode() methods.  For example:

     $ ./python -q
     >>> import codecs
     >>> encoder = codecs.getincrementalencoder('hz')('strict')
     >>> b''.join(encoder.encode(x) for x in '\u52ff\u65bd\u65bc\u4eba\u3002 Bye.')
     b'~{NpJ)l6HK!#~} Bye.'

This example gives ‘b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} Bye.'’ with older
Python versions.

(issue 12100(3))

The ‘unicode_internal’ codec has been deprecated.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13216

   (2) https://bugs.python.org/issue12016

   (3) https://bugs.python.org/issue12100


File: python.info,  Node: collections<2>,  Next: contextlib<2>,  Prev: codecs,  Up: Improved Modules<2>

1.2.20.7 collections
....................

Addition of a new *note ChainMap: 3bc. class to allow treating a number
of mappings as a single unit.  (Written by Raymond Hettinger for issue
11089(1), made public in issue 11297(2).)

The abstract base classes have been moved in a new *note
collections.abc: 1f. module, to better differentiate between the
abstract and the concrete collections classes.  Aliases for ABCs are
still present in the *note collections: 1e. module to preserve existing
imports.  (issue 11085(3))

The *note Counter: 3bd. class now supports the unary ‘+’ and ‘-’
operators, as well as the in-place operators ‘+=’, ‘-=’, ‘|=’, and ‘&=’.
(Contributed by Raymond Hettinger in issue 13121(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11089

   (2) https://bugs.python.org/issue11297

   (3) https://bugs.python.org/issue11085

   (4) https://bugs.python.org/issue13121


File: python.info,  Node: contextlib<2>,  Next: crypt,  Prev: collections<2>,  Up: Improved Modules<2>

1.2.20.8 contextlib
...................

*note ExitStack: 3bf. now provides a solid foundation for programmatic
manipulation of context managers and similar cleanup functionality.
Unlike the previous ‘contextlib.nested’ API (which was deprecated and
removed), the new API is designed to work correctly regardless of
whether context managers acquire their resources in their ‘__init__’
method (for example, file objects) or in their ‘__enter__’ method (for
example, synchronisation objects from the *note threading: 103. module).

(issue 13585(1))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13585


File: python.info,  Node: crypt,  Next: curses,  Prev: contextlib<2>,  Up: Improved Modules<2>

1.2.20.9 crypt
..............

Addition of salt and modular crypt format (hashing method) and the *note
mksalt(): 3c1. function to the *note crypt: 28. module.

(issue 10924(1))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10924


File: python.info,  Node: curses,  Next: datetime,  Prev: crypt,  Up: Improved Modules<2>

1.2.20.10 curses
................

        * If the *note curses: 2b. module is linked to the ncursesw
          library, use Unicode functions when Unicode strings or
          characters are passed (e.g.  ‘waddwstr()’), and bytes
          functions otherwise (e.g.  ‘waddstr()’).

        * Use the locale encoding instead of ‘utf-8’ to encode Unicode
          strings.

        * ‘curses.window’ has a new *note curses.window.encoding: 3c3.
          attribute.

        * The ‘curses.window’ class has a new *note get_wch(): 3c4.
          method to get a wide character

        * The *note curses: 2b. module has a new *note unget_wch(): 3c5.
          function to push a wide character so the next *note get_wch():
          3c4. will return it

(Contributed by Iñigo Serna in issue 6755(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6755


File: python.info,  Node: datetime,  Next: decimal,  Prev: curses,  Up: Improved Modules<2>

1.2.20.11 datetime
..................

        * Equality comparisons between naive and aware *note datetime:
          3c7. instances now return *note False: 3c8. instead of raising
          *note TypeError: 309. (issue 15006(1)).

        * New *note datetime.datetime.timestamp(): 3c9. method: Return
          POSIX timestamp corresponding to the *note datetime: 3c7.
          instance.

        * The *note datetime.datetime.strftime(): 3ca. method supports
          formatting years older than 1000.

        * The *note datetime.datetime.astimezone(): 3cb. method can now
          be called without arguments to convert datetime instance to
          the system timezone.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15006


File: python.info,  Node: decimal,  Next: email<2>,  Prev: datetime,  Up: Improved Modules<2>

1.2.20.12 decimal
.................

issue 7652(1) - integrate fast native decimal arithmetic.

     C-module and libmpdec written by Stefan Krah.

The new C version of the decimal module integrates the high speed
libmpdec library for arbitrary precision correctly-rounded decimal
floating point arithmetic.  libmpdec conforms to IBM’s General Decimal
Arithmetic Specification.

Performance gains range from 10x for database applications to 100x for
numerically intensive applications.  These numbers are expected gains
for standard precisions used in decimal floating point arithmetic.
Since the precision is user configurable, the exact figures may vary.
For example, in integer bignum arithmetic the differences can be
significantly higher.

The following table is meant as an illustration.  Benchmarks are
available at ‘http://www.bytereef.org/mpdecimal/quickstart.html’.

                   decimal.py        _decimal           speedup
                                                        
     ---------------------------------------------------------------------
                                                        
     pi            42.02s            0.345s             120x
                                                        
                                                        
     telco         172.19s           5.68s              30x
                                                        
                                                        
     psycopg       3.57s             0.29s              12x
                                                        

* Menu:

* Features: Features<2>. 
* API changes: API changes<2>. 

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7652


File: python.info,  Node: Features<2>,  Next: API changes<2>,  Up: decimal

1.2.20.13 Features
..................

   * The *note FloatOperation: 3ce. signal optionally enables stricter
     semantics for mixing floats and Decimals.

   * If Python is compiled without threads, the C version automatically
     disables the expensive thread local context machinery.  In this
     case, the variable *note HAVE_THREADS: 3cf. is set to ‘False’.


File: python.info,  Node: API changes<2>,  Prev: Features<2>,  Up: decimal

1.2.20.14 API changes
.....................

   * The C module has the following context limits, depending on the
     machine architecture:

                                  32-bit                    64-bit
                                                            
          -------------------------------------------------------------------------------------
                                                            
          ‘MAX_PREC’              ‘425000000’               ‘999999999999999999’
                                                            
                                                            
          ‘MAX_EMAX’              ‘425000000’               ‘999999999999999999’
                                                            
                                                            
          ‘MIN_EMIN’              ‘-425000000’              ‘-999999999999999999’
                                                            

   * In the context templates (*note DefaultContext: 3d1, *note
     BasicContext: 3d2. and *note ExtendedContext: 3d3.) the magnitude
     of ‘Emax’ and ‘Emin’ has changed to ‘999999’.

   * The *note Decimal: 3d4. constructor in decimal.py does not observe
     the context limits and converts values with arbitrary exponents or
     precision exactly.  Since the C version has internal limits, the
     following scheme is used: If possible, values are converted
     exactly, otherwise *note InvalidOperation: 3d5. is raised and the
     result is NaN. In the latter case it is always possible to use
     *note create_decimal(): 3d6. in order to obtain a rounded or
     inexact value.

   * The power function in decimal.py is always correctly-rounded.  In
     the C version, it is defined in terms of the correctly-rounded
     *note exp(): 3d7. and *note ln(): 3d8. functions, but the final
     result is only "almost always correctly rounded".

   * In the C version, the context dictionary containing the signals is
     a *note MutableMapping: 3d9.  For speed reasons, ‘flags’ and
     ‘traps’ always refer to the same *note MutableMapping: 3d9. that
     the context was initialized with.  If a new signal dictionary is
     assigned, ‘flags’ and ‘traps’ are updated with the new values, but
     they do not reference the RHS dictionary.

   * Pickling a *note Context: 3da. produces a different output in order
     to have a common interchange format for the Python and C versions.

   * The order of arguments in the *note Context: 3da. constructor has
     been changed to match the order displayed by *note repr(): 3db.

   * The ‘watchexp’ parameter in the *note quantize(): 3dc. method is
     deprecated.


File: python.info,  Node: email<2>,  Next: ftplib,  Prev: decimal,  Up: Improved Modules<2>

1.2.20.15 email
...............

* Menu:

* Policy Framework:: 
* Provisional Policy with New Header API:: 
* Other API Changes:: 


File: python.info,  Node: Policy Framework,  Next: Provisional Policy with New Header API,  Up: email<2>

1.2.20.16 Policy Framework
..........................

The email package now has a *note policy: 73. framework.  A *note
Policy: 3df. is an object with several methods and properties that
control how the email package behaves.  The primary policy for Python
3.3 is the *note Compat32: 3e0. policy, which provides backward
compatibility with the email package in Python 3.2.  A ‘policy’ can be
specified when an email message is parsed by a *note parser: 72, or when
a *note Message: 155. object is created, or when an email is serialized
using a *note generator: 6c.  Unless overridden, a policy passed to a
‘parser’ is inherited by all the ‘Message’ object and sub-objects
created by the ‘parser’.  By default a ‘generator’ will use the policy
of the ‘Message’ object it is serializing.  The default policy is
‘compat32’.

The minimum set of controls implemented by all ‘policy’ objects are:

     max_line_length     The maximum length, excluding the linesep character(s),
                         individual lines may have when a ‘Message’ is serialized.
                         Defaults to 78.
                         
                         
     linesep             The character used to separate individual lines when a
                         ‘Message’ is serialized.  Defaults to ‘\n’.
                         
                         
     cte_type            ‘7bit’ or ‘8bit’.  ‘8bit’ applies only to a ‘Bytes’
                         ‘generator’, and means that non-ASCII may be used where
                         allowed by the protocol (or where it exists in the
                         original input).
                         
                         
     raise_on_defect     Causes a ‘parser’ to raise error when defects are
                         encountered instead of adding them to the ‘Message’
                         object’s ‘defects’ list.
                         

A new policy instance, with new settings, is created using the *note
clone(): 3e1. method of policy objects.  ‘clone’ takes any of the above
controls as keyword arguments.  Any control not specified in the call
retains its default value.  Thus you can create a policy that uses
‘\r\n’ linesep characters like this:

     mypolicy = compat32.clone(linesep='\r\n')

Policies can be used to make the generation of messages in the format
needed by your application simpler.  Instead of having to remember to
specify ‘linesep='\r\n'’ in all the places you call a ‘generator’, you
can specify it once, when you set the policy used by the ‘parser’ or the
‘Message’, whichever your program uses to create ‘Message’ objects.  On
the other hand, if you need to generate messages in multiple forms, you
can still specify the parameters in the appropriate ‘generator’ call.
Or you can have custom policy instances for your different cases, and
pass those in when you create the ‘generator’.


File: python.info,  Node: Provisional Policy with New Header API,  Next: Other API Changes,  Prev: Policy Framework,  Up: email<2>

1.2.20.17 Provisional Policy with New Header API
................................................

While the policy framework is worthwhile all by itself, the main
motivation for introducing it is to allow the creation of new policies
that implement new features for the email package in a way that
maintains backward compatibility for those who do not use the new
policies.  Because the new policies introduce a new API, we are
releasing them in Python 3.3 as a *note provisional policy: 34d.
Backwards incompatible changes (up to and including removal of the code)
may occur if deemed necessary by the core developers.

The new policies are instances of *note EmailPolicy: 3e3, and add the
following additional controls:

     refold_source       Controls whether or not headers parsed by a *note parser:
                         72. are refolded by the *note generator: 6c.  It can be
                         ‘none’, ‘long’, or ‘all’.  The default is ‘long’, which
                         means that source headers with a line longer than
                         ‘max_line_length’ get refolded.  ‘none’ means no line get
                         refolded, and ‘all’ means that all lines get refolded.
                         
                         
     header_factory      A callable that take a ‘name’ and ‘value’ and produces a
                         custom header object.
                         

The ‘header_factory’ is the key to the new features provided by the new
policies.  When one of the new policies is used, any header retrieved
from a ‘Message’ object is an object produced by the ‘header_factory’,
and any time you set a header on a ‘Message’ it becomes an object
produced by ‘header_factory’.  All such header objects have a ‘name’
attribute equal to the header name.  Address and Date headers have
additional attributes that give you access to the parsed data of the
header.  This means you can now do things like this:

     >>> m = Message(policy=SMTP)
     >>> m['To'] = 'Éric <foo@example.com>'
     >>> m['to']
     'Éric <foo@example.com>'
     >>> m['to'].addresses
     (Address(display_name='Éric', username='foo', domain='example.com'),)
     >>> m['to'].addresses[0].username
     'foo'
     >>> m['to'].addresses[0].display_name
     'Éric'
     >>> m['Date'] = email.utils.localtime()
     >>> m['Date'].datetime
     datetime.datetime(2012, 5, 25, 21, 39, 24, 465484, tzinfo=datetime.timezone(datetime.timedelta(-1, 72000), 'EDT'))
     >>> m['Date']
     'Fri, 25 May 2012 21:44:27 -0400'
     >>> print(m)
     To: =?utf-8?q?=C3=89ric?= <foo@example.com>
     Date: Fri, 25 May 2012 21:44:27 -0400

You will note that the unicode display name is automatically encoded as
‘utf-8’ when the message is serialized, but that when the header is
accessed directly, you get the unicode version.  This eliminates any
need to deal with the *note email.header: 6d. *note decode_header():
3e4. or *note make_header(): 3e5. functions.

You can also create addresses from parts:

     >>> m['cc'] = [Group('pals', [Address('Bob', 'bob', 'example.com'),
     ...                           Address('Sally', 'sally', 'example.com')]),
     ...            Address('Bonzo', addr_spec='bonz@laugh.com')]
     >>> print(m)
     To: =?utf-8?q?=C3=89ric?= <foo@example.com>
     Date: Fri, 25 May 2012 21:44:27 -0400
     cc: pals: Bob <bob@example.com>, Sally <sally@example.com>;, Bonzo <bonz@laugh.com>

Decoding to unicode is done automatically:

     >>> m2 = message_from_string(str(m))
     >>> m2['to']
     'Éric <foo@example.com>'

When you parse a message, you can use the ‘addresses’ and ‘groups’
attributes of the header objects to access the groups and individual
addresses:

     >>> m2['cc'].addresses
     (Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com'), Address(display_name='Bonzo', username='bonz', domain='laugh.com'))
     >>> m2['cc'].groups
     (Group(display_name='pals', addresses=(Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com')), Group(display_name=None, addresses=(Address(display_name='Bonzo', username='bonz', domain='laugh.com'),))

In summary, if you use one of the new policies, header manipulation
works the way it ought to: your application works with unicode strings,
and the email package transparently encodes and decodes the unicode to
and from the RFC standard Content Transfer Encodings.


File: python.info,  Node: Other API Changes,  Prev: Provisional Policy with New Header API,  Up: email<2>

1.2.20.18 Other API Changes
...........................

New ‘BytesHeaderParser’, added to the *note parser: 72. module to
complement ‘HeaderParser’ and complete the Bytes API.

New utility functions:

        * *note format_datetime(): 3e7.: given a *note datetime: 3c7,
          produce a string formatted for use in an email header.

        * *note parsedate_to_datetime(): 3e8.: given a date string from
          an email header, convert it into an aware *note datetime: 3c7,
          or a naive *note datetime: 3c7. if the offset is ‘-0000’.

        * *note localtime(): 3e9.: With no argument, returns the current
          local time as an aware *note datetime: 3c7. using the local
          *note timezone: 3ea.  Given an aware *note datetime: 3c7,
          converts it into an aware *note datetime: 3c7. using the local
          *note timezone: 3ea.


File: python.info,  Node: ftplib,  Next: functools<2>,  Prev: email<2>,  Up: Improved Modules<2>

1.2.20.19 ftplib
................

   * *note ftplib.FTP: 3ec. now accepts a ‘source_address’ keyword
     argument to specify the ‘(host, port)’ to use as the source address
     in the bind call when creating the outgoing socket.  (Contributed
     by Giampaolo Rodolà in issue 8594(1).)

   * The *note FTP_TLS: 3ed. class now provides a new *note ccc(): 3ee.
     function to revert control channel back to plaintext.  This can be
     useful to take advantage of firewalls that know how to handle NAT
     with non-secure FTP without opening fixed ports.  (Contributed by
     Giampaolo Rodolà in issue 12139(2).)

   * Added *note ftplib.FTP.mlsd(): 3ef. method which provides a
     parsable directory listing format and deprecates *note
     ftplib.FTP.nlst(): 3f0. and *note ftplib.FTP.dir(): 3f1.
     (Contributed by Giampaolo Rodolà in issue 11072(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8594

   (2) https://bugs.python.org/issue12139

   (3) https://bugs.python.org/issue11072


File: python.info,  Node: functools<2>,  Next: gc<2>,  Prev: ftplib,  Up: Improved Modules<2>

1.2.20.20 functools
...................

The *note functools.lru_cache(): 3f3. decorator now accepts a ‘typed’
keyword argument (that defaults to ‘False’ to ensure that it caches
values of different types that compare equal in separate cache slots.
(Contributed by Raymond Hettinger in issue 13227(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13227


File: python.info,  Node: gc<2>,  Next: hmac<2>,  Prev: functools<2>,  Up: Improved Modules<2>

1.2.20.21 gc
............

It is now possible to register callbacks invoked by the garbage
collector before and after collection using the new *note callbacks:
3f5. list.


File: python.info,  Node: hmac<2>,  Next: http<2>,  Prev: gc<2>,  Up: Improved Modules<2>

1.2.20.22 hmac
..............

A new *note compare_digest(): 3f7. function has been added to prevent
side channel attacks on digests through timing analysis.  (Contributed
by Nick Coghlan and Christian Heimes in issue 15061(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15061


File: python.info,  Node: http<2>,  Next: html<2>,  Prev: hmac<2>,  Up: Improved Modules<2>

1.2.20.23 http
..............

*note http.server.BaseHTTPRequestHandler: 3f9. now buffers the headers
and writes them all at once when *note end_headers(): 3fa. is called.  A
new method *note flush_headers(): 3fb. can be used to directly manage
when the accumlated headers are sent.  (Contributed by Andrew Schaaf in
issue 3709(1).)

*note http.server: 95. now produces valid ‘HTML 4.01 strict’ output.
(Contributed by Ezio Melotti in issue 13295(2).)

*note http.client.HTTPResponse: 3fc. now has a *note readinto(): 3fd.
method, which means it can be used as a *note io.RawIOBase: 3fe. class.
(Contributed by John Kuhn in issue 13464(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue3709

   (2) https://bugs.python.org/issue13295

   (3) https://bugs.python.org/issue13464


File: python.info,  Node: html<2>,  Next: imaplib,  Prev: http<2>,  Up: Improved Modules<2>

1.2.20.24 html
..............

*note html.parser.HTMLParser: 1e5. is now able to parse broken markup
without raising errors, therefore the `strict' argument of the
constructor and the *note HTMLParseError: 400. exception are now
deprecated.  The ability to parse broken markup is the result of a
number of bug fixes that are also available on the latest bug fix
releases of Python 2.7/3.2.  (Contributed by Ezio Melotti in issue
15114(1), and issue 14538(2), issue 13993(3), issue 13960(4), issue
13358(5), issue 1745761(6), issue 755670(7), issue 13357(8), issue
12629(9), issue 1200313(10), issue 670664(11), issue 13273(12), issue
12888(13), issue 7311(14).)

A new *note html5: 401. dictionary that maps HTML5 named character
references to the equivalent Unicode character(s) (e.g.  ‘html5['gt;']
== '>'’) has been added to the *note html.entities: 90. module.  The
dictionary is now also used by *note HTMLParser: 1e5.  (Contributed by
Ezio Melotti in issue 11113(15) and issue 15156(16).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue15114

   (2) https://bugs.python.org/issue14538

   (3) https://bugs.python.org/issue13993

   (4) https://bugs.python.org/issue13960

   (5) https://bugs.python.org/issue13358

   (6) https://bugs.python.org/issue1745761

   (7) https://bugs.python.org/issue755670

   (8) https://bugs.python.org/issue13357

   (9) https://bugs.python.org/issue12629

   (10) https://bugs.python.org/issue1200313

   (11) https://bugs.python.org/issue670664

   (12) https://bugs.python.org/issue13273

   (13) https://bugs.python.org/issue12888

   (14) https://bugs.python.org/issue7311

   (15) https://bugs.python.org/issue11113

   (16) https://bugs.python.org/issue15156


File: python.info,  Node: imaplib,  Next: inspect<2>,  Prev: html<2>,  Up: Improved Modules<2>

1.2.20.25 imaplib
.................

The *note IMAP4_SSL: 403. constructor now accepts an SSLContext
parameter to control parameters of the secure channel.

(Contributed by Sijin Joseph in issue 8808(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8808


File: python.info,  Node: inspect<2>,  Next: io,  Prev: imaplib,  Up: Improved Modules<2>

1.2.20.26 inspect
.................

A new *note getclosurevars(): 405. function has been added.  This
function reports the current binding of all names referenced from the
function body and where those names were resolved, making it easier to
verify correct internal state when testing code that relies on stateful
closures.

(Contributed by Meador Inge and Nick Coghlan in issue 13062(1).)

A new *note getgeneratorlocals(): 406. function has been added.  This
function reports the current binding of local variables in the
generator’s stack frame, making it easier to verify correct internal
state when testing generators.

(Contributed by Meador Inge in issue 15153(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13062

   (2) https://bugs.python.org/issue15153


File: python.info,  Node: io,  Next: itertools,  Prev: inspect<2>,  Up: Improved Modules<2>

1.2.20.27 io
............

The *note open(): 408. function has a new ‘'x'’ mode that can be used to
exclusively create a new file, and raise a *note FileExistsError: 316.
if the file already exists.  It is based on the C11 ’x’ mode to fopen().

(Contributed by David Townshend in issue 12760(1).)

The constructor of the *note TextIOWrapper: 2fd. class has a new
`write_through' optional argument.  If `write_through' is ‘True’, calls
to ‘write()’ are guaranteed not to be buffered: any data written on the
*note TextIOWrapper: 2fd. object is immediately handled to its
underlying binary buffer.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12760


File: python.info,  Node: itertools,  Next: logging<2>,  Prev: io,  Up: Improved Modules<2>

1.2.20.28 itertools
...................

*note accumulate(): 40a. now takes an optional ‘func’ argument for
providing a user-supplied binary function.


File: python.info,  Node: logging<2>,  Next: math,  Prev: itertools,  Up: Improved Modules<2>

1.2.20.29 logging
.................

The *note basicConfig(): 40c. function now supports an optional
‘handlers’ argument taking an iterable of handlers to be added to the
root logger.

A class level attribute ‘append_nul’ has been added to *note
SysLogHandler: 40d. to allow control of the appending of the ‘NUL’
(‘\000’) byte to syslog records, since for some deamons it is required
while for others it is passed through to the log.


File: python.info,  Node: math,  Next: mmap<2>,  Prev: logging<2>,  Up: Improved Modules<2>

1.2.20.30 math
..............

The *note math: ae. module has a new function, *note log2(): 40f, which
returns the base-2 logarithm of `x'.

(Written by Mark Dickinson in issue 11888(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11888


File: python.info,  Node: mmap<2>,  Next: multiprocessing<2>,  Prev: math,  Up: Improved Modules<2>

1.2.20.31 mmap
..............

The *note read(): 411. method is now more compatible with other
file-like objects: if the argument is omitted or specified as ‘None’, it
returns the bytes from the current file position to the end of the
mapping.  (Contributed by Petri Lehtinen in issue 12021(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12021


File: python.info,  Node: multiprocessing<2>,  Next: nntplib,  Prev: mmap<2>,  Up: Improved Modules<2>

1.2.20.32 multiprocessing
.........................

The new *note multiprocessing.connection.wait(): 413. function allows to
poll multiple objects (such as connections, sockets and pipes) with a
timeout.  (Contributed by Richard Oudkerk in issue 12328(1).)

*note multiprocessing.Connection: 414. objects can now be transferred
over multiprocessing connections.  (Contributed by Richard Oudkerk in
issue 4892(2).)

*note multiprocessing.Process: 415. now accepts a ‘daemon’ keyword
argument to override the default behavior of inheriting the ‘daemon’
flag from the parent process (issue 6064(3)).

New attribute *note multiprocessing.Process.sentinel: 416. allows a
program to wait on multiple *note Process: 415. objects at one time
using the appropriate OS primitives (for example, *note select: e0. on
posix systems).

New methods *note multiprocessing.pool.Pool.starmap(): 417. and *note
starmap_async(): 418. provide *note itertools.starmap(): 419.
equivalents to the existing *note multiprocessing.pool.Pool.map(): 41a.
and *note map_async(): 41b. functions.  (Contributed by Hynek Schlawack
in issue 12708(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12328

   (2) https://bugs.python.org/issue4892

   (3) https://bugs.python.org/issue6064

   (4) https://bugs.python.org/issue12708


File: python.info,  Node: nntplib,  Next: os<2>,  Prev: multiprocessing<2>,  Up: Improved Modules<2>

1.2.20.33 nntplib
.................

The *note nntplib.NNTP: 41d. class now supports the context management
protocol to unconditionally consume *note socket.error: 363. exceptions
and to close the NNTP connection when done:

     >>> from nntplib import NNTP
     >>> with NNTP('news.gmane.org') as n:
     ...     n.group('gmane.comp.python.committers')
     ...
     ('211 1755 1 1755 gmane.comp.python.committers', 1755, 1, 1755, 'gmane.comp.python.committers')
     >>>

(Contributed by Giampaolo Rodolà in issue 9795(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9795


File: python.info,  Node: os<2>,  Next: pdb<2>,  Prev: nntplib,  Up: Improved Modules<2>

1.2.20.34 os
............

   * The *note os: c0. module has a new *note pipe2(): 41f. function
     that makes it possible to create a pipe with *note O_CLOEXEC: 39d.
     or *note O_NONBLOCK: 420. flags set atomically.  This is especially
     useful to avoid race conditions in multi-threaded programs.

   * The *note os: c0. module has a new *note sendfile(): 421. function
     which provides an efficent "zero-copy" way for copying data from
     one file (or socket) descriptor to another.  The phrase "zero-copy"
     refers to the fact that all of the copying of data between the two
     descriptors is done entirely by the kernel, with no copying of data
     into userspace buffers.  *note sendfile(): 421. can be used to
     efficiently copy data from a file on disk to a network socket, e.g.
     for downloading a file.

     (Patch submitted by Ross Lagerwall and Giampaolo Rodolà in issue
     10882(1).)

   * To avoid race conditions like symlink attacks and issues with
     temporary files and directories, it is more reliable (and also
     faster) to manipulate file descriptors instead of file names.
     Python 3.3 enhances existing functions and introduces new functions
     to work on file descriptors (issue 4761(2), issue 10755(3) and
     issue 14626(4)).

        - The *note os: c0. module has a new *note fwalk(): 422.
          function similar to *note walk(): 423. except that it also
          yields file descriptors referring to the directories visited.
          This is especially useful to avoid symlink races.

        - The following functions get new optional `dir_fd' (*note paths
          relative to directory descriptors: 424.) and/or
          `follow_symlinks' (*note not following symlinks: 425.): *note
          access(): 426, *note chflags(): 427, *note chmod(): 428, *note
          chown(): 429, *note link(): 42a, *note lstat(): 42b, *note
          mkdir(): 42c, *note mkfifo(): 42d, *note mknod(): 42e, *note
          open(): 217, *note readlink(): 42f, *note remove(): 430, *note
          rename(): 431, *note replace(): 432, *note rmdir(): 433, *note
          stat(): 1ce, *note symlink(): 434, *note unlink(): 435, *note
          utime(): 436.  Platform support for using these parameters can
          be checked via the sets *note os.supports_dir_fd: 437. and
          ‘os.supports_follows_symlinks’.

        - The following functions now support a file descriptor for
          their path argument: *note chdir(): 438, *note chmod(): 428,
          *note chown(): 429, *note execve(): 439, *note listdir(): 43a,
          *note pathconf(): 43b, *note exists(): 43c, *note stat(): 1ce,
          *note statvfs(): 43d, *note utime(): 436.  Platform support
          for this can be checked via the *note os.supports_fd: 43e.
          set.

   * *note access(): 426. accepts an ‘effective_ids’ keyword argument to
     turn on using the effective uid/gid rather than the real uid/gid in
     the access check.  Platform support for this can be checked via the
     *note supports_effective_ids: 43f. set.

   * The *note os: c0. module has two new functions: *note
     getpriority(): 440. and *note setpriority(): 441.  They can be used
     to get or set process niceness/priority in a fashion similar to
     *note os.nice(): 442. but extended to all processes instead of just
     the current one.

     (Patch submitted by Giampaolo Rodolà in issue 10784(5).)

   * The new *note os.replace(): 432. function allows cross-platform
     renaming of a file with overwriting the destination.  With *note
     os.rename(): 431, an existing destination file is overwritten under
     POSIX, but raises an error under Windows.  (Contributed by Antoine
     Pitrou in issue 8828(6).)

   * The stat family of functions (*note stat(): 1ce, *note fstat():
     443, and *note lstat(): 42b.) now support reading a file’s
     timestamps with nanosecond precision.  Symmetrically, *note
     utime(): 436. can now write file timestamps with nanosecond
     precision.  (Contributed by Larry Hastings in issue 14127(7).)

   * The new *note os.get_terminal_size(): 444. function queries the
     size of the terminal attached to a file descriptor.  See also *note
     shutil.get_terminal_size(): 445.  (Contributed by Zbigniew
     Jędrzejewski-Szmek in issue 13609(8).)

   * New functions to support Linux extended attributes (issue
     12720(9)): *note getxattr(): 446, *note listxattr(): 447, *note
     removexattr(): 448, *note setxattr(): 449.

   * New interface to the scheduler.  These functions control how a
     process is allocated CPU time by the operating system.  New
     functions: *note sched_get_priority_max(): 44a, *note
     sched_get_priority_min(): 44b, *note sched_getaffinity(): 44c,
     *note sched_getparam(): 44d, *note sched_getscheduler(): 44e, *note
     sched_rr_get_interval(): 44f, *note sched_setaffinity(): 450, *note
     sched_setparam(): 451, *note sched_setscheduler(): 452, *note
     sched_yield(): 453,

   * New functions to control the file system:

        * *note posix_fadvise(): 454.: Announces an intention to access
          data in a specific pattern thus allowing the kernel to make
          optimizations.

        * *note posix_fallocate(): 455.: Ensures that enough disk space
          is allocated for a file.

        * *note sync(): 456.: Force write of everything to disk.

   * Additional new posix functions:

        * *note lockf(): 457.: Apply, test or remove a POSIX lock on an
          open file descriptor.

        * *note pread(): 458.: Read from a file descriptor at an offset,
          the file offset remains unchanged.

        * *note pwrite(): 459.: Write to a file descriptor from an
          offset, leaving the file offset unchanged.

        * *note readv(): 45a.: Read from a file descriptor into a number
          of writable buffers.

        * *note truncate(): 45b.: Truncate the file corresponding to
          `path', so that it is at most `length' bytes in size.

        * *note waitid(): 45c.: Wait for the completion of one or more
          child processes.

        * *note writev(): 45d.: Write the contents of `buffers' to a
          file descriptor, where `buffers' is an arbitrary sequence of
          buffers.

        * *note getgrouplist(): 45e. (issue 9344(10)): Return list of
          group ids that specified user belongs to.

   * *note times(): 45f. and *note uname(): 460.: Return type changed
     from a tuple to a tuple-like object with named attributes.

   * Some platforms now support additional constants for the *note
     lseek(): 461. function, such as ‘os.SEEK_HOLE’ and ‘os.SEEK_DATA’.

   * New constants *note RTLD_LAZY: 462, *note RTLD_NOW: 463, *note
     RTLD_GLOBAL: 464, *note RTLD_LOCAL: 465, *note RTLD_NODELETE: 466,
     *note RTLD_NOLOAD: 467, and *note RTLD_DEEPBIND: 468. are available
     on platforms that support them.  These are for use with the *note
     sys.setdlopenflags(): 469. function, and supersede the similar
     constants defined in *note ctypes: 2a. and ‘DLFCN’.  (Contributed
     by Victor Stinner in issue 13226(11).)

   * *note os.symlink(): 434. now accepts (and ignores) the
     ‘target_is_directory’ keyword argument on non-Windows platforms, to
     ease cross-platform support.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10882

   (2) https://bugs.python.org/issue4761

   (3) https://bugs.python.org/issue10755

   (4) https://bugs.python.org/issue14626

   (5) https://bugs.python.org/issue10784

   (6) https://bugs.python.org/issue8828

   (7) https://bugs.python.org/issue14127

   (8) https://bugs.python.org/issue13609

   (9) https://bugs.python.org/issue12720

   (10) https://bugs.python.org/issue9344

   (11) https://bugs.python.org/issue13226


File: python.info,  Node: pdb<2>,  Next: pickle<2>,  Prev: os<2>,  Up: Improved Modules<2>

1.2.20.35 pdb
.............

Tab-completion is now available not only for command names, but also
their arguments.  For example, for the ‘break’ command, function and
file names are completed.

(Contributed by Georg Brandl in issue 14210(1))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14210


File: python.info,  Node: pickle<2>,  Next: pydoc<2>,  Prev: pdb<2>,  Up: Improved Modules<2>

1.2.20.36 pickle
................

*note pickle.Pickler: 46c. objects now have an optional *note
dispatch_table: 46d. attribute allowing to set per-pickler reduction
functions.

(Contributed by Richard Oudkerk in issue 14166(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14166


File: python.info,  Node: pydoc<2>,  Next: re<2>,  Prev: pickle<2>,  Up: Improved Modules<2>

1.2.20.37 pydoc
...............

The Tk GUI and the ‘serve()’ function have been removed from the *note
pydoc: d5. module: ‘pydoc -g’ and ‘serve()’ have been deprecated in
Python 3.2.


File: python.info,  Node: re<2>,  Next: sched,  Prev: pydoc<2>,  Up: Improved Modules<2>

1.2.20.38 re
............

*note str: 178. regular expressions now support ‘\u’ and ‘\U’ escapes.

(Contributed by Serhiy Storchaka in issue 3665(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue3665


File: python.info,  Node: sched,  Next: select<2>,  Prev: re<2>,  Up: Improved Modules<2>

1.2.20.39 sched
...............

   * *note run(): 471. now accepts a `blocking' parameter which when set
     to False makes the method execute the scheduled events due to
     expire soonest (if any) and then return immediately.  This is
     useful in case you want to use the *note scheduler: 472. in
     non-blocking applications.  (Contributed by Giampaolo Rodolà in
     issue 13449(1).)

   * *note scheduler: 472. class can now be safely used in
     multi-threaded environments.  (Contributed by Josiah Carlson and
     Giampaolo Rodolà in issue 8684(2).)

   * `timefunc' and `delayfunct' parameters of *note scheduler: 472.
     class constructor are now optional and defaults to *note
     time.time(): 473. and *note time.sleep(): 474. respectively.
     (Contributed by Chris Clark in issue 13245(3).)

   * *note enter(): 475. and *note enterabs(): 476. `argument' parameter
     is now optional.  (Contributed by Chris Clark in issue 13245(4).)

   * *note enter(): 475. and *note enterabs(): 476. now accept a
     `kwargs' parameter.  (Contributed by Chris Clark in issue
     13245(5).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13449

   (2) https://bugs.python.org/issue8684

   (3) https://bugs.python.org/issue13245

   (4) https://bugs.python.org/issue13245

   (5) https://bugs.python.org/issue13245


File: python.info,  Node: select<2>,  Next: shlex,  Prev: sched,  Up: Improved Modules<2>

1.2.20.40 select
................

Solaris and derivative platforms have a new class *note select.devpoll:
244. for high performance asynchronous sockets via ‘/dev/poll’.
(Contributed by Jesús Cea Avión in issue 6397(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6397


File: python.info,  Node: shlex,  Next: shutil<2>,  Prev: select<2>,  Up: Improved Modules<2>

1.2.20.41 shlex
...............

The previously undocumented helper function ‘quote’ from the *note
pipes: c8. modules has been moved to the *note shlex: e3. module and
documented.  *note quote(): 479. properly escapes all characters in a
string that might be otherwise given special meaning by the shell.


File: python.info,  Node: shutil<2>,  Next: signal,  Prev: shlex,  Up: Improved Modules<2>

1.2.20.42 shutil
................

   * New functions:

        * *note disk_usage(): 47b.: provides total, used and free disk
          space statistics.  (Contributed by Giampaolo Rodolà in issue
          12442(1).)

        * *note chown(): 47c.: allows one to change user and/or group of
          the given path also specifying the user/group names and not
          only their numeric ids.  (Contributed by Sandro Tosi in issue
          12191(2).)

        * *note shutil.get_terminal_size(): 445.: returns the size of
          the terminal window to which the interpreter is attached.
          (Contributed by Zbigniew Jędrzejewski-Szmek in issue
          13609(3).)

   * *note copy2(): 47d. and *note copystat(): 47e. now preserve file
     timestamps with nanosecond precision on platforms that support it.
     They also preserve file "extended attributes" on Linux.
     (Contributed by Larry Hastings in issue 14127(4) and issue
     15238(5).)

   * Several functions now take an optional ‘symlinks’ argument: when
     that parameter is true, symlinks aren’t dereferenced and the
     operation instead acts on the symlink itself (or creates one, if
     relevant).  (Contributed by Hynek Schlawack in issue 12715(6).)

   * When copying files to a different file system, *note move(): 47f.
     now handles symlinks the way the posix ‘mv’ command does,
     recreating the symlink rather than copying the target file
     contents.  (Contributed by Jonathan Niehof in issue 9993(7).)
     *note move(): 47f. now also returns the ‘dst’ argument as its
     result.

   * *note rmtree(): 480. is now resistant to symlink attacks on
     platforms which support the new ‘dir_fd’ parameter in *note
     os.open(): 217. and *note os.unlink(): 435.  (Contributed by Martin
     von Löwis and Hynek Schlawack in issue 4489(8).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12442

   (2) https://bugs.python.org/issue12191

   (3) https://bugs.python.org/issue13609

   (4) https://bugs.python.org/issue14127

   (5) https://bugs.python.org/issue15238

   (6) https://bugs.python.org/issue12715

   (7) https://bugs.python.org/issue9993

   (8) https://bugs.python.org/issue4489


File: python.info,  Node: signal,  Next: smtpd<2>,  Prev: shutil<2>,  Up: Improved Modules<2>

1.2.20.43 signal
................

   * The *note signal: e5. module has new functions:

        * *note pthread_sigmask(): 482.: fetch and/or change the signal
          mask of the calling thread (Contributed by Jean-Paul Calderone
          in issue 8407(1));

        * *note pthread_kill(): 483.: send a signal to a thread;

        * *note sigpending(): 484.: examine pending functions;

        * *note sigwait(): 485.: wait a signal;

        * *note sigwaitinfo(): 486.: wait for a signal, returning
          detailed information about it;

        * *note sigtimedwait(): 487.: like *note sigwaitinfo(): 486. but
          with a timeout.

   * The signal handler writes the signal number as a single byte
     instead of a nul byte into the wakeup file descriptor.  So it is
     possible to wait more than one signal and know which signals were
     raised.

   * *note signal.signal(): 488. and *note signal.siginterrupt(): 489.
     raise an OSError, instead of a RuntimeError: OSError has an errno
     attribute.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8407


File: python.info,  Node: smtpd<2>,  Next: smtplib<2>,  Prev: signal,  Up: Improved Modules<2>

1.2.20.44 smtpd
...............

The *note smtpd: e7. module now supports RFC 5321(1) (extended SMTP) and
RFC 1870(2) (size extension).  Per the standard, these extensions are
enabled if and only if the client initiates the session with an ‘EHLO’
command.

(Initial ‘ELHO’ support by Alberto Trevino.  Size extension by Juhana
Jauhiainen.  Substantial additional work on the patch contributed by
Michele Orrù and Dan Boswell.  issue 8739(3))

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc5321.html

   (2) https://tools.ietf.org/html/rfc1870.html

   (3) https://bugs.python.org/issue8739


File: python.info,  Node: smtplib<2>,  Next: socket<2>,  Prev: smtpd<2>,  Up: Improved Modules<2>

1.2.20.45 smtplib
.................

The *note SMTP: 48c, *note SMTP_SSL: 48d, and *note LMTP: 48e. classes
now accept a ‘source_address’ keyword argument to specify the ‘(host,
port)’ to use as the source address in the bind call when creating the
outgoing socket.  (Contributed by Paulo Scardine in issue 11281(1).)

*note SMTP: 48c. now supports the context management protocol, allowing
an ‘SMTP’ instance to be used in a ‘with’ statement.  (Contributed by
Giampaolo Rodolà in issue 11289(2).)

The *note SMTP_SSL: 48d. constructor and the *note starttls(): 48f.
method now accept an SSLContext parameter to control parameters of the
secure channel.  (Contributed by Kasun Herath in issue 8809(3).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11281

   (2) https://bugs.python.org/issue11289

   (3) https://bugs.python.org/issue8809


File: python.info,  Node: socket<2>,  Next: socketserver,  Prev: smtplib<2>,  Up: Improved Modules<2>

1.2.20.46 socket
................

   * The *note socket: 491. class now exposes additional methods to
     process ancillary data when supported by the underlying platform:

        * *note sendmsg(): 492.

        * *note recvmsg(): 493.

        * *note recvmsg_into(): 494.

     (Contributed by David Watson in issue 6560(1), based on an earlier
     patch by Heiko Wundram)

   * The *note socket: 491. class now supports the PF_CAN protocol
     family (‘http://en.wikipedia.org/wiki/Socketcan’), on Linux
     (‘http://lwn.net/Articles/253425’).

     (Contributed by Matthias Fuchs, updated by Tiago Gonçalves in issue
     10141(2).)

   * The *note socket: 491. class now supports the PF_RDS protocol
     family (‘http://en.wikipedia.org/wiki/Reliable_Datagram_Sockets’
     and ‘https://oss.oracle.com/projects/rds/’).

   * The *note socket: 491. class now supports the ‘PF_SYSTEM’ protocol
     family on OS X. (Contributed by Michael Goderbauer in issue
     13777(3).)

   * New function *note sethostname(): 495. allows the hostname to be
     set on unix systems if the calling process has sufficient
     privileges.  (Contributed by Ross Lagerwall in issue 10866(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6560

   (2) https://bugs.python.org/issue10141

   (3) https://bugs.python.org/issue13777

   (4) https://bugs.python.org/issue10866


File: python.info,  Node: socketserver,  Next: sqlite3<2>,  Prev: socket<2>,  Up: Improved Modules<2>

1.2.20.47 socketserver
......................

*note BaseServer: 497. now has an overridable method *note
service_actions(): 498. that is called by the *note serve_forever():
499. method in the service loop.  ‘ForkingMixIn’ now uses this to clean
up zombie child proceses.  (Contributed by Justin Warkentin in issue
11109(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11109


File: python.info,  Node: sqlite3<2>,  Next: ssl<2>,  Prev: socketserver,  Up: Improved Modules<2>

1.2.20.48 sqlite3
.................

New *note sqlite3.Connection: 49b. method *note set_trace_callback():
49c. can be used to capture a trace of all sql commands processed by
sqlite.  (Contributed by Torsten Landschoff in issue 11688(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11688


File: python.info,  Node: ssl<2>,  Next: stat<2>,  Prev: sqlite3<2>,  Up: Improved Modules<2>

1.2.20.49 ssl
.............

   * The *note ssl: ee. module has two new random generation functions:

        * *note RAND_bytes(): 49e.: generate cryptographically strong
          pseudo-random bytes.

        * *note RAND_pseudo_bytes(): 49f.: generate pseudo-random bytes.

     (Contributed by Victor Stinner in issue 12049(1).)

   * The *note ssl: ee. module now exposes a finer-grained exception
     hierarchy in order to make it easier to inspect the various kinds
     of errors.  (Contributed by Antoine Pitrou in issue 11183(2).)

   * *note load_cert_chain(): 4a0. now accepts a `password' argument to
     be used if the private key is encrypted.  (Contributed by Adam
     Simpkins in issue 12803(3).)

   * Diffie-Hellman key exchange, both regular and Elliptic Curve-based,
     is now supported through the *note load_dh_params(): 4a1. and *note
     set_ecdh_curve(): 4a2. methods.  (Contributed by Antoine Pitrou in
     issue 13626(4) and issue 13627(5).)

   * SSL sockets have a new *note get_channel_binding(): 4a3. method
     allowing the implementation of certain authentication mechanisms
     such as SCRAM-SHA-1-PLUS. (Contributed by Jacek Konieczny in issue
     12551(6).)

   * You can query the SSL compression algorithm used by an SSL socket,
     thanks to its new *note compression(): 4a4. method.  The new
     attribute *note OP_NO_COMPRESSION: 4a5. can be used to disable
     compression.  (Contributed by Antoine Pitrou in issue 13634(7).)

   * Support has been added for the Next Procotol Negotiation extension
     using the *note ssl.SSLContext.set_npn_protocols(): 4a6. method.
     (Contributed by Colin Marc in issue 14204(8).)

   * SSL errors can now be introspected more easily thanks to *note
     library: 4a7. and *note reason: 4a8. attributes.  (Contributed by
     Antoine Pitrou in issue 14837(9).)

   * The *note get_server_certificate(): 4a9. function now supports
     IPv6.  (Contributed by Charles-François Natali in issue 11811(10).)

   * New attribute *note OP_CIPHER_SERVER_PREFERENCE: 4aa. allows
     setting SSLv3 server sockets to use the server’s cipher ordering
     preference rather than the client’s (issue 13635(11)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12049

   (2) https://bugs.python.org/issue11183

   (3) https://bugs.python.org/issue12803

   (4) https://bugs.python.org/issue13626

   (5) https://bugs.python.org/issue13627

   (6) https://bugs.python.org/issue12551

   (7) https://bugs.python.org/issue13634

   (8) https://bugs.python.org/issue14204

   (9) https://bugs.python.org/issue14837

   (10) https://bugs.python.org/issue11811

   (11) https://bugs.python.org/issue13635


File: python.info,  Node: stat<2>,  Next: struct<2>,  Prev: ssl<2>,  Up: Improved Modules<2>

1.2.20.50 stat
..............

The undocumented tarfile.filemode function has been moved to *note
stat.filemode(): 4ac.  It can be used to convert a file’s mode to a
string of the form ’-rwxrwxrwx’.

(Contributed by Giampaolo Rodolà in issue 14807(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14807


File: python.info,  Node: struct<2>,  Next: subprocess<2>,  Prev: stat<2>,  Up: Improved Modules<2>

1.2.20.51 struct
................

The *note struct: f3. module now supports ‘ssize_t’ and ‘size_t’ via the
new codes ‘n’ and ‘N’, respectively.  (Contributed by Antoine Pitrou in
issue 3163(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue3163


File: python.info,  Node: subprocess<2>,  Next: sys<2>,  Prev: struct<2>,  Up: Improved Modules<2>

1.2.20.52 subprocess
....................

Command strings can now be bytes objects on posix platforms.
(Contributed by Victor Stinner in issue 8513(1).)

A new constant *note DEVNULL: 4af. allows suppressing output in a
platform-independent fashion.  (Contributed by Ross Lagerwall in issue
5870(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8513

   (2) https://bugs.python.org/issue5870


File: python.info,  Node: sys<2>,  Next: tarfile<2>,  Prev: subprocess<2>,  Up: Improved Modules<2>

1.2.20.53 sys
.............

The *note sys: f8. module has a new *note thread_info: 4b1. *note struct
sequence: 4b2. holding informations about the thread implementation
(issue 11223(1)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue11223


File: python.info,  Node: tarfile<2>,  Next: tempfile,  Prev: sys<2>,  Up: Improved Modules<2>

1.2.20.54 tarfile
.................

*note tarfile: fc. now supports ‘lzma’ encoding via the *note lzma: a9.
module.  (Contributed by Lars Gustäbel in issue 5689(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5689


File: python.info,  Node: tempfile,  Next: textwrap<2>,  Prev: tarfile<2>,  Up: Improved Modules<2>

1.2.20.55 tempfile
..................

*note tempfile.SpooledTemporaryFile: 4b5.’s ‘truncate()’ method now
accepts a ‘size’ parameter.  (Contributed by Ryan Kelly in issue
9957(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9957


File: python.info,  Node: textwrap<2>,  Next: threading<2>,  Prev: tempfile,  Up: Improved Modules<2>

1.2.20.56 textwrap
..................

The *note textwrap: 102. module has a new *note indent(): 4b7. that
makes it straightforward to add a common prefix to selected lines in a
block of text (issue 13857(1)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13857


File: python.info,  Node: threading<2>,  Next: time,  Prev: textwrap<2>,  Up: Improved Modules<2>

1.2.20.57 threading
...................

*note threading.Condition: 4b9, *note threading.Semaphore: 4ba, *note
threading.BoundedSemaphore: 4bb, *note threading.Event: 4bc, and *note
threading.Timer: 4bd, all of which used to be factory functions
returning a class instance, are now classes and may be subclassed.
(Contributed by Éric Araujo in issue 10968(1).)

The *note threading.Thread: 28e. constructor now accepts a ‘daemon’
keyword argument to override the default behavior of inheriting the
‘deamon’ flag value from the parent thread (issue 6064(2)).

The formerly private function ‘_thread.get_ident’ is now available as
the public function *note threading.get_ident(): 4be.  This eliminates
several cases of direct access to the ‘_thread’ module in the stdlib.
Third party code that used ‘_thread.get_ident’ should likewise be
changed to use the new public interface.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10968

   (2) https://bugs.python.org/issue6064


File: python.info,  Node: time,  Next: types<2>,  Prev: threading<2>,  Up: Improved Modules<2>

1.2.20.58 time
..............

The PEP 418(1) added new functions to the *note time: 104. module:

   * *note get_clock_info(): 4c0.: Get information on a clock.

   * *note monotonic(): 4c1.: Monotonic clock (cannot go backward), not
     affected by system clock updates.

   * *note perf_counter(): 4c2.: Performance counter with the highest
     available resolution to measure a short duration.

   * *note process_time(): 4c3.: Sum of the system and user CPU time of
     the current process.

Other new functions:

   * *note clock_getres(): 4c4, *note clock_gettime(): 4c5. and *note
     clock_settime(): 4c6. functions with ‘CLOCK_xxx’ constants.
     (Contributed by Victor Stinner in issue 10278(2).)

To improve cross platform consistency, *note sleep(): 474. now raises a
*note ValueError: 321. when passed a negative sleep value.  Previously
this was an error on posix, but produced an infinite sleep on Windows.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0418

   (2) https://bugs.python.org/issue10278


File: python.info,  Node: types<2>,  Next: unittest<2>,  Prev: time,  Up: Improved Modules<2>

1.2.20.59 types
...............

Add a new *note types.MappingProxyType: 4c8. class: Read-only proxy of a
mapping.  (issue 14386(1))

The new functions *note types.new_class(): 4c9. and *note
types.prepare_class(): 4ca. provide support for PEP 3115 compliant
dynamic type creation.  (issue 14588(2))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14386

   (2) https://bugs.python.org/issue14588


File: python.info,  Node: unittest<2>,  Next: urllib<2>,  Prev: types<2>,  Up: Improved Modules<2>

1.2.20.60 unittest
..................

*note assertRaises(): 4cc, *note assertRaisesRegex(): 4cd, *note
assertWarns(): 4ce, and *note assertWarnsRegex(): 4cf. now accept a
keyword argument `msg' when used as context managers.  (Contributed by
Ezio Melotti and Winston Ewert in issue 10775(1).)

*note unittest.TestCase.run(): 4d0. now returns the *note TestResult:
4d1. object.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10775


File: python.info,  Node: urllib<2>,  Next: webbrowser,  Prev: unittest<2>,  Up: Improved Modules<2>

1.2.20.61 urllib
................

The *note Request: 296. class, now accepts a `method' argument used by
*note get_method(): 4d3. to determine what HTTP method should be used.
For example, this will send a ‘'HEAD'’ request:

     >>> urlopen(Request('https://www.python.org', method='HEAD'))

(issue 1673007(1))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1673007


File: python.info,  Node: webbrowser,  Next: xml etree ElementTree,  Prev: urllib<2>,  Up: Improved Modules<2>

1.2.20.62 webbrowser
....................

The *note webbrowser: 122. module supports more "browsers": Google
Chrome (named ‘chrome’, ‘chromium’, ‘chrome-browser’ or
‘chromium-browser’ depending on the version and operating system), and
the generic launchers ‘xdg-open’, from the FreeDesktop.org project, and
‘gvfs-open’, which is the default URI handler for GNOME 3.  (The former
contributed by Arnaud Calmettes in issue 13620(1), the latter by
Matthias Klose in issue 14493(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue13620

   (2) https://bugs.python.org/issue14493


File: python.info,  Node: xml etree ElementTree,  Next: zlib,  Prev: webbrowser,  Up: Improved Modules<2>

1.2.20.63 xml.etree.ElementTree
...............................

The *note xml.etree.ElementTree: 130. module now imports its C
accelerator by default; there is no longer a need to explicitly import
‘xml.etree.cElementTree’ (this module stays for backwards compatibility,
but is now deprecated).  In addition, the ‘iter’ family of methods of
*note Element: 4d6. has been optimized (rewritten in C). The module’s
documentation has also been greatly improved with added examples and a
more detailed reference.


File: python.info,  Node: zlib,  Prev: xml etree ElementTree,  Up: Improved Modules<2>

1.2.20.64 zlib
..............

New attribute *note zlib.Decompress.eof: 4d8. makes it possible to
distinguish between a properly-formed compressed stream and an
incomplete or truncated one.  (Contributed by Nadeem Vawda in issue
12646(1).)

New attribute *note zlib.ZLIB_RUNTIME_VERSION: 4d9. reports the version
string of the underlying ‘zlib’ library that is loaded at runtime.
(Contributed by Torsten Landschoff in issue 12306(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12646

   (2) https://bugs.python.org/issue12306


File: python.info,  Node: Optimizations,  Next: Build and C API Changes,  Prev: Improved Modules<2>,  Up: What's New In Python 3 3

1.2.21 Optimizations
--------------------

Major performance enhancements have been added:

   * Thanks to PEP 393(1), some operations on Unicode strings have been
     optimized:

        * the memory footprint is divided by 2 to 4 depending on the
          text

        * encode an ASCII string to UTF-8 doesn’t need to encode
          characters anymore, the UTF-8 representation is shared with
          the ASCII representation

        * the UTF-8 encoder has been optimized

        * repeating a single ASCII letter and getting a substring of a
          ASCII strings is 4 times faster

   * UTF-8 is now 2x to 4x faster.  UTF-16 encoding is now up to 10x
     faster.

     (Contributed by Serhiy Storchaka, issue 14624(2), issue 14738(3)
     and issue 15026(4).)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0393

   (2) https://bugs.python.org/issue14624

   (3) https://bugs.python.org/issue14738

   (4) https://bugs.python.org/issue15026


File: python.info,  Node: Build and C API Changes,  Next: Deprecated<2>,  Prev: Optimizations,  Up: What's New In Python 3 3

1.2.22 Build and C API Changes
------------------------------

Changes to Python’s build process and to the C API include:

   * New PEP 3118(1) related function:

        * *note PyMemoryView_FromMemory(): 4db.

   * PEP 393(2) added new Unicode types, macros and functions:

        * High-level API:

             * *note PyUnicode_CopyCharacters(): 4dc.

             * *note PyUnicode_FindChar(): 4dd.

             * *note PyUnicode_GetLength(): 4de, *note
               PyUnicode_GET_LENGTH: 4df.

             * *note PyUnicode_New(): 4e0.

             * *note PyUnicode_Substring(): 4e1.

             * *note PyUnicode_ReadChar(): 4e2, *note
               PyUnicode_WriteChar(): 4e3.

        * Low-level API:

             * *note Py_UCS1: 4e4, *note Py_UCS2: 4e5, *note Py_UCS4:
               4e6. types

             * *note PyASCIIObject: 4e7. and *note
               PyCompactUnicodeObject: 4e8. structures

             * *note PyUnicode_READY: 4e9.

             * *note PyUnicode_FromKindAndData(): 4ea.

             * *note PyUnicode_AsUCS4(): 4eb, *note
               PyUnicode_AsUCS4Copy(): 4ec.

             * *note PyUnicode_DATA: 4ed, *note PyUnicode_1BYTE_DATA:
               4ee, *note PyUnicode_2BYTE_DATA: 4ef, *note
               PyUnicode_4BYTE_DATA: 4f0.

             * *note PyUnicode_KIND: 4f1. with ‘PyUnicode_Kind’ enum:
               *note PyUnicode_WCHAR_KIND: 4f2, *note
               PyUnicode_1BYTE_KIND: 4f3, *note PyUnicode_2BYTE_KIND:
               4f4, *note PyUnicode_4BYTE_KIND: 4f5.

             * *note PyUnicode_READ: 4f6, *note PyUnicode_READ_CHAR:
               4f7, *note PyUnicode_WRITE: 4f8.

             * *note PyUnicode_MAX_CHAR_VALUE: 4f9.

   * *note PyArg_ParseTuple: 4fa. now accepts a *note bytearray: 17a.
     for the ‘c’ format (issue 12380(3)).

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3118

   (2) https://www.python.org/dev/peps/pep-0393

   (3) https://bugs.python.org/issue12380


File: python.info,  Node: Deprecated<2>,  Next: Porting to Python 3 3,  Prev: Build and C API Changes,  Up: What's New In Python 3 3

1.2.23 Deprecated
-----------------

* Menu:

* Unsupported Operating Systems:: 
* Deprecated Python modules, functions and methods: Deprecated Python modules functions and methods. 
* Deprecated functions and types of the C API:: 
* Deprecated features:: 


File: python.info,  Node: Unsupported Operating Systems,  Next: Deprecated Python modules functions and methods,  Up: Deprecated<2>

1.2.23.1 Unsupported Operating Systems
......................................

OS/2 and VMS are no longer supported due to the lack of a maintainer.

Windows 2000 and Windows platforms which set ‘COMSPEC’ to ‘command.com’
are no longer supported due to maintenance burden.

OSF support, which was deprecated in 3.2, has been completely removed.


File: python.info,  Node: Deprecated Python modules functions and methods,  Next: Deprecated functions and types of the C API,  Prev: Unsupported Operating Systems,  Up: Deprecated<2>

1.2.23.2 Deprecated Python modules, functions and methods
.........................................................

   * Passing a non-empty string to ‘object.__format__()’ is deprecated,
     and will produce a *note TypeError: 309. in Python 3.4 (issue
     9856(1)).

   * The ‘unicode_internal’ codec has been deprecated because of the PEP
     393(2), use UTF-8, UTF-16 (‘utf-16-le’ or ‘utf-16-be’), or UTF-32
     (‘utf-32-le’ or ‘utf-32-be’)

   * *note ftplib.FTP.nlst(): 3f0. and *note ftplib.FTP.dir(): 3f1.: use
     *note ftplib.FTP.mlsd(): 3ef.

   * *note platform.popen(): 4fe.: use the *note subprocess: f4. module.
     Check especially the *note Replacing Older Functions with the
     subprocess Module: 4ff. section (issue 11377(3)).

   * issue 13374(4): The Windows bytes API has been deprecated in the
     *note os: c0. module.  Use Unicode filenames, instead of bytes
     filenames, to not depend on the ANSI code page anymore and to
     support any filename.

   * issue 13988(5): The ‘xml.etree.cElementTree’ module is deprecated.
     The accelerator is used automatically whenever available.

   * The behaviour of *note time.clock(): 500. depends on the platform:
     use the new *note time.perf_counter(): 4c2. or *note
     time.process_time(): 4c3. function instead, depending on your
     requirements, to have a well defined behaviour.

   * The *note os.stat_float_times(): 501. function is deprecated.

   * *note abc: 4. module:

        * *note abc.abstractproperty: 3ab. has been deprecated, use
          *note property: 3ac. with *note abc.abstractmethod(): 3ad.
          instead.

        * *note abc.abstractclassmethod: 3ae. has been deprecated, use
          *note classmethod: 3af. with *note abc.abstractmethod(): 3ad.
          instead.

        * *note abc.abstractstaticmethod: 3b0. has been deprecated, use
          *note staticmethod: 3b1. with *note abc.abstractmethod(): 3ad.
          instead.

   * *note importlib: 99. package:

        * *note importlib.abc.SourceLoader.path_mtime(): 502. is now
          deprecated in favour of *note
          importlib.abc.SourceLoader.path_stats(): 503. as bytecode
          files now store both the modification time and size of the
          source file the bytecode file was compiled from.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9856

   (2) https://www.python.org/dev/peps/pep-0393

   (3) https://bugs.python.org/issue11377

   (4) https://bugs.python.org/issue13374

   (5) https://bugs.python.org/issue13988


File: python.info,  Node: Deprecated functions and types of the C API,  Next: Deprecated features,  Prev: Deprecated Python modules functions and methods,  Up: Deprecated<2>

1.2.23.3 Deprecated functions and types of the C API
....................................................

The *note Py_UNICODE: 505. has been deprecated by PEP 393(1) and will be
removed in Python 4.  All functions using this type are deprecated:

Unicode functions and methods using *note Py_UNICODE: 505. and *note
Py_UNICODE*: 505. types:

   * *note PyUnicode_FromUnicode: 506.: use *note
     PyUnicode_FromWideChar(): 507. or *note
     PyUnicode_FromKindAndData(): 4ea.

   * *note PyUnicode_AS_UNICODE: 508, *note PyUnicode_AsUnicode(): 509,
     *note PyUnicode_AsUnicodeAndSize(): 50a.: use *note
     PyUnicode_AsWideCharString(): 50b.

   * *note PyUnicode_AS_DATA: 50c.: use *note PyUnicode_DATA: 4ed. with
     *note PyUnicode_READ: 4f6. and *note PyUnicode_WRITE: 4f8.

   * *note PyUnicode_GET_SIZE: 50d, *note PyUnicode_GetSize(): 50e.: use
     *note PyUnicode_GET_LENGTH: 4df. or *note PyUnicode_GetLength():
     4de.

   * *note PyUnicode_GET_DATA_SIZE: 50f.: use ‘PyUnicode_GET_LENGTH(str)
     * PyUnicode_KIND(str)’ (only work on ready strings)

   * *note PyUnicode_AsUnicodeCopy(): 510.: use *note
     PyUnicode_AsUCS4Copy(): 4ec. or *note PyUnicode_AsWideCharString():
     50b.

   * ‘PyUnicode_GetMax()’

Functions and macros manipulating Py_UNICODE* strings:

   * ‘Py_UNICODE_strlen’: use *note PyUnicode_GetLength(): 4de. or *note
     PyUnicode_GET_LENGTH: 4df.

   * ‘Py_UNICODE_strcat’: use *note PyUnicode_CopyCharacters(): 4dc. or
     *note PyUnicode_FromFormat(): 2cd.

   * ‘Py_UNICODE_strcpy’, ‘Py_UNICODE_strncpy’, ‘Py_UNICODE_COPY’: use
     *note PyUnicode_CopyCharacters(): 4dc. or *note
     PyUnicode_Substring(): 4e1.

   * ‘Py_UNICODE_strcmp’: use *note PyUnicode_Compare(): 511.

   * ‘Py_UNICODE_strncmp’: use *note PyUnicode_Tailmatch(): 512.

   * ‘Py_UNICODE_strchr’, ‘Py_UNICODE_strrchr’: use *note
     PyUnicode_FindChar(): 4dd.

   * ‘Py_UNICODE_FILL’: use *note PyUnicode_Fill(): 513.

   * ‘Py_UNICODE_MATCH’

Encoders:

   * *note PyUnicode_Encode(): 514.: use ‘PyUnicode_AsEncodedObject()’

   * *note PyUnicode_EncodeUTF7(): 515.

   * *note PyUnicode_EncodeUTF8(): 516.: use *note PyUnicode_AsUTF8():
     517. or *note PyUnicode_AsUTF8String(): 518.

   * *note PyUnicode_EncodeUTF32(): 519.

   * *note PyUnicode_EncodeUTF16(): 51a.

   * ‘PyUnicode_EncodeUnicodeEscape:()’ use *note
     PyUnicode_AsUnicodeEscapeString(): 51b.

   * ‘PyUnicode_EncodeRawUnicodeEscape:()’ use *note
     PyUnicode_AsRawUnicodeEscapeString(): 51c.

   * *note PyUnicode_EncodeLatin1(): 51d.: use *note
     PyUnicode_AsLatin1String(): 51e.

   * *note PyUnicode_EncodeASCII(): 51f.: use *note
     PyUnicode_AsASCIIString(): 520.

   * *note PyUnicode_EncodeCharmap(): 521.

   * *note PyUnicode_TranslateCharmap(): 522.

   * *note PyUnicode_EncodeMBCS(): 523.: use *note
     PyUnicode_AsMBCSString(): 524. or *note PyUnicode_EncodeCodePage():
     525. (with ‘CP_ACP’ code_page)

   * ‘PyUnicode_EncodeDecimal()’, *note
     PyUnicode_TransformDecimalToASCII(): 526.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0393


File: python.info,  Node: Deprecated features,  Prev: Deprecated functions and types of the C API,  Up: Deprecated<2>

1.2.23.4 Deprecated features
............................

The *note array: 7. module’s ‘'u'’ format code is now deprecated and
will be removed in Python 4 together with the rest of the (*note
Py_UNICODE: 505.) API.


File: python.info,  Node: Porting to Python 3 3,  Prev: Deprecated<2>,  Up: What's New In Python 3 3

1.2.24 Porting to Python 3.3
----------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code.

* Menu:

* Porting Python code:: 
* Porting C code:: 
* Building C extensions:: 
* Command Line Switch Changes:: 


File: python.info,  Node: Porting Python code,  Next: Porting C code,  Up: Porting to Python 3 3

1.2.24.1 Porting Python code
............................

   * Hash randomization is enabled by default.  Set the *note
     PYTHONHASHSEED: 3a0. environment variable to ‘0’ to disable hash
     randomization.  See also the *note object.__hash__(): 39f. method.

   * issue 12326(1): On Linux, sys.platform doesn’t contain the major
     version anymore.  It is now always ’linux’, instead of ’linux2’ or
     ’linux3’ depending on the Linux version used to build Python.
     Replace sys.platform == ’linux2’ with
     sys.platform.startswith(’linux’), or directly sys.platform ==
     ’linux’ if you don’t need to support older Python versions.

   * issue 13847(2), issue 14180(3): *note time: 104. and *note
     datetime: 2f.: *note OverflowError: 325. is now raised instead of
     *note ValueError: 321. if a timestamp is out of range.  *note
     OSError: 254. is now raised if C functions ‘gmtime()’ or
     ‘localtime()’ failed.

   * The default finders used by import now utilize a cache of what is
     contained within a specific directory.  If you create a Python
     source file or sourceless bytecode file, make sure to call *note
     importlib.invalidate_caches(): 390. to clear out the cache for the
     finders to notice the new file.

   * *note ImportError: 318. now uses the full name of the module that
     was attemped to be imported.  Doctests that check ImportErrors’
     message will need to be updated to use the full name of the module
     instead of just the tail of the name.

   * The `index' argument to *note __import__(): 383. now defaults to 0
     instead of -1 and no longer support negative values.  It was an
     oversight when PEP 328(4) was implemented that the default value
     remained -1.  If you need to continue to perform a relative import
     followed by an absolute import, then perform the relative import
     using an index of 1, followed by another import using an index of
     0.  It is preferred, though, that you use *note
     importlib.import_module(): 52a. rather than call *note
     __import__(): 383. directly.

   * *note __import__(): 383. no longer allows one to use an index value
     other than 0 for top-level modules.  E.g.  ‘__import__('sys',
     level=1)’ is now an error.

   * Because *note sys.meta_path: 392. and *note sys.path_hooks: 31d.
     now have finders on them by default, you will most likely want to
     use ‘list.insert()’ instead of ‘list.append()’ to add to those
     lists.

   * Because ‘None’ is now inserted into *note sys.path_importer_cache:
     31e, if you are clearing out entries in the dictionary of paths
     that do not have a finder, you will need to remove keys paired with
     values of ‘None’ `and' *note imp.NullImporter: 393. to be
     backwards-compatible.  This will lead to extra overhead on older
     versions of Python that re-insert ‘None’ into *note
     sys.path_importer_cache: 31e. where it repesents the use of
     implicit finders, but semantically it should not change anything.

   * *note importlib.abc.Finder: 38b. no longer specifies a
     ‘find_module()’ abstract method that must be implemented.  If you
     were relying on subclasses to implement that method, make sure to
     check for the method’s existence first.  You will probably want to
     check for ‘find_loader()’ first, though, in the case of working
     with *note path entry finders: 388.

   * *note pkgutil: c9. has been converted to use *note importlib: 99.
     internally.  This eliminates many edge cases where the old
     behaviour of the PEP 302 import emulation failed to match the
     behaviour of the real import system.  The import emulation itself
     is still present, but is now deprecated.  The *note
     pkgutil.iter_importers(): 52b. and *note pkgutil.walk_packages():
     52c. functions special case the standard import hooks so they are
     still supported even though they do not provide the non-standard
     ‘iter_modules()’ method.

   * A longstanding RFC-compliance bug (issue 1079(5)) in the parsing
     done by *note email.header.decode_header(): 3e4. has been fixed.
     Code that uses the standard idiom to convert encoded headers into
     unicode (‘str(make_header(decode_header(h))’) will see no change,
     but code that looks at the individual tuples returned by
     decode_header will see that whitespace that precedes or follows
     ‘ASCII’ sections is now included in the ‘ASCII’ section.  Code that
     builds headers using ‘make_header’ should also continue to work
     without change, since ‘make_header’ continues to add whitespace
     between ‘ASCII’ and non-‘ASCII’ sections if it is not already
     present in the input strings.

   * *note email.utils.formataddr(): 52d. now does the correct content
     transfer encoding when passed non-‘ASCII’ display names.  Any code
     that depended on the previous buggy behavior that preserved the
     non-‘ASCII’ unicode in the formatted output string will need to be
     changed (issue 1690608(6)).

   * *note poplib.POP3.quit(): 52e. may now raise protocol errors like
     all other ‘poplib’ methods.  Code that assumes ‘quit’ does not
     raise *note poplib.error_proto: 52f. errors may need to be changed
     if errors on ‘quit’ are encountered by a particular application
     (issue 11291(7)).

   * The ‘strict’ argument to *note email.parser.Parser: 530, deprecated
     since Python 2.4, has finally been removed.

   * The deprecated method ‘unittest.TestCase.assertSameElements’ has
     been removed.

   * The deprecated variable ‘time.accept2dyear’ has been removed.

   * The deprecated ‘Context._clamp’ attribute has been removed from the
     *note decimal: 34. module.  It was previously replaced by the
     public attribute ‘clamp’.  (See issue 8540(8).)

   * The undocumented internal helper class ‘SSLFakeFile’ has been
     removed from *note smtplib: e8, since its functionality has long
     been provided directly by *note socket.socket.makefile(): 531.

   * Passing a negative value to *note time.sleep(): 474. on Windows now
     raises an error instead of sleeping forever.  It has always raised
     an error on posix.

   * The ‘ast.__version__’ constant has been removed.  If you need to
     make decisions affected by the AST version, use *note
     sys.version_info: 532. to make the decision.

   * Code that used to work around the fact that the *note threading:
     103. module used factory functions by subclassing the private
     classes will need to change to subclass the now-public classes.

   * The undocumented debugging machinery in the threading module has
     been removed, simplifying the code.  This should have no effect on
     production code, but is mentioned here in case any application
     debug frameworks were interacting with it (issue 13550(9)).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue12326

   (2) https://bugs.python.org/issue13847

   (3) https://bugs.python.org/issue14180

   (4) https://www.python.org/dev/peps/pep-0328

   (5) https://bugs.python.org/issue1079

   (6) https://bugs.python.org/issue1690608

   (7) https://bugs.python.org/issue11291

   (8) https://bugs.python.org/issue8540

   (9) https://bugs.python.org/issue13550


File: python.info,  Node: Porting C code,  Next: Building C extensions,  Prev: Porting Python code,  Up: Porting to Python 3 3

1.2.24.2 Porting C code
.......................

   * In the course of changes to the buffer API the undocumented
     ‘smalltable’ member of the *note Py_buffer: 533. structure has been
     removed and the layout of the ‘PyMemoryViewObject’ has changed.

     All extensions relying on the relevant parts in ‘memoryobject.h’ or
     ‘object.h’ must be rebuilt.

   * Due to *note PEP 393: 349, the *note Py_UNICODE: 505. type and all
     functions using this type are deprecated (but will stay available
     for at least five years).  If you were using low-level Unicode APIs
     to construct and access unicode objects and you want to benefit of
     the memory footprint reduction provided by PEP 393, you have to
     convert your code to the new *note Unicode API: 534.

     However, if you only have been using high-level functions such as
     *note PyUnicode_Concat(): 535, *note PyUnicode_Join(): 536. or
     *note PyUnicode_FromFormat(): 2cd, your code will automatically
     take advantage of the new unicode representations.

   * *note PyImport_GetMagicNumber(): 537. now returns -1 upon failure.

   * As a negative value for the `level' argument to *note __import__():
     383. is no longer valid, the same now holds for *note
     PyImport_ImportModuleLevel(): 538.  This also means that the value
     of `level' used by *note PyImport_ImportModuleEx(): 539. is now 0
     instead of -1.


File: python.info,  Node: Building C extensions,  Next: Command Line Switch Changes,  Prev: Porting C code,  Up: Porting to Python 3 3

1.2.24.3 Building C extensions
..............................

   * The range of possible file names for C extensions has been
     narrowed.  Very rarely used spellings have been suppressed: under
     POSIX, files named ‘xxxmodule.so’, ‘xxxmodule.abi3.so’ and
     ‘xxxmodule.cpython-*.so’ are no longer recognized as implementing
     the ‘xxx’ module.  If you had been generating such files, you have
     to switch to the other spellings (i.e., remove the ‘module’ string
     from the file names).

     (implemented in issue 14040(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue14040


File: python.info,  Node: Command Line Switch Changes,  Prev: Building C extensions,  Up: Porting to Python 3 3

1.2.24.4 Command Line Switch Changes
....................................

   * The -Q command-line flag and related artifacts have been removed.
     Code checking sys.flags.division_warning will need updating.

     (issue 10998(1), contributed by Éric Araujo.)

   * When ‘python’ is started with *note -S: 53c, ‘import site’ will no
     longer add site-specific paths to the module search paths.  In
     previous versions, it did.

     (issue 11591(2), contributed by Carl Meyer with editions by Éric
     Araujo.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10998

   (2) https://bugs.python.org/issue11591


File: python.info,  Node: What's New In Python 3 2,  Next: What's New In Python 3 1,  Prev: What's New In Python 3 3,  Up: What's New in Python

1.3 What’s New In Python 3.2
============================


Author: Raymond Hettinger

This article explains the new features in Python 3.2 as compared to 3.1.
It focuses on a few highlights and gives a few examples.  For full
details, see the Misc/NEWS(1) file.

See also
........

PEP 392(2) - Python 3.2 Release Schedule

* Menu:

* PEP 384; Defining a Stable ABI: PEP 384 Defining a Stable ABI. 
* PEP 389; Argparse Command Line Parsing Module: PEP 389 Argparse Command Line Parsing Module. 
* PEP 391; Dictionary Based Configuration for Logging: PEP 391 Dictionary Based Configuration for Logging. 
* PEP 3148; The concurrent.futures module: PEP 3148 The concurrent futures module. 
* PEP 3147; PYC Repository Directories: PEP 3147 PYC Repository Directories. 
* PEP 3149; ABI Version Tagged .so Files: PEP 3149 ABI Version Tagged so Files. 
* PEP 3333; Python Web Server Gateway Interface v1.0.1: PEP 3333 Python Web Server Gateway Interface v1 0 1. 
* Other Language Changes: Other Language Changes<3>. 
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules. 
* Multi-threading:: 
* Optimizations: Optimizations<2>. 
* Unicode:: 
* Codecs:: 
* Documentation:: 
* IDLE:: 
* Code Repository:: 
* Build and C API Changes: Build and C API Changes<2>. 
* Porting to Python 3.2: Porting to Python 3 2. 

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/3.2/Misc/NEWS

   (2) https://www.python.org/dev/peps/pep-0392


File: python.info,  Node: PEP 384 Defining a Stable ABI,  Next: PEP 389 Argparse Command Line Parsing Module,  Up: What's New In Python 3 2

1.3.1 PEP 384: Defining a Stable ABI
------------------------------------

In the past, extension modules built for one Python version were often
not usable with other Python versions.  Particularly on Windows, every
feature release of Python required rebuilding all extension modules that
one wanted to use.  This requirement was the result of the free access
to Python interpreter internals that extension modules could use.

With Python 3.2, an alternative approach becomes available: extension
modules which restrict themselves to a limited API (by defining
Py_LIMITED_API) cannot use many of the internals, but are constrained to
a set of API functions that are promised to be stable for several
releases.  As a consequence, extension modules built for 3.2 in that
mode will also work with 3.3, 3.4, and so on.  Extension modules that
make use of details of memory structures can still be built, but will
need to be recompiled for every feature release.

See also
........

PEP 384(1) - Defining a Stable ABI

     PEP written by Martin von Löwis.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0384


File: python.info,  Node: PEP 389 Argparse Command Line Parsing Module,  Next: PEP 391 Dictionary Based Configuration for Logging,  Prev: PEP 384 Defining a Stable ABI,  Up: What's New In Python 3 2

1.3.2 PEP 389: Argparse Command Line Parsing Module
---------------------------------------------------

A new module for command line parsing, *note argparse: 6, was introduced
to overcome the limitations of *note optparse: bf. which did not provide
support for positional arguments (not just options), subcommands,
required options and other common patterns of specifying and validating
options.

This module has already had widespread success in the community as a
third-party module.  Being more fully featured than its predecessor, the
*note argparse: 6. module is now the preferred module for command-line
processing.  The older module is still being kept available because of
the substantial amount of legacy code that depends on it.

Here’s an annotated example parser showing features like limiting
results to a set of choices, specifying a `metavar' in the help screen,
validating that one or more positional arguments is present, and making
a required option:

     import argparse
     parser = argparse.ArgumentParser(
                 description = 'Manage servers',         # main description for help
                 epilog = 'Tested on Solaris and Linux') # displayed after help
     parser.add_argument('action',                       # argument name
                 choices = ['deploy', 'start', 'stop'],  # three allowed values
                 help = 'action on each target')         # help msg
     parser.add_argument('targets',
                 metavar = 'HOSTNAME',                   # var name used in help msg
                 nargs = '+',                            # require one or more targets
                 help = 'url for target machines')       # help msg explanation
     parser.add_argument('-u', '--user',                 # -u or --user option
                 required = True,                        # make it a required argument
                 help = 'login as user')

Example of calling the parser on a command string:

     >>> cmd  = 'deploy sneezy.example.com sleepy.example.com -u skycaptain'
     >>> result = parser.parse_args(cmd.split())
     >>> result.action
     'deploy'
     >>> result.targets
     ['sneezy.example.com', 'sleepy.example.com']
     >>> result.user
     'skycaptain'

Example of the parser’s automatically generated help:

     >>> parser.parse_args('-h'.split())

     usage: manage_cloud.py [-h] -u USER
                            {deploy,start,stop} HOSTNAME [HOSTNAME ...]

     Manage servers

     positional arguments:
       {deploy,start,stop}   action on each target
       HOSTNAME              url for target machines

     optional arguments:
       -h, --help            show this help message and exit
       -u USER, --user USER  login as user

     Tested on Solaris and Linux

An especially nice *note argparse: 6. feature is the ability to define
subparsers, each with their own argument patterns and help displays:

     import argparse
     parser = argparse.ArgumentParser(prog='HELM')
     subparsers = parser.add_subparsers()

     parser_l = subparsers.add_parser('launch', help='Launch Control')   # first subgroup
     parser_l.add_argument('-m', '--missiles', action='store_true')
     parser_l.add_argument('-t', '--torpedos', action='store_true')

     parser_m = subparsers.add_parser('move', help='Move Vessel',        # second subgroup
                                      aliases=('steer', 'turn'))         # equivalent names
     parser_m.add_argument('-c', '--course', type=int, required=True)
     parser_m.add_argument('-s', '--speed', type=int, default=0)

     $ ./helm.py --help                         # top level help (launch and move)
     $ ./helm.py launch --help                  # help for launch options
     $ ./helm.py launch --missiles              # set missiles=True and torpedos=False
     $ ./helm.py steer --course 180 --speed 5   # set movement parameters

See also
........

PEP 389(1) - New Command Line Parsing Module

     PEP written by Steven Bethard.

*note Upgrading optparse code: 541. for details on the differences from
*note optparse: bf.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0389


File: python.info,  Node: PEP 391 Dictionary Based Configuration for Logging,  Next: PEP 3148 The concurrent futures module,  Prev: PEP 389 Argparse Command Line Parsing Module,  Up: What's New In Python 3 2

1.3.3 PEP 391: Dictionary Based Configuration for Logging
---------------------------------------------------------

The *note logging: a6. module provided two kinds of configuration, one
style with function calls for each option or another style driven by an
external file saved in a ‘ConfigParser’ format.  Those options did not
provide the flexibility to create configurations from JSON or YAML
files, nor did they support incremental configuration, which is needed
for specifying logger options from a command line.

To support a more flexible style, the module now offers *note
logging.config.dictConfig(): 543. for specifying logging configuration
with plain Python dictionaries.  The configuration options include
formatters, handlers, filters, and loggers.  Here’s a working example of
a configuration dictionary:

     {"version": 1,
      "formatters": {"brief": {"format": "%(levelname)-8s: %(name)-15s: %(message)s"},
                     "full": {"format": "%(asctime)s %(name)-15s %(levelname)-8s %(message)s"}
                     },
      "handlers": {"console": {
                        "class": "logging.StreamHandler",
                        "formatter": "brief",
                        "level": "INFO",
                        "stream": "ext://sys.stdout"},
                   "console_priority": {
                        "class": "logging.StreamHandler",
                        "formatter": "full",
                        "level": "ERROR",
                        "stream": "ext://sys.stderr"}
                   },
      "root": {"level": "DEBUG", "handlers": ["console", "console_priority"]}}

If that dictionary is stored in a file called ‘conf.json’, it can be
loaded and called with code like this:

     >>> import json, logging.config
     >>> with open('conf.json') as f:
             conf = json.load(f)
     >>> logging.config.dictConfig(conf)
     >>> logging.info("Transaction completed normally")
     INFO    : root           : Transaction completed normally
     >>> logging.critical("Abnormal termination")
     2011-02-17 11:14:36,694 root            CRITICAL Abnormal termination

See also
........

PEP 391(1) - Dictionary Based Configuration for Logging

     PEP written by Vinay Sajip.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0391


File: python.info,  Node: PEP 3148 The concurrent futures module,  Next: PEP 3147 PYC Repository Directories,  Prev: PEP 391 Dictionary Based Configuration for Logging,  Up: What's New In Python 3 2

1.3.4 PEP 3148: The ‘concurrent.futures’ module
-----------------------------------------------

Code for creating and managing concurrency is being collected in a new
top-level namespace, `concurrent'.  Its first member is a `futures'
package which provides a uniform high-level interface for managing
threads and processes.

The design for *note concurrent.futures: 22. was inspired by the
`java.util.concurrent' package.  In that model, a running call and its
result are represented by a *note Future: 545. object that abstracts
features common to threads, processes, and remote procedure calls.  That
object supports status checks (running or done), timeouts,
cancellations, adding callbacks, and access to results or exceptions.

The primary offering of the new module is a pair of executor classes for
launching and managing calls.  The goal of the executors is to make it
easier to use existing tools for making parallel calls.  They save the
effort needed to setup a pool of resources, launch the calls, create a
results queue, add time-out handling, and limit the total number of
threads, processes, or remote procedure calls.

Ideally, each application should share a single executor across multiple
components so that process and thread limits can be centrally managed.
This solves the design challenge that arises when each component has its
own competing strategy for resource management.

Both classes share a common interface with three methods: *note
submit(): 546. for scheduling a callable and returning a *note Future:
545. object; *note map(): 547. for scheduling many asynchronous calls at
a time, and *note shutdown(): 548. for freeing resources.  The class is
a *note context manager: 549. and can be used in a *note with: 19b.
statement to assure that resources are automatically released when
currently pending futures are done executing.

A simple of example of *note ThreadPoolExecutor: 54a. is a launch of
four parallel threads for copying files:

     import concurrent.futures, shutil
     with concurrent.futures.ThreadPoolExecutor(max_workers=4) as e:
         e.submit(shutil.copy, 'src1.txt', 'dest1.txt')
         e.submit(shutil.copy, 'src2.txt', 'dest2.txt')
         e.submit(shutil.copy, 'src3.txt', 'dest3.txt')
         e.submit(shutil.copy, 'src3.txt', 'dest4.txt')

See also
........

PEP 3148(1) - Futures – Execute Computations Asynchronously

     PEP written by Brian Quinlan.

*note Code for Threaded Parallel URL reads: 54b, an example using
threads to fetch multiple web pages in parallel.

*note Code for computing prime numbers in parallel: 54c, an example
demonstrating *note ProcessPoolExecutor: 54d.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3148


File: python.info,  Node: PEP 3147 PYC Repository Directories,  Next: PEP 3149 ABI Version Tagged so Files,  Prev: PEP 3148 The concurrent futures module,  Up: What's New In Python 3 2

1.3.5 PEP 3147: PYC Repository Directories
------------------------------------------

Python’s scheme for caching bytecode in `.pyc' files did not work well
in environments with multiple Python interpreters.  If one interpreter
encountered a cached file created by another interpreter, it would
recompile the source and overwrite the cached file, thus losing the
benefits of caching.

The issue of "pyc fights" has become more pronounced as it has become
commonplace for Linux distributions to ship with multiple versions of
Python.  These conflicts also arise with CPython alternatives such as
Unladen Swallow.

To solve this problem, Python’s import machinery has been extended to
use distinct filenames for each interpreter.  Instead of Python 3.2 and
Python 3.3 and Unladen Swallow each competing for a file called
"mymodule.pyc", they will now look for "mymodule.cpython-32.pyc",
"mymodule.cpython-33.pyc", and "mymodule.unladen10.pyc".  And to prevent
all of these new files from cluttering source directories, the `pyc'
files are now collected in a "__pycache__" directory stored under the
package directory.

Aside from the filenames and target directories, the new scheme has a
few aspects that are visible to the programmer:

   * Imported modules now have a *note __cached__: 54f. attribute which
     stores the name of the actual file that was imported:

          >>> import collections
          >>> collections.__cached__
          'c:/py32/lib/__pycache__/collections.cpython-32.pyc'

   * The tag that is unique to each interpreter is accessible from the
     *note imp: 98. module:

          >>> import imp
          >>> imp.get_tag()
          'cpython-32'

   * Scripts that try to deduce source filename from the imported file
     now need to be smarter.  It is no longer sufficient to simply strip
     the "c" from a ".pyc" filename.  Instead, use the new functions in
     the *note imp: 98. module:

          >>> imp.source_from_cache('c:/py32/lib/__pycache__/collections.cpython-32.pyc')
          'c:/py32/lib/collections.py'
          >>> imp.cache_from_source('c:/py32/lib/collections.py')
          'c:/py32/lib/__pycache__/collections.cpython-32.pyc'

   * The *note py_compile: d3. and *note compileall: 21. modules have
     been updated to reflect the new naming convention and target
     directory.  The command-line invocation of `compileall' has new
     options: ‘-i’ for specifying a list of files and directories to
     compile and ‘-b’ which causes bytecode files to be written to their
     legacy location rather than `__pycache__'.

   * The *note importlib.abc: 9a. module has been updated with new *note
     abstract base classes: 550. for loading bytecode files.  The
     obsolete ABCs, ‘PyLoader’ and ‘PyPycLoader’, have been deprecated
     (instructions on how to stay Python 3.1 compatible are included
     with the documentation).

See also
........

PEP 3147(1) - PYC Repository Directories

     PEP written by Barry Warsaw.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3147


File: python.info,  Node: PEP 3149 ABI Version Tagged so Files,  Next: PEP 3333 Python Web Server Gateway Interface v1 0 1,  Prev: PEP 3147 PYC Repository Directories,  Up: What's New In Python 3 2

1.3.6 PEP 3149: ABI Version Tagged .so Files
--------------------------------------------

The PYC repository directory allows multiple bytecode cache files to be
co-located.  This PEP implements a similar mechanism for shared object
files by giving them a common directory and distinct names for each
version.

The common directory is "pyshared" and the file names are made distinct
by identifying the Python implementation (such as CPython, PyPy, Jython,
etc.), the major and minor version numbers, and optional build flags
(such as "d" for debug, "m" for pymalloc, "u" for wide-unicode).  For an
arbitrary package "foo", you may see these files when the distribution
package is installed:

     /usr/share/pyshared/foo.cpython-32m.so
     /usr/share/pyshared/foo.cpython-33md.so

In Python itself, the tags are accessible from functions in the *note
sysconfig: f9. module:

     >>> import sysconfig
     >>> sysconfig.get_config_var('SOABI')       # find the version tag
     'cpython-32mu'
     >>> sysconfig.get_config_var('EXT_SUFFIX')  # find the full filename extension
     '.cpython-32mu.so'

See also
........

PEP 3149(1) - ABI Version Tagged .so Files

     PEP written by Barry Warsaw.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3149


File: python.info,  Node: PEP 3333 Python Web Server Gateway Interface v1 0 1,  Next: Other Language Changes<3>,  Prev: PEP 3149 ABI Version Tagged so Files,  Up: What's New In Python 3 2

1.3.7 PEP 3333: Python Web Server Gateway Interface v1.0.1
----------------------------------------------------------

This informational PEP clarifies how bytes/text issues are to be handled
by the WSGI protocol.  The challenge is that string handling in Python 3
is most conveniently handled with the *note str: 178. type even though
the HTTP protocol is itself bytes oriented.

The PEP differentiates so-called `native strings' that are used for
request/response headers and metadata versus `byte strings' which are
used for the bodies of requests and responses.

The `native strings' are always of type *note str: 178. but are
restricted to code points between `U+0000' through `U+00FF' which are
translatable to bytes using `Latin-1' encoding.  These strings are used
for the keys and values in the environment dictionary and for response
headers and statuses in the ‘start_response()’ function.  They must
follow RFC 2616(1) with respect to encoding.  That is, they must either
be `ISO-8859-1' characters or use RFC 2047(2) MIME encoding.

For developers porting WSGI applications from Python 2, here are the
salient points:

   * If the app already used strings for headers in Python 2, no change
     is needed.

   * If instead, the app encoded output headers or decoded input
     headers, then the headers will need to be re-encoded to Latin-1.
     For example, an output header encoded in utf-8 was using
     ‘h.encode('utf-8')’ now needs to convert from bytes to native
     strings using ‘h.encode('utf-8').decode('latin-1')’.

   * Values yielded by an application or sent using the ‘write()’ method
     must be byte strings.  The ‘start_response()’ function and environ
     must use native strings.  The two cannot be mixed.

For server implementers writing CGI-to-WSGI pathways or other CGI-style
protocols, the users must to be able access the environment using native
strings even though the underlying platform may have a different
convention.  To bridge this gap, the *note wsgiref: 125. module has a
new function, *note wsgiref.handlers.read_environ(): 553. for
transcoding CGI variables from *note os.environ: 554. into native
strings and returning a new dictionary.

See also
........

PEP 3333(3) - Python Web Server Gateway Interface v1.0.1

     PEP written by Phillip Eby.

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc2616.html

   (2) https://tools.ietf.org/html/rfc2047.html

   (3) https://www.python.org/dev/peps/pep-3333


File: python.info,  Node: Other Language Changes<3>,  Next: New Improved and Deprecated Modules,  Prev: PEP 3333 Python Web Server Gateway Interface v1 0 1,  Up: What's New In Python 3 2

1.3.8 Other Language Changes
----------------------------

Some smaller changes made to the core Python language are:

   * String formatting for *note format(): 556. and *note str.format():
     557. gained new capabilities for the format character `#'.
     Previously, for integers in binary, octal, or hexadecimal, it
     caused the output to be prefixed with ’0b’, ’0o’, or ’0x’
     respectively.  Now it can also handle floats, complex, and Decimal,
     causing the output to always have a decimal point even when no
     digits follow it.

          >>> format(20, '#o')
          '0o24'
          >>> format(12.34, '#5.0f')
          '  12.'

     (Suggested by Mark Dickinson and implemented by Eric Smith in issue
     7094(1).)

   * There is also a new *note str.format_map(): 558. method that
     extends the capabilities of the existing *note str.format(): 557.
     method by accepting arbitrary *note mapping: 559. objects.  This
     new method makes it possible to use string formatting with any of
     Python’s many dictionary-like objects such as *note defaultdict:
     55a, *note Shelf: 249, *note ConfigParser: 55b, or *note dbm: 30.
     It is also useful with custom *note dict: 380. subclasses that
     normalize keys before look-up or that supply a *note __missing__():
     55c. method for unknown keys:

          >>> import shelve
          >>> d = shelve.open('tmp.shl')
          >>> 'The {project_name} status is {status} as of {date}'.format_map(d)
          'The testing project status is green as of February 15, 2011'

          >>> class LowerCasedDict(dict):
                  def __getitem__(self, key):
                      return dict.__getitem__(self, key.lower())
          >>> lcd = LowerCasedDict(part='widgets', quantity=10)
          >>> 'There are {QUANTITY} {Part} in stock'.format_map(lcd)
          'There are 10 widgets in stock'

          >>> class PlaceholderDict(dict):
                  def __missing__(self, key):
                      return '<{}>'.format(key)
          >>> 'Hello {name}, welcome to {location}'.format_map(PlaceholderDict())
          'Hello <name>, welcome to <location>'

     (Suggested by Raymond Hettinger and implemented by Eric Smith in
     issue 6081(2).)

   * The interpreter can now be started with a quiet option, ‘-q’, to
     prevent the copyright and version information from being displayed
     in the interactive mode.  The option can be introspected using the
     *note sys.flags: 55d. attribute:

          $ python -q
          >>> sys.flags
          sys.flags(debug=0, division_warning=0, inspect=0, interactive=0,
          optimize=0, dont_write_bytecode=0, no_user_site=0, no_site=0,
          ignore_environment=0, verbose=0, bytes_warning=0, quiet=1)

     (Contributed by Marcin Wojdyr in issue 1772833(3)).

   * The *note hasattr(): 55e. function works by calling *note
     getattr(): 55f. and detecting whether an exception is raised.  This
     technique allows it to detect methods created dynamically by *note
     __getattr__(): 560. or *note __getattribute__(): 561. which would
     otherwise be absent from the class dictionary.  Formerly, `hasattr'
     would catch any exception, possibly masking genuine errors.  Now,
     `hasattr' has been tightened to only catch *note AttributeError:
     320. and let other exceptions pass through:

          >>> class A:
                  @property
                  def f(self):
                      return 1 // 0

          >>> a = A()
          >>> hasattr(a, 'f')
          Traceback (most recent call last):
            ...
          ZeroDivisionError: integer division or modulo by zero

     (Discovered by Yury Selivanov and fixed by Benjamin Peterson; issue
     9666(4).)

   * The *note str(): 178. of a float or complex number is now the same
     as its *note repr(): 3db.  Previously, the *note str(): 178. form
     was shorter but that just caused confusion and is no longer needed
     now that the shortest possible *note repr(): 3db. is displayed by
     default:

          >>> import math
          >>> repr(math.pi)
          '3.141592653589793'
          >>> str(math.pi)
          '3.141592653589793'

     (Proposed and implemented by Mark Dickinson; issue 9337(5).)

   * *note memoryview: 187. objects now have a *note release(): 562.
     method and they also now support the context management protocol.
     This allows timely release of any resources that were acquired when
     requesting a buffer from the original object.

          >>> with memoryview(b'abcdefgh') as v:
                  print(v.tolist())
          [97, 98, 99, 100, 101, 102, 103, 104]

     (Added by Antoine Pitrou; issue 9757(6).)

   * Previously it was illegal to delete a name from the local namespace
     if it occurs as a free variable in a nested block:

          def outer(x):
              def inner():
                 return x
              inner()
              del x

     This is now allowed.  Remember that the target of an *note except:
     563. clause is cleared, so this code which used to work with Python
     2.6, raised a *note SyntaxError: 319. with Python 3.1 and now works
     again:

          def f():
              def print_error():
                 print(e)
              try:
                 something
              except Exception as e:
                 print_error()
                 # implicit "del e" here

     (See issue 4617(7).)

   * The internal ‘structsequence’ tool now creates subclasses of tuple.
     This means that C structures like those returned by *note
     os.stat(): 1ce, *note time.gmtime(): 564, and *note
     sys.version_info: 532. now work like a *note named tuple: 565. and
     now work with functions and methods that expect a tuple as an
     argument.  This is a big step forward in making the C structures as
     flexible as their pure Python counterparts:

          >>> isinstance(sys.version_info, tuple)
          True
          >>> 'Version %d.%d.%d %s(%d)' % sys.version_info
          'Version 3.2.0 final(0)'

     (Suggested by Arfrever Frehtes Taifersar Arahesis and implemented
     by Benjamin Peterson in issue 8413(8).)

   * Warnings are now easier to control using the *note PYTHONWARNINGS:
     566. environment variable as an alternative to using ‘-W’ at the
     command line:

          $ export PYTHONWARNINGS='ignore::RuntimeWarning::,once::UnicodeWarning::'

     (Suggested by Barry Warsaw and implemented by Philip Jenvey in
     issue 7301(9).)

   * A new warning category, *note ResourceWarning: 567, has been added.
     It is emitted when potential issues with resource consumption or
     cleanup are detected.  It is silenced by default in normal release
     builds but can be enabled through the means provided by the *note
     warnings: 11f. module, or on the command line.

     A *note ResourceWarning: 567. is issued at interpreter shutdown if
     the *note gc.garbage: 568. list isn’t empty, and if *note
     gc.DEBUG_UNCOLLECTABLE: 569. is set, all uncollectable objects are
     printed.  This is meant to make the programmer aware that their
     code contains object finalization issues.

     A *note ResourceWarning: 567. is also issued when a *note file
     object: 56a. is destroyed without having been explicitly closed.
     While the deallocator for such object ensures it closes the
     underlying operating system resource (usually, a file descriptor),
     the delay in deallocating the object could produce various issues,
     especially under Windows.  Here is an example of enabling the
     warning from the command line:

          $ python -q -Wdefault
          >>> f = open("foo", "wb")
          >>> del f
          __main__:1: ResourceWarning: unclosed file <_io.BufferedWriter name='foo'>

     (Added by Antoine Pitrou and Georg Brandl in issue 10093(10) and
     issue 477863(11).)

   * *note range: 396. objects now support `index' and `count' methods.
     This is part of an effort to make more objects fully implement the
     ‘collections.Sequence’ *note abstract base class: 550.  As a
     result, the language will have a more uniform API. In addition,
     *note range: 396. objects now support slicing and negative indices,
     even with values larger than *note sys.maxsize: 56b.  This makes
     `range' more interoperable with lists:

          >>> range(0, 100, 2).count(10)
          1
          >>> range(0, 100, 2).index(10)
          5
          >>> range(0, 100, 2)[5]
          10
          >>> range(0, 100, 2)[0:5]
          range(0, 10, 2)

     (Contributed by Daniel Stutzbach in issue 9213(12), by Alexander
     Belopolsky in issue 2690(13), and by Nick Coghlan in issue
     10889(14).)

   * The *note callable(): 56c. builtin function from Py2.x was
     resurrected.  It provides a concise, readable alternative to using
     an *note abstract base class: 550. in an expression like
     ‘isinstance(x, collections.Callable)’:

          >>> callable(max)
          True
          >>> callable(20)
          False

     (See issue 10518(15).)

   * Python’s import mechanism can now load modules installed in
     directories with non-ASCII characters in the path name.  This
     solved an aggravating problem with home directories for users with
     non-ASCII characters in their usernames.

     (Required extensive work by Victor Stinner in issue 9425(16).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7094

   (2) https://bugs.python.org/issue6081

   (3) https://bugs.python.org/issue1772833

   (4) https://bugs.python.org/issue9666

   (5) https://bugs.python.org/issue9337

   (6) https://bugs.python.org/issue9757

   (7) https://bugs.python.org/issue4617

   (8) https://bugs.python.org/issue8413

   (9) https://bugs.python.org/issue7301

   (10) https://bugs.python.org/issue10093

   (11) https://bugs.python.org/issue477863

   (12) https://bugs.python.org/issue9213

   (13) https://bugs.python.org/issue2690

   (14) https://bugs.python.org/issue10889

   (15) https://bugs.python.org/issue10518

   (16) https://bugs.python.org/issue9425


File: python.info,  Node: New Improved and Deprecated Modules,  Next: Multi-threading,  Prev: Other Language Changes<3>,  Up: What's New In Python 3 2

1.3.9 New, Improved, and Deprecated Modules
-------------------------------------------

Python’s standard library has undergone significant maintenance efforts
and quality improvements.

The biggest news for Python 3.2 is that the *note email: 67. package,
*note mailbox: ab. module, and *note nntplib: bc. modules now work
correctly with the bytes/text model in Python 3.  For the first time,
there is correct handling of messages with mixed encodings.

Throughout the standard library, there has been more careful attention
to encodings and text versus bytes issues.  In particular, interactions
with the operating system are now better able to exchange non-ASCII data
using the Windows MBCS encoding, locale-aware encodings, or UTF-8.

Another significant win is the addition of substantially better support
for `SSL' connections and security certificates.

In addition, more classes now implement a *note context manager: 549. to
support convenient and reliable resource clean-up using a *note with:
19b. statement.

* Menu:

* email: email<3>. 
* elementtree:: 
* functools: functools<3>. 
* itertools: itertools<2>. 
* collections: collections<3>. 
* threading: threading<3>. 
* datetime and time:: 
* math: math<2>. 
* abc: abc<3>. 
* io: io<2>. 
* reprlib:: 
* logging: logging<3>. 
* csv:: 
* contextlib: contextlib<3>. 
* decimal and fractions:: 
* ftp:: 
* popen:: 
* select: select<3>. 
* gzip and zipfile:: 
* tarfile: tarfile<3>. 
* hashlib: hashlib<2>. 
* ast:: 
* os: os<3>. 
* shutil: shutil<3>. 
* sqlite3: sqlite3<3>. 
* html: html<3>. 
* socket: socket<3>. 
* ssl: ssl<3>. 
* nntp:: 
* certificates:: 
* imaplib: imaplib<2>. 
* http.client: http client. 
* unittest: unittest<3>. 
* random:: 
* poplib: poplib<2>. 
* asyncore:: 
* tempfile: tempfile<2>. 
* inspect: inspect<3>. 
* pydoc: pydoc<3>. 
* dis: dis<2>. 
* dbm: dbm<2>. 
* ctypes:: 
* site:: 
* sysconfig:: 
* pdb: pdb<3>. 
* configparser:: 
* urllib.parse: urllib parse. 
* mailbox:: 
* turtledemo:: 


File: python.info,  Node: email<3>,  Next: elementtree,  Up: New Improved and Deprecated Modules

1.3.9.1 email
.............

The usability of the *note email: 67. package in Python 3 has been
mostly fixed by the extensive efforts of R. David Murray.  The problem
was that emails are typically read and stored in the form of *note
bytes: 179. rather than *note str: 178. text, and they may contain
multiple encodings within a single email.  So, the email package had to
be extended to parse and generate email messages in bytes format.

   * New functions *note message_from_bytes(): 56f. and *note
     message_from_binary_file(): 570, and new classes *note
     BytesFeedParser: 571. and *note BytesParser: 572. allow binary
     message data to be parsed into model objects.

   * Given bytes input to the model, *note get_payload(): 573. will by
     default decode a message body that has a
     ‘Content-Transfer-Encoding’ of `8bit' using the charset specified
     in the MIME headers and return the resulting string.

   * Given bytes input to the model, *note Generator: 574. will convert
     message bodies that have a ‘Content-Transfer-Encoding’ of `8bit' to
     instead have a `7bit' ‘Content-Transfer-Encoding’.

     Headers with unencoded non-ASCII bytes are deemed to be RFC
     2047(1)-encoded using the `unknown-8bit' character set.

   * A new class *note BytesGenerator: 575. produces bytes as output,
     preserving any unchanged non-ASCII data that was present in the
     input used to build the model, including message bodies with a
     ‘Content-Transfer-Encoding’ of `8bit'.

   * The *note smtplib: e8. *note SMTP: 48c. class now accepts a byte
     string for the `msg' argument to the *note sendmail(): 576. method,
     and a new method, *note send_message(): 577. accepts a *note
     Message: 155. object and can optionally obtain the `from_addr' and
     `to_addrs' addresses directly from the object.

(Proposed and implemented by R. David Murray, issue 4661(2) and issue
10321(3).)

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc2047.html

   (2) https://bugs.python.org/issue4661

   (3) https://bugs.python.org/issue10321


File: python.info,  Node: elementtree,  Next: functools<3>,  Prev: email<3>,  Up: New Improved and Deprecated Modules

1.3.9.2 elementtree
...................

The *note xml.etree.ElementTree: 130. package and its
‘xml.etree.cElementTree’ counterpart have been updated to version 1.3.

Several new and useful functions and methods have been added:

   * *note xml.etree.ElementTree.fromstringlist(): 579. which builds an
     XML document from a sequence of fragments

   * *note xml.etree.ElementTree.register_namespace(): 57a. for
     registering a global namespace prefix

   * *note xml.etree.ElementTree.tostringlist(): 2b9. for string
     representation including all sublists

   * *note xml.etree.ElementTree.Element.extend(): 57b. for appending a
     sequence of zero or more elements

   * *note xml.etree.ElementTree.Element.iterfind(): 57c. searches an
     element and subelements

   * *note xml.etree.ElementTree.Element.itertext(): 57d. creates a text
     iterator over an element and its subelements

   * *note xml.etree.ElementTree.TreeBuilder.end(): 57e. closes the
     current element

   * *note xml.etree.ElementTree.TreeBuilder.doctype(): 57f. handles a
     doctype declaration

Two methods have been deprecated:

   * ‘xml.etree.ElementTree.getchildren()’ use ‘list(elem)’ instead.

   * ‘xml.etree.ElementTree.getiterator()’ use ‘Element.iter’ instead.

For details of the update, see Introducing ElementTree(1) on Fredrik
Lundh’s website.

(Contributed by Florent Xicluna and Fredrik Lundh, issue 6472(2).)

   ---------- Footnotes ----------

   (1) http://effbot.org/zone/elementtree-13-intro.htm

   (2) https://bugs.python.org/issue6472


File: python.info,  Node: functools<3>,  Next: itertools<2>,  Prev: elementtree,  Up: New Improved and Deprecated Modules

1.3.9.3 functools
.................

   * The *note functools: 84. module includes a new decorator for
     caching function calls.  *note functools.lru_cache(): 3f3. can save
     repeated queries to an external resource whenever the results are
     expected to be the same.

     For example, adding a caching decorator to a database query
     function can save database accesses for popular searches:

          >>> import functools
          >>> @functools.lru_cache(maxsize=300)
          >>> def get_phone_number(name):
                  c = conn.cursor()
                  c.execute('SELECT phonenumber FROM phonelist WHERE name=?', (name,))
                  return c.fetchone()[0]

          >>> for name in user_requests:
                  get_phone_number(name)        # cached lookup

     To help with choosing an effective cache size, the wrapped function
     is instrumented for tracking cache statistics:

          >>> get_phone_number.cache_info()
          CacheInfo(hits=4805, misses=980, maxsize=300, currsize=300)

     If the phonelist table gets updated, the outdated contents of the
     cache can be cleared with:

          >>> get_phone_number.cache_clear()

     (Contributed by Raymond Hettinger and incorporating design ideas
     from Jim Baker, Miki Tebeka, and Nick Coghlan; see recipe
     498245(1), recipe 577479(2), issue 10586(3), and issue 10593(4).)

   * The *note functools.wraps(): 1f9. decorator now adds a
     ‘__wrapped__’ attribute pointing to the original callable function.
     This allows wrapped functions to be introspected.  It also copies
     ‘__annotations__’ if defined.  And now it also gracefully skips
     over missing attributes such as ‘__doc__’ which might not be
     defined for the wrapped callable.

     In the above example, the cache can be removed by recovering the
     original function:

          >>> get_phone_number = get_phone_number.__wrapped__    # uncached function

     (By Nick Coghlan and Terrence Cole; issue 9567(5), issue 3445(6),
     and issue 8814(7).)

   * To help write classes with rich comparison methods, a new decorator
     *note functools.total_ordering(): 1d5. will use a existing equality
     and inequality methods to fill in the remaining methods.

     For example, supplying `__eq__' and `__lt__' will enable *note
     total_ordering(): 1d5. to fill-in `__le__', `__gt__' and `__ge__':

          @total_ordering
          class Student:
              def __eq__(self, other):
                  return ((self.lastname.lower(), self.firstname.lower()) ==
                          (other.lastname.lower(), other.firstname.lower()))
              def __lt__(self, other):
                  return ((self.lastname.lower(), self.firstname.lower()) <
                          (other.lastname.lower(), other.firstname.lower()))

     With the `total_ordering' decorator, the remaining comparison
     methods are filled in automatically.

     (Contributed by Raymond Hettinger.)

   * To aid in porting programs from Python 2, the *note
     functools.cmp_to_key(): 581. function converts an old-style
     comparison function to modern *note key function: 582.:

          >>> # locale-aware sort order
          >>> sorted(iterable, key=cmp_to_key(locale.strcoll))

     For sorting examples and a brief sorting tutorial, see the Sorting
     HowTo(8) tutorial.

     (Contributed by Raymond Hettinger.)

   ---------- Footnotes ----------

   (1) http://code.activestate.com/recipes/498245

   (2) http://code.activestate.com/recipes/577479

   (3) https://bugs.python.org/issue10586

   (4) https://bugs.python.org/issue10593

   (5) https://bugs.python.org/issue9567

   (6) https://bugs.python.org/issue3445

   (7) https://bugs.python.org/issue8814

   (8) https://wiki.python.org/moin/HowTo/Sorting/


File: python.info,  Node: itertools<2>,  Next: collections<3>,  Prev: functools<3>,  Up: New Improved and Deprecated Modules

1.3.9.4 itertools
.................

   * The *note itertools: a0. module has a new *note accumulate(): 40a.
     function modeled on APL’s `scan' operator and Numpy’s `accumulate'
     function:

          >>> from itertools import accumulate
          >>> list(accumulate([8, 2, 50]))
          [8, 10, 60]

          >>> prob_dist = [0.1, 0.4, 0.2, 0.3]
          >>> list(accumulate(prob_dist))      # cumulative probability distribution
          [0.1, 0.5, 0.7, 1.0]

     For an example using *note accumulate(): 40a, see the *note
     examples for the random module: 584.

     (Contributed by Raymond Hettinger and incorporating design
     suggestions from Mark Dickinson.)


File: python.info,  Node: collections<3>,  Next: threading<3>,  Prev: itertools<2>,  Up: New Improved and Deprecated Modules

1.3.9.5 collections
...................

   * The *note collections.Counter: 3bd. class now has two forms of
     in-place subtraction, the existing `-=' operator for saturating
     subtraction(1) and the new *note subtract(): 586. method for
     regular subtraction.  The former is suitable for multisets(2) which
     only have positive counts, and the latter is more suitable for use
     cases that allow negative counts:

          >>> tally = Counter(dogs=5, cat=3)
          >>> tally -= Counter(dogs=2, cats=8)    # saturating subtraction
          >>> tally
          Counter({'dogs': 3})

          >>> tally = Counter(dogs=5, cats=3)
          >>> tally.subtract(dogs=2, cats=8)      # regular subtraction
          >>> tally
          Counter({'dogs': 3, 'cats': -5})

     (Contributed by Raymond Hettinger.)

   * The *note collections.OrderedDict: 587. class has a new method
     *note move_to_end(): 588. which takes an existing key and moves it
     to either the first or last position in the ordered sequence.

     The default is to move an item to the last position.  This is
     equivalent of renewing an entry with ‘od[k] = od.pop(k)’.

     A fast move-to-end operation is useful for resequencing entries.
     For example, an ordered dictionary can be used to track order of
     access by aging entries from the oldest to the most recently
     accessed.

          >>> d = OrderedDict.fromkeys(['a', 'b', 'X', 'd', 'e'])
          >>> list(d)
          ['a', 'b', 'X', 'd', 'e']
          >>> d.move_to_end('X')
          >>> list(d)
          ['a', 'b', 'd', 'e', 'X']

     (Contributed by Raymond Hettinger.)

   * The *note collections.deque: 589. class grew two new methods *note
     count(): 58a. and *note reverse(): 58b. that make them more
     substitutable for *note list: 397. objects:

          >>> d = deque('simsalabim')
          >>> d.count('s')
          2
          >>> d.reverse()
          >>> d
          deque(['m', 'i', 'b', 'a', 'l', 'a', 's', 'm', 'i', 's'])

     (Contributed by Raymond Hettinger.)

   ---------- Footnotes ----------

   (1) http://en.wikipedia.org/wiki/Saturation_arithmetic

   (2) http://en.wikipedia.org/wiki/Multiset


File: python.info,  Node: threading<3>,  Next: datetime and time,  Prev: collections<3>,  Up: New Improved and Deprecated Modules

1.3.9.6 threading
.................

The *note threading: 103. module has a new *note Barrier: 58d.
synchronization class for making multiple threads wait until all of them
have reached a common barrier point.  Barriers are useful for making
sure that a task with multiple preconditions does not run until all of
the predecessor tasks are complete.

Barriers can work with an arbitrary number of threads.  This is a
generalization of a Rendezvous(1) which is defined for only two threads.

Implemented as a two-phase cyclic barrier, *note Barrier: 58d. objects
are suitable for use in loops.  The separate `filling' and `draining'
phases assure that all threads get released (drained) before any one of
them can loop back and re-enter the barrier.  The barrier fully resets
after each cycle.

Example of using barriers:

     from threading import Barrier, Thread

     def get_votes(site):
         ballots = conduct_election(site)
         all_polls_closed.wait()        # do not count until all polls are closed
         totals = summarize(ballots)
         publish(site, totals)

     all_polls_closed = Barrier(len(sites))
     for site in sites:
         Thread(target=get_votes, args=(site,)).start()

In this example, the barrier enforces a rule that votes cannot be
counted at any polling site until all polls are closed.  Notice how a
solution with a barrier is similar to one with *note
threading.Thread.join(): 58e, but the threads stay alive and continue to
do work (summarizing ballots) after the barrier point is crossed.

If any of the predecessor tasks can hang or be delayed, a barrier can be
created with an optional `timeout' parameter.  Then if the timeout
period elapses before all the predecessor tasks reach the barrier point,
all waiting threads are released and a *note BrokenBarrierError: 58f.
exception is raised:

     def get_votes(site):
         ballots = conduct_election(site)
         try:
             all_polls_closed.wait(timeout = midnight - time.now())
         except BrokenBarrierError:
             lockbox = seal_ballots(ballots)
             queue.put(lockbox)
         else:
             totals = summarize(ballots)
             publish(site, totals)

In this example, the barrier enforces a more robust rule.  If some
election sites do not finish before midnight, the barrier times-out and
the ballots are sealed and deposited in a queue for later handling.

See Barrier Synchronization Patterns(2) for more examples of how
barriers can be used in parallel computing.  Also, there is a simple but
thorough explanation of barriers in The Little Book of Semaphores(3),
`section 3.6'.

(Contributed by Kristján Valur Jónsson with an API review by Jeffrey
Yasskin in issue 8777(4).)

   ---------- Footnotes ----------

   (1) http://en.wikipedia.org/wiki/Synchronous_rendezvous

   (2) 
http://parlab.eecs.berkeley.edu/wiki/_media/patterns/paraplop_g1_3.pdf

   (3) http://greenteapress.com/semaphores/downey08semaphores.pdf

   (4) https://bugs.python.org/issue8777


File: python.info,  Node: datetime and time,  Next: math<2>,  Prev: threading<3>,  Up: New Improved and Deprecated Modules

1.3.9.7 datetime and time
.........................

   * The *note datetime: 2f. module has a new type *note timezone: 3ea.
     that implements the *note tzinfo: 591. interface by returning a
     fixed UTC offset and timezone name.  This makes it easier to create
     timezone-aware datetime objects:

          >>> from datetime import datetime, timezone

          >>> datetime.now(timezone.utc)
          datetime.datetime(2010, 12, 8, 21, 4, 2, 923754, tzinfo=datetime.timezone.utc)

          >>> datetime.strptime("01/01/2000 12:00 +0000", "%m/%d/%Y %H:%M %z")
          datetime.datetime(2000, 1, 1, 12, 0, tzinfo=datetime.timezone.utc)

   * Also, *note timedelta: 592. objects can now be multiplied by *note
     float: 327. and divided by *note float: 327. and *note int: 185.
     objects.  And *note timedelta: 592. objects can now divide one
     another.

   * The *note datetime.date.strftime(): 593. method is no longer
     restricted to years after 1900.  The new supported year range is
     from 1000 to 9999 inclusive.

   * Whenever a two-digit year is used in a time tuple, the
     interpretation has been governed by ‘time.accept2dyear’.  The
     default is `True' which means that for a two-digit year, the
     century is guessed according to the POSIX rules governing the ‘%y’
     strptime format.

     Starting with Py3.2, use of the century guessing heuristic will
     emit a *note DeprecationWarning: 2e1.  Instead, it is recommended
     that ‘time.accept2dyear’ be set to `False' so that large date
     ranges can be used without guesswork:

          >>> import time, warnings
          >>> warnings.resetwarnings()      # remove the default warning filters

          >>> time.accept2dyear = True      # guess whether 11 means 11 or 2011
          >>> time.asctime((11, 1, 1, 12, 34, 56, 4, 1, 0))
          Warning (from warnings module):
            ...
          DeprecationWarning: Century info guessed for a 2-digit year.
          'Fri Jan  1 12:34:56 2011'

          >>> time.accept2dyear = False     # use the full range of allowable dates
          >>> time.asctime((11, 1, 1, 12, 34, 56, 4, 1, 0))
          'Fri Jan  1 12:34:56 11'

     Several functions now have significantly expanded date ranges.
     When ‘time.accept2dyear’ is false, the *note time.asctime(): 594.
     function will accept any year that fits in a C int, while the *note
     time.mktime(): 595. and *note time.strftime(): 596. functions will
     accept the full range supported by the corresponding operating
     system functions.

(Contributed by Alexander Belopolsky and Victor Stinner in issue
1289118(1), issue 5094(2), issue 6641(3), issue 2706(4), issue
1777412(5), issue 8013(6), and issue 10827(7).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1289118

   (2) https://bugs.python.org/issue5094

   (3) https://bugs.python.org/issue6641

   (4) https://bugs.python.org/issue2706

   (5) https://bugs.python.org/issue1777412

   (6) https://bugs.python.org/issue8013

   (7) https://bugs.python.org/issue10827


File: python.info,  Node: math<2>,  Next: abc<3>,  Prev: datetime and time,  Up: New Improved and Deprecated Modules

1.3.9.8 math
............

The *note math: ae. module has been updated with six new functions
inspired by the C99 standard.

The *note isfinite(): 598. function provides a reliable and fast way to
detect special values.  It returns `True' for regular numbers and
`False' for `Nan' or `Infinity':

     >>> [isfinite(x) for x in (123, 4.56, float('Nan'), float('Inf'))]
     [True, True, False, False]

The *note expm1(): 599. function computes ‘e**x-1’ for small values of
`x' without incurring the loss of precision that usually accompanies the
subtraction of nearly equal quantities:

     >>> expm1(0.013671875)   # more accurate way to compute e**x-1 for a small x
     0.013765762467652909

The *note erf(): 59a. function computes a probability integral or
Gaussian error function(1).  The complementary error function, *note
erfc(): 59b, is ‘1 - erf(x)’:

     >>> erf(1.0/sqrt(2.0))   # portion of normal distribution within 1 standard deviation
     0.682689492137086
     >>> erfc(1.0/sqrt(2.0))  # portion of normal distribution outside 1 standard deviation
     0.31731050786291404
     >>> erf(1.0/sqrt(2.0)) + erfc(1.0/sqrt(2.0))
     1.0

The *note gamma(): 59c. function is a continuous extension of the
factorial function.  See ‘http://en.wikipedia.org/wiki/Gamma_function’
for details.  Because the function is related to factorials, it grows
large even for small values of `x', so there is also a *note lgamma():
59d. function for computing the natural logarithm of the gamma function:

     >>> gamma(7.0)           # six factorial
     720.0
     >>> lgamma(801.0)        # log(800 factorial)
     4551.950730698041

(Contributed by Mark Dickinson.)

   ---------- Footnotes ----------

   (1) http://en.wikipedia.org/wiki/Error_function


File: python.info,  Node: abc<3>,  Next: io<2>,  Prev: math<2>,  Up: New Improved and Deprecated Modules

1.3.9.9 abc
...........

The *note abc: 4. module now supports *note abstractclassmethod(): 3ae.
and *note abstractstaticmethod(): 3b0.

These tools make it possible to define an *note abstract base class:
550. that requires a particular *note classmethod(): 3af. or *note
staticmethod(): 3b1. to be implemented:

     class Temperature(metaclass=abc.ABCMeta):
         @abc.abstractclassmethod
         def from_fahrenheit(cls, t):
             ...
         @abc.abstractclassmethod
         def from_celsius(cls, t):
             ...

(Patch submitted by Daniel Urban; issue 5867(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5867


File: python.info,  Node: io<2>,  Next: reprlib,  Prev: abc<3>,  Up: New Improved and Deprecated Modules

1.3.9.10 io
...........

The *note io.BytesIO: 5a0. has a new method, *note getbuffer(): 5a1,
which provides functionality similar to *note memoryview(): 187.  It
creates an editable view of the data without making a copy.  The
buffer’s random access and support for slice notation are well-suited to
in-place editing:

     >>> REC_LEN, LOC_START, LOC_LEN = 34, 7, 11

     >>> def change_location(buffer, record_number, location):
             start = record_number * REC_LEN + LOC_START
             buffer[start: start+LOC_LEN] = location

     >>> import io

     >>> byte_stream = io.BytesIO(
         b'G3805  storeroom  Main chassis    '
         b'X7899  shipping   Reserve cog     '
         b'L6988  receiving  Primary sprocket'
     )
     >>> buffer = byte_stream.getbuffer()
     >>> change_location(buffer, 1, b'warehouse  ')
     >>> change_location(buffer, 0, b'showroom   ')
     >>> print(byte_stream.getvalue())
     b'G3805  showroom   Main chassis    '
     b'X7899  warehouse  Reserve cog     '
     b'L6988  receiving  Primary sprocket'

(Contributed by Antoine Pitrou in issue 5506(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5506


File: python.info,  Node: reprlib,  Next: logging<3>,  Prev: io<2>,  Up: New Improved and Deprecated Modules

1.3.9.11 reprlib
................

When writing a *note __repr__(): 5a3. method for a custom container, it
is easy to forget to handle the case where a member refers back to the
container itself.  Python’s builtin objects such as *note list: 397. and
*note set: 5a4. handle self-reference by displaying "..."  in the
recursive part of the representation string.

To help write such *note __repr__(): 5a3. methods, the *note reprlib:
db. module has a new decorator, *note recursive_repr(): 5a5, for
detecting recursive calls to *note __repr__(): 5a3. and substituting a
placeholder string instead:

     >>> class MyList(list):
             @recursive_repr()
             def __repr__(self):
                 return '<' + '|'.join(map(repr, self)) + '>'

     >>> m = MyList('abc')
     >>> m.append(m)
     >>> m.append('x')
     >>> print(m)
     <'a'|'b'|'c'|...|'x'>

(Contributed by Raymond Hettinger in issue 9826(1) and issue 9840(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9826

   (2) https://bugs.python.org/issue9840


File: python.info,  Node: logging<3>,  Next: csv,  Prev: reprlib,  Up: New Improved and Deprecated Modules

1.3.9.12 logging
................

In addition to dictionary-based configuration described above, the *note
logging: a6. package has many other improvements.

The logging documentation has been augmented by a *note basic tutorial:
5a7, an *note advanced tutorial: 5a8, and a *note cookbook: 5a9. of
logging recipes.  These documents are the fastest way to learn about
logging.

The *note logging.basicConfig(): 40c. set-up function gained a `style'
argument to support three different types of string formatting.  It
defaults to "%" for traditional %-formatting, can be set to "{" for the
new *note str.format(): 557. style, or can be set to "$" for the
shell-style formatting provided by *note string.Template: 5aa.  The
following three configurations are equivalent:

     >>> from logging import basicConfig
     >>> basicConfig(style='%', format="%(name)s -> %(levelname)s: %(message)s")
     >>> basicConfig(style='{', format="{name} -> {levelname} {message}")
     >>> basicConfig(style='$', format="$name -> $levelname: $message")

If no configuration is set-up before a logging event occurs, there is
now a default configuration using a *note StreamHandler: 5ab. directed
to *note sys.stderr: 5ac. for events of ‘WARNING’ level or higher.
Formerly, an event occurring before a configuration was set-up would
either raise an exception or silently drop the event depending on the
value of ‘logging.raiseExceptions’.  The new default handler is stored
in *note logging.lastResort: 5ad.

The use of filters has been simplified.  Instead of creating a *note
Filter: 5ae. object, the predicate can be any Python callable that
returns `True' or `False'.

There were a number of other improvements that add flexibility and
simplify configuration.  See the module documentation for a full listing
of changes in Python 3.2.


File: python.info,  Node: csv,  Next: contextlib<3>,  Prev: logging<3>,  Up: New Improved and Deprecated Modules

1.3.9.13 csv
............

The *note csv: 29. module now supports a new dialect, *note
unix_dialect: 5b0, which applies quoting for all fields and a
traditional Unix style with ‘'\n'’ as the line terminator.  The
registered dialect name is ‘unix’.

The *note csv.DictWriter: 5b1. has a new method, *note writeheader():
5b2. for writing-out an initial row to document the field names:

     >>> import csv, sys
     >>> w = csv.DictWriter(sys.stdout, ['name', 'dept'], dialect='unix')
     >>> w.writeheader()
     "name","dept"
     >>> w.writerows([
             {'name': 'tom', 'dept': 'accounting'},
             {'name': 'susan', 'dept': 'Salesl'}])
     "tom","accounting"
     "susan","sales"

(New dialect suggested by Jay Talbot in issue 5975(1), and the new
method suggested by Ed Abraham in issue 1537721(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5975

   (2) https://bugs.python.org/issue1537721


File: python.info,  Node: contextlib<3>,  Next: decimal and fractions,  Prev: csv,  Up: New Improved and Deprecated Modules

1.3.9.14 contextlib
...................

There is a new and slightly mind-blowing tool *note ContextDecorator:
5b4. that is helpful for creating a *note context manager: 549. that
does double duty as a function decorator.

As a convenience, this new functionality is used by *note
contextmanager(): 5b5. so that no extra effort is needed to support both
roles.

The basic idea is that both context managers and function decorators can
be used for pre-action and post-action wrappers.  Context managers wrap
a group of statements using a *note with: 19b. statement, and function
decorators wrap a group of statements enclosed in a function.  So,
occasionally there is a need to write a pre-action or post-action
wrapper that can be used in either role.

For example, it is sometimes useful to wrap functions or groups of
statements with a logger that can track the time of entry and time of
exit.  Rather than writing both a function decorator and a context
manager for the task, the *note contextmanager(): 5b5. provides both
capabilities in a single definition:

     from contextlib import contextmanager
     import logging

     logging.basicConfig(level=logging.INFO)

     @contextmanager
     def track_entry_and_exit(name):
         logging.info('Entering: {}'.format(name))
         yield
         logging.info('Exiting: {}'.format(name))

Formerly, this would have only been usable as a context manager:

     with track_entry_and_exit('widget loader'):
         print('Some time consuming activity goes here')
         load_widget()

Now, it can be used as a decorator as well:

     @track_entry_and_exit('widget loader')
     def activity():
         print('Some time consuming activity goes here')
         load_widget()

Trying to fulfill two roles at once places some limitations on the
technique.  Context managers normally have the flexibility to return an
argument usable by a *note with: 19b. statement, but there is no
parallel for function decorators.

In the above example, there is not a clean way for the
`track_entry_and_exit' context manager to return a logging instance for
use in the body of enclosed statements.

(Contributed by Michael Foord in issue 9110(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9110


File: python.info,  Node: decimal and fractions,  Next: ftp,  Prev: contextlib<3>,  Up: New Improved and Deprecated Modules

1.3.9.15 decimal and fractions
..............................

Mark Dickinson crafted an elegant and efficient scheme for assuring that
different numeric datatypes will have the same hash value whenever their
actual values are equal (issue 8188(1)):

     assert hash(Fraction(3, 2)) == hash(1.5) == \
            hash(Decimal("1.5")) == hash(complex(1.5, 0))

Some of the hashing details are exposed through a new attribute, *note
sys.hash_info: 2c8, which describes the bit width of the hash value, the
prime modulus, the hash values for `infinity' and `nan', and the
multiplier used for the imaginary part of a number:

     >>> sys.hash_info
     sys.hash_info(width=64, modulus=2305843009213693951, inf=314159, nan=0, imag=1000003)

An early decision to limit the inter-operability of various numeric
types has been relaxed.  It is still unsupported (and ill-advised) to
have implicit mixing in arithmetic expressions such as ‘Decimal('1.1') +
float('1.1')’ because the latter loses information in the process of
constructing the binary float.  However, since existing floating point
value can be converted losslessly to either a decimal or rational
representation, it makes sense to add them to the constructor and to
support mixed-type comparisons.

   * The *note decimal.Decimal: 3d4. constructor now accepts *note
     float: 327. objects directly so there in no longer a need to use
     the *note from_float(): 5b7. method (issue 8257(2)).

   * Mixed type comparisons are now fully supported so that *note
     Decimal: 3d4. objects can be directly compared with *note float:
     327. and *note fractions.Fraction: 5b8. (issue 2531(3) and issue
     8188(4)).

Similar changes were made to *note fractions.Fraction: 5b8. so that the
*note from_float(): 5b9. and *note from_decimal(): 5ba. methods are no
longer needed (issue 8294(5)):

     >>> Decimal(1.1)
     Decimal('1.100000000000000088817841970012523233890533447265625')
     >>> Fraction(1.1)
     Fraction(2476979795053773, 2251799813685248)

Another useful change for the *note decimal: 34. module is that the
‘Context.clamp’ attribute is now public.  This is useful in creating
contexts that correspond to the decimal interchange formats specified in
IEEE 754 (see issue 8540(6)).

(Contributed by Mark Dickinson and Raymond Hettinger.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8188

   (2) https://bugs.python.org/issue8257

   (3) https://bugs.python.org/issue2531

   (4) https://bugs.python.org/issue8188

   (5) https://bugs.python.org/issue8294

   (6) https://bugs.python.org/issue8540


File: python.info,  Node: ftp,  Next: popen,  Prev: decimal and fractions,  Up: New Improved and Deprecated Modules

1.3.9.16 ftp
............

The *note ftplib.FTP: 3ec. class now supports the context management
protocol to unconditionally consume *note socket.error: 363. exceptions
and to close the FTP connection when done:

     >>> from ftplib import FTP
     >>> with FTP("ftp1.at.proftpd.org") as ftp:
             ftp.login()
             ftp.dir()

     '230 Anonymous login ok, restrictions apply.'
     dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 .
     dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 ..
     dr-xr-xr-x   5 ftp      ftp          4096 May  6 10:43 CentOS
     dr-xr-xr-x   3 ftp      ftp            18 Jul 10  2008 Fedora

Other file-like objects such as *note mmap.mmap: 5bc. and *note
fileinput.input(): 5bd. also grew auto-closing context managers:

     with fileinput.input(files=('log1.txt', 'log2.txt')) as f:
         for line in f:
             process(line)

(Contributed by Tarek Ziadé and Giampaolo Rodolà in issue 4972(1), and
by Georg Brandl in issue 8046(2) and issue 1286(3).)

The *note FTP_TLS: 3ed. class now accepts a `context' parameter, which
is a *note ssl.SSLContext: 15d. object allowing bundling SSL
configuration options, certificates and private keys into a single
(potentially long-lived) structure.

(Contributed by Giampaolo Rodolà; issue 8806(4).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4972

   (2) https://bugs.python.org/issue8046

   (3) https://bugs.python.org/issue1286

   (4) https://bugs.python.org/issue8806


File: python.info,  Node: popen,  Next: select<3>,  Prev: ftp,  Up: New Improved and Deprecated Modules

1.3.9.17 popen
..............

The *note os.popen(): 5bf. and *note subprocess.Popen(): 5c0. functions
now support *note with: 19b. statements for auto-closing of the file
descriptors.

(Contributed by Antoine Pitrou and Brian Curtin in issue 7461(1) and
issue 10554(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7461

   (2) https://bugs.python.org/issue10554


File: python.info,  Node: select<3>,  Next: gzip and zipfile,  Prev: popen,  Up: New Improved and Deprecated Modules

1.3.9.18 select
...............

The *note select: e0. module now exposes a new, constant attribute,
*note PIPE_BUF: 5c2, which gives the minimum number of bytes which are
guaranteed not to block when *note select.select(): 5c3. says a pipe is
ready for writing.

     >>> import select
     >>> select.PIPE_BUF
     512

(Available on Unix systems.  Patch by Sébastien Sablé in issue 9862(1))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9862


File: python.info,  Node: gzip and zipfile,  Next: tarfile<3>,  Prev: select<3>,  Up: New Improved and Deprecated Modules

1.3.9.19 gzip and zipfile
.........................

*note gzip.GzipFile: 5c5. now implements the *note io.BufferedIOBase:
3b9. *note abstract base class: 550. (except for ‘truncate()’).  It also
has a *note peek(): 5c6. method and supports unseekable as well as
zero-padded file objects.

The *note gzip: 8b. module also gains the *note compress(): 5c7. and
*note decompress(): 5c8. functions for easier in-memory compression and
decompression.  Keep in mind that text needs to be encoded as *note
bytes: 179. before compressing and decompressing:

     >>> s = 'Three shall be the number thou shalt count, '
     >>> s += 'and the number of the counting shall be three'
     >>> b = s.encode()                        # convert to utf-8
     >>> len(b)
     89
     >>> c = gzip.compress(b)
     >>> len(c)
     77
     >>> gzip.decompress(c).decode()[:42]      # decompress and convert to text
     'Three shall be the number thou shalt count,'

(Contributed by Anand B. Pillai in issue 3488(1); and by Antoine Pitrou,
Nir Aides and Brian Curtin in issue 9962(2), issue 1675951(3), issue
7471(4) and issue 2846(5).)

Also, the ‘zipfile.ZipExtFile’ class was reworked internally to
represent files stored inside an archive.  The new implementation is
significantly faster and can be wrapped in a *note io.BufferedReader:
5c9. object for more speedups.  It also solves an issue where
interleaved calls to `read' and `readline' gave the wrong results.

(Patch submitted by Nir Aides in issue 7610(6).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue3488

   (2) https://bugs.python.org/issue9962

   (3) https://bugs.python.org/issue1675951

   (4) https://bugs.python.org/issue7471

   (5) https://bugs.python.org/issue2846

   (6) https://bugs.python.org/issue7610


File: python.info,  Node: tarfile<3>,  Next: hashlib<2>,  Prev: gzip and zipfile,  Up: New Improved and Deprecated Modules

1.3.9.20 tarfile
................

The *note TarFile: 5cb. class can now be used as a context manager.  In
addition, its *note add(): 5cc. method has a new option, `filter', that
controls which files are added to the archive and allows the file
metadata to be edited.

The new `filter' option replaces the older, less flexible `exclude'
parameter which is now deprecated.  If specified, the optional `filter'
parameter needs to be a *note keyword argument: 5cd.  The user-supplied
filter function accepts a *note TarInfo: 5ce. object and returns an
updated *note TarInfo: 5ce. object, or if it wants the file to be
excluded, the function can return `None':

     >>> import tarfile, glob

     >>> def myfilter(tarinfo):
            if tarinfo.isfile():             # only save real files
                 tarinfo.uname = 'monty'     # redact the user name
                 return tarinfo

     >>> with tarfile.open(name='myarchive.tar.gz', mode='w:gz') as tf:
             for filename in glob.glob('*.txt'):
                 tf.add(filename, filter=myfilter)
             tf.list()
     -rw-r--r-- monty/501        902 2011-01-26 17:59:11 annotations.txt
     -rw-r--r-- monty/501        123 2011-01-26 17:59:11 general_questions.txt
     -rw-r--r-- monty/501       3514 2011-01-26 17:59:11 prion.txt
     -rw-r--r-- monty/501        124 2011-01-26 17:59:11 py_todo.txt
     -rw-r--r-- monty/501       1399 2011-01-26 17:59:11 semaphore_notes.txt

(Proposed by Tarek Ziadé and implemented by Lars Gustäbel in issue
6856(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6856


File: python.info,  Node: hashlib<2>,  Next: ast,  Prev: tarfile<3>,  Up: New Improved and Deprecated Modules

1.3.9.21 hashlib
................

The *note hashlib: 8c. module has two new constant attributes listing
the hashing algorithms guaranteed to be present in all implementations
and those available on the current implementation:

     >>> import hashlib

     >>> hashlib.algorithms_guaranteed
     {'sha1', 'sha224', 'sha384', 'sha256', 'sha512', 'md5'}

     >>> hashlib.algorithms_available
     {'md2', 'SHA256', 'SHA512', 'dsaWithSHA', 'mdc2', 'SHA224', 'MD4', 'sha256',
     'sha512', 'ripemd160', 'SHA1', 'MDC2', 'SHA', 'SHA384', 'MD2',
     'ecdsa-with-SHA1','md4', 'md5', 'sha1', 'DSA-SHA', 'sha224',
     'dsaEncryption', 'DSA', 'RIPEMD160', 'sha', 'MD5', 'sha384'}

(Suggested by Carl Chenet in issue 7418(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue7418


File: python.info,  Node: ast,  Next: os<3>,  Prev: hashlib<2>,  Up: New Improved and Deprecated Modules

1.3.9.22 ast
............

The *note ast: 8. module has a wonderful a general-purpose tool for
safely evaluating expression strings using the Python literal syntax.
The *note ast.literal_eval(): 5d1. function serves as a secure
alternative to the builtin *note eval(): 5d2. function which is easily
abused.  Python 3.2 adds *note bytes: 179. and *note set: 5a4. literals
to the list of supported types: strings, bytes, numbers, tuples, lists,
dicts, sets, booleans, and None.

     >>> from ast import literal_eval

     >>> request = "{'req': 3, 'func': 'pow', 'args': (2, 0.5)}"
     >>> literal_eval(request)
     {'args': (2, 0.5), 'req': 3, 'func': 'pow'}

     >>> request = "os.system('do something harmful')"
     >>> literal_eval(request)
     Traceback (most recent call last):
       ...
     ValueError: malformed node or string: <_ast.Call object at 0x101739a10>

(Implemented by Benjamin Peterson and Georg Brandl.)


File: python.info,  Node: os<3>,  Next: shutil<3>,  Prev: ast,  Up: New Improved and Deprecated Modules

1.3.9.23 os
...........

Different operating systems use various encodings for filenames and
environment variables.  The *note os: c0. module provides two new
functions, *note fsencode(): 5d4. and *note fsdecode(): 5d5, for
encoding and decoding filenames:

     >>> filename = 'Sehenswürdigkeiten'
     >>> os.fsencode(filename)
     b'Sehensw\xc3\xbcrdigkeiten'

Some operating systems allow direct access to encoded bytes in the
environment.  If so, the *note os.supports_bytes_environ: 5d6. constant
will be true.

For direct access to encoded environment variables (if available), use
the new *note os.getenvb(): 5d7. function or use *note os.environb: 5d8.
which is a bytes version of *note os.environ: 554.

(Contributed by Victor Stinner.)


File: python.info,  Node: shutil<3>,  Next: sqlite3<3>,  Prev: os<3>,  Up: New Improved and Deprecated Modules

1.3.9.24 shutil
...............

The *note shutil.copytree(): 5da. function has two new options:

   * `ignore_dangling_symlinks': when ‘symlinks=False’ so that the
     function copies a file pointed to by a symlink, not the symlink
     itself.  This option will silence the error raised if the file
     doesn’t exist.

   * `copy_function': is a callable that will be used to copy files.
     *note shutil.copy2(): 47d. is used by default.

(Contributed by Tarek Ziadé.)

In addition, the *note shutil: e4. module now supports *note archiving
operations: 5db. for zipfiles, uncompressed tarfiles, gzipped tarfiles,
and bzipped tarfiles.  And there are functions for registering
additional archiving file formats (such as xz compressed tarfiles or
custom formats).

The principal functions are *note make_archive(): 5dc. and *note
unpack_archive(): 5dd.  By default, both operate on the current
directory (which can be set by *note os.chdir(): 438.) and on any
sub-directories.  The archive filename needs to be specified with a full
pathname.  The archiving step is non-destructive (the original files are
left unchanged).

     >>> import shutil, pprint

     >>> os.chdir('mydata')                               # change to the source directory
     >>> f = shutil.make_archive('/var/backup/mydata',
                                 'zip')                   # archive the current directory
     >>> f                                                # show the name of archive
     '/var/backup/mydata.zip'
     >>> os.chdir('tmp')                                  # change to an unpacking
     >>> shutil.unpack_archive('/var/backup/mydata.zip')  # recover the data

     >>> pprint.pprint(shutil.get_archive_formats())      # display known formats
     [('bztar', "bzip2'ed tar-file"),
      ('gztar', "gzip'ed tar-file"),
      ('tar', 'uncompressed tar file'),
      ('zip', 'ZIP file')]

     >>> shutil.register_archive_format(                  # register a new archive format
             name = 'xz',
             function = xz.compress,                      # callable archiving function
             extra_args = [('level', 8)],                 # arguments to the function
             description = 'xz compression'
     )

(Contributed by Tarek Ziadé.)


File: python.info,  Node: sqlite3<3>,  Next: html<3>,  Prev: shutil<3>,  Up: New Improved and Deprecated Modules

1.3.9.25 sqlite3
................

The *note sqlite3: ed. module was updated to pysqlite version 2.6.0.  It
has two new capabilities.

   * The ‘sqlite3.Connection.in_transit’ attribute is true if there is
     an active transaction for uncommitted changes.

   * The *note sqlite3.Connection.enable_load_extension(): 5df. and
     *note sqlite3.Connection.load_extension(): 5e0. methods allows you
     to load SQLite extensions from ".so" files.  One well-known
     extension is the fulltext-search extension distributed with SQLite.

(Contributed by R. David Murray and Shashwat Anand; issue 8845(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8845


File: python.info,  Node: html<3>,  Next: socket<3>,  Prev: sqlite3<3>,  Up: New Improved and Deprecated Modules

1.3.9.26 html
.............

A new *note html: 8f. module was introduced with only a single function,
*note escape(): 2de, which is used for escaping reserved characters from
HTML markup:

     >>> import html
     >>> html.escape('x > 2 && x < 7')
     'x &gt; 2 &amp;&amp; x &lt; 7'


File: python.info,  Node: socket<3>,  Next: ssl<3>,  Prev: html<3>,  Up: New Improved and Deprecated Modules

1.3.9.27 socket
...............

The *note socket: ea. module has two new improvements.

   * Socket objects now have a *note detach(): 5e3. method which puts
     the socket into closed state without actually closing the
     underlying file descriptor.  The latter can then be reused for
     other purposes.  (Added by Antoine Pitrou; issue 8524(1).)

   * *note socket.create_connection(): 5e4. now supports the context
     management protocol to unconditionally consume *note socket.error:
     363. exceptions and to close the socket when done.  (Contributed by
     Giampaolo Rodolà; issue 9794(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8524

   (2) https://bugs.python.org/issue9794


File: python.info,  Node: ssl<3>,  Next: nntp,  Prev: socket<3>,  Up: New Improved and Deprecated Modules

1.3.9.28 ssl
............

The *note ssl: ee. module added a number of features to satisfy common
requirements for secure (encrypted, authenticated) internet connections:

   * A new class, *note SSLContext: 15d, serves as a container for
     persistent SSL data, such as protocol settings, certificates,
     private keys, and various other options.  It includes a *note
     wrap_socket(): 5e6. for creating an SSL socket from an SSL context.

   * A new function, *note ssl.match_hostname(): 15f, supports server
     identity verification for higher-level protocols by implementing
     the rules of HTTPS (from RFC 2818(1)) which are also suitable for
     other protocols.

   * The *note ssl.wrap_socket(): 5e7. constructor function now takes a
     `ciphers' argument.  The `ciphers' string lists the allowed
     encryption algorithms using the format described in the OpenSSL
     documentation(2).

   * When linked against recent versions of OpenSSL, the *note ssl: ee.
     module now supports the Server Name Indication extension to the TLS
     protocol, allowing multiple "virtual hosts" using different
     certificates on a single IP port.  This extension is only supported
     in client mode, and is activated by passing the `server_hostname'
     argument to *note ssl.SSLContext.wrap_socket(): 5e6.

   * Various options have been added to the *note ssl: ee. module, such
     as *note OP_NO_SSLv2: 5e8. which disables the insecure and obsolete
     SSLv2 protocol.

   * The extension now loads all the OpenSSL ciphers and digest
     algorithms.  If some SSL certificates cannot be verified, they are
     reported as an "unknown algorithm" error.

   * The version of OpenSSL being used is now accessible using the
     module attributes *note ssl.OPENSSL_VERSION: 5e9. (a string), *note
     ssl.OPENSSL_VERSION_INFO: 5ea. (a 5-tuple), and *note
     ssl.OPENSSL_VERSION_NUMBER: 5eb. (an integer).

(Contributed by Antoine Pitrou in issue 8850(3), issue 1589(4), issue
8322(5), issue 5639(6), issue 4870(7), issue 8484(8), and issue
8321(9).)

   ---------- Footnotes ----------

   (1) https://tools.ietf.org/html/rfc2818.html

   (2) http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT

   (3) https://bugs.python.org/issue8850

   (4) https://bugs.python.org/issue1589

   (5) https://bugs.python.org/issue8322

   (6) https://bugs.python.org/issue5639

   (7) https://bugs.python.org/issue4870

   (8) https://bugs.python.org/issue8484

   (9) https://bugs.python.org/issue8321


File: python.info,  Node: nntp,  Next: certificates,  Prev: ssl<3>,  Up: New Improved and Deprecated Modules

1.3.9.29 nntp
.............

The *note nntplib: bc. module has a revamped implementation with better
bytes and text semantics as well as more practical APIs.  These
improvements break compatibility with the nntplib version in Python 3.1,
which was partly dysfunctional in itself.

Support for secure connections through both implicit (using *note
nntplib.NNTP_SSL: 5ed.) and explicit (using *note
nntplib.NNTP.starttls(): 5ee.) TLS has also been added.

(Contributed by Antoine Pitrou in issue 9360(1) and Andrew Vant in issue
1926(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9360

   (2) https://bugs.python.org/issue1926


File: python.info,  Node: certificates,  Next: imaplib<2>,  Prev: nntp,  Up: New Improved and Deprecated Modules

1.3.9.30 certificates
.....................

*note http.client.HTTPSConnection: 306, *note
urllib.request.HTTPSHandler: 5f0. and *note urllib.request.urlopen():
5f1. now take optional arguments to allow for server certificate
checking against a set of Certificate Authorities, as recommended in
public uses of HTTPS.

(Added by Antoine Pitrou, issue 9003(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9003


File: python.info,  Node: imaplib<2>,  Next: http client,  Prev: certificates,  Up: New Improved and Deprecated Modules

1.3.9.31 imaplib
................

Support for explicit TLS on standard IMAP4 connections has been added
through the new *note imaplib.IMAP4.starttls: 5f3. method.

(Contributed by Lorenzo M. Catucci and Antoine Pitrou, issue 4471(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4471


File: python.info,  Node: http client,  Next: unittest<3>,  Prev: imaplib<2>,  Up: New Improved and Deprecated Modules

1.3.9.32 http.client
....................

There were a number of small API improvements in the *note http.client:
92. module.  The old-style HTTP 0.9 simple responses are no longer
supported and the `strict' parameter is deprecated in all classes.

The *note HTTPConnection: 305. and *note HTTPSConnection: 306. classes
now have a `source_address' parameter for a (host, port) tuple
indicating where the HTTP connection is made from.

Support for certificate checking and HTTPS virtual hosts were added to
*note HTTPSConnection: 306.

The *note request(): 5f5. method on connection objects allowed an
optional `body' argument so that a *note file object: 56a. could be used
to supply the content of the request.  Conveniently, the `body' argument
now also accepts an *note iterable: 5f6. object so long as it includes
an explicit ‘Content-Length’ header.  This extended interface is much
more flexible than before.

To establish an HTTPS connection through a proxy server, there is a new
*note set_tunnel(): 5f7. method that sets the host and port for HTTP
Connect tunneling.

To match the behavior of *note http.server: 95, the HTTP client library
now also encodes headers with ISO-8859-1 (Latin-1) encoding.  It was
already doing that for incoming headers, so now the behavior is
consistent for both incoming and outgoing traffic.  (See work by Armin
Ronacher in issue 10980(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10980


File: python.info,  Node: unittest<3>,  Next: random,  Prev: http client,  Up: New Improved and Deprecated Modules

1.3.9.33 unittest
.................

The unittest module has a number of improvements supporting test
discovery for packages, easier experimentation at the interactive
prompt, new testcase methods, improved diagnostic messages for test
failures, and better method names.

   * The command-line call ‘python -m unittest’ can now accept file
     paths instead of module names for running specific tests (issue
     10620(1)).  The new test discovery can find tests within packages,
     locating any test importable from the top-level directory.  The
     top-level directory can be specified with the ‘-t’ option, a
     pattern for matching files with ‘-p’, and a directory to start
     discovery with ‘-s’:

          $ python -m unittest discover -s my_proj_dir -p _test.py

     (Contributed by Michael Foord.)

   * Experimentation at the interactive prompt is now easier because the
     ‘unittest.case.TestCase’ class can now be instantiated without
     arguments:

          >>> TestCase().assertEqual(pow(2, 3), 8)

     (Contributed by Michael Foord.)

   * The *note unittest: 114. module has two new methods, *note
     assertWarns(): 4ce. and *note assertWarnsRegex(): 4cf. to verify
     that a given warning type is triggered by the code under test:

          with self.assertWarns(DeprecationWarning):
              legacy_function('XYZ')

     (Contributed by Antoine Pitrou, issue 9754(2).)

     Another new method, *note assertCountEqual(): 5f9. is used to
     compare two iterables to determine if their element counts are
     equal (whether the same elements are present with the same number
     of occurrences regardless of order):

          def test_anagram(self):
              self.assertCountEqual('algorithm', 'logarithm')

     (Contributed by Raymond Hettinger.)

   * A principal feature of the unittest module is an effort to produce
     meaningful diagnostics when a test fails.  When possible, the
     failure is recorded along with a diff of the output.  This is
     especially helpful for analyzing log files of failed test runs.
     However, since diffs can sometime be voluminous, there is a new
     *note maxDiff: 5fa. attribute that sets maximum length of diffs
     displayed.

   * In addition, the method names in the module have undergone a number
     of clean-ups.

     For example, *note assertRegex(): 5fb. is the new name for
     ‘assertRegexpMatches()’ which was misnamed because the test uses
     *note re.search(): 5fc, not *note re.match(): 5fd.  Other methods
     using regular expressions are now named using short form "Regex" in
     preference to "Regexp" – this matches the names used in other
     unittest implementations, matches Python’s old name for the *note
     re: d9. module, and it has unambiguous camel-casing.

     (Contributed by Raymond Hettinger and implemented by Ezio Melotti.)

   * To improve consistency, some long-standing method aliases are being
     deprecated in favor of the preferred names:

          Old Name                            Preferred Name
                                              
          -----------------------------------------------------------------------
                                              
          ‘assert_()’                         *note assertTrue(): 5fe.
                                              
                                              
          ‘assertEquals()’                    *note assertEqual(): 5ff.
                                              
                                              
          ‘assertNotEquals()’                 *note assertNotEqual(): 600.
                                              
                                              
          ‘assertAlmostEquals()’              *note assertAlmostEqual(): 601.
                                              
                                              
          ‘assertNotAlmostEquals()’           *note assertNotAlmostEqual():
                                              602.
                                              

     Likewise, the ‘TestCase.fail*’ methods deprecated in Python 3.1 are
     expected to be removed in Python 3.3.  Also see the *note
     Deprecated aliases: 603. section in the *note unittest: 114.
     documentation.

     (Contributed by Ezio Melotti; issue 9424(3).)

   * The ‘assertDictContainsSubset()’ method was deprecated because it
     was misimplemented with the arguments in the wrong order.  This
     created hard-to-debug optical illusions where tests like
     ‘TestCase().assertDictContainsSubset({'a':1, 'b':2}, {'a':1})’
     would fail.

     (Contributed by Raymond Hettinger.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10620

   (2) https://bugs.python.org/issue9754

   (3) https://bugs.python.org/issue9424


File: python.info,  Node: random,  Next: poplib<2>,  Prev: unittest<3>,  Up: New Improved and Deprecated Modules

1.3.9.34 random
...............

The integer methods in the *note random: d8. module now do a better job
of producing uniform distributions.  Previously, they computed
selections with ‘int(n*random())’ which had a slight bias whenever `n'
was not a power of two.  Now, multiple selections are made from a range
up to the next power of two and a selection is kept only when it falls
within the range ‘0 <= x < n’.  The functions and methods affected are
*note randrange(): 605, *note randint(): 606, *note choice(): 607, *note
shuffle(): 608. and *note sample(): 609.

(Contributed by Raymond Hettinger; issue 9025(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9025


File: python.info,  Node: poplib<2>,  Next: asyncore,  Prev: random,  Up: New Improved and Deprecated Modules

1.3.9.35 poplib
...............

*note POP3_SSL: 60b. class now accepts a `context' parameter, which is a
*note ssl.SSLContext: 15d. object allowing bundling SSL configuration
options, certificates and private keys into a single (potentially
long-lived) structure.

(Contributed by Giampaolo Rodolà; issue 8807(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8807


File: python.info,  Node: asyncore,  Next: tempfile<2>,  Prev: poplib<2>,  Up: New Improved and Deprecated Modules

1.3.9.36 asyncore
.................

*note asyncore.dispatcher: 60d. now provides a *note handle_accepted():
60e. method returning a ‘(sock, addr)’ pair which is called when a
connection has actually been established with a new remote endpoint.
This is supposed to be used as a replacement for old *note
handle_accept(): 60f. and avoids the user to call *note accept(): 610.
directly.

(Contributed by Giampaolo Rodolà; issue 6706(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6706


File: python.info,  Node: tempfile<2>,  Next: inspect<3>,  Prev: asyncore,  Up: New Improved and Deprecated Modules

1.3.9.37 tempfile
.................

The *note tempfile: fe. module has a new context manager, *note
TemporaryDirectory: 612. which provides easy deterministic cleanup of
temporary directories:

     with tempfile.TemporaryDirectory() as tmpdirname:
         print('created temporary dir:', tmpdirname)

(Contributed by Neil Schemenauer and Nick Coghlan; issue 5178(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5178


File: python.info,  Node: inspect<3>,  Next: pydoc<3>,  Prev: tempfile<2>,  Up: New Improved and Deprecated Modules

1.3.9.38 inspect
................

   * The *note inspect: 9d. module has a new function *note
     getgeneratorstate(): 614. to easily identify the current state of a
     generator-iterator:

          >>> from inspect import getgeneratorstate
          >>> def gen():
                  yield 'demo'
          >>> g = gen()
          >>> getgeneratorstate(g)
          'GEN_CREATED'
          >>> next(g)
          'demo'
          >>> getgeneratorstate(g)
          'GEN_SUSPENDED'
          >>> next(g, None)
          >>> getgeneratorstate(g)
          'GEN_CLOSED'

     (Contributed by Rodolpho Eckhardt and Nick Coghlan, issue
     10220(1).)

   * To support lookups without the possibility of activating a dynamic
     attribute, the *note inspect: 9d. module has a new function, *note
     getattr_static(): 615.  Unlike *note hasattr(): 55e, this is a true
     read-only search, guaranteed not to change state while it is
     searching:

          >>> class A:
                  @property
                  def f(self):
                      print('Running')
                      return 10

          >>> a = A()
          >>> getattr(a, 'f')
          Running
          10
          >>> inspect.getattr_static(a, 'f')
          <property object at 0x1022bd788>

     (Contributed by Michael Foord.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10220


File: python.info,  Node: pydoc<3>,  Next: dis<2>,  Prev: inspect<3>,  Up: New Improved and Deprecated Modules

1.3.9.39 pydoc
..............

The *note pydoc: d5. module now provides a much-improved Web server
interface, as well as a new command-line option ‘-b’ to automatically
open a browser window to display that server:

     $ pydoc3.2 -b

(Contributed by Ron Adam; issue 2001(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue2001


File: python.info,  Node: dis<2>,  Next: dbm<2>,  Prev: pydoc<3>,  Up: New Improved and Deprecated Modules

1.3.9.40 dis
............

The *note dis: 36. module gained two new functions for inspecting code,
*note code_info(): 618. and *note show_code(): 1b6.  Both provide
detailed code object information for the supplied function, method,
source code string or code object.  The former returns a string and the
latter prints it:

     >>> import dis, random
     >>> dis.show_code(random.choice)
     Name:              choice
     Filename:          /Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/random.py
     Argument count:    2
     Kw-only arguments: 0
     Number of locals:  3
     Stack size:        11
     Flags:             OPTIMIZED, NEWLOCALS, NOFREE
     Constants:
        0: 'Choose a random element from a non-empty sequence.'
        1: 'Cannot choose from an empty sequence'
     Names:
        0: _randbelow
        1: len
        2: ValueError
        3: IndexError
     Variable names:
        0: self
        1: seq
        2: i

In addition, the *note dis(): 1b7. function now accepts string arguments
so that the common idiom ‘dis(compile(s, '', 'eval'))’ can be shortened
to ‘dis(s)’:

     >>> dis('3*x+1 if x%2==1 else x//2')
       1           0 LOAD_NAME                0 (x)
                   3 LOAD_CONST               0 (2)
                   6 BINARY_MODULO
                   7 LOAD_CONST               1 (1)
                  10 COMPARE_OP               2 (==)
                  13 POP_JUMP_IF_FALSE       28
                  16 LOAD_CONST               2 (3)
                  19 LOAD_NAME                0 (x)
                  22 BINARY_MULTIPLY
                  23 LOAD_CONST               1 (1)
                  26 BINARY_ADD
                  27 RETURN_VALUE
             >>   28 LOAD_NAME                0 (x)
                  31 LOAD_CONST               0 (2)
                  34 BINARY_FLOOR_DIVIDE
                  35 RETURN_VALUE

Taken together, these improvements make it easier to explore how CPython
is implemented and to see for yourself what the language syntax does
under-the-hood.

(Contributed by Nick Coghlan in issue 9147(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9147


File: python.info,  Node: dbm<2>,  Next: ctypes,  Prev: dis<2>,  Up: New Improved and Deprecated Modules

1.3.9.41 dbm
............

All database modules now support the ‘get()’ and ‘setdefault()’ methods.

(Suggested by Ray Allen in issue 9523(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9523


File: python.info,  Node: ctypes,  Next: site,  Prev: dbm<2>,  Up: New Improved and Deprecated Modules

1.3.9.42 ctypes
...............

A new type, *note ctypes.c_ssize_t: 61b. represents the C ‘ssize_t’
datatype.


File: python.info,  Node: site,  Next: sysconfig,  Prev: ctypes,  Up: New Improved and Deprecated Modules

1.3.9.43 site
.............

The *note site: e6. module has three new functions useful for reporting
on the details of a given Python installation.

   * *note getsitepackages(): 61d. lists all global site-packages
     directories.

   * *note getuserbase(): 61e. reports on the user’s base directory
     where data can be stored.

   * *note getusersitepackages(): 61f. reveals the user-specific
     site-packages directory path.

     >>> import site
     >>> site.getsitepackages()
     ['/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages',
      '/Library/Frameworks/Python.framework/Versions/3.2/lib/site-python',
      '/Library/Python/3.2/site-packages']
     >>> site.getuserbase()
     '/Users/raymondhettinger/Library/Python/3.2'
     >>> site.getusersitepackages()
     '/Users/raymondhettinger/Library/Python/3.2/lib/python/site-packages'

Conveniently, some of site’s functionality is accessible directly from
the command-line:

     $ python -m site --user-base
     /Users/raymondhettinger/.local
     $ python -m site --user-site
     /Users/raymondhettinger/.local/lib/python3.2/site-packages

(Contributed by Tarek Ziadé in issue 6693(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6693


File: python.info,  Node: sysconfig,  Next: pdb<3>,  Prev: site,  Up: New Improved and Deprecated Modules

1.3.9.44 sysconfig
..................

The new *note sysconfig: f9. module makes it straightforward to discover
installation paths and configuration variables that vary across
platforms and installations.

The module offers access simple access functions for platform and
version information:

   * *note get_platform(): 621. returning values like `linux-i586' or
     `macosx-10.6-ppc'.

   * *note get_python_version(): 622. returns a Python version string
     such as "3.2".

It also provides access to the paths and variables corresponding to one
of seven named schemes used by *note distutils: 37.  Those include
`posix_prefix', `posix_home', `posix_user', `nt', `nt_user', `os2',
`os2_home':

   * *note get_paths(): 623. makes a dictionary containing installation
     paths for the current installation scheme.

   * *note get_config_vars(): 330. returns a dictionary of platform
     specific variables.

There is also a convenient command-line interface:

     C:\Python32>python -m sysconfig
     Platform: "win32"
     Python version: "3.2"
     Current installation scheme: "nt"

     Paths:
             data = "C:\Python32"
             include = "C:\Python32\Include"
             platinclude = "C:\Python32\Include"
             platlib = "C:\Python32\Lib\site-packages"
             platstdlib = "C:\Python32\Lib"
             purelib = "C:\Python32\Lib\site-packages"
             scripts = "C:\Python32\Scripts"
             stdlib = "C:\Python32\Lib"

     Variables:
             BINDIR = "C:\Python32"
             BINLIBDEST = "C:\Python32\Lib"
             EXE = ".exe"
             INCLUDEPY = "C:\Python32\Include"
             LIBDEST = "C:\Python32\Lib"
             SO = ".pyd"
             VERSION = "32"
             abiflags = ""
             base = "C:\Python32"
             exec_prefix = "C:\Python32"
             platbase = "C:\Python32"
             prefix = "C:\Python32"
             projectbase = "C:\Python32"
             py_version = "3.2"
             py_version_nodot = "32"
             py_version_short = "3.2"
             srcdir = "C:\Python32"
             userbase = "C:\Documents and Settings\Raymond\Application Data\Python"

(Moved out of Distutils by Tarek Ziadé.)


File: python.info,  Node: pdb<3>,  Next: configparser,  Prev: sysconfig,  Up: New Improved and Deprecated Modules

1.3.9.45 pdb
............

The *note pdb: c5. debugger module gained a number of usability
improvements:

   * ‘pdb.py’ now has a ‘-c’ option that executes commands as given in a
     ‘.pdbrc’ script file.

   * A ‘.pdbrc’ script file can contain ‘continue’ and ‘next’ commands
     that continue debugging.

   * The ‘Pdb’ class constructor now accepts a `nosigint' argument.

   * New commands: ‘l(list)’, ‘ll(long list)’ and ‘source’ for listing
     source code.

   * New commands: ‘display’ and ‘undisplay’ for showing or hiding the
     value of an expression if it has changed.

   * New command: ‘interact’ for starting an interactive interpreter
     containing the global and local names found in the current scope.

   * Breakpoints can be cleared by breakpoint number.

(Contributed by Georg Brandl, Antonio Cuni and Ilya Sandler.)


File: python.info,  Node: configparser,  Next: urllib parse,  Prev: pdb<3>,  Up: New Improved and Deprecated Modules

1.3.9.46 configparser
.....................

The *note configparser: 23. module was modified to improve usability and
predictability of the default parser and its supported INI syntax.  The
old ‘ConfigParser’ class was removed in favor of ‘SafeConfigParser’
which has in turn been renamed to *note ConfigParser: 55b.  Support for
inline comments is now turned off by default and section or option
duplicates are not allowed in a single configuration source.

Config parsers gained a new API based on the mapping protocol:

     >>> parser = ConfigParser()
     >>> parser.read_string("""
     [DEFAULT]
     location = upper left
     visible = yes
     editable = no
     color = blue

     [main]
     title = Main Menu
     color = green

     [options]
     title = Options
     """)
     >>> parser['main']['color']
     'green'
     >>> parser['main']['editable']
     'no'
     >>> section = parser['options']
     >>> section['title']
     'Options'
     >>> section['title'] = 'Options (editable: %(editable)s)'
     >>> section['title']
     'Options (editable: no)'

The new API is implemented on top of the classical API, so custom parser
subclasses should be able to use it without modifications.

The INI file structure accepted by config parsers can now be customized.
Users can specify alternative option/value delimiters and comment
prefixes, change the name of the `DEFAULT' section or switch the
interpolation syntax.

There is support for pluggable interpolation including an additional
interpolation handler *note ExtendedInterpolation: 626.:

     >>> parser = ConfigParser(interpolation=ExtendedInterpolation())
     >>> parser.read_dict({'buildout': {'directory': '/home/ambv/zope9'},
                           'custom': {'prefix': '/usr/local'}})
     >>> parser.read_string("""
         [buildout]
         parts =
           zope9
           instance
         find-links =
           ${buildout:directory}/downloads/dist

         [zope9]
         recipe = plone.recipe.zope9install
         location = /opt/zope

         [instance]
         recipe = plone.recipe.zope9instance
         zope9-location = ${zope9:location}
         zope-conf = ${custom:prefix}/etc/zope.conf
         """)
     >>> parser['buildout']['find-links']
     '\n/home/ambv/zope9/downloads/dist'
     >>> parser['instance']['zope-conf']
     '/usr/local/etc/zope.conf'
     >>> instance = parser['instance']
     >>> instance['zope-conf']
     '/usr/local/etc/zope.conf'
     >>> instance['zope9-location']
     '/opt/zope'

A number of smaller features were also introduced, like support for
specifying encoding in read operations, specifying fallback values for
get-functions, or reading directly from dictionaries and strings.

(All changes contributed by Łukasz Langa.)


File: python.info,  Node: urllib parse,  Next: mailbox,  Prev: configparser,  Up: New Improved and Deprecated Modules

1.3.9.47 urllib.parse
.....................

A number of usability improvements were made for the *note urllib.parse:
118. module.

The *note urlparse(): 628. function now supports IPv6(1) addresses as
described in RFC 2732(2):

     >>> import urllib.parse
     >>> urllib.parse.urlparse('http://[dead:beef:cafe:5417:affe:8FA3:deaf:feed]/foo/')
     ParseResult(scheme='http',
                 netloc='[dead:beef:cafe:5417:affe:8FA3:deaf:feed]',
                 path='/foo/',
                 params='',
                 query='',
                 fragment='')

The *note urldefrag(): 629. function now returns a *note named tuple:
565.:

     >>> r = urllib.parse.urldefrag('http://python.org/about/#target')
     >>> r
     DefragResult(url='http://python.org/about/', fragment='target')
     >>> r[0]
     'http://python.org/about/'
     >>> r.fragment
     'target'

And, the *note urlencode(): 62a. function is now much more flexible,
accepting either a string or bytes type for the `query' argument.  If it
is a string, then the `safe', `encoding', and `error' parameters are
sent to *note quote_plus(): 62b. for encoding:

     >>> urllib.parse.urlencode([
              ('type', 'telenovela'),
              ('name', '¿Dónde Está Elisa?')],
              encoding='latin-1')
     'type=telenovela&name=%BFD%F3nde+Est%E1+Elisa%3F'

As detailed in *note Parsing ASCII Encoded Bytes: 62c, all the *note
urllib.parse: 118. functions now accept ASCII-encoded byte strings as
input, so long as they are not mixed with regular strings.  If
ASCII-encoded byte strings are given as parameters, the return types
will also be an ASCII-encoded byte strings:

     >>> urllib.parse.urlparse(b'http://www.python.org:80/about/')
     ParseResultBytes(scheme=b'http', netloc=b'www.python.org:80',
                      path=b'/about/', params=b'', query=b'', fragment=b'')

(Work by Nick Coghlan, Dan Mahn, and Senthil Kumaran in issue 2987(3),
issue 5468(4), and issue 9873(5).)

   ---------- Footnotes ----------

   (1) http://en.wikipedia.org/wiki/IPv6

   (2) https://tools.ietf.org/html/rfc2732.html

   (3) https://bugs.python.org/issue2987

   (4) https://bugs.python.org/issue5468

   (5) https://bugs.python.org/issue9873


File: python.info,  Node: mailbox,  Next: turtledemo,  Prev: urllib parse,  Up: New Improved and Deprecated Modules

1.3.9.48 mailbox
................

Thanks to a concerted effort by R. David Murray, the *note mailbox: ab.
module has been fixed for Python 3.2.  The challenge was that mailbox
had been originally designed with a text interface, but email messages
are best represented with *note bytes: 179. because various parts of a
message may have different encodings.

The solution harnessed the *note email: 67. package’s binary support for
parsing arbitrary email messages.  In addition, the solution required a
number of API changes.

As expected, the *note add(): 62e. method for *note mailbox.Mailbox:
62f. objects now accepts binary input.

*note StringIO: 1b1. and text file input are deprecated.  Also, string
input will fail early if non-ASCII characters are used.  Previously it
would fail when the email was processed in a later step.

There is also support for binary output.  The *note get_file(): 630.
method now returns a file in the binary mode (where it used to
incorrectly set the file to text-mode).  There is also a new *note
get_bytes(): 631. method that returns a *note bytes: 179. representation
of a message corresponding to a given `key'.

It is still possible to get non-binary output using the old API’s *note
get_string(): 632. method, but that approach is not very useful.
Instead, it is best to extract messages from a *note Message: 633.
object or to load them from binary input.

(Contributed by R. David Murray, with efforts from Steffen Daode
Nurpmeso and an initial patch by Victor Stinner in issue 9124(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue9124


File: python.info,  Node: turtledemo,  Prev: mailbox,  Up: New Improved and Deprecated Modules

1.3.9.49 turtledemo
...................

The demonstration code for the *note turtle: 110. module was moved from
the `Demo' directory to main library.  It includes over a dozen sample
scripts with lively displays.  Being on *note sys.path: 2d5, it can now
be run directly from the command-line:

     $ python -m turtledemo

(Moved from the Demo directory by Alexander Belopolsky in issue
10199(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10199


File: python.info,  Node: Multi-threading,  Next: Optimizations<2>,  Prev: New Improved and Deprecated Modules,  Up: What's New In Python 3 2

1.3.10 Multi-threading
----------------------

   * The mechanism for serializing execution of concurrently running
     Python threads (generally known as the *note GIL: 636. or *note
     Global Interpreter Lock: 637.) has been rewritten.  Among the
     objectives were more predictable switching intervals and reduced
     overhead due to lock contention and the number of ensuing system
     calls.  The notion of a "check interval" to allow thread switches
     has been abandoned and replaced by an absolute duration expressed
     in seconds.  This parameter is tunable through *note
     sys.setswitchinterval(): 638.  It currently defaults to 5
     milliseconds.

     Additional details about the implementation can be read from a
     python-dev mailing-list message(1) (however, "priority requests" as
     exposed in this message have not been kept for inclusion).

     (Contributed by Antoine Pitrou.)

   * Regular and recursive locks now accept an optional `timeout'
     argument to their *note acquire(): 639. method.  (Contributed by
     Antoine Pitrou; issue 7316(2).)

   * Similarly, *note threading.Semaphore.acquire(): 63a. also gained a
     `timeout' argument.  (Contributed by Torsten Landschoff; issue
     850728(3).)

   * Regular and recursive lock acquisitions can now be interrupted by
     signals on platforms using Pthreads.  This means that Python
     programs that deadlock while acquiring locks can be successfully
     killed by repeatedly sending SIGINT to the process (by pressing
     ‘Ctrl+C’ in most shells).  (Contributed by Reid Kleckner; issue
     8844(4).)

   ---------- Footnotes ----------

   (1) 
https://mail.python.org/pipermail/python-dev/2009-October/093321.html

   (2) https://bugs.python.org/issue7316

   (3) https://bugs.python.org/issue850728

   (4) https://bugs.python.org/issue8844


File: python.info,  Node: Optimizations<2>,  Next: Unicode,  Prev: Multi-threading,  Up: What's New In Python 3 2

1.3.11 Optimizations
--------------------

A number of small performance enhancements have been added:

   * Python’s peephole optimizer now recognizes patterns such ‘x in {1,
     2, 3}’ as being a test for membership in a set of constants.  The
     optimizer recasts the *note set: 5a4. as a *note frozenset: 63c.
     and stores the pre-built constant.

     Now that the speed penalty is gone, it is practical to start
     writing membership tests using set-notation.  This style is both
     semantically clear and operationally fast:

          extension = name.rpartition('.')[2]
          if extension in {'xml', 'html', 'xhtml', 'css'}:
              handle(name)

     (Patch and additional tests contributed by Dave Malcolm; issue
     6690(1)).

   * Serializing and unserializing data using the *note pickle: c6.
     module is now several times faster.

     (Contributed by Alexandre Vassalotti, Antoine Pitrou and the
     Unladen Swallow team in issue 9410(2) and issue 3873(3).)

   * The Timsort algorithm(4) used in *note list.sort(): 63d. and *note
     sorted(): 63e. now runs faster and uses less memory when called
     with a *note key function: 582.  Previously, every element of a
     list was wrapped with a temporary object that remembered the key
     value associated with each element.  Now, two arrays of keys and
     values are sorted in parallel.  This saves the memory consumed by
     the sort wrappers, and it saves time lost to delegating
     comparisons.

     (Patch by Daniel Stutzbach in issue 9915(5).)

   * JSON decoding performance is improved and memory consumption is
     reduced whenever the same string is repeated for multiple keys.
     Also, JSON encoding now uses the C speedups when the ‘sort_keys’
     argument is true.

     (Contributed by Antoine Pitrou in issue 7451(6) and by Raymond
     Hettinger and Antoine Pitrou in issue 10314(7).)

   * Recursive locks (created with the *note threading.RLock(): 63f.
     API) now benefit from a C implementation which makes them as fast
     as regular locks, and between 10x and 15x faster than their
     previous pure Python implementation.

     (Contributed by Antoine Pitrou; issue 3001(8).)

   * The fast-search algorithm in stringlib is now used by the
     ‘split()’, ‘rsplit()’, ‘splitlines()’ and ‘replace()’ methods on
     *note bytes: 179, *note bytearray: 17a. and *note str: 178.
     objects.  Likewise, the algorithm is also used by ‘rfind()’,
     ‘rindex()’, ‘rsplit()’ and ‘rpartition()’.

     (Patch by Florent Xicluna in issue 7622(9) and issue 7462(10).)

   * Integer to string conversions now work two "digits" at a time,
     reducing the number of division and modulo operations.

     (issue 6713(11) by Gawain Bolton, Mark Dickinson, and Victor
     Stinner.)

There were several other minor optimizations.  Set differencing now runs
faster when one operand is much larger than the other (patch by Andress
Bennetts in issue 8685(12)).  The ‘array.repeat()’ method has a faster
implementation (issue 1569291(13) by Alexander Belopolsky).  The
‘BaseHTTPRequestHandler’ has more efficient buffering (issue 3709(14) by
Andrew Schaaf).  The *note operator.attrgetter(): 640. function has been
sped-up (issue 10160(15) by Christos Georgiou).  And ‘ConfigParser’
loads multi-line arguments a bit faster (issue 7113(16) by Łukasz
Langa).

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue6690

   (2) https://bugs.python.org/issue9410

   (3) https://bugs.python.org/issue3873

   (4) http://en.wikipedia.org/wiki/Timsort

   (5) https://bugs.python.org/issue9915

   (6) https://bugs.python.org/issue7451

   (7) https://bugs.python.org/issue10314

   (8) https://bugs.python.org/issue3001

   (9) https://bugs.python.org/issue7622

   (10) https://bugs.python.org/issue7462

   (11) https://bugs.python.org/issue6713

   (12) https://bugs.python.org/issue8685

   (13) https://bugs.python.org/issue1569291

   (14) https://bugs.python.org/issue3709

   (15) https://bugs.python.org/issue10160

   (16) https://bugs.python.org/issue7113


File: python.info,  Node: Unicode,  Next: Codecs,  Prev: Optimizations<2>,  Up: What's New In Python 3 2

1.3.12 Unicode
--------------

Python has been updated to Unicode 6.0.0(1).  The update to the standard
adds over 2,000 new characters including emoji(2) symbols which are
important for mobile phones.

In addition, the updated standard has altered the character properties
for two Kannada characters (U+0CF1, U+0CF2) and one New Tai Lue numeric
character (U+19DA), making the former eligible for use in identifiers
while disqualifying the latter.  For more information, see Unicode
Character Database Changes(3).

   ---------- Footnotes ----------

   (1) http://unicode.org/versions/Unicode6.0.0/

   (2) http://en.wikipedia.org/wiki/Emoji

   (3) http://www.unicode.org/versions/Unicode6.0.0/#Database_Changes


File: python.info,  Node: Codecs,  Next: Documentation,  Prev: Unicode,  Up: What's New In Python 3 2

1.3.13 Codecs
-------------

Support was added for `cp720' Arabic DOS encoding (issue 1616979(1)).

MBCS encoding no longer ignores the error handler argument.  In the
default strict mode, it raises an *note UnicodeDecodeError: 31a. when it
encounters an undecodable byte sequence and an *note UnicodeEncodeError:
643. for an unencodable character.

The MBCS codec supports ‘'strict'’ and ‘'ignore'’ error handlers for
decoding, and ‘'strict'’ and ‘'replace'’ for encoding.

To emulate Python3.1 MBCS encoding, select the ‘'ignore'’ handler for
decoding and the ‘'replace'’ handler for encoding.

On Mac OS X, Python decodes command line arguments with ‘'utf-8'’ rather
than the locale encoding.

By default, *note tarfile: fc. uses ‘'utf-8'’ encoding on Windows
(instead of ‘'mbcs'’) and the ‘'surrogateescape'’ error handler on all
operating systems.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1616979


File: python.info,  Node: Documentation,  Next: IDLE,  Prev: Codecs,  Up: What's New In Python 3 2

1.3.14 Documentation
--------------------

The documentation continues to be improved.

   * A table of quick links has been added to the top of lengthy
     sections such as *note Built-in Functions: 645.  In the case of
     *note itertools: a0, the links are accompanied by tables of
     cheatsheet-style summaries to provide an overview and memory jog
     without having to read all of the docs.

   * In some cases, the pure Python source code can be a helpful adjunct
     to the documentation, so now many modules now feature quick links
     to the latest version of the source code.  For example, the *note
     functools: 84. module documentation has a quick link at the top
     labeled:

          `Source code' Lib/functools.py(1).

     (Contributed by Raymond Hettinger; see rationale(2).)

   * The docs now contain more examples and recipes.  In particular,
     *note re: d9. module has an extensive section, *note Regular
     Expression Examples: 646.  Likewise, the *note itertools: a0.
     module continues to be updated with new *note Itertools Recipes:
     647.

   * The *note datetime: 2f. module now has an auxiliary implementation
     in pure Python.  No functionality was changed.  This just provides
     an easier-to-read alternate implementation.

     (Contributed by Alexander Belopolsky in issue 9528(3).)

   * The unmaintained ‘Demo’ directory has been removed.  Some demos
     were integrated into the documentation, some were moved to the
     ‘Tools/demo’ directory, and others were removed altogether.

     (Contributed by Georg Brandl in issue 7962(4).)

   ---------- Footnotes ----------

   (1) https://hg.python.org/cpython/file/3.4/Lib/functools.py

   (2) http://rhettinger.wordpress.com/2011/01/28/open-your-source-more/

   (3) https://bugs.python.org/issue9528

   (4) https://bugs.python.org/issue7962


File: python.info,  Node: IDLE,  Next: Code Repository,  Prev: Documentation,  Up: What's New In Python 3 2

1.3.15 IDLE
-----------

   * The format menu now has an option to clean source files by
     stripping trailing whitespace.

     (Contributed by Raymond Hettinger; issue 5150(1).)

   * IDLE on Mac OS X now works with both Carbon AquaTk and Cocoa
     AquaTk.

     (Contributed by Kevin Walzer, Ned Deily, and Ronald Oussoren; issue
     6075(2).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5150

   (2) https://bugs.python.org/issue6075


File: python.info,  Node: Code Repository,  Next: Build and C API Changes<2>,  Prev: IDLE,  Up: What's New In Python 3 2

1.3.16 Code Repository
----------------------

In addition to the existing Subversion code repository at
‘http://svn.python.org’ there is now a Mercurial(1) repository at
‘https://hg.python.org/’.

After the 3.2 release, there are plans to switch to Mercurial as the
primary repository.  This distributed version control system should make
it easier for members of the community to create and share external
changesets.  See PEP 385(2) for details.

To learn to use the new version control system, see the tutorial by Joel
Spolsky(3) or the Guide to Mercurial Workflows(4).

   ---------- Footnotes ----------

   (1) http://mercurial.selenic.com/

   (2) https://www.python.org/dev/peps/pep-0385

   (3) http://hginit.com

   (4) http://mercurial.selenic.com/guide


File: python.info,  Node: Build and C API Changes<2>,  Next: Porting to Python 3 2,  Prev: Code Repository,  Up: What's New In Python 3 2

1.3.17 Build and C API Changes
------------------------------

Changes to Python’s build process and to the C API include:

   * The `idle', `pydoc' and `2to3' scripts are now installed with a
     version-specific suffix on ‘make altinstall’ (issue 10679(1)).

   * The C functions that access the Unicode Database now accept and
     return characters from the full Unicode range, even on narrow
     unicode builds (Py_UNICODE_TOLOWER, Py_UNICODE_ISDECIMAL, and
     others).  A visible difference in Python is that *note
     unicodedata.numeric(): 64b. now returns the correct value for large
     code points, and *note repr(): 3db. may consider more characters as
     printable.

     (Reported by Bupjoe Lee and fixed by Amaury Forgeot D’Arc; issue
     5127(2).)

   * Computed gotos are now enabled by default on supported compilers
     (which are detected by the configure script).  They can still be
     disabled selectively by specifying ‘--without-computed-gotos’.

     (Contributed by Antoine Pitrou; issue 9203(3).)

   * The option ‘--with-wctype-functions’ was removed.  The built-in
     unicode database is now used for all functions.

     (Contributed by Amaury Forgeot D’Arc; issue 9210(4).)

   * Hash values are now values of a new type, ‘Py_hash_t’, which is
     defined to be the same size as a pointer.  Previously they were of
     type long, which on some 64-bit operating systems is still only 32
     bits long.  As a result of this fix, *note set: 5a4. and *note
     dict: 380. can now hold more than ‘2**32’ entries on builds with
     64-bit pointers (previously, they could grow to that size but their
     performance degraded catastrophically).

     (Suggested by Raymond Hettinger and implemented by Benjamin
     Peterson; issue 9778(5).)

   * A new macro ‘Py_VA_COPY’ copies the state of the variable argument
     list.  It is equivalent to C99 `va_copy' but available on all
     Python platforms (issue 2443(6)).

   * A new C API function *note PySys_SetArgvEx(): 64c. allows an
     embedded interpreter to set *note sys.argv: 64d. without also
     modifying *note sys.path: 2d5. (issue 5753(7)).

   * ‘PyEval_CallObject’ is now only available in macro form.  The
     function declaration, which was kept for backwards compatibility
     reasons, is now removed – the macro was introduced in 1997 (issue
     8276(8)).

   * There is a new function *note PyLong_AsLongLongAndOverflow(): 64e.
     which is analogous to *note PyLong_AsLongAndOverflow(): 64f.  They
     both serve to convert Python *note int: 185. into a native
     fixed-width type while providing detection of cases where the
     conversion won’t fit (issue 7767(9)).

   * The *note PyUnicode_CompareWithASCIIString(): 650. function now
     returns `not equal' if the Python string is `NUL' terminated.

   * There is a new function *note PyErr_NewExceptionWithDoc(): 651.
     that is like *note PyErr_NewException(): 652. but allows a
     docstring to be specified.  This lets C exceptions have the same
     self-documenting capabilities as their pure Python counterparts
     (issue 7033(10)).

   * When compiled with the ‘--with-valgrind’ option, the pymalloc
     allocator will be automatically disabled when running under
     Valgrind.  This gives improved memory leak detection when running
     under Valgrind, while taking advantage of pymalloc at other times
     (issue 2422(11)).

   * Removed the ‘O?’ format from the `PyArg_Parse' functions.  The
     format is no longer used and it had never been documented (issue
     8837(12)).

There were a number of other small changes to the C-API. See the
Misc/NEWS(13) file for a complete list.

Also, there were a number of updates to the Mac OS X build, see
Mac/BuildScript/README.txt(14) for details.  For users running a
32/64-bit build, there is a known problem with the default Tcl/Tk on Mac
OS X 10.6.  Accordingly, we recommend installing an updated alternative
such as ActiveState Tcl/Tk 8.5.9(15).  See
‘https://www.python.org/download/mac/tcltk/’ for additional details.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue10679

   (2) https://bugs.python.org/issue5127

   (3) https://bugs.python.org/issue9203

   (4) https://bugs.python.org/issue9210

   (5) https://bugs.python.org/issue9778

   (6) https://bugs.python.org/issue2443

   (7) https://bugs.python.org/issue5753

   (8) https://bugs.python.org/issue8276

   (9) https://bugs.python.org/issue7767

   (10) https://bugs.python.org/issue7033

   (11) https://bugs.python.org/issue2422

   (12) https://bugs.python.org/issue8837

   (13) https://hg.python.org/cpython/file/3.4/Misc/NEWS

   (14) 
https://hg.python.org/cpython/file/3.4/Mac/BuildScript/README.txt

   (15) http://www.activestate.com/activetcl/downloads


File: python.info,  Node: Porting to Python 3 2,  Prev: Build and C API Changes<2>,  Up: What's New In Python 3 2

1.3.18 Porting to Python 3.2
----------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code:

   * The *note configparser: 23. module has a number of clean-ups.  The
     major change is to replace the old ‘ConfigParser’ class with
     long-standing preferred alternative ‘SafeConfigParser’.  In
     addition there are a number of smaller incompatibilities:

        * The interpolation syntax is now validated on *note get(): 654.
          and *note set(): 655. operations.  In the default
          interpolation scheme, only two tokens with percent signs are
          valid: ‘%(name)s’ and ‘%%’, the latter being an escaped
          percent sign.

        * The *note set(): 655. and *note add_section(): 656. methods
          now verify that values are actual strings.  Formerly,
          unsupported types could be introduced unintentionally.

        * Duplicate sections or options from a single source now raise
          either *note DuplicateSectionError: 657. or *note
          DuplicateOptionError: 658.  Formerly, duplicates would
          silently overwrite a previous entry.

        * Inline comments are now disabled by default so now the `;'
          character can be safely used in values.

        * Comments now can be indented.  Consequently, for `;' or `#' to
          appear at the start of a line in multiline values, it has to
          be interpolated.  This keeps comment prefix characters in
          values from being mistaken as comments.

        * ‘""’ is now a valid value and is no longer automatically
          converted to an empty string.  For empty strings, use ‘"option
          ="’ in a line.

   * The *note nntplib: bc. module was reworked extensively, meaning
     that its APIs are often incompatible with the 3.1 APIs.

   * *note bytearray: 17a. objects can no longer be used as filenames;
     instead, they should be converted to *note bytes: 179.

   * The ‘array.tostring()’ and ‘array.fromstring()’ have been renamed
     to ‘array.tobytes()’ and ‘array.frombytes()’ for clarity.  The old
     names have been deprecated.  (See issue 8990(1).)

   * ‘PyArg_Parse*()’ functions:

        * "t#" format has been removed: use "s#" or "s*" instead

        * "w" and "w#" formats has been removed: use "w*" instead

   * The ‘PyCObject’ type, deprecated in 3.1, has been removed.  To wrap
     opaque C pointers in Python objects, the *note PyCapsule: 659. API
     should be used instead; the new type has a well-defined interface
     for passing typing safety information and a less complicated
     signature for calling a destructor.

   * The ‘sys.setfilesystemencoding()’ function was removed because it
     had a flawed design.

   * The *note random.seed(): 65a. function and method now salt string
     seeds with an sha512 hash function.  To access the previous version
     of `seed' in order to reproduce Python 3.1 sequences, set the
     `version' argument to `1', ‘random.seed(s, version=1)’.

   * The previously deprecated ‘string.maketrans()’ function has been
     removed in favor of the static methods *note bytes.maketrans():
     65b. and *note bytearray.maketrans(): 65c.  This change solves the
     confusion around which types were supported by the *note string:
     f1. module.  Now, *note str: 178, *note bytes: 179, and *note
     bytearray: 17a. each have their own `maketrans' and `translate'
     methods with intermediate translation tables of the appropriate
     type.

     (Contributed by Georg Brandl; issue 5675(2).)

   * The previously deprecated ‘contextlib.nested()’ function has been
     removed in favor of a plain *note with: 19b. statement which can
     accept multiple context managers.  The latter technique is faster
     (because it is built-in), and it does a better job finalizing
     multiple context managers when one of them raises an exception:

          with open('mylog.txt') as infile, open('a.out', 'w') as outfile:
              for line in infile:
                  if '<critical>' in line:
                      outfile.write(line)

     (Contributed by Georg Brandl and Mattias Brändström; appspot issue
     53094(3).)

   * *note struct.pack(): 65d. now only allows bytes for the ‘s’ string
     pack code.  Formerly, it would accept text arguments and implicitly
     encode them to bytes using UTF-8.  This was problematic because it
     made assumptions about the correct encoding and because a
     variable-length encoding can fail when writing to fixed length
     segment of a structure.

     Code such as ‘struct.pack('<6sHHBBB', 'GIF87a', x, y)’ should be
     rewritten with to use bytes instead of text,
     ‘struct.pack('<6sHHBBB', b'GIF87a', x, y)’.

     (Discovered by David Beazley and fixed by Victor Stinner; issue
     10783(4).)

   * The *note xml.etree.ElementTree: 130. class now raises an *note
     xml.etree.ElementTree.ParseError: 65e. when a parse fails.
     Previously it raised a *note xml.parsers.expat.ExpatError: 65f.

   * The new, longer *note str(): 178. value on floats may break
     doctests which rely on the old output format.

   * In *note subprocess.Popen: 5c0, the default value for `close_fds'
     is now ‘True’ under Unix; under Windows, it is ‘True’ if the three
     standard streams are set to ‘None’, ‘False’ otherwise.  Previously,
     `close_fds' was always ‘False’ by default, which produced difficult
     to solve bugs or race conditions when open file descriptors would
     leak into the child process.

   * Support for legacy HTTP 0.9 has been removed from *note
     urllib.request: 119. and *note http.client: 92.  Such support is
     still present on the server side (in *note http.server: 95.).

     (Contributed by Antoine Pitrou, issue 10711(5).)

   * SSL sockets in timeout mode now raise *note socket.timeout: 660.
     when a timeout occurs, rather than a generic *note SSLError: 661.

     (Contributed by Antoine Pitrou, issue 10272(6).)

   * The misleading functions *note PyEval_AcquireLock(): 662. and *note
     PyEval_ReleaseLock(): 663. have been officially deprecated.  The
     thread-state aware APIs (such as *note PyEval_SaveThread(): 664.
     and *note PyEval_RestoreThread(): 665.) should be used instead.

   * Due to security risks, ‘asyncore.handle_accept()’ has been
     deprecated, and a new function, ‘asyncore.handle_accepted()’, was
     added to replace it.

     (Contributed by Giampaolo Rodola in issue 6706(7).)

   * Due to the new *note GIL: 636. implementation, *note
     PyEval_InitThreads(): 666. cannot be called before *note
     Py_Initialize(): 667. anymore.

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue8990

   (2) https://bugs.python.org/issue5675

   (3) https://codereview.appspot.com/53094

   (4) https://bugs.python.org/issue10783

   (5) https://bugs.python.org/issue10711

   (6) https://bugs.python.org/issue10272

   (7) https://bugs.python.org/issue6706


File: python.info,  Node: What's New In Python 3 1,  Next: What's New In Python 3 0,  Prev: What's New In Python 3 2,  Up: What's New in Python

1.4 What’s New In Python 3.1
============================


Author: Raymond Hettinger

This article explains the new features in Python 3.1, compared to 3.0.

* Menu:

* PEP 372; Ordered Dictionaries: PEP 372 Ordered Dictionaries. 
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator. 
* Other Language Changes: Other Language Changes<4>. 
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<2>. 
* Optimizations: Optimizations<3>. 
* IDLE: IDLE<2>. 
* Build and C API Changes: Build and C API Changes<3>. 
* Porting to Python 3.1: Porting to Python 3 1. 


File: python.info,  Node: PEP 372 Ordered Dictionaries,  Next: PEP 378 Format Specifier for Thousands Separator,  Up: What's New In Python 3 1

1.4.1 PEP 372: Ordered Dictionaries
-----------------------------------

Regular Python dictionaries iterate over key/value pairs in arbitrary
order.  Over the years, a number of authors have written alternative
implementations that remember the order that the keys were originally
inserted.  Based on the experiences from those implementations, a new
*note collections.OrderedDict: 587. class has been introduced.

The OrderedDict API is substantially the same as regular dictionaries
but will iterate over keys and values in a guaranteed order depending on
when a key was first inserted.  If a new entry overwrites an existing
entry, the original insertion position is left unchanged.  Deleting an
entry and reinserting it will move it to the end.

The standard library now supports use of ordered dictionaries in several
modules.  The *note configparser: 23. module uses them by default.  This
lets configuration files be read, modified, and then written back in
their original order.  The `_asdict()' method for *note
collections.namedtuple(): 66b. now returns an ordered dictionary with
the values appearing in the same order as the underlying tuple indicies.
The *note json: a1. module is being built-out with an
`object_pairs_hook' to allow OrderedDicts to be built by the decoder.
Support was also added for third-party tools like PyYAML(1).

See also
........

PEP 372(2) - Ordered Dictionaries

     PEP written by Armin Ronacher and Raymond Hettinger.
     Implementation written by Raymond Hettinger.

   ---------- Footnotes ----------

   (1) http://pyyaml.org/

   (2) https://www.python.org/dev/peps/pep-0372


File: python.info,  Node: PEP 378 Format Specifier for Thousands Separator,  Next: Other Language Changes<4>,  Prev: PEP 372 Ordered Dictionaries,  Up: What's New In Python 3 1

1.4.2 PEP 378: Format Specifier for Thousands Separator
-------------------------------------------------------

The built-in *note format(): 556. function and the *note str.format():
557. method use a mini-language that now includes a simple, non-locale
aware way to format a number with a thousands separator.  That provides
a way to humanize a program’s output, improving its professional
appearance and readability:

     >>> format(1234567, ',d')
     '1,234,567'
     >>> format(1234567.89, ',.2f')
     '1,234,567.89'
     >>> format(12345.6 + 8901234.12j, ',f')
     '12,345.600000+8,901,234.120000j'
     >>> format(Decimal('1234567.89'), ',f')
     '1,234,567.89'

The supported types are *note int: 185, *note float: 327, *note complex:
326. and *note decimal.Decimal: 3d4.

Discussions are underway about how to specify alternative separators
like dots, spaces, apostrophes, or underscores.  Locale-aware
applications should use the existing `n' format specifier which already
has some support for thousands separators.

See also
........

PEP 378(1) - Format Specifier for Thousands Separator

     PEP written by Raymond Hettinger and implemented by Eric Smith and
     Mark Dickinson.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0378


File: python.info,  Node: Other Language Changes<4>,  Next: New Improved and Deprecated Modules<2>,  Prev: PEP 378 Format Specifier for Thousands Separator,  Up: What's New In Python 3 1

1.4.3 Other Language Changes
----------------------------

Some smaller changes made to the core Python language are:

   * Directories and zip archives containing a ‘__main__.py’ file can
     now be executed directly by passing their name to the interpreter.
     The directory/zipfile is automatically inserted as the first entry
     in sys.path.  (Suggestion and initial patch by Andy Chu; revised
     patch by Phillip J. Eby and Nick Coghlan; issue 1739468(1).)

   * The *note int(): 185. type gained a ‘bit_length’ method that
     returns the number of bits necessary to represent its argument in
     binary:

          >>> n = 37
          >>> bin(37)
          '0b100101'
          >>> n.bit_length()
          6
          >>> n = 2**123-1
          >>> n.bit_length()
          123
          >>> (n+1).bit_length()
          124

     (Contributed by Fredrik Johansson, Victor Stinner, Raymond
     Hettinger, and Mark Dickinson; issue 3439(2).)

   * The fields in *note format(): 556. strings can now be automatically
     numbered:

          >>> 'Sir {} of {}'.format('Gallahad', 'Camelot')
          'Sir Gallahad of Camelot'

     Formerly, the string would have required numbered fields such as:
     ‘'Sir {0} of {1}'’.

     (Contributed by Eric Smith; issue 5237(3).)

   * The ‘string.maketrans()’ function is deprecated and is replaced by
     new static methods, *note bytes.maketrans(): 65b. and *note
     bytearray.maketrans(): 65c.  This change solves the confusion
     around which types were supported by the *note string: f1. module.
     Now, *note str: 178, *note bytes: 179, and *note bytearray: 17a.
     each have their own `maketrans' and `translate' methods with
     intermediate translation tables of the appropriate type.

     (Contributed by Georg Brandl; issue 5675(4).)

   * The syntax of the *note with: 19b. statement now allows multiple
     context managers in a single statement:

          >>> with open('mylog.txt') as infile, open('a.out', 'w') as outfile:
          ...     for line in infile:
          ...         if '<critical>' in line:
          ...             outfile.write(line)

     With the new syntax, the ‘contextlib.nested()’ function is no
     longer needed and is now deprecated.

     (Contributed by Georg Brandl and Mattias Brändström; appspot issue
     53094(5).)

   * ‘round(x, n)’ now returns an integer if `x' is an integer.
     Previously it returned a float:

          >>> round(1123, -2)
          1100

     (Contributed by Mark Dickinson; issue 4707(6).)

   * Python now uses David Gay’s algorithm for finding the shortest
     floating point representation that doesn’t change its value.  This
     should help mitigate some of the confusion surrounding binary
     floating point numbers.

     The significance is easily seen with a number like ‘1.1’ which does
     not have an exact equivalent in binary floating point.  Since there
     is no exact equivalent, an expression like ‘float('1.1')’ evaluates
     to the nearest representable value which is ‘0x1.199999999999ap+0’
     in hex or ‘1.100000000000000088817841970012523233890533447265625’
     in decimal.  That nearest value was and still is used in subsequent
     floating point calculations.

     What is new is how the number gets displayed.  Formerly, Python
     used a simple approach.  The value of ‘repr(1.1)’ was computed as
     ‘format(1.1, '.17g')’ which evaluated to ‘'1.1000000000000001'’.
     The advantage of using 17 digits was that it relied on IEEE-754
     guarantees to assure that ‘eval(repr(1.1))’ would round-trip
     exactly to its original value.  The disadvantage is that many
     people found the output to be confusing (mistaking intrinsic
     limitations of binary floating point representation as being a
     problem with Python itself).

     The new algorithm for ‘repr(1.1)’ is smarter and returns ‘'1.1'’.
     Effectively, it searches all equivalent string representations
     (ones that get stored with the same underlying float value) and
     returns the shortest representation.

     The new algorithm tends to emit cleaner representations when
     possible, but it does not change the underlying values.  So, it is
     still the case that ‘1.1 + 2.2 != 3.3’ even though the
     representations may suggest otherwise.

     The new algorithm depends on certain features in the underlying
     floating point implementation.  If the required features are not
     found, the old algorithm will continue to be used.  Also, the text
     pickle protocols assure cross-platform portability by using the old
     algorithm.

     (Contributed by Eric Smith and Mark Dickinson; issue 1580(7))

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1739468

   (2) https://bugs.python.org/issue3439

   (3) https://bugs.python.org/issue5237

   (4) https://bugs.python.org/issue5675

   (5) https://codereview.appspot.com/53094

   (6) https://bugs.python.org/issue4707

   (7) https://bugs.python.org/issue1580


File: python.info,  Node: New Improved and Deprecated Modules<2>,  Next: Optimizations<3>,  Prev: Other Language Changes<4>,  Up: What's New In Python 3 1

1.4.4 New, Improved, and Deprecated Modules
-------------------------------------------

   * Added a *note collections.Counter: 3bd. class to support convenient
     counting of unique items in a sequence or iterable:

          >>> Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])
          Counter({'blue': 3, 'red': 2, 'green': 1})

     (Contributed by Raymond Hettinger; issue 1696199(1).)

   * Added a new module, *note tkinter.ttk: 109. for access to the Tk
     themed widget set.  The basic idea of ttk is to separate, to the
     extent possible, the code implementing a widget’s behavior from the
     code implementing its appearance.

     (Contributed by Guilherme Polo; issue 2983(2).)

   * The *note gzip.GzipFile: 5c5. and *note bz2.BZ2File: 2db. classes
     now support the context management protocol:

          >>> # Automatically close file after writing
          >>> with gzip.GzipFile(filename, "wb") as f:
          ...     f.write(b"xxx")

     (Contributed by Antoine Pitrou.)

   * The *note decimal: 34. module now supports methods for creating a
     decimal object from a binary *note float: 327.  The conversion is
     exact but can sometimes be surprising:

          >>> Decimal.from_float(1.1)
          Decimal('1.100000000000000088817841970012523233890533447265625')

     The long decimal result shows the actual binary fraction being
     stored for `1.1'.  The fraction has many digits because `1.1'
     cannot be exactly represented in binary.

     (Contributed by Raymond Hettinger and Mark Dickinson.)

   * The *note itertools: a0. module grew two new functions.  The *note
     itertools.combinations_with_replacement(): 66f. function is one of
     four for generating combinatorics including permutations and
     Cartesian products.  The *note itertools.compress(): 670. function
     mimics its namesake from APL. Also, the existing *note
     itertools.count(): 671. function now has an optional `step'
     argument and can accept any type of counting sequence including
     *note fractions.Fraction: 5b8. and *note decimal.Decimal: 3d4.:

          >>> [p+q for p,q in combinations_with_replacement('LOVE', 2)]
          ['LL', 'LO', 'LV', 'LE', 'OO', 'OV', 'OE', 'VV', 'VE', 'EE']

          >>> list(compress(data=range(10), selectors=[0,0,1,1,0,1,0,1,0,0]))
          [2, 3, 5, 7]

          >>> c = count(start=Fraction(1,2), step=Fraction(1,6))
          >>> [next(c), next(c), next(c), next(c)]
          [Fraction(1, 2), Fraction(2, 3), Fraction(5, 6), Fraction(1, 1)]

     (Contributed by Raymond Hettinger.)

   * *note collections.namedtuple(): 66b. now supports a keyword
     argument `rename' which lets invalid fieldnames be automatically
     converted to positional names in the form _0, _1, etc.  This is
     useful when the field names are being created by an external source
     such as a CSV header, SQL field list, or user input:

          >>> query = input()
          SELECT region, dept, count(*) FROM main GROUPBY region, dept

          >>> cursor.execute(query)
          >>> query_fields = [desc[0] for desc in cursor.description]
          >>> UserQuery = namedtuple('UserQuery', query_fields, rename=True)
          >>> pprint.pprint([UserQuery(*row) for row in cursor])
          [UserQuery(region='South', dept='Shipping', _2=185),
           UserQuery(region='North', dept='Accounting', _2=37),
           UserQuery(region='West', dept='Sales', _2=419)]

     (Contributed by Raymond Hettinger; issue 1818(3).)

   * The *note re.sub(): 32c, *note re.subn(): 672. and *note
     re.split(): 32a. functions now accept a flags parameter.

     (Contributed by Gregory Smith.)

   * The *note logging: a6. module now implements a simple *note
     logging.NullHandler: 673. class for applications that are not using
     logging but are calling library code that does.  Setting-up a null
     handler will suppress spurious warnings such as "No handlers could
     be found for logger foo":

          >>> h = logging.NullHandler()
          >>> logging.getLogger("foo").addHandler(h)

     (Contributed by Vinay Sajip; issue 4384(4)).

   * The *note runpy: de. module which supports the ‘-m’ command line
     switch now supports the execution of packages by looking for and
     executing a ‘__main__’ submodule when a package name is supplied.

     (Contributed by Andi Vajda; issue 4195(5).)

   * The *note pdb: c5. module can now access and display source code
     loaded via *note zipimport: 13b. (or any other conformant PEP
     302(6) loader).

     (Contributed by Alexander Belopolsky; issue 4201(7).)

   * *note functools.partial: 1d3. objects can now be pickled.

     (Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack
     Diederich; issue 5228(8).)

   * Add *note pydoc: d5. help topics for symbols so that ‘help('@')’
     works as expected in the interactive environment.

     (Contributed by David Laban; issue 4739(9).)

   * The *note unittest: 114. module now supports skipping individual
     tests or classes of tests.  And it supports marking a test as a
     expected failure, a test that is known to be broken, but shouldn’t
     be counted as a failure on a TestResult:

          class TestGizmo(unittest.TestCase):

              @unittest.skipUnless(sys.platform.startswith("win"), "requires Windows")
              def test_gizmo_on_windows(self):
                  ...

              @unittest.expectedFailure
              def test_gimzo_without_required_library(self):
                  ...

     Also, tests for exceptions have been builtout to work with context
     managers using the *note with: 19b. statement:

          def test_division_by_zero(self):
              with self.assertRaises(ZeroDivisionError):
                  x / 0

     In addition, several new assertion methods were added including
     ‘assertSetEqual()’, ‘assertDictEqual()’,
     ‘assertDictContainsSubset()’, ‘assertListEqual()’,
     ‘assertTupleEqual()’, ‘assertSequenceEqual()’,
     ‘assertRaisesRegexp()’, ‘assertIsNone()’, and ‘assertIsNotNone()’.

     (Contributed by Benjamin Peterson and Antoine Pitrou.)

   * The *note io: 9e. module has three new constants for the ‘seek()’
     method ‘SEEK_SET’, ‘SEEK_CUR’, and ‘SEEK_END’.

   * The *note sys.version_info: 532. tuple is now a named tuple:

          >>> sys.version_info
          sys.version_info(major=3, minor=1, micro=0, releaselevel='alpha', serial=2)

     (Contributed by Ross Light; issue 4285(10).)

   * The *note nntplib: bc. and *note imaplib: 96. modules now support
     IPv6.

     (Contributed by Derek Morr; issue 1655(11) and issue 1664(12).)

   * The *note pickle: c6. module has been adapted for better
     interoperability with Python 2.x when used with protocol 2 or
     lower.  The reorganization of the standard library changed the
     formal reference for many objects.  For example, ‘__builtin__.set’
     in Python 2 is called ‘builtins.set’ in Python 3.  This change
     confounded efforts to share data between different versions of
     Python.  But now when protocol 2 or lower is selected, the pickler
     will automatically use the old Python 2 names for both loading and
     dumping.  This remapping is turned-on by default but can be
     disabled with the `fix_imports' option:

          >>> s = {1, 2, 3}
          >>> pickle.dumps(s, protocol=0)
          b'c__builtin__\nset\np0\n((lp1\nL1L\naL2L\naL3L\natp2\nRp3\n.'
          >>> pickle.dumps(s, protocol=0, fix_imports=False)
          b'cbuiltins\nset\np0\n((lp1\nL1L\naL2L\naL3L\natp2\nRp3\n.'

     An unfortunate but unavoidable side-effect of this change is that
     protocol 2 pickles produced by Python 3.1 won’t be readable with
     Python 3.0.  The latest pickle protocol, protocol 3, should be used
     when migrating data between Python 3.x implementations, as it
     doesn’t attempt to remain compatible with Python 2.x.

     (Contributed by Alexandre Vassalotti and Antoine Pitrou, issue
     6137(13).)

   * A new module, *note importlib: 99. was added.  It provides a
     complete, portable, pure Python reference implementation of the
     *note import: 674. statement and its counterpart, the *note
     __import__(): 383. function.  It represents a substantial step
     forward in documenting and defining the actions that take place
     during imports.

     (Contributed by Brett Cannon.)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue1696199

   (2) https://bugs.python.org/issue2983

   (3) https://bugs.python.org/issue1818

   (4) https://bugs.python.org/issue4384

   (5) https://bugs.python.org/issue4195

   (6) https://www.python.org/dev/peps/pep-0302

   (7) https://bugs.python.org/issue4201

   (8) https://bugs.python.org/issue5228

   (9) https://bugs.python.org/issue4739

   (10) https://bugs.python.org/issue4285

   (11) https://bugs.python.org/issue1655

   (12) https://bugs.python.org/issue1664

   (13) https://bugs.python.org/issue6137


File: python.info,  Node: Optimizations<3>,  Next: IDLE<2>,  Prev: New Improved and Deprecated Modules<2>,  Up: What's New In Python 3 1

1.4.5 Optimizations
-------------------

Major performance enhancements have been added:

   * The new I/O library (as defined in PEP 3116(1)) was mostly written
     in Python and quickly proved to be a problematic bottleneck in
     Python 3.0.  In Python 3.1, the I/O library has been entirely
     rewritten in C and is 2 to 20 times faster depending on the task at
     hand.  The pure Python version is still available for
     experimentation purposes through the ‘_pyio’ module.

     (Contributed by Amaury Forgeot d’Arc and Antoine Pitrou.)

   * Added a heuristic so that tuples and dicts containing only
     untrackable objects are not tracked by the garbage collector.  This
     can reduce the size of collections and therefore the garbage
     collection overhead on long-running programs, depending on their
     particular use of datatypes.

     (Contributed by Antoine Pitrou, issue 4688(2).)

   * Enabling a configure option named ‘--with-computed-gotos’ on
     compilers that support it (notably: gcc, SunPro, icc), the bytecode
     evaluation loop is compiled with a new dispatch mechanism which
     gives speedups of up to 20%, depending on the system, the compiler,
     and the benchmark.

     (Contributed by Antoine Pitrou along with a number of other
     participants, issue 4753(3)).

   * The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times
     faster.

     (Contributed by Antoine Pitrou and Amaury Forgeot d’Arc, issue
     4868(4).)

   * The *note json: a1. module now has a C extension to substantially
     improve its performance.  In addition, the API was modified so that
     json works only with *note str: 178, not with *note bytes: 179.
     That change makes the module closely match the JSON
     specification(5) which is defined in terms of Unicode.

     (Contributed by Bob Ippolito and converted to Py3.1 by Antoine
     Pitrou and Benjamin Peterson; issue 4136(6).)

   * Unpickling now interns the attribute names of pickled objects.
     This saves memory and allows pickles to be smaller.

     (Contributed by Jake McGuire and Antoine Pitrou; issue 5084(7).)

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3116

   (2) https://bugs.python.org/issue4688

   (3) https://bugs.python.org/issue4753

   (4) https://bugs.python.org/issue4868

   (5) http://json.org/

   (6) https://bugs.python.org/issue4136

   (7) https://bugs.python.org/issue5084


File: python.info,  Node: IDLE<2>,  Next: Build and C API Changes<3>,  Prev: Optimizations<3>,  Up: What's New In Python 3 1

1.4.6 IDLE
----------

   * IDLE’s format menu now provides an option to strip trailing
     whitespace from a source file.

     (Contributed by Roger D. Serwy; issue 5150(1).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue5150


File: python.info,  Node: Build and C API Changes<3>,  Next: Porting to Python 3 1,  Prev: IDLE<2>,  Up: What's New In Python 3 1

1.4.7 Build and C API Changes
-----------------------------

Changes to Python’s build process and to the C API include:

   * Integers are now stored internally either in base 2**15 or in base
     2**30, the base being determined at build time.  Previously, they
     were always stored in base 2**15.  Using base 2**30 gives
     significant performance improvements on 64-bit machines, but
     benchmark results on 32-bit machines have been mixed.  Therefore,
     the default is to use base 2**30 on 64-bit machines and base 2**15
     on 32-bit machines; on Unix, there’s a new configure option
     ‘--enable-big-digits’ that can be used to override this default.

     Apart from the performance improvements this change should be
     invisible to end users, with one exception: for testing and
     debugging purposes there’s a new *note sys.int_info: 678. that
     provides information about the internal format, giving the number
     of bits per digit and the size in bytes of the C type used to store
     each digit:

          >>> import sys
          >>> sys.int_info
          sys.int_info(bits_per_digit=30, sizeof_digit=4)

     (Contributed by Mark Dickinson; issue 4258(1).)

   * The *note PyLong_AsUnsignedLongLong(): 679. function now handles a
     negative `pylong' by raising *note OverflowError: 325. instead of
     *note TypeError: 309.

     (Contributed by Mark Dickinson and Lisandro Dalcrin; issue
     5175(2).)

   * Deprecated ‘PyNumber_Int()’.  Use *note PyNumber_Long(): 67a.
     instead.

     (Contributed by Mark Dickinson; issue 4910(3).)

   * Added a new *note PyOS_string_to_double(): 67b. function to replace
     the deprecated functions ‘PyOS_ascii_strtod()’ and
     ‘PyOS_ascii_atof()’.

     (Contributed by Mark Dickinson; issue 5914(4).)

   * Added *note PyCapsule: 659. as a replacement for the ‘PyCObject’
     API. The principal difference is that the new type has a well
     defined interface for passing typing safety information and a less
     complicated signature for calling a destructor.  The old type had a
     problematic API and is now deprecated.

     (Contributed by Larry Hastings; issue 5630(5).)

   ---------- Footnotes ----------

   (1) https://bugs.python.org/issue4258

   (2) https://bugs.python.org/issue5175

   (3) https://bugs.python.org/issue4910

   (4) https://bugs.python.org/issue5914

   (5) https://bugs.python.org/issue5630


File: python.info,  Node: Porting to Python 3 1,  Prev: Build and C API Changes<3>,  Up: What's New In Python 3 1

1.4.8 Porting to Python 3.1
---------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code:

   * The new floating point string representations can break existing
     doctests.  For example:

          def e():
              '''Compute the base of natural logarithms.

              >>> e()
              2.7182818284590451

              '''
              return sum(1/math.factorial(x) for x in reversed(range(30)))

          doctest.testmod()

          **********************************************************************
          Failed example:
              e()
          Expected:
              2.7182818284590451
          Got:
              2.718281828459045
          **********************************************************************

   * The automatic name remapping in the pickle module for protocol 2 or
     lower can make Python 3.1 pickles unreadable in Python 3.0.  One
     solution is to use protocol 3.  Another solution is to set the
     `fix_imports' option to `False'.  See the discussion above for more
     details.


File: python.info,  Node: What's New In Python 3 0,  Next: What's New in Python 2 7,  Prev: What's New In Python 3 1,  Up: What's New in Python

1.5 What’s New In Python 3.0
============================


Author: Guido van Rossum

This article explains the new features in Python 3.0, compared to 2.6.
Python 3.0, also known as "Python 3000" or "Py3K", is the first ever
`intentionally backwards incompatible' Python release.  There are more
changes than in a typical release, and more that are important for all
Python users.  Nevertheless, after digesting the changes, you’ll find
that Python really hasn’t changed all that much – by and large, we’re
mostly fixing well-known annoyances and warts, and removing a lot of old
cruft.

This article doesn’t attempt to provide a complete specification of all
new features, but instead tries to give a convenient overview.  For full
details, you should refer to the documentation for Python 3.0, and/or
the many PEPs referenced in the text.  If you want to understand the
complete implementation and design rationale for a particular feature,
PEPs usually have more details than the regular documentation; but note
that PEPs usually are not kept up-to-date once a feature has been fully
implemented.

Due to time constraints this document is not as complete as it should
have been.  As always for a new release, the ‘Misc/NEWS’ file in the
source distribution contains a wealth of detailed information about
every small thing that was changed.

* Menu:

* Common Stumbling Blocks:: 
* Overview Of Syntax Changes:: 
* Changes Already Present In Python 2.6: Changes Already Present In Python 2 6. 
* Library Changes:: 
* PEP 3101; A New Approach To String Formatting: PEP 3101 A New Approach To String Formatting. 
* Changes To Exceptions:: 
* Miscellaneous Other Changes:: 
* Build and C API Changes: Build and C API Changes<4>. 
* Performance:: 
* Porting To Python 3.0: Porting To Python 3 0. 


File: python.info,  Node: Common Stumbling Blocks,  Next: Overview Of Syntax Changes,  Up: What's New In Python 3 0

1.5.1 Common Stumbling Blocks
-----------------------------

This section lists those few changes that are most likely to trip you up
if you’re used to Python 2.5.

* Menu:

* Print Is A Function:: 
* Views And Iterators Instead Of Lists:: 
* Ordering Comparisons:: 
* Integers:: 
* Text Vs. Data Instead Of Unicode Vs. 8-bit: Text Vs Data Instead Of Unicode Vs 8-bit. 


File: python.info,  Node: Print Is A Function,  Next: Views And Iterators Instead Of Lists,  Up: Common Stumbling Blocks

1.5.1.1 Print Is A Function
...........................

The ‘print’ statement has been replaced with a *note print(): 21c.
function, with keyword arguments to replace most of the special syntax
of the old ‘print’ statement ( PEP 3105(1)).  Examples:

     Old: print "The answer is", 2*2
     New: print("The answer is", 2*2)

     Old: print x,           # Trailing comma suppresses newline
     New: print(x, end=" ")  # Appends a space instead of a newline

     Old: print              # Prints a newline
     New: print()            # You must call the function!

     Old: print >>sys.stderr, "fatal error"
     New: print("fatal error", file=sys.stderr)

     Old: print (x, y)       # prints repr((x, y))
     New: print((x, y))      # Not the same as print(x, y)!

You can also customize the separator between items, e.g.:

     print("There are <", 2**32, "> possibilities!", sep="")

which produces:

     There are <4294967296> possibilities!

Note:

   * The *note print(): 21c. function doesn’t support the "softspace"
     feature of the old ‘print’ statement.  For example, in Python 2.x,
     ‘print "A\n", "B"’ would write ‘"A\nB\n"’; but in Python 3.0,
     ‘print("A\n", "B")’ writes ‘"A\n B\n"’.

   * Initially, you’ll be finding yourself typing the old ‘print x’ a
     lot in interactive mode.  Time to retrain your fingers to type
     ‘print(x)’ instead!

   * When using the ‘2to3’ source-to-source conversion tool, all ‘print’
     statements are automatically converted to *note print(): 21c.
     function calls, so this is mostly a non-issue for larger projects.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3105


File: python.info,  Node: Views And Iterators Instead Of Lists,  Next: Ordering Comparisons,  Prev: Print Is A Function,  Up: Common Stumbling Blocks

1.5.1.2 Views And Iterators Instead Of Lists
............................................

Some well-known APIs no longer return lists:

   * *note dict: 380. methods *note dict.keys(): 682, *note
     dict.items(): 683. and *note dict.values(): 684. return "views"
     instead of lists.  For example, this no longer works: ‘k =
     d.keys(); k.sort()’.  Use ‘k = sorted(d)’ instead (this works in
     Python 2.5 too and is just as efficient).

   * Also, the ‘dict.iterkeys()’, ‘dict.iteritems()’ and
     ‘dict.itervalues()’ methods are no longer supported.

   * *note map(): 685. and *note filter(): 686. return iterators.  If
     you really need a list and the input sequences are all of equal
     length, a quick fix is to wrap *note map(): 685. in *note list():
     397, e.g.  ‘list(map(...))’, but a better fix is often to use a
     list comprehension (especially when the original code uses *note
     lambda: 687.), or rewriting the code so it doesn’t need a list at
     all.  Particularly tricky is *note map(): 685. invoked for the side
     effects of the function; the correct transformation is to use a
     regular *note for: 688. loop (since creating a list would just be
     wasteful).

     If the input sequences are not of equal length, *note map(): 685.
     will stop at the termination of the shortest of the sequences.  For
     full compatibility with *note map(): 685. from Python 2.x, also
     wrap the sequences in *note itertools.zip_longest(): 689, e.g.
     ‘map(func, *sequences)’ becomes ‘list(map(func,
     itertools.zip_longest(*sequences)))’.

   * *note range(): 396. now behaves like ‘xrange()’ used to behave,
     except it works with values of arbitrary size.  The latter no
     longer exists.

   * *note zip(): 68a. now returns an iterator.


File: python.info,  Node: Ordering Comparisons,  Next: Integers,  Prev: Views And Iterators Instead Of Lists,  Up: Common Stumbling Blocks

1.5.1.3 Ordering Comparisons
............................

Python 3.0 has simplified the rules for ordering comparisons:

   * The ordering comparison operators (‘<’, ‘<=’, ‘>=’, ‘>’) raise a
     TypeError exception when the operands don’t have a meaningful
     natural ordering.  Thus, expressions like ‘1 < ''’, ‘0 > None’ or
     ‘len <= len’ are no longer valid, and e.g.  ‘None < None’ raises
     *note TypeError: 309. instead of returning ‘False’.  A corollary is
     that sorting a heterogeneous list no longer makes sense – all the
     elements must be comparable to each other.  Note that this does not
     apply to the ‘==’ and ‘!=’ operators: objects of different
     incomparable types always compare unequal to each other.

   * ‘builtin.sorted()’ and *note list.sort(): 63d. no longer accept the
     `cmp' argument providing a comparison function.  Use the `key'
     argument instead.  N.B. the `key' and `reverse' arguments are now
     "keyword-only".

   * The ‘cmp()’ function should be treated as gone, and the ‘__cmp__()’
     special method is no longer supported.  Use *note __lt__(): 68c.
     for sorting, *note __eq__(): 68d. with *note __hash__(): 39f, and
     other rich comparisons as needed.  (If you really need the ‘cmp()’
     functionality, you could use the expression ‘(a > b) - (a < b)’ as
     the equivalent for ‘cmp(a, b)’.)


File: python.info,  Node: Integers,  Next: Text Vs Data Instead Of Unicode Vs 8-bit,  Prev: Ordering Comparisons,  Up: Common Stumbling Blocks

1.5.1.4 Integers
................

   * PEP 0237(1): Essentially, ‘long’ renamed to *note int: 185.  That
     is, there is only one built-in integral type, named *note int:
     185.; but it behaves mostly like the old ‘long’ type.

   * PEP 0238(2): An expression like ‘1/2’ returns a float.  Use ‘1//2’
     to get the truncating behavior.  (The latter syntax has existed for
     years, at least since Python 2.2.)

   * The ‘sys.maxint’ constant was removed, since there is no longer a
     limit to the value of integers.  However, *note sys.maxsize: 56b.
     can be used as an integer larger than any practical list or string
     index.  It conforms to the implementation’s "natural" integer size
     and is typically the same as ‘sys.maxint’ in previous releases on
     the same platform (assuming the same build options).

   * The *note repr(): 3db. of a long integer doesn’t include the
     trailing ‘L’ anymore, so code that unconditionally strips that
     character will chop off the last digit instead.  (Use *note str():
     178. instead.)

   * Octal literals are no longer of the form ‘0720’; use ‘0o720’
     instead.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0237

   (2) https://www.python.org/dev/peps/pep-0238


File: python.info,  Node: Text Vs Data Instead Of Unicode Vs 8-bit,  Prev: Integers,  Up: Common Stumbling Blocks

1.5.1.5 Text Vs. Data Instead Of Unicode Vs. 8-bit
..................................................

Everything you thought you knew about binary data and Unicode has
changed.

   * Python 3.0 uses the concepts of `text' and (binary) `data' instead
     of Unicode strings and 8-bit strings.  All text is Unicode; however
     `encoded' Unicode is represented as binary data.  The type used to
     hold text is *note str: 178, the type used to hold data is *note
     bytes: 179.  The biggest difference with the 2.x situation is that
     any attempt to mix text and data in Python 3.0 raises *note
     TypeError: 309, whereas if you were to mix Unicode and 8-bit
     strings in Python 2.x, it would work if the 8-bit string happened
     to contain only 7-bit (ASCII) bytes, but you would get *note
     UnicodeDecodeError: 31a. if it contained non-ASCII values.  This
     value-specific behavior has caused numerous sad faces over the
     years.

   * As a consequence of this change in philosophy, pretty much all code
     that uses Unicode, encodings or binary data most likely has to
     change.  The change is for the better, as in the 2.x world there
     were numerous bugs having to do with mixing encoded and unencoded
     text.  To be prepared in Python 2.x, start using ‘unicode’ for all
     unencoded text, and *note str: 178. for binary or encoded data
     only.  Then the ‘2to3’ tool will do most of the work for you.

   * You can no longer use ‘u"..."’ literals for Unicode text.  However,
     you must use ‘b"..."’ literals for binary data.

   * As the *note str: 178. and *note bytes: 179. types cannot be mixed,
     you must always explicitly convert between them.  Use *note
     str.encode(): 690. to go from *note str: 178. to *note bytes: 179,
     and *note bytes.decode(): 691. to go from *note bytes: 179. to
     *note str: 178.  You can also use ‘bytes(s, encoding=...)’ and
     ‘str(b, encoding=...)’, respectively.

   * Like *note str: 178, the *note bytes: 179. type is immutable.
     There is a separate `mutable' type to hold buffered binary data,
     *note bytearray: 17a.  Nearly all APIs that accept *note bytes:
     179. also accept *note bytearray: 17a.  The mutable API is based on
     ‘collections.MutableSequence’.

   * All backslashes in raw string literals are interpreted literally.
     This means that ‘'\U'’ and ‘'\u'’ escapes in raw strings are not
     treated specially.  For example, ‘r'\u20ac'’ is a string of 6
     characters in Python 3.0, whereas in 2.6, ‘ur'\u20ac'’ was the
     single "euro" character.  (Of course, this change only affects raw
     string literals; the euro character is ‘'\u20ac'’ in Python 3.0.)

   * The built-in ‘basestring’ abstract type was removed.  Use *note
     str: 178. instead.  The *note str: 178. and *note bytes: 179. types
     don’t have functionality enough in common to warrant a shared base
     class.  The ‘2to3’ tool (see below) replaces every occurrence of
     ‘basestring’ with *note str: 178.

   * Files opened as text files (still the default mode for *note
     open(): 1a2.) always use an encoding to map between strings (in
     memory) and bytes (on disk).  Binary files (opened with a ‘b’ in
     the mode argument) always use bytes in memory.  This means that if
     a file is opened using an incorrect mode or encoding, I/O will
     likely fail loudly, instead of silently producing incorrect data.
     It also means that even Unix users will have to specify the correct
     mode (text or binary) when opening a file.  There is a
     platform-dependent default encoding, which on Unixy platforms can
     be set with the ‘LANG’ environment variable (and sometimes also
     with some other platform-specific locale-related environment
     variables).  In many cases, but not all, the system default is
     UTF-8; you should never count on this default.  Any application
     reading or writing more than pure ASCII text should probably have a
     way to override the encoding.  There is no longer any need for
     using the encoding-aware streams in the *note codecs: 1c. module.

   * The initial values of *note sys.stdin: 692, *note sys.stdout: 1b0.
     and *note sys.stderr: 5ac. are now unicode-only text files (i.e.,
     they are instances of *note io.TextIOBase: 693.).  To read and
     write bytes data with these streams, you need to use their *note
     io.TextIOBase.buffer: 694. attribute.

   * Filenames are passed to and returned from APIs as (Unicode)
     strings.  This can present platform-specific problems because on
     some platforms filenames are arbitrary byte strings.  (On the other
     hand, on Windows filenames are natively stored as Unicode.)  As a
     work-around, most APIs (e.g.  *note open(): 1a2. and many functions
     in the *note os: c0. module) that take filenames accept *note
     bytes: 179. objects as well as strings, and a few APIs have a way
     to ask for a *note bytes: 179. return value.  Thus, *note
     os.listdir(): 43a. returns a list of *note bytes: 179. instances if
     the argument is a *note bytes: 179. instance, and *note
     os.getcwdb(): 695. returns the current working directory as a *note
     bytes: 179. instance.  Note that when *note os.listdir(): 43a.
     returns a list of strings, filenames that cannot be decoded
     properly are omitted rather than raising *note UnicodeError: 696.

   * Some system APIs like *note os.environ: 554. and *note sys.argv:
     64d. can also present problems when the bytes made available by the
     system is not interpretable using the default encoding.  Setting
     the ‘LANG’ variable and rerunning the program is probably the best
     approach.

   * PEP 3138(1): The *note repr(): 3db. of a string no longer escapes
     non-ASCII characters.  It still escapes control characters and code
     points with non-printable status in the Unicode standard, however.

   * PEP 3120(2): The default source encoding is now UTF-8.

   * PEP 3131(3): Non-ASCII letters are now allowed in identifiers.
     (However, the standard library remains ASCII-only with the
     exception of contributor names in comments.)

   * The ‘StringIO’ and ‘cStringIO’ modules are gone.  Instead, import
     the *note io: 9e. module and use *note io.StringIO: 1b1. or *note
     io.BytesIO: 5a0. for text and data respectively.

   * See also the *note Unicode HOWTO: 697, which was updated for Python
     3.0.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-3138

   (2) https://www.python.org/dev/peps/pep-3120

   (3) https://www.python.org/dev/peps/pep-3131

